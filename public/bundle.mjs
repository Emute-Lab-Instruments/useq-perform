(function () {
  'use strict';

  /*eslint no-unused-vars: ["error", { "varsIgnorePattern": "^_", "argsIgnorePattern": "^_", "destructuredArrayIgnorePattern": "^_"}]*/

  function toFn(x) {
    if (x == null) return x;
    if (x instanceof Function) {
      return x;
    }
    const t = typeof x;
    if (t === 'string') {
      return (coll, d) => {
        return get(coll, x, d);
      };
    }
    if (t === 'object') {
      return (k, d) => {
        return get(x, k, d);
      };
    }
    return x;
  }

  function assoc_BANG_(m, k, v, ...kvs) {
    if (kvs.length % 2 !== 0) {
      throw new Error('Illegal argument: assoc expects an odd number of arguments.');
    }
    switch (typeConst(m)) {
      case MAP_TYPE:
        m.set(k, v);

        for (let i = 0; i < kvs.length; i += 2) {
          m.set(kvs[i], kvs[i + 1]);
        }
        break;
      case ARRAY_TYPE:
      case OBJECT_TYPE:
        m[k] = v;

        for (let i = 0; i < kvs.length; i += 2) {
          m[kvs[i]] = kvs[i + 1];
        }
        break;
      default:
        throw new Error(
          `Illegal argument: assoc! expects a Map, Array, or Object as the first argument, but got ${typeof m}.`
        );
    }

    return m;
  }

  function copy(o) {
    switch (typeConst(o)) {
      case MAP_TYPE:
        return new Map(o);
      case SET_TYPE:
        return new o.constructor(o);
      case ARRAY_TYPE:
        return [...o];
      case OBJECT_TYPE:
        return { ...o };
      default:
        throw new Error(`Don't know how to copy object of type ${typeof o}.`);
    }
  }

  function assoc(o, k, v, ...kvs) {
    if (!o) {
      o = {};
    }
    const ret = copy(o);
    assoc_BANG_(ret, k, v, ...kvs);
    return ret;
  }

  const MAP_TYPE = 1;
  const ARRAY_TYPE = 2;
  const OBJECT_TYPE = 3;
  const LIST_TYPE = 4;
  const SET_TYPE = 5;
  const LAZY_ITERABLE_TYPE = 6;

  function emptyOfType(type) {
    switch (type) {
      case MAP_TYPE:
        return new Map();
      case ARRAY_TYPE:
        return [];
      case OBJECT_TYPE:
        return {}; // Object.create?
      case LIST_TYPE:
        return new List();
      case SET_TYPE:
        return new Set();
      case LAZY_ITERABLE_TYPE:
        return lazy(function* () {
          return;
        });
    }
    return undefined;
  }

  function isObj(coll) {
    return coll.constructor === Object;
  }

  function typeConst(obj) {
    if (obj == null) {
      return undefined;
    }
    // optimize for object
    if (isObj(obj)) {
      return OBJECT_TYPE;
    }
    if (obj instanceof Map) return MAP_TYPE;
    if (obj instanceof Set) return SET_TYPE;
    if (obj instanceof List) return LIST_TYPE;
    if (Array.isArray(obj)) return ARRAY_TYPE;
    if (obj instanceof LazyIterable) return LAZY_ITERABLE_TYPE;
    if (obj instanceof SortedSet) return SET_TYPE;

    // everything more specific than Object should go before this
    if (obj instanceof Object) return OBJECT_TYPE;

    return undefined;
  }

  function conj_BANG_set(o, rest) {
    for (const x of rest) {
      o.add(x);
    }
    return o;
  }

  function conj_BANG_(...xs) {
    if (xs.length === 0) {
      return vector();
    }

    const [_o, ...rest] = xs;

    let o = _o;
    if (o === null || o === undefined) {
      o = [];
    }

    switch (typeConst(o)) {
      case SET_TYPE:
        conj_BANG_set(o, rest);
        break;
      case LIST_TYPE:
        o.unshift(...rest.reverse());
        break;
      case ARRAY_TYPE:
        o.push(...rest);
        break;
      case MAP_TYPE:
        for (const x of rest) {
          if (!Array.isArray(x))
            iterable(x).forEach((kv) => {
              o.set(kv[0], kv[1]);
            });
          else o.set(x[0], x[1]);
        }
        break;
      case OBJECT_TYPE:
        for (const x of rest) {
          if (!Array.isArray(x)) Object.assign(o, x);
          else o[x[0]] = x[1];
        }
        break;
      default:
        throw new Error(
          'Illegal argument: conj! expects a Set, Array, List, Map, or Object as the first argument.'
        );
    }

    return o;
  }

  function conj(...xs) {
    if (xs.length === 0) {
      return vector();
    }

    const [_o, ...rest] = xs;

    let o = _o;
    if (o === null || o === undefined) {
      o = list$1();
    }
    let m, o2;

    switch (typeConst(o)) {
      case SET_TYPE:
        if (o instanceof SortedSet) {
          // prevent re-sorting of collection
          return conj_BANG_set(new o.constructor(o), rest);
        } else {
          return new o.constructor([...o, ...rest]);
        }
      case LIST_TYPE:
        return new List(...rest.reverse(), ...o);
      case ARRAY_TYPE:
        return [...o, ...rest];
      case MAP_TYPE:
        m = new Map(o);
        for (const x of rest) {
          if (!Array.isArray(x))
            iterable(x).forEach((kv) => {
              m.set(kv[0], kv[1]);
            });
          else m.set(x[0], x[1]);
        }

        return m;
      case LAZY_ITERABLE_TYPE:
        return lazy(function* () {
          yield* rest;
          yield* o;
        });
      case OBJECT_TYPE:
        o2 = { ...o };

        for (const x of rest) {
          if (!Array.isArray(x)) Object.assign(o2, x);
          else o2[x[0]] = x[1];
        }

        return o2;
      default:
        throw new Error(
          'Illegal argument: conj expects a Set, Array, List, Map, or Object as the first argument.'
        );
    }
  }

  function contains_QMARK_(coll, v) {
    switch (typeConst(coll)) {
      case SET_TYPE:
      case MAP_TYPE:
        return coll.has(v);
      case undefined:
        return false;
      default:
        return v in coll;
    }
  }

  function dissoc(m, ...ks) {
    if (ks.length === 0) return m;
    const m2 = copy(m);
    switch (typeConst(m)) {
      case MAP_TYPE:
        for (const k of ks) {
          m2.delete(k);
        }
        break;
      default:
        for (const k of ks) {
          delete m2[k];
        }
        break;
    }
    return m2;
  }

  function nth(coll, idx, orElse) {
    if (coll) {
      var elt = undefined;
      if (Array.isArray(coll)) {
        elt = coll[idx];
      } else {
        const iter = iterable(coll);
        let i = 0;
        for (const value of iter) {
          if (i++ == idx) {
            elt = value;
            break;
          }
        }
      }
      if (elt !== undefined) {
        return elt;
      }
    }
    return orElse;
  }

  function get(coll, key, otherwise = undefined) {
    if (coll == null) {
      return otherwise;
    }
    let v;
    // optimize for getting values out of objects
    if (isObj(coll)) {
      v = coll[key];
      if (v === undefined) {
        return otherwise;
      } else {
        return v;
      }
    }
    let g;
    switch (typeConst(coll)) {
      case SET_TYPE:
        if (coll.has(key)) v = key;
        break;
      case MAP_TYPE:
        v = coll.get(key);
        break;
      case ARRAY_TYPE:
        v = coll[key];
        break;
      default:
        // we choose .get as the default implementation, e.g. fetch Headers are not Maps, but do implement a .get method
        g = coll['get'];
        if (g instanceof Function) {
          try {
            v = coll.get(key);
            break;
          } catch (e) {
            // ignore error
          }
        }
        v = coll[key];
        break;
    }
    return v !== undefined ? v : otherwise;
  }

  function seqable_QMARK_(x) {
    return (
      x === null ||
      x === undefined ||
      // we used to check instanceof Object but this returns false for TC39 Records
      // also we used to write `Symbol.iterator in` but this does not work for strings and some other types
      !!x[Symbol.iterator]);
  }

  function iterable(x) {
    // nil puns to empty iterable, support passing nil to first/rest/reduce, etc.
    if (x === null || x === undefined) {
      return [];
    }
    if (seqable_QMARK_(x)) {
      return x;
    }
    if (x instanceof Object) return Object.entries(x);
    throw new TypeError(`${x} is not iterable`);
  }

  const IIterable = Symbol('Iterable');

  function _iterator(coll) {
    return coll[Symbol.iterator]();
  }

  const es6_iterator = _iterator;

  function seq(x) {
    if (x == null) return x;
    const iter = iterable(x);
    // return nil for terminal checking
    if (iter.length === 0 || iter.size === 0) {
      return null;
    }
    const _i = iter[Symbol.iterator]();
    if (_i.next().done) return null;
    return iter;
  }

  function first(coll) {
    // destructuring uses iterable protocol
    const [first] = iterable(coll);
    return first;
  }

  function second(coll) {
    const [_, v] = iterable(coll);
    return v;
  }

  function rest(coll) {
    return lazy(function* () {
      let first = true;
      for (const x of iterable(coll)) {
        if (first) first = false;
        else yield x;
      }
    });
  }

  class Reduced {
    value;
    constructor(x) {
      this.value = x;
    }
    _deref() {
      return this.value;
    }
  }

  function last(coll) {
    coll = iterable(coll);
    let lastEl;
    switch (typeConst(coll)) {
      case ARRAY_TYPE:
        return coll[coll.length - 1];
      default:
        for (const x of coll) {
          lastEl = x;
        }
        return lastEl;
    }
  }

  function reduced(x) {
    return new Reduced(x);
  }

  function reduce(f, arg1, arg2) {
    f = toFn(f);
    let coll, val;
    if (arguments.length === 2) {
      // (reduce f coll)
      const iter = iterable(arg1)[Symbol.iterator]();
      const vd = iter.next();
      if (vd.done) {
        val = f();
      } else {
        val = vd.value;
      }
      coll = iter;
    } else {
      // (reduce f val coll)
      val = arg1;
      coll = iterable(arg2);
    }
    if (val instanceof Reduced) {
      return val.value;
    }
    for (const x of coll) {
      val = f(val, x);
      if (val instanceof Reduced) {
        val = val.value;
        break;
      }
    }
    return val;
  }

  var tolr = false;

  class LazyIterable {
    constructor(gen) {
      this.gen = gen;
      this.usages = 0;
    }
    [Symbol.iterator]() {
      this.usages++;
      if (this.usages >= 2 && tolr) ;
      return this.gen();
    }
  }

  LazyIterable.prototype[IIterable] = true; // Closure compatibility

  function lazy(f) {
    return new LazyIterable(f);
  }

  class Cons {
    constructor(x, coll) {
      this.x = x;
      this.coll = coll;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield* iterable(this.coll);
    }
  }

  function cons(x, coll) {
    return new Cons(x, coll);
    // return lazy(function* () {
    //   yield x;
    //   yield* iterable(coll);
    // });
  }

  function map(f, ...colls) {
    // if (! (f instanceof Function)) {
    //   throw new Error(`Argument f must be a function but is ${typeof(f)}`);
    // }
    f = toFn(f);
    switch (colls.length) {
      case 0:
        return (rf) => {
          return (...args) => {
            switch (args.length) {
              case 0: {
                return rf();
              }
              case 1: {
                return rf(args[0]);
              }
              case 2: {
                return rf(args[0], f(args[1]));
              }
              default: {
                return rf(args[0], f(...args.slice(1)));
              }
            }
          };
        };
      case 1:
        return lazy(function* () {
          for (const x of iterable(colls[0])) {
            yield f(x);
          }
        });
      default:
        return lazy(function* () {
          const iters = colls.map((coll) => es6_iterator(iterable(coll)));
          while (true) {
            const args = [];
            for (const i of iters) {
              const nextVal = i.next();
              if (nextVal.done) {
                return;
              }
              args.push(nextVal.value);
            }
            yield f(...args);
          }
        });
    }
  }

  function filter1(pred) {
    return (rf) => {
      return (...args) => {
        switch (args.length) {
          case 0: return rf();
          case 1: return rf(args[0]);
          case 2: {
            const result = args[0];
            const input = args[1];
            if (truth_(pred(input))) {
              return rf(result, input);
            } else return result;
          }
        }
      };
    };
  }

  function filter(pred, coll) {
    if (arguments.length === 1) {
      return filter1(pred);
    }
    pred = toFn(pred);
    return lazy(function* () {
      for (const x of iterable(coll)) {
        if (truth_(pred(x))) {
          yield x;
        }
      }
    });
  }

  function remove$1(pred, coll) {
    return filter(complement(pred), coll);
  }

  function keep_indexed2(f, coll) {
    f = toFn(f);
    const ret = [];
    let i = 0;
    for (const x of iterable(coll)) {
      const fret = f(i, x);
      if (truth_(fret)) {
        ret.push(fret);
      }
      i++;
    }
    return ret;
  }

  function keep_indexed1(f) {
    return (rf) => {
      let ia = -1;
      return (...args) => {
        const al = args.length;
        if (al === 0) {
          return rf();
        }
        if (al === 1) {
          return rf(args[0]);
        }
        if (al === 2) {
          const result = args[0];
          const input = args[1];
          ia++;
          const v = f(ia, input);
          if (v == null) {
            return result;
          }
          return rf(result, v);
        }
      };
    };
  }

  function keep_indexed(f, coll) {
    if (arguments.length === 1) {
      return keep_indexed1(f);
    } else {
      return keep_indexed2(f, coll);
    }
  }

  function str(...xs) {
    return xs.join('');
  }

  function not(expr) {
    return !truth_(expr);
  }

  class Atom {
    constructor(init) {
      this.val = init;
      this._watches = {};
      this._deref = () => this.val;
      this._hasWatches = false;
      this._reset_BANG_ = (x) => {
        const old_val = this.val;
        this.val = x;
        if (this._hasWatches) {
          for (const entry of Object.entries(this._watches)) {
            const k = entry[0];
            const f = entry[1];
            f(k, this, old_val, x);
          }
        }
        return x;
      };
      this._add_watch = (k, fn) => {
        this._watches[k] = fn;
        this._hasWatches = true;
      };
      this._remove_watch = (k) => {
        delete this._watches[k];
      };
    }
  }

  function atom(init) {
    return new Atom(init);
  }

  function deref(ref) {
    return ref._deref();
  }

  function reset_BANG_(atm, v) {
    atm._reset_BANG_(v);
  }

  function vector(...args) {
    return args;
  }

  function vec(x) {
    if (array_QMARK_(x)) {
      // return original, no need to clone the entire thing
      return x;
    }
    return [...iterable(x)];
  }

  function complement(f) {
    f = toFn(f);
    return (...args) => not(f(...args));
  }

  function constantly(x) {
    return (..._) => x;
  }

  class List extends Array {
    constructor(...args) {
      super();
      this.push(...args);
    }
  }

  function list$1(...args) {
    return new List(...args);
  }

  function array_QMARK_(x) {
    return Array.isArray(x);
  }

  function concat1(colls) {
    return lazy(function* () {
      for (const coll of colls) {
        yield* iterable(coll);
      }
    });
  }

  function mapcat(f, ...colls) {
    const mapped = map(f, ...colls);
    return concat1(mapped);
  }

  function identity(x) {
    return x;
  }

  function select_keys(o, ks) {
    const type = typeConst(o);
    // ret could be object or array, but in the future, maybe we'll have an IEmpty protocol
    const ret = emptyOfType(type) || {};
    for (const k of ks) {
      const v = get(o, k);
      if (v != undefined) {
        assoc_BANG_(ret, k, v);
      }
    }
    return ret;
  }

  function partition(n, ...args) {
    let step = n,
      pad = [],
      coll = args[0];

    if (args.length === 2) {
      [step, coll] = args;
    } else if (args.length > 2) {
      [step, pad, coll] = args;
    }
    return partitionInternal(n, step, pad, coll, false);
  }

  function partitionInternal(n, step, pad, coll, all) {
    return lazy(function* () {
      let p = [];
      let i = 0;
      for (const x of iterable(coll)) {
        if (i < n) {
          p.push(x);
          if (p.length === n) {
            yield p;
            p = step < n ? p.slice(step) : [];
          }
        }
        i++;
        if (i === step) {
          i = 0;
        }
      }

      if (p.length > 0) {
        if (p.length === n || all) {
          yield p;
        } else if (pad.length) {
          p.push(...pad.slice(0, n - p.length));
          yield p;
        }
      }
    });
  }

  function empty(coll) {
    const type = typeConst(coll);
    if (type != null) {
      return emptyOfType(type);
    } else {
      throw new Error(`Can't create empty of ${typeof coll}`);
    }
  }

  function merge(...args) {
    // if the first arg is nil we coerce it into a map.
    const firstArg = args[0];
    let obj;
    if (firstArg === null || firstArg === undefined) {
      obj = {};
    } else {
      obj = into(empty(firstArg), firstArg);
    }
    return conj_BANG_(obj, ...args.slice(1));
  }

  function into(...args) {
    let to, xform, from, c, rf;
    switch (args.length) {
      case 0:
        return [];
      case 1:
        return args[0];
      case 2:
        return conj(args[0] ?? [], ...iterable(args[1]));
      case 3:
        to = args[0];
        xform = args[1];
        from = args[2];
        c = copy(to);
        rf = (coll, v) => {
          if (v === undefined) {
            return coll;
          }
          return conj_BANG_(coll, v);
        };
        return transduce(xform, rf, c, from);
      default:
        throw TypeError(`Invalid arity call of into: ${args.length}`);
    }
  }

  function identical_QMARK_(x, y) {
    return x === y;
  }

  function take_while1(pred) {
    return (rf) => {
      return (...args) => {
        const al = args.length;
        if (al === 0) return rf();
        if (al === 1) return rf(args[0]);
        if (al === 2) {
          const result = args[0];
          const input = args[1];
          if (truth_(pred(input))) {
            return rf(result, input);
          } else {
            return reduced(result);
          }
        }
      };
    };
  }

  function take_while(pred, coll) {
    pred = toFn(pred);
    if (arguments.length === 1) {
      return take_while1(pred);
    }
    return lazy(function* () {
      for (const o of iterable(coll)) {
        if (truth_(pred(o))) yield o;
        else return;
      }
    });
  }

  function drop1(n) {
    return (rf) => {
      let na = n;
      return (...args) => {
        const al = args.length;
        if (al === 0) {
          return rf();
        }
        if (al === 1) {
          return rf(args[0]);
        }
        if (al === 2) {
          const result = args[0];
          const input = args[1];
          const n = na;
          na--;
          if (n > 0) {
            return result;
          } else return rf(result, input);
        }
      };
    };
  }

  function drop(n, xs) {
    if (arguments.length === 1) return drop1(n);
    return lazy(function* () {
      const iter = _iterator(iterable(xs));
      for (let x = 0; x < n; x++) {
        iter.next();
      }
      yield* iter;
    });
  }

  function get_in(coll, path, orElse) {
    let entry = coll;
    for (const item of path) {
      entry = get(entry, item);
    }
    if (entry === undefined) return orElse;
    return entry;
  }

  function every_QMARK_(pred, coll) {
    pred = toFn(pred);
    for (const x of iterable(coll)) {
      if (!pred(x)) return false;
    }
    return true;
  }

  function reverse(coll) {
    coll = iterable(coll);
    return [...coll].reverse();
  }

  function sort(f, coll) {
    if (arguments.length === 1) {
      coll = f;
      f = undefined;
    }
    f = toFn(f);
    coll = iterable(coll);
    // we need to clone coll since .sort works in place and .toSorted isn't available on Node < 20
    const clone = [...coll];
    // result is guaranteed to be stable since ES2019, like CLJS
    return clone.sort(f || compare$1);
  }

  function some(pred, coll) {
    pred = toFn(pred);
    for (const o of iterable(coll)) {
      const res = pred(o);
      if (truth_(res)) return res;
    }
    return undefined;
  }

  class LazySeq {
    constructor(f) {
      this.f = f;
      this.res = undefined;
    }
    *[Symbol.iterator]() {
      if (this.res === undefined) {
        this.res = this.f();
        this.f = null;
      }
      yield* iterable(this.res);
    }
  }

  function count(coll) {
    if (!coll) return 0;
    const len = coll.length || coll.size;
    if (typeof len === 'number') {
      return len;
    }
    let ret = 0;
    for (const _ of iterable(coll)) {
      ret++;
    }
    return ret;
  }

  function some_QMARK_(x) {
    return !(x === null || x === undefined);
  }

  function boolean$(x) {
    return !!x;
  }

  function neg_QMARK_(x) {
    return x < 0;
  }

  function js_obj(...args) {
    let ctr = 0;
    const ret = {};
    for (; ;) {
      if (ctr >= args.length) {
        break;
      }
      ret[args[ctr]] = args[ctr + 1];
      ctr = ctr + 2;
    }
    return ret;
  }

  function alength(arr) {
    return arr.length;
  }

  function reduce_kv(f, init, m) {
    if (!m) {
      return init;
    }
    var ret = init;
    for (const o of iterable(m)) {
      ret = f(ret, o[0], o[1]);
    }
    return ret;
  }

  function max(x, y, ...more) {
    if (y == undefined) {
      return x;
    }
    return Math.max(x, y, ...more);
  }

  function min(x, y, ...more) {
    if (y == undefined) {
      return x;
    }
    return Math.min(x, y, ...more);
  }

  function map_QMARK_(x) {
    return x instanceof Object;
  }

  function every_pred(...preds) {
    return (...args) => {
      for (const p of preds) {
        for (const a of args) {
          const res = p(a);
          if (!res) {
            return false;
          }
        }
      }
      return true;
    };
  }

  function some_fn(...fns) {
    return (...args) => {
      for (const f of fns) {
        for (const a of args) {
          const res = f(a);
          if (res) {
            return res;
          }
        }
      }
      return undefined;
    };
  }

  function into_array(type, aseq) {
    const theSeq = type;
    return vec(theSeq);
  }

  function iterate(f, x) {
    var current = x;
    return lazy(function* () {
      while (true) {
        yield current;
        current = f(current);
      }
    });
  }

  function juxt(...fs) {
    fs = fs.map(toFn);
    return (...args) => {
      const ret = [];
      for (const f of fs) {
        ret.push(f(...args));
      }
      return ret;
    };
  }

  function next(x) {
    if (Array.isArray(x)) {
      const ret = x.slice(1);
      if (ret.length > 0) {
        return ret;
      } else {
        return null;
      }
    } else {
      return seq(rest(x));
    }
  }

  function compare$1(x, y) {
    if (x === y) {
      return 0;
    } else {
      if (x == null) {
        return -1;
      }
      if (y == null) {
        return 1;
      }
      const tx = typeof (x);
      const ty = typeof (y);
      if (tx === 'number' && ty === 'number' || tx === 'string' && ty === 'string') {
        if (x === y) {
          return 0;
        }
        if (x < y) {
          return -1;
        }
        return 1;
      } else {
        throw new Error(`comparing ${tx} to ${ty}`);
      }
    }
  }

  function truth_(x) {
    return x != null && x !== false;
  }

  function subs(s, start, end) {
    return s.substring(start, end);
  }

  function fn_QMARK_(x) {
    return 'function' === typeof x;
  }

  function transduce(xform, ...args) {
    switch (args.length) {
      case 2: {
        const f = args[0];
        const coll = args[1];
        return transduce(xform, f, f(), coll);
      }
      default: {
        let f = args[0];
        const init = args[1];
        const coll = args[2];
        f = xform(f);
        const ret = reduce(f, init, coll);
        return f(ret);
      }
    }
  }

  class SortedSet {
    constructor(xs) {
      const isSorted = xs instanceof SortedSet;
      if (!isSorted) {
        xs = sort(xs);
      }
      const s = new Set(xs);
      // we don't re-use xs since xs can contain duplicates
      this._elts = [...s];
      this._set = s;
    }
    add(x) {
      if (this._set.has(x)) return this;
      const xs = this._elts;
      let added = false;
      for (let i = 0; i < xs.length; i++) {
        if (compare$1(x, xs[i]) <= 0) {
          xs.splice(i, 0, x);
          added = true;
          break;
        }
      }
      if (!added) {
        xs.push(x);
        // in this case we can re-use the set, since we add the element last
        this._set.add(x);
      }
      else {
        this._set = new Set(xs);
      }
      this.size = xs.length;
      return this;
    }
    delete(x) {
      if (!this._set.has(x)) return this;
      const xs = this._elts;
      const idx = xs.indexOf(x);
      xs.splice(idx, 1);
      this._set = new Set(xs);
      this.size = xs.length;
      return this;
    }
    has(x) {
      return this._set.has(x);
    }
    keys() {
      return this.values();
    }
    values() {
      return this._elts[Symbol.iterator]();
    }
    entries() {
      return this._set.entries();
    }
    forEach(...xs) {
      return this.set.forEach(...xs);
    }
    clear() {
      this._elts = [];
      this._set = new Set(this._elts);
    }
    [Symbol.iterator]() {
      return this.keys();
    }
  }

  /**
  The default maximum length of a `TreeBuffer` node.
  */
  const DefaultBufferLength = 1024;
  let nextPropID = 0;
  let Range$1 = class Range {
      constructor(from, to) {
          this.from = from;
          this.to = to;
      }
  };
  /**
  Each [node type](#common.NodeType) or [individual tree](#common.Tree)
  can have metadata associated with it in props. Instances of this
  class represent prop names.
  */
  class NodeProp {
      /**
      Create a new node prop type.
      */
      constructor(config = {}) {
          this.id = nextPropID++;
          this.perNode = !!config.perNode;
          this.deserialize = config.deserialize || (() => {
              throw new Error("This node type doesn't define a deserialize function");
          });
      }
      /**
      This is meant to be used with
      [`NodeSet.extend`](#common.NodeSet.extend) or
      [`LRParser.configure`](#lr.ParserConfig.props) to compute
      prop values for each node type in the set. Takes a [match
      object](#common.NodeType^match) or function that returns undefined
      if the node type doesn't get this prop, and the prop's value if
      it does.
      */
      add(match) {
          if (this.perNode)
              throw new RangeError("Can't add per-node props to node types");
          if (typeof match != "function")
              match = NodeType.match(match);
          return (type) => {
              let result = match(type);
              return result === undefined ? null : [this, result];
          };
      }
  }
  /**
  Prop that is used to describe matching delimiters. For opening
  delimiters, this holds an array of node names (written as a
  space-separated string when declaring this prop in a grammar)
  for the node types of closing delimiters that match it.
  */
  NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
  /**
  The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
  attached to closing delimiters, holding an array of node names
  of types of matching opening delimiters.
  */
  NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
  /**
  Used to assign node types to groups (for example, all node
  types that represent an expression could be tagged with an
  `"Expression"` group).
  */
  NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
  /**
  Attached to nodes to indicate these should be
  [displayed](https://codemirror.net/docs/ref/#language.syntaxTree)
  in a bidirectional text isolate, so that direction-neutral
  characters on their sides don't incorrectly get associated with
  surrounding text. You'll generally want to set this for nodes
  that contain arbitrary text, like strings and comments, and for
  nodes that appear _inside_ arbitrary text, like HTML tags. When
  not given a value, in a grammar declaration, defaults to
  `"auto"`.
  */
  NodeProp.isolate = new NodeProp({ deserialize: value => {
          if (value && value != "rtl" && value != "ltr" && value != "auto")
              throw new RangeError("Invalid value for isolate: " + value);
          return value || "auto";
      } });
  /**
  The hash of the [context](#lr.ContextTracker.constructor)
  that the node was parsed in, if any. Used to limit reuse of
  contextual nodes.
  */
  NodeProp.contextHash = new NodeProp({ perNode: true });
  /**
  The distance beyond the end of the node that the tokenizer
  looked ahead for any of the tokens inside the node. (The LR
  parser only stores this when it is larger than 25, for
  efficiency reasons.)
  */
  NodeProp.lookAhead = new NodeProp({ perNode: true });
  /**
  This per-node prop is used to replace a given node, or part of a
  node, with another tree. This is useful to include trees from
  different languages in mixed-language parsers.
  */
  NodeProp.mounted = new NodeProp({ perNode: true });
  /**
  A mounted tree, which can be [stored](#common.NodeProp^mounted) on
  a tree node to indicate that parts of its content are
  represented by another tree.
  */
  class MountedTree {
      constructor(
      /**
      The inner tree.
      */
      tree, 
      /**
      If this is null, this tree replaces the entire node (it will
      be included in the regular iteration instead of its host
      node). If not, only the given ranges are considered to be
      covered by this tree. This is used for trees that are mixed in
      a way that isn't strictly hierarchical. Such mounted trees are
      only entered by [`resolveInner`](#common.Tree.resolveInner)
      and [`enter`](#common.SyntaxNode.enter).
      */
      overlay, 
      /**
      The parser used to create this subtree.
      */
      parser) {
          this.tree = tree;
          this.overlay = overlay;
          this.parser = parser;
      }
      /**
      @internal
      */
      static get(tree) {
          return tree && tree.props && tree.props[NodeProp.mounted.id];
      }
  }
  const noProps = Object.create(null);
  /**
  Each node in a syntax tree has a node type associated with it.
  */
  class NodeType {
      /**
      @internal
      */
      constructor(
      /**
      The name of the node type. Not necessarily unique, but if the
      grammar was written properly, different node types with the
      same name within a node set should play the same semantic
      role.
      */
      name, 
      /**
      @internal
      */
      props, 
      /**
      The id of this node in its set. Corresponds to the term ids
      used in the parser.
      */
      id, 
      /**
      @internal
      */
      flags = 0) {
          this.name = name;
          this.props = props;
          this.id = id;
          this.flags = flags;
      }
      /**
      Define a node type.
      */
      static define(spec) {
          let props = spec.props && spec.props.length ? Object.create(null) : noProps;
          let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |
              (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);
          let type = new NodeType(spec.name || "", props, spec.id, flags);
          if (spec.props)
              for (let src of spec.props) {
                  if (!Array.isArray(src))
                      src = src(type);
                  if (src) {
                      if (src[0].perNode)
                          throw new RangeError("Can't store a per-node prop on a node type");
                      props[src[0].id] = src[1];
                  }
              }
          return type;
      }
      /**
      Retrieves a node prop for this type. Will return `undefined` if
      the prop isn't present on this node.
      */
      prop(prop) { return this.props[prop.id]; }
      /**
      True when this is the top node of a grammar.
      */
      get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }
      /**
      True when this node is produced by a skip rule.
      */
      get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }
      /**
      Indicates whether this is an error node.
      */
      get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }
      /**
      When true, this node type doesn't correspond to a user-declared
      named node, for example because it is used to cache repetition.
      */
      get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }
      /**
      Returns true when this node's name or one of its
      [groups](#common.NodeProp^group) matches the given string.
      */
      is(name) {
          if (typeof name == 'string') {
              if (this.name == name)
                  return true;
              let group = this.prop(NodeProp.group);
              return group ? group.indexOf(name) > -1 : false;
          }
          return this.id == name;
      }
      /**
      Create a function from node types to arbitrary values by
      specifying an object whose property names are node or
      [group](#common.NodeProp^group) names. Often useful with
      [`NodeProp.add`](#common.NodeProp.add). You can put multiple
      names, separated by spaces, in a single property name to map
      multiple node names to a single value.
      */
      static match(map) {
          let direct = Object.create(null);
          for (let prop in map)
              for (let name of prop.split(" "))
                  direct[name] = map[prop];
          return (node) => {
              for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
                  let found = direct[i < 0 ? node.name : groups[i]];
                  if (found)
                      return found;
              }
          };
      }
  }
  /**
  An empty dummy node type to use when no actual type is available.
  */
  NodeType.none = new NodeType("", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);
  /**
  A node set holds a collection of node types. It is used to
  compactly represent trees by storing their type ids, rather than a
  full pointer to the type object, in a numeric array. Each parser
  [has](#lr.LRParser.nodeSet) a node set, and [tree
  buffers](#common.TreeBuffer) can only store collections of nodes
  from the same set. A set can have a maximum of 2**16 (65536) node
  types in it, so that the ids fit into 16-bit typed array slots.
  */
  class NodeSet {
      /**
      Create a set with the given types. The `id` property of each
      type should correspond to its position within the array.
      */
      constructor(
      /**
      The node types in this set, by id.
      */
      types) {
          this.types = types;
          for (let i = 0; i < types.length; i++)
              if (types[i].id != i)
                  throw new RangeError("Node type ids should correspond to array positions when creating a node set");
      }
      /**
      Create a copy of this set with some node properties added. The
      arguments to this method can be created with
      [`NodeProp.add`](#common.NodeProp.add).
      */
      extend(...props) {
          let newTypes = [];
          for (let type of this.types) {
              let newProps = null;
              for (let source of props) {
                  let add = source(type);
                  if (add) {
                      if (!newProps)
                          newProps = Object.assign({}, type.props);
                      newProps[add[0].id] = add[1];
                  }
              }
              newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
          }
          return new NodeSet(newTypes);
      }
  }
  const CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();
  /**
  Options that control iteration. Can be combined with the `|`
  operator to enable multiple ones.
  */
  var IterMode;
  (function (IterMode) {
      /**
      When enabled, iteration will only visit [`Tree`](#common.Tree)
      objects, not nodes packed into
      [`TreeBuffer`](#common.TreeBuffer)s.
      */
      IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
      /**
      Enable this to make iteration include anonymous nodes (such as
      the nodes that wrap repeated grammar constructs into a balanced
      tree).
      */
      IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
      /**
      By default, regular [mounted](#common.NodeProp^mounted) nodes
      replace their base node in iteration. Enable this to ignore them
      instead.
      */
      IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
      /**
      This option only applies in
      [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
      library to not enter mounted overlays if one covers the given
      position.
      */
      IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
  })(IterMode || (IterMode = {}));
  /**
  A piece of syntax tree. There are two ways to approach these
  trees: the way they are actually stored in memory, and the
  convenient way.

  Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
  objects. By packing detail information into `TreeBuffer` leaf
  nodes, the representation is made a lot more memory-efficient.

  However, when you want to actually work with tree nodes, this
  representation is very awkward, so most client code will want to
  use the [`TreeCursor`](#common.TreeCursor) or
  [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
  a view on some part of this data structure, and can be used to
  move around to adjacent nodes.
  */
  class Tree {
      /**
      Construct a new tree. See also [`Tree.build`](#common.Tree^build).
      */
      constructor(
      /**
      The type of the top node.
      */
      type, 
      /**
      This node's child nodes.
      */
      children, 
      /**
      The positions (offsets relative to the start of this tree) of
      the children.
      */
      positions, 
      /**
      The total length of this tree
      */
      length, 
      /**
      Per-node [node props](#common.NodeProp) to associate with this node.
      */
      props) {
          this.type = type;
          this.children = children;
          this.positions = positions;
          this.length = length;
          /**
          @internal
          */
          this.props = null;
          if (props && props.length) {
              this.props = Object.create(null);
              for (let [prop, value] of props)
                  this.props[typeof prop == "number" ? prop : prop.id] = value;
          }
      }
      /**
      @internal
      */
      toString() {
          let mounted = MountedTree.get(this);
          if (mounted && !mounted.overlay)
              return mounted.tree.toString();
          let children = "";
          for (let ch of this.children) {
              let str = ch.toString();
              if (str) {
                  if (children)
                      children += ",";
                  children += str;
              }
          }
          return !this.type.name ? children :
              (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                  (children.length ? "(" + children + ")" : "");
      }
      /**
      Get a [tree cursor](#common.TreeCursor) positioned at the top of
      the tree. Mode can be used to [control](#common.IterMode) which
      nodes the cursor visits.
      */
      cursor(mode = 0) {
          return new TreeCursor(this.topNode, mode);
      }
      /**
      Get a [tree cursor](#common.TreeCursor) pointing into this tree
      at the given position and side (see
      [`moveTo`](#common.TreeCursor.moveTo).
      */
      cursorAt(pos, side = 0, mode = 0) {
          let scope = CachedNode.get(this) || this.topNode;
          let cursor = new TreeCursor(scope);
          cursor.moveTo(pos, side);
          CachedNode.set(this, cursor._tree);
          return cursor;
      }
      /**
      Get a [syntax node](#common.SyntaxNode) object for the top of the
      tree.
      */
      get topNode() {
          return new TreeNode(this, 0, 0, null);
      }
      /**
      Get the [syntax node](#common.SyntaxNode) at the given position.
      If `side` is -1, this will move into nodes that end at the
      position. If 1, it'll move into nodes that start at the
      position. With 0, it'll only enter nodes that cover the position
      from both sides.
      
      Note that this will not enter
      [overlays](#common.MountedTree.overlay), and you often want
      [`resolveInner`](#common.Tree.resolveInner) instead.
      */
      resolve(pos, side = 0) {
          let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
          CachedNode.set(this, node);
          return node;
      }
      /**
      Like [`resolve`](#common.Tree.resolve), but will enter
      [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
      pointing into the innermost overlaid tree at the given position
      (with parent links going through all parent structure, including
      the host trees).
      */
      resolveInner(pos, side = 0) {
          let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
          CachedInnerNode.set(this, node);
          return node;
      }
      /**
      In some situations, it can be useful to iterate through all
      nodes around a position, including those in overlays that don't
      directly cover the position. This method gives you an iterator
      that will produce all nodes, from small to big, around the given
      position.
      */
      resolveStack(pos, side = 0) {
          return stackIterator(this, pos, side);
      }
      /**
      Iterate over the tree and its children, calling `enter` for any
      node that touches the `from`/`to` region (if given) before
      running over such a node's children, and `leave` (if given) when
      leaving the node. When `enter` returns `false`, that node will
      not have its children iterated over (or `leave` called).
      */
      iterate(spec) {
          let { enter, leave, from = 0, to = this.length } = spec;
          let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
          for (let c = this.cursor(mode | IterMode.IncludeAnonymous);;) {
              let entered = false;
              if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {
                  if (c.firstChild())
                      continue;
                  entered = true;
              }
              for (;;) {
                  if (entered && leave && (anon || !c.type.isAnonymous))
                      leave(c);
                  if (c.nextSibling())
                      break;
                  if (!c.parent())
                      return;
                  entered = true;
              }
          }
      }
      /**
      Get the value of the given [node prop](#common.NodeProp) for this
      node. Works with both per-node and per-type props.
      */
      prop(prop) {
          return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
      }
      /**
      Returns the node's [per-node props](#common.NodeProp.perNode) in a
      format that can be passed to the [`Tree`](#common.Tree)
      constructor.
      */
      get propValues() {
          let result = [];
          if (this.props)
              for (let id in this.props)
                  result.push([+id, this.props[id]]);
          return result;
      }
      /**
      Balance the direct children of this tree, producing a copy of
      which may have children grouped into subtrees with type
      [`NodeType.none`](#common.NodeType^none).
      */
      balance(config = {}) {
          return this.children.length <= 8 /* Balance.BranchFactor */ ? this :
              balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
      }
      /**
      Build a tree from a postfix-ordered buffer of node information,
      or a cursor over such a buffer.
      */
      static build(data) { return buildTree(data); }
  }
  /**
  The empty tree
  */
  Tree.empty = new Tree(NodeType.none, [], [], 0);
  class FlatBufferCursor {
      constructor(buffer, index) {
          this.buffer = buffer;
          this.index = index;
      }
      get id() { return this.buffer[this.index - 4]; }
      get start() { return this.buffer[this.index - 3]; }
      get end() { return this.buffer[this.index - 2]; }
      get size() { return this.buffer[this.index - 1]; }
      get pos() { return this.index; }
      next() { this.index -= 4; }
      fork() { return new FlatBufferCursor(this.buffer, this.index); }
  }
  /**
  Tree buffers contain (type, start, end, endIndex) quads for each
  node. In such a buffer, nodes are stored in prefix order (parents
  before children, with the endIndex of the parent indicating which
  children belong to it).
  */
  class TreeBuffer {
      /**
      Create a tree buffer.
      */
      constructor(
      /**
      The buffer's content.
      */
      buffer, 
      /**
      The total length of the group of nodes in the buffer.
      */
      length, 
      /**
      The node set used in this buffer.
      */
      set) {
          this.buffer = buffer;
          this.length = length;
          this.set = set;
      }
      /**
      @internal
      */
      get type() { return NodeType.none; }
      /**
      @internal
      */
      toString() {
          let result = [];
          for (let index = 0; index < this.buffer.length;) {
              result.push(this.childString(index));
              index = this.buffer[index + 3];
          }
          return result.join(",");
      }
      /**
      @internal
      */
      childString(index) {
          let id = this.buffer[index], endIndex = this.buffer[index + 3];
          let type = this.set.types[id], result = type.name;
          if (/\W/.test(result) && !type.isError)
              result = JSON.stringify(result);
          index += 4;
          if (endIndex == index)
              return result;
          let children = [];
          while (index < endIndex) {
              children.push(this.childString(index));
              index = this.buffer[index + 3];
          }
          return result + "(" + children.join(",") + ")";
      }
      /**
      @internal
      */
      findChild(startIndex, endIndex, dir, pos, side) {
          let { buffer } = this, pick = -1;
          for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
              if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
                  pick = i;
                  if (dir > 0)
                      break;
              }
          }
          return pick;
      }
      /**
      @internal
      */
      slice(startI, endI, from) {
          let b = this.buffer;
          let copy = new Uint16Array(endI - startI), len = 0;
          for (let i = startI, j = 0; i < endI;) {
              copy[j++] = b[i++];
              copy[j++] = b[i++] - from;
              let to = copy[j++] = b[i++] - from;
              copy[j++] = b[i++] - startI;
              len = Math.max(len, to);
          }
          return new TreeBuffer(copy, len, this.set);
      }
  }
  function checkSide(side, pos, from, to) {
      switch (side) {
          case -2 /* Side.Before */: return from < pos;
          case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;
          case 0 /* Side.Around */: return from < pos && to > pos;
          case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;
          case 2 /* Side.After */: return to > pos;
          case 4 /* Side.DontCare */: return true;
      }
  }
  function resolveNode(node, pos, side, overlays) {
      var _a;
      // Move up to a node that actually holds the position, if possible
      while (node.from == node.to ||
          (side < 1 ? node.from >= pos : node.from > pos) ||
          (side > -1 ? node.to <= pos : node.to < pos)) {
          let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
          if (!parent)
              return node;
          node = parent;
      }
      let mode = overlays ? 0 : IterMode.IgnoreOverlays;
      // Must go up out of overlays when those do not overlap with pos
      if (overlays)
          for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
              if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)
                  node = parent;
          }
      for (;;) {
          let inner = node.enter(pos, side, mode);
          if (!inner)
              return node;
          node = inner;
      }
  }
  class BaseNode {
      cursor(mode = 0) { return new TreeCursor(this, mode); }
      getChild(type, before = null, after = null) {
          let r = getChildren(this, type, before, after);
          return r.length ? r[0] : null;
      }
      getChildren(type, before = null, after = null) {
          return getChildren(this, type, before, after);
      }
      resolve(pos, side = 0) {
          return resolveNode(this, pos, side, false);
      }
      resolveInner(pos, side = 0) {
          return resolveNode(this, pos, side, true);
      }
      matchContext(context) {
          return matchNodeContext(this.parent, context);
      }
      enterUnfinishedNodesBefore(pos) {
          let scan = this.childBefore(pos), node = this;
          while (scan) {
              let last = scan.lastChild;
              if (!last || last.to != scan.to)
                  break;
              if (last.type.isError && last.from == last.to) {
                  node = scan;
                  scan = last.prevSibling;
              }
              else {
                  scan = last;
              }
          }
          return node;
      }
      get node() { return this; }
      get next() { return this.parent; }
  }
  class TreeNode extends BaseNode {
      constructor(_tree, from, 
      // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
      index, _parent) {
          super();
          this._tree = _tree;
          this.from = from;
          this.index = index;
          this._parent = _parent;
      }
      get type() { return this._tree.type; }
      get name() { return this._tree.type.name; }
      get to() { return this.from + this._tree.length; }
      nextChild(i, dir, pos, side, mode = 0) {
          for (let parent = this;;) {
              for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                  let next = children[i], start = positions[i] + parent.from;
                  if (!checkSide(side, pos, start, start + next.length))
                      continue;
                  if (next instanceof TreeBuffer) {
                      if (mode & IterMode.ExcludeBuffers)
                          continue;
                      let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
                      if (index > -1)
                          return new BufferNode(new BufferContext(parent, next, i, start), null, index);
                  }
                  else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {
                      let mounted;
                      if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)
                          return new TreeNode(mounted.tree, start, i, parent);
                      let inner = new TreeNode(next, start, i, parent);
                      return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner
                          : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
                  }
              }
              if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)
                  return null;
              if (parent.index >= 0)
                  i = parent.index + dir;
              else
                  i = dir < 0 ? -1 : parent._parent._tree.children.length;
              parent = parent._parent;
              if (!parent)
                  return null;
          }
      }
      get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }
      get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }
      childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }
      childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }
      enter(pos, side, mode = 0) {
          let mounted;
          if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
              let rPos = pos - this.from;
              for (let { from, to } of mounted.overlay) {
                  if ((side > 0 ? from <= rPos : from < rPos) &&
                      (side < 0 ? to >= rPos : to > rPos))
                      return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
              }
          }
          return this.nextChild(0, 1, pos, side, mode);
      }
      nextSignificantParent() {
          let val = this;
          while (val.type.isAnonymous && val._parent)
              val = val._parent;
          return val;
      }
      get parent() {
          return this._parent ? this._parent.nextSignificantParent() : null;
      }
      get nextSibling() {
          return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;
      }
      get prevSibling() {
          return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;
      }
      get tree() { return this._tree; }
      toTree() { return this._tree; }
      /**
      @internal
      */
      toString() { return this._tree.toString(); }
  }
  function getChildren(node, type, before, after) {
      let cur = node.cursor(), result = [];
      if (!cur.firstChild())
          return result;
      if (before != null)
          for (let found = false; !found;) {
              found = cur.type.is(before);
              if (!cur.nextSibling())
                  return result;
          }
      for (;;) {
          if (after != null && cur.type.is(after))
              return result;
          if (cur.type.is(type))
              result.push(cur.node);
          if (!cur.nextSibling())
              return after == null ? result : [];
      }
  }
  function matchNodeContext(node, context, i = context.length - 1) {
      for (let p = node; i >= 0; p = p.parent) {
          if (!p)
              return false;
          if (!p.type.isAnonymous) {
              if (context[i] && context[i] != p.name)
                  return false;
              i--;
          }
      }
      return true;
  }
  class BufferContext {
      constructor(parent, buffer, index, start) {
          this.parent = parent;
          this.buffer = buffer;
          this.index = index;
          this.start = start;
      }
  }
  class BufferNode extends BaseNode {
      get name() { return this.type.name; }
      get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
      get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
      constructor(context, _parent, index) {
          super();
          this.context = context;
          this._parent = _parent;
          this.index = index;
          this.type = context.buffer.set.types[context.buffer.buffer[index]];
      }
      child(dir, pos, side) {
          let { buffer } = this.context;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
          return index < 0 ? null : new BufferNode(this.context, this, index);
      }
      get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }
      get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }
      childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }
      childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }
      enter(pos, side, mode = 0) {
          if (mode & IterMode.ExcludeBuffers)
              return null;
          let { buffer } = this.context;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
          return index < 0 ? null : new BufferNode(this.context, this, index);
      }
      get parent() {
          return this._parent || this.context.parent.nextSignificantParent();
      }
      externalSibling(dir) {
          return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);
      }
      get nextSibling() {
          let { buffer } = this.context;
          let after = buffer.buffer[this.index + 3];
          if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
              return new BufferNode(this.context, this._parent, after);
          return this.externalSibling(1);
      }
      get prevSibling() {
          let { buffer } = this.context;
          let parentStart = this._parent ? this._parent.index + 4 : 0;
          if (this.index == parentStart)
              return this.externalSibling(-1);
          return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
      }
      get tree() { return null; }
      toTree() {
          let children = [], positions = [];
          let { buffer } = this.context;
          let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
          if (endI > startI) {
              let from = buffer.buffer[this.index + 1];
              children.push(buffer.slice(startI, endI, from));
              positions.push(0);
          }
          return new Tree(this.type, children, positions, this.to - this.from);
      }
      /**
      @internal
      */
      toString() { return this.context.buffer.childString(this.index); }
  }
  function iterStack(heads) {
      if (!heads.length)
          return null;
      let pick = 0, picked = heads[0];
      for (let i = 1; i < heads.length; i++) {
          let node = heads[i];
          if (node.from > picked.from || node.to < picked.to) {
              picked = node;
              pick = i;
          }
      }
      let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
      let newHeads = heads.slice();
      if (next)
          newHeads[pick] = next;
      else
          newHeads.splice(pick, 1);
      return new StackIterator(newHeads, picked);
  }
  class StackIterator {
      constructor(heads, node) {
          this.heads = heads;
          this.node = node;
      }
      get next() { return iterStack(this.heads); }
  }
  function stackIterator(tree, pos, side) {
      let inner = tree.resolveInner(pos, side), layers = null;
      for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
          if (scan.index < 0) { // This is an overlay root
              let parent = scan.parent;
              (layers || (layers = [inner])).push(parent.resolve(pos, side));
              scan = parent;
          }
          else {
              let mount = MountedTree.get(scan.tree);
              // Relevant overlay branching off
              if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {
                  let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
                  (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));
              }
          }
      }
      return layers ? iterStack(layers) : inner;
  }
  /**
  A tree cursor object focuses on a given node in a syntax tree, and
  allows you to move to adjacent nodes.
  */
  class TreeCursor {
      /**
      Shorthand for `.type.name`.
      */
      get name() { return this.type.name; }
      /**
      @internal
      */
      constructor(node, 
      /**
      @internal
      */
      mode = 0) {
          this.mode = mode;
          /**
          @internal
          */
          this.buffer = null;
          this.stack = [];
          /**
          @internal
          */
          this.index = 0;
          this.bufferNode = null;
          if (node instanceof TreeNode) {
              this.yieldNode(node);
          }
          else {
              this._tree = node.context.parent;
              this.buffer = node.context;
              for (let n = node._parent; n; n = n._parent)
                  this.stack.unshift(n.index);
              this.bufferNode = node;
              this.yieldBuf(node.index);
          }
      }
      yieldNode(node) {
          if (!node)
              return false;
          this._tree = node;
          this.type = node.type;
          this.from = node.from;
          this.to = node.to;
          return true;
      }
      yieldBuf(index, type) {
          this.index = index;
          let { start, buffer } = this.buffer;
          this.type = type || buffer.set.types[buffer.buffer[index]];
          this.from = start + buffer.buffer[index + 1];
          this.to = start + buffer.buffer[index + 2];
          return true;
      }
      /**
      @internal
      */
      yield(node) {
          if (!node)
              return false;
          if (node instanceof TreeNode) {
              this.buffer = null;
              return this.yieldNode(node);
          }
          this.buffer = node.context;
          return this.yieldBuf(node.index, node.type);
      }
      /**
      @internal
      */
      toString() {
          return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
      }
      /**
      @internal
      */
      enterChild(dir, pos, side) {
          if (!this.buffer)
              return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
          let { buffer } = this.buffer;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
          if (index < 0)
              return false;
          this.stack.push(this.index);
          return this.yieldBuf(index);
      }
      /**
      Move the cursor to this node's first child. When this returns
      false, the node has no child, and the cursor has not been moved.
      */
      firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }
      /**
      Move the cursor to this node's last child.
      */
      lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }
      /**
      Move the cursor to the first child that ends after `pos`.
      */
      childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }
      /**
      Move to the last child that starts before `pos`.
      */
      childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }
      /**
      Move the cursor to the child around `pos`. If side is -1 the
      child may end at that position, when 1 it may start there. This
      will also enter [overlaid](#common.MountedTree.overlay)
      [mounted](#common.NodeProp^mounted) trees unless `overlays` is
      set to false.
      */
      enter(pos, side, mode = this.mode) {
          if (!this.buffer)
              return this.yield(this._tree.enter(pos, side, mode));
          return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
      }
      /**
      Move to the node's parent node, if this isn't the top node.
      */
      parent() {
          if (!this.buffer)
              return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);
          if (this.stack.length)
              return this.yieldBuf(this.stack.pop());
          let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
          this.buffer = null;
          return this.yieldNode(parent);
      }
      /**
      @internal
      */
      sibling(dir) {
          if (!this.buffer)
              return !this._tree._parent ? false
                  : this.yield(this._tree.index < 0 ? null
                      : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));
          let { buffer } = this.buffer, d = this.stack.length - 1;
          if (dir < 0) {
              let parentStart = d < 0 ? 0 : this.stack[d] + 4;
              if (this.index != parentStart)
                  return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
          }
          else {
              let after = buffer.buffer[this.index + 3];
              if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                  return this.yieldBuf(after);
          }
          return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;
      }
      /**
      Move to this node's next sibling, if any.
      */
      nextSibling() { return this.sibling(1); }
      /**
      Move to this node's previous sibling, if any.
      */
      prevSibling() { return this.sibling(-1); }
      atLastNode(dir) {
          let index, parent, { buffer } = this;
          if (buffer) {
              if (dir > 0) {
                  if (this.index < buffer.buffer.buffer.length)
                      return false;
              }
              else {
                  for (let i = 0; i < this.index; i++)
                      if (buffer.buffer.buffer[i + 3] < this.index)
                          return false;
              }
              ({ index, parent } = buffer);
          }
          else {
              ({ index, _parent: parent } = this._tree);
          }
          for (; parent; { index, _parent: parent } = parent) {
              if (index > -1)
                  for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
                      let child = parent._tree.children[i];
                      if ((this.mode & IterMode.IncludeAnonymous) ||
                          child instanceof TreeBuffer ||
                          !child.type.isAnonymous ||
                          hasChild(child))
                          return false;
                  }
          }
          return true;
      }
      move(dir, enter) {
          if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))
              return true;
          for (;;) {
              if (this.sibling(dir))
                  return true;
              if (this.atLastNode(dir) || !this.parent())
                  return false;
          }
      }
      /**
      Move to the next node in a
      [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
      traversal, going from a node to its first child or, if the
      current node is empty or `enter` is false, its next sibling or
      the next sibling of the first parent node that has one.
      */
      next(enter = true) { return this.move(1, enter); }
      /**
      Move to the next node in a last-to-first pre-order traversal. A
      node is followed by its last child or, if it has none, its
      previous sibling or the previous sibling of the first parent
      node that has one.
      */
      prev(enter = true) { return this.move(-1, enter); }
      /**
      Move the cursor to the innermost node that covers `pos`. If
      `side` is -1, it will enter nodes that end at `pos`. If it is 1,
      it will enter nodes that start at `pos`.
      */
      moveTo(pos, side = 0) {
          // Move up to a node that actually holds the position, if possible
          while (this.from == this.to ||
              (side < 1 ? this.from >= pos : this.from > pos) ||
              (side > -1 ? this.to <= pos : this.to < pos))
              if (!this.parent())
                  break;
          // Then scan down into child nodes as far as possible
          while (this.enterChild(1, pos, side)) { }
          return this;
      }
      /**
      Get a [syntax node](#common.SyntaxNode) at the cursor's current
      position.
      */
      get node() {
          if (!this.buffer)
              return this._tree;
          let cache = this.bufferNode, result = null, depth = 0;
          if (cache && cache.context == this.buffer) {
              scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
                  for (let c = cache; c; c = c._parent)
                      if (c.index == index) {
                          if (index == this.index)
                              return c;
                          result = c;
                          depth = d + 1;
                          break scan;
                      }
                  index = this.stack[--d];
              }
          }
          for (let i = depth; i < this.stack.length; i++)
              result = new BufferNode(this.buffer, result, this.stack[i]);
          return this.bufferNode = new BufferNode(this.buffer, result, this.index);
      }
      /**
      Get the [tree](#common.Tree) that represents the current node, if
      any. Will return null when the node is in a [tree
      buffer](#common.TreeBuffer).
      */
      get tree() {
          return this.buffer ? null : this._tree._tree;
      }
      /**
      Iterate over the current node and all its descendants, calling
      `enter` when entering a node and `leave`, if given, when leaving
      one. When `enter` returns `false`, any children of that node are
      skipped, and `leave` isn't called for it.
      */
      iterate(enter, leave) {
          for (let depth = 0;;) {
              let mustLeave = false;
              if (this.type.isAnonymous || enter(this) !== false) {
                  if (this.firstChild()) {
                      depth++;
                      continue;
                  }
                  if (!this.type.isAnonymous)
                      mustLeave = true;
              }
              for (;;) {
                  if (mustLeave && leave)
                      leave(this);
                  mustLeave = this.type.isAnonymous;
                  if (!depth)
                      return;
                  if (this.nextSibling())
                      break;
                  this.parent();
                  depth--;
                  mustLeave = true;
              }
          }
      }
      /**
      Test whether the current node matches a given context—a sequence
      of direct parent node names. Empty strings in the context array
      are treated as wildcards.
      */
      matchContext(context) {
          if (!this.buffer)
              return matchNodeContext(this.node.parent, context);
          let { buffer } = this.buffer, { types } = buffer.set;
          for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
              if (d < 0)
                  return matchNodeContext(this._tree, context, i);
              let type = types[buffer.buffer[this.stack[d]]];
              if (!type.isAnonymous) {
                  if (context[i] && context[i] != type.name)
                      return false;
                  i--;
              }
          }
          return true;
      }
  }
  function hasChild(tree) {
      return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
  }
  function buildTree(data) {
      var _a;
      let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
      let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
      let types = nodeSet.types;
      let contextHash = 0, lookAhead = 0;
      function takeNode(parentStart, minPos, children, positions, inRepeat, depth) {
          let { id, start, end, size } = cursor;
          let lookAheadAtStart = lookAhead, contextAtStart = contextHash;
          while (size < 0) {
              cursor.next();
              if (size == -1 /* SpecialRecord.Reuse */) {
                  let node = reused[id];
                  children.push(node);
                  positions.push(start - parentStart);
                  return;
              }
              else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change
                  contextHash = id;
                  return;
              }
              else if (size == -4 /* SpecialRecord.LookAhead */) {
                  lookAhead = id;
                  return;
              }
              else {
                  throw new RangeError(`Unrecognized record size: ${size}`);
              }
          }
          let type = types[id], node, buffer;
          let startPos = start - parentStart;
          if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
              // Small enough for a buffer, and no reused nodes inside
              let data = new Uint16Array(buffer.size - buffer.skip);
              let endPos = cursor.pos - buffer.size, index = data.length;
              while (cursor.pos > endPos)
                  index = copyToBuffer(buffer.start, data, index);
              node = new TreeBuffer(data, end - buffer.start, nodeSet);
              startPos = buffer.start - parentStart;
          }
          else { // Make it a node
              let endPos = cursor.pos - size;
              cursor.next();
              let localChildren = [], localPositions = [];
              let localInRepeat = id >= minRepeatType ? id : -1;
              let lastGroup = 0, lastEnd = end;
              while (cursor.pos > endPos) {
                  if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
                      if (cursor.end <= lastEnd - maxBufferLength) {
                          makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
                          lastGroup = localChildren.length;
                          lastEnd = cursor.end;
                      }
                      cursor.next();
                  }
                  else if (depth > 2500 /* CutOff.Depth */) {
                      takeFlatNode(start, endPos, localChildren, localPositions);
                  }
                  else {
                      takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth + 1);
                  }
              }
              if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
                  makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
              localChildren.reverse();
              localPositions.reverse();
              if (localInRepeat > -1 && lastGroup > 0) {
                  let make = makeBalanced(type, contextAtStart);
                  node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
              }
              else {
                  node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end, contextAtStart);
              }
          }
          children.push(node);
          positions.push(startPos);
      }
      function takeFlatNode(parentStart, minPos, children, positions) {
          let nodes = []; // Temporary, inverted array of leaf nodes found, with absolute positions
          let nodeCount = 0, stopAt = -1;
          while (cursor.pos > minPos) {
              let { id, start, end, size } = cursor;
              if (size > 4) { // Not a leaf
                  cursor.next();
              }
              else if (stopAt > -1 && start < stopAt) {
                  break;
              }
              else {
                  if (stopAt < 0)
                      stopAt = end - maxBufferLength;
                  nodes.push(id, start, end);
                  nodeCount++;
                  cursor.next();
              }
          }
          if (nodeCount) {
              let buffer = new Uint16Array(nodeCount * 4);
              let start = nodes[nodes.length - 2];
              for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {
                  buffer[j++] = nodes[i];
                  buffer[j++] = nodes[i + 1] - start;
                  buffer[j++] = nodes[i + 2] - start;
                  buffer[j++] = j;
              }
              children.push(new TreeBuffer(buffer, nodes[2] - start, nodeSet));
              positions.push(start - parentStart);
          }
      }
      function makeBalanced(type, contextHash) {
          return (children, positions, length) => {
              let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;
              if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
                  if (!lastI && last.type == type && last.length == length)
                      return last;
                  if (lookAheadProp = last.prop(NodeProp.lookAhead))
                      lookAhead = positions[lastI] + last.length + lookAheadProp;
              }
              return makeTree(type, children, positions, length, lookAhead, contextHash);
          };
      }
      function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead, contextHash) {
          let localChildren = [], localPositions = [];
          while (children.length > i) {
              localChildren.push(children.pop());
              localPositions.push(positions.pop() + base - from);
          }
          children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to, contextHash));
          positions.push(from - base);
      }
      function makeTree(type, children, positions, length, lookAhead, contextHash, props) {
          if (contextHash) {
              let pair = [NodeProp.contextHash, contextHash];
              props = props ? [pair].concat(props) : [pair];
          }
          if (lookAhead > 25) {
              let pair = [NodeProp.lookAhead, lookAhead];
              props = props ? [pair].concat(props) : [pair];
          }
          return new Tree(type, children, positions, length, props);
      }
      function findBufferSize(maxSize, inRepeat) {
          // Scan through the buffer to find previous siblings that fit
          // together in a TreeBuffer, and don't contain any reused nodes
          // (which can't be stored in a buffer).
          // If `inRepeat` is > -1, ignore node boundaries of that type for
          // nesting, but make sure the end falls either at the start
          // (`maxSize`) or before such a node.
          let fork = cursor.fork();
          let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
          let result = { size: 0, start: 0, skip: 0 };
          scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
              let nodeSize = fork.size;
              // Pretend nested repeat nodes of the same type don't exist
              if (fork.id == inRepeat && nodeSize >= 0) {
                  // Except that we store the current state as a valid return
                  // value.
                  result.size = size;
                  result.start = start;
                  result.skip = skip;
                  skip += 4;
                  size += 4;
                  fork.next();
                  continue;
              }
              let startPos = fork.pos - nodeSize;
              if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                  break;
              let localSkipped = fork.id >= minRepeatType ? 4 : 0;
              let nodeStart = fork.start;
              fork.next();
              while (fork.pos > startPos) {
                  if (fork.size < 0) {
                      if (fork.size == -3 /* SpecialRecord.ContextChange */)
                          localSkipped += 4;
                      else
                          break scan;
                  }
                  else if (fork.id >= minRepeatType) {
                      localSkipped += 4;
                  }
                  fork.next();
              }
              start = nodeStart;
              size += nodeSize;
              skip += localSkipped;
          }
          if (inRepeat < 0 || size == maxSize) {
              result.size = size;
              result.start = start;
              result.skip = skip;
          }
          return result.size > 4 ? result : undefined;
      }
      function copyToBuffer(bufferStart, buffer, index) {
          let { id, start, end, size } = cursor;
          cursor.next();
          if (size >= 0 && id < minRepeatType) {
              let startIndex = index;
              if (size > 4) {
                  let endPos = cursor.pos - (size - 4);
                  while (cursor.pos > endPos)
                      index = copyToBuffer(bufferStart, buffer, index);
              }
              buffer[--index] = startIndex;
              buffer[--index] = end - bufferStart;
              buffer[--index] = start - bufferStart;
              buffer[--index] = id;
          }
          else if (size == -3 /* SpecialRecord.ContextChange */) {
              contextHash = id;
          }
          else if (size == -4 /* SpecialRecord.LookAhead */) {
              lookAhead = id;
          }
          return index;
      }
      let children = [], positions = [];
      while (cursor.pos > 0)
          takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);
      let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
      return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
  }
  const nodeSizeCache = new WeakMap;
  function nodeSize(balanceType, node) {
      if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
          return 1;
      let size = nodeSizeCache.get(node);
      if (size == null) {
          size = 1;
          for (let child of node.children) {
              if (child.type != balanceType || !(child instanceof Tree)) {
                  size = 1;
                  break;
              }
              size += nodeSize(balanceType, child);
          }
          nodeSizeCache.set(node, size);
      }
      return size;
  }
  function balanceRange(
  // The type the balanced tree's inner nodes.
  balanceType, 
  // The direct children and their positions
  children, positions, 
  // The index range in children/positions to use
  from, to, 
  // The start position of the nodes, relative to their parent.
  start, 
  // Length of the outer node
  length, 
  // Function to build the top node of the balanced tree
  mkTop, 
  // Function to build internal nodes for the balanced tree
  mkTree) {
      let total = 0;
      for (let i = from; i < to; i++)
          total += nodeSize(balanceType, children[i]);
      let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);
      let localChildren = [], localPositions = [];
      function divide(children, positions, from, to, offset) {
          for (let i = from; i < to;) {
              let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);
              i++;
              for (; i < to; i++) {
                  let nextSize = nodeSize(balanceType, children[i]);
                  if (groupSize + nextSize >= maxChild)
                      break;
                  groupSize += nextSize;
              }
              if (i == groupFrom + 1) {
                  if (groupSize > maxChild) {
                      let only = children[groupFrom]; // Only trees can have a size > 1
                      divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
                      continue;
                  }
                  localChildren.push(children[groupFrom]);
              }
              else {
                  let length = positions[i - 1] + children[i - 1].length - groupStart;
                  localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));
              }
              localPositions.push(groupStart + offset - start);
          }
      }
      divide(children, positions, from, to, 0);
      return (mkTop || mkTree)(localChildren, localPositions, length);
  }

  /**
  Tree fragments are used during [incremental
  parsing](#common.Parser.startParse) to track parts of old trees
  that can be reused in a new parse. An array of fragments is used
  to track regions of an old tree whose nodes might be reused in new
  parses. Use the static
  [`applyChanges`](#common.TreeFragment^applyChanges) method to
  update fragments for document changes.
  */
  class TreeFragment {
      /**
      Construct a tree fragment. You'll usually want to use
      [`addTree`](#common.TreeFragment^addTree) and
      [`applyChanges`](#common.TreeFragment^applyChanges) instead of
      calling this directly.
      */
      constructor(
      /**
      The start of the unchanged range pointed to by this fragment.
      This refers to an offset in the _updated_ document (as opposed
      to the original tree).
      */
      from, 
      /**
      The end of the unchanged range.
      */
      to, 
      /**
      The tree that this fragment is based on.
      */
      tree, 
      /**
      The offset between the fragment's tree and the document that
      this fragment can be used against. Add this when going from
      document to tree positions, subtract it to go from tree to
      document positions.
      */
      offset, openStart = false, openEnd = false) {
          this.from = from;
          this.to = to;
          this.tree = tree;
          this.offset = offset;
          this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);
      }
      /**
      Whether the start of the fragment represents the start of a
      parse, or the end of a change. (In the second case, it may not
      be safe to reuse some nodes at the start, depending on the
      parsing algorithm.)
      */
      get openStart() { return (this.open & 1 /* Open.Start */) > 0; }
      /**
      Whether the end of the fragment represents the end of a
      full-document parse, or the start of a change.
      */
      get openEnd() { return (this.open & 2 /* Open.End */) > 0; }
      /**
      Create a set of fragments from a freshly parsed tree, or update
      an existing set of fragments by replacing the ones that overlap
      with a tree with content from the new tree. When `partial` is
      true, the parse is treated as incomplete, and the resulting
      fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
      true.
      */
      static addTree(tree, fragments = [], partial = false) {
          let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
          for (let f of fragments)
              if (f.to > tree.length)
                  result.push(f);
          return result;
      }
      /**
      Apply a set of edits to an array of fragments, removing or
      splitting fragments as necessary to remove edited ranges, and
      adjusting offsets for fragments that moved.
      */
      static applyChanges(fragments, changes, minGap = 128) {
          if (!changes.length)
              return fragments;
          let result = [];
          let fI = 1, nextF = fragments.length ? fragments[0] : null;
          for (let cI = 0, pos = 0, off = 0;; cI++) {
              let nextC = cI < changes.length ? changes[cI] : null;
              let nextPos = nextC ? nextC.fromA : 1e9;
              if (nextPos - pos >= minGap)
                  while (nextF && nextF.from < nextPos) {
                      let cut = nextF;
                      if (pos >= cut.from || nextPos <= cut.to || off) {
                          let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                          cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
                      }
                      if (cut)
                          result.push(cut);
                      if (nextF.to > nextPos)
                          break;
                      nextF = fI < fragments.length ? fragments[fI++] : null;
                  }
              if (!nextC)
                  break;
              pos = nextC.toA;
              off = nextC.toA - nextC.toB;
          }
          return result;
      }
  }
  /**
  A superclass that parsers should extend.
  */
  class Parser {
      /**
      Start a parse, returning a [partial parse](#common.PartialParse)
      object. [`fragments`](#common.TreeFragment) can be passed in to
      make the parse incremental.
      
      By default, the entire input is parsed. You can pass `ranges`,
      which should be a sorted array of non-empty, non-overlapping
      ranges, to parse only those ranges. The tree returned in that
      case will start at `ranges[0].from`.
      */
      startParse(input, fragments, ranges) {
          if (typeof input == "string")
              input = new StringInput(input);
          ranges = !ranges ? [new Range$1(0, input.length)] : ranges.length ? ranges.map(r => new Range$1(r.from, r.to)) : [new Range$1(0, 0)];
          return this.createParse(input, fragments || [], ranges);
      }
      /**
      Run a full parse, returning the resulting tree.
      */
      parse(input, fragments, ranges) {
          let parse = this.startParse(input, fragments, ranges);
          for (;;) {
              let done = parse.advance();
              if (done)
                  return done;
          }
      }
  }
  class StringInput {
      constructor(string) {
          this.string = string;
      }
      get length() { return this.string.length; }
      chunk(from) { return this.string.slice(from); }
      get lineChunks() { return false; }
      read(from, to) { return this.string.slice(from, to); }
  }
  new NodeProp({ perNode: true });

  // These are filled with ranges (rangeFrom[i] up to but not including
  // rangeTo[i]) of code points that count as extending characters.
  let rangeFrom = [], rangeTo = []

  ;(() => {
    // Compressed representation of the Grapheme_Cluster_Break=Extend
    // information from
    // http://www.unicode.org/Public/16.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
    // Each pair of elements represents a range, as an offet from the
    // previous range and a length. Numbers are in base-36, with the empty
    // string being a shorthand for 1.
    let numbers = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
    for (let i = 0, n = 0; i < numbers.length; i++)
      (i % 2 ? rangeTo : rangeFrom).push(n = n + numbers[i]);
  })();

  function isExtendingChar(code) {
    if (code < 768) return false
    for (let from = 0, to = rangeFrom.length;;) {
      let mid = (from + to) >> 1;
      if (code < rangeFrom[mid]) to = mid;
      else if (code >= rangeTo[mid]) from = mid + 1;
      else return true
      if (from == to) return false
    }
  }

  function isRegionalIndicator(code) {
    return code >= 0x1F1E6 && code <= 0x1F1FF
  }

  const ZWJ = 0x200d;

  function findClusterBreak$1(str, pos, forward = true, includeExtending = true) {
    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending)
  }

  function nextClusterBreak(str, pos, includeExtending) {
    if (pos == str.length) return pos
    // If pos is in the middle of a surrogate pair, move to its start
    if (pos && surrogateLow$1(str.charCodeAt(pos)) && surrogateHigh$1(str.charCodeAt(pos - 1))) pos--;
    let prev = codePointAt$1(str, pos);
    pos += codePointSize$1(prev);
    while (pos < str.length) {
      let next = codePointAt$1(str, pos);
      if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
        pos += codePointSize$1(next);
        prev = next;
      } else if (isRegionalIndicator(next)) {
        let countBefore = 0, i = pos - 2;
        while (i >= 0 && isRegionalIndicator(codePointAt$1(str, i))) { countBefore++; i -= 2; }
        if (countBefore % 2 == 0) break
        else pos += 2;
      } else {
        break
      }
    }
    return pos
  }

  function prevClusterBreak(str, pos, includeExtending) {
    while (pos > 0) {
      let found = nextClusterBreak(str, pos - 2, includeExtending);
      if (found < pos) return found
      pos--;
    }
    return 0
  }

  function codePointAt$1(str, pos) {
    let code0 = str.charCodeAt(pos);
    if (!surrogateHigh$1(code0) || pos + 1 == str.length) return code0
    let code1 = str.charCodeAt(pos + 1);
    if (!surrogateLow$1(code1)) return code0
    return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000
  }

  function surrogateLow$1(ch) { return ch >= 0xDC00 && ch < 0xE000 }
  function surrogateHigh$1(ch) { return ch >= 0xD800 && ch < 0xDC00 }
  function codePointSize$1(code) { return code < 0x10000 ? 1 : 2 }

  /**
  The data structure for documents. @nonabstract
  */
  class Text {
      /**
      Get the line description around the given position.
      */
      lineAt(pos) {
          if (pos < 0 || pos > this.length)
              throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
          return this.lineInner(pos, false, 1, 0);
      }
      /**
      Get the description for the given (1-based) line number.
      */
      line(n) {
          if (n < 1 || n > this.lines)
              throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
          return this.lineInner(n, true, 1, 0);
      }
      /**
      Replace a range of the text with the given content.
      */
      replace(from, to, text) {
          [from, to] = clip(this, from, to);
          let parts = [];
          this.decompose(0, from, parts, 2 /* Open.To */);
          if (text.length)
              text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);
          this.decompose(to, this.length, parts, 1 /* Open.From */);
          return TextNode.from(parts, this.length - (to - from) + text.length);
      }
      /**
      Append another document to this one.
      */
      append(other) {
          return this.replace(this.length, this.length, other);
      }
      /**
      Retrieve the text between the given points.
      */
      slice(from, to = this.length) {
          [from, to] = clip(this, from, to);
          let parts = [];
          this.decompose(from, to, parts, 0);
          return TextNode.from(parts, to - from);
      }
      /**
      Test whether this text is equal to another instance.
      */
      eq(other) {
          if (other == this)
              return true;
          if (other.length != this.length || other.lines != this.lines)
              return false;
          let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
          let a = new RawTextCursor(this), b = new RawTextCursor(other);
          for (let skip = start, pos = start;;) {
              a.next(skip);
              b.next(skip);
              skip = 0;
              if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
                  return false;
              pos += a.value.length;
              if (a.done || pos >= end)
                  return true;
          }
      }
      /**
      Iterate over the text. When `dir` is `-1`, iteration happens
      from end to start. This will return lines and the breaks between
      them as separate strings.
      */
      iter(dir = 1) { return new RawTextCursor(this, dir); }
      /**
      Iterate over a range of the text. When `from` > `to`, the
      iterator will run in reverse.
      */
      iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
      /**
      Return a cursor that iterates over the given range of lines,
      _without_ returning the line breaks between, and yielding empty
      strings for empty lines.
      
      When `from` and `to` are given, they should be 1-based line numbers.
      */
      iterLines(from, to) {
          let inner;
          if (from == null) {
              inner = this.iter();
          }
          else {
              if (to == null)
                  to = this.lines + 1;
              let start = this.line(from).from;
              inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
          }
          return new LineCursor(inner);
      }
      /**
      Return the document as a string, using newline characters to
      separate lines.
      */
      toString() { return this.sliceString(0); }
      /**
      Convert the document to an array of lines (which can be
      deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
      */
      toJSON() {
          let lines = [];
          this.flatten(lines);
          return lines;
      }
      /**
      @internal
      */
      constructor() { }
      /**
      Create a `Text` instance for the given array of lines.
      */
      static of(text) {
          if (text.length == 0)
              throw new RangeError("A document must have at least one line");
          if (text.length == 1 && !text[0])
              return Text.empty;
          return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
      }
  }
  // Leaves store an array of line strings. There are always line breaks
  // between these strings. Leaves are limited in size and have to be
  // contained in TextNode instances for bigger documents.
  class TextLeaf extends Text {
      constructor(text, length = textLength(text)) {
          super();
          this.text = text;
          this.length = length;
      }
      get lines() { return this.text.length; }
      get children() { return null; }
      lineInner(target, isLine, line, offset) {
          for (let i = 0;; i++) {
              let string = this.text[i], end = offset + string.length;
              if ((isLine ? line : end) >= target)
                  return new Line$1(offset, end, line, string);
              offset = end + 1;
              line++;
          }
      }
      decompose(from, to, target, open) {
          let text = from <= 0 && to >= this.length ? this
              : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
          if (open & 1 /* Open.From */) {
              let prev = target.pop();
              let joined = appendText(text.text, prev.text.slice(), 0, text.length);
              if (joined.length <= 32 /* Tree.Branch */) {
                  target.push(new TextLeaf(joined, prev.length + text.length));
              }
              else {
                  let mid = joined.length >> 1;
                  target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
              }
          }
          else {
              target.push(text);
          }
      }
      replace(from, to, text) {
          if (!(text instanceof TextLeaf))
              return super.replace(from, to, text);
          [from, to] = clip(this, from, to);
          let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
          let newLen = this.length + text.length - (to - from);
          if (lines.length <= 32 /* Tree.Branch */)
              return new TextLeaf(lines, newLen);
          return TextNode.from(TextLeaf.split(lines, []), newLen);
      }
      sliceString(from, to = this.length, lineSep = "\n") {
          [from, to] = clip(this, from, to);
          let result = "";
          for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
              let line = this.text[i], end = pos + line.length;
              if (pos > from && i)
                  result += lineSep;
              if (from < end && to > pos)
                  result += line.slice(Math.max(0, from - pos), to - pos);
              pos = end + 1;
          }
          return result;
      }
      flatten(target) {
          for (let line of this.text)
              target.push(line);
      }
      scanIdentical() { return 0; }
      static split(text, target) {
          let part = [], len = -1;
          for (let line of text) {
              part.push(line);
              len += line.length + 1;
              if (part.length == 32 /* Tree.Branch */) {
                  target.push(new TextLeaf(part, len));
                  part = [];
                  len = -1;
              }
          }
          if (len > -1)
              target.push(new TextLeaf(part, len));
          return target;
      }
  }
  // Nodes provide the tree structure of the `Text` type. They store a
  // number of other nodes or leaves, taking care to balance themselves
  // on changes. There are implied line breaks _between_ the children of
  // a node (but not before the first or after the last child).
  class TextNode extends Text {
      constructor(children, length) {
          super();
          this.children = children;
          this.length = length;
          this.lines = 0;
          for (let child of children)
              this.lines += child.lines;
      }
      lineInner(target, isLine, line, offset) {
          for (let i = 0;; i++) {
              let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
              if ((isLine ? endLine : end) >= target)
                  return child.lineInner(target, isLine, line, offset);
              offset = end + 1;
              line = endLine + 1;
          }
      }
      decompose(from, to, target, open) {
          for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
              let child = this.children[i], end = pos + child.length;
              if (from <= end && to >= pos) {
                  let childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));
                  if (pos >= from && end <= to && !childOpen)
                      target.push(child);
                  else
                      child.decompose(from - pos, to - pos, target, childOpen);
              }
              pos = end + 1;
          }
      }
      replace(from, to, text) {
          [from, to] = clip(this, from, to);
          if (text.lines < this.lines)
              for (let i = 0, pos = 0; i < this.children.length; i++) {
                  let child = this.children[i], end = pos + child.length;
                  // Fast path: if the change only affects one child and the
                  // child's size remains in the acceptable range, only update
                  // that child
                  if (from >= pos && to <= end) {
                      let updated = child.replace(from - pos, to - pos, text);
                      let totalLines = this.lines - child.lines + updated.lines;
                      if (updated.lines < (totalLines >> (5 /* Tree.BranchShift */ - 1)) &&
                          updated.lines > (totalLines >> (5 /* Tree.BranchShift */ + 1))) {
                          let copy = this.children.slice();
                          copy[i] = updated;
                          return new TextNode(copy, this.length - (to - from) + text.length);
                      }
                      return super.replace(pos, end, updated);
                  }
                  pos = end + 1;
              }
          return super.replace(from, to, text);
      }
      sliceString(from, to = this.length, lineSep = "\n") {
          [from, to] = clip(this, from, to);
          let result = "";
          for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
              let child = this.children[i], end = pos + child.length;
              if (pos > from && i)
                  result += lineSep;
              if (from < end && to > pos)
                  result += child.sliceString(from - pos, to - pos, lineSep);
              pos = end + 1;
          }
          return result;
      }
      flatten(target) {
          for (let child of this.children)
              child.flatten(target);
      }
      scanIdentical(other, dir) {
          if (!(other instanceof TextNode))
              return 0;
          let length = 0;
          let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]
              : [this.children.length - 1, other.children.length - 1, -1, -1];
          for (;; iA += dir, iB += dir) {
              if (iA == eA || iB == eB)
                  return length;
              let chA = this.children[iA], chB = other.children[iB];
              if (chA != chB)
                  return length + chA.scanIdentical(chB, dir);
              length += chA.length + 1;
          }
      }
      static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
          let lines = 0;
          for (let ch of children)
              lines += ch.lines;
          if (lines < 32 /* Tree.Branch */) {
              let flat = [];
              for (let ch of children)
                  ch.flatten(flat);
              return new TextLeaf(flat, length);
          }
          let chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
          let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
          function add(child) {
              let last;
              if (child.lines > maxChunk && child instanceof TextNode) {
                  for (let node of child.children)
                      add(node);
              }
              else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
                  flush();
                  chunked.push(child);
              }
              else if (child instanceof TextLeaf && currentLines &&
                  (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
                  child.lines + last.lines <= 32 /* Tree.Branch */) {
                  currentLines += child.lines;
                  currentLen += child.length + 1;
                  currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
              }
              else {
                  if (currentLines + child.lines > chunk)
                      flush();
                  currentLines += child.lines;
                  currentLen += child.length + 1;
                  currentChunk.push(child);
              }
          }
          function flush() {
              if (currentLines == 0)
                  return;
              chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
              currentLen = -1;
              currentLines = currentChunk.length = 0;
          }
          for (let child of children)
              add(child);
          flush();
          return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
      }
  }
  Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
  function textLength(text) {
      let length = -1;
      for (let line of text)
          length += line.length + 1;
      return length;
  }
  function appendText(text, target, from = 0, to = 1e9) {
      for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
          let line = text[i], end = pos + line.length;
          if (end >= from) {
              if (end > to)
                  line = line.slice(0, to - pos);
              if (pos < from)
                  line = line.slice(from - pos);
              if (first) {
                  target[target.length - 1] += line;
                  first = false;
              }
              else
                  target.push(line);
          }
          pos = end + 1;
      }
      return target;
  }
  function sliceText(text, from, to) {
      return appendText(text, [""], from, to);
  }
  class RawTextCursor {
      constructor(text, dir = 1) {
          this.dir = dir;
          this.done = false;
          this.lineBreak = false;
          this.value = "";
          this.nodes = [text];
          this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
      }
      nextInner(skip, dir) {
          this.done = this.lineBreak = false;
          for (;;) {
              let last = this.nodes.length - 1;
              let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
              let size = top instanceof TextLeaf ? top.text.length : top.children.length;
              if (offset == (dir > 0 ? size : 0)) {
                  if (last == 0) {
                      this.done = true;
                      this.value = "";
                      return this;
                  }
                  if (dir > 0)
                      this.offsets[last - 1]++;
                  this.nodes.pop();
                  this.offsets.pop();
              }
              else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
                  this.offsets[last] += dir;
                  if (skip == 0) {
                      this.lineBreak = true;
                      this.value = "\n";
                      return this;
                  }
                  skip--;
              }
              else if (top instanceof TextLeaf) {
                  // Move to the next string
                  let next = top.text[offset + (dir < 0 ? -1 : 0)];
                  this.offsets[last] += dir;
                  if (next.length > Math.max(0, skip)) {
                      this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                      return this;
                  }
                  skip -= next.length;
              }
              else {
                  let next = top.children[offset + (dir < 0 ? -1 : 0)];
                  if (skip > next.length) {
                      skip -= next.length;
                      this.offsets[last] += dir;
                  }
                  else {
                      if (dir < 0)
                          this.offsets[last]--;
                      this.nodes.push(next);
                      this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
                  }
              }
          }
      }
      next(skip = 0) {
          if (skip < 0) {
              this.nextInner(-skip, (-this.dir));
              skip = this.value.length;
          }
          return this.nextInner(skip, this.dir);
      }
  }
  class PartialTextCursor {
      constructor(text, start, end) {
          this.value = "";
          this.done = false;
          this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
          this.pos = start > end ? text.length : 0;
          this.from = Math.min(start, end);
          this.to = Math.max(start, end);
      }
      nextInner(skip, dir) {
          if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
              this.value = "";
              this.done = true;
              return this;
          }
          skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
          let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
          if (skip > limit)
              skip = limit;
          limit -= skip;
          let { value } = this.cursor.next(skip);
          this.pos += (value.length + skip) * dir;
          this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
          this.done = !this.value;
          return this;
      }
      next(skip = 0) {
          if (skip < 0)
              skip = Math.max(skip, this.from - this.pos);
          else if (skip > 0)
              skip = Math.min(skip, this.to - this.pos);
          return this.nextInner(skip, this.cursor.dir);
      }
      get lineBreak() { return this.cursor.lineBreak && this.value != ""; }
  }
  class LineCursor {
      constructor(inner) {
          this.inner = inner;
          this.afterBreak = true;
          this.value = "";
          this.done = false;
      }
      next(skip = 0) {
          let { done, lineBreak, value } = this.inner.next(skip);
          if (done && this.afterBreak) {
              this.value = "";
              this.afterBreak = false;
          }
          else if (done) {
              this.done = true;
              this.value = "";
          }
          else if (lineBreak) {
              if (this.afterBreak) {
                  this.value = "";
              }
              else {
                  this.afterBreak = true;
                  this.next();
              }
          }
          else {
              this.value = value;
              this.afterBreak = false;
          }
          return this;
      }
      get lineBreak() { return false; }
  }
  if (typeof Symbol != "undefined") {
      Text.prototype[Symbol.iterator] = function () { return this.iter(); };
      RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =
          LineCursor.prototype[Symbol.iterator] = function () { return this; };
  }
  /**
  This type describes a line in the document. It is created
  on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
  */
  let Line$1 = class Line {
      /**
      @internal
      */
      constructor(
      /**
      The position of the start of the line.
      */
      from, 
      /**
      The position at the end of the line (_before_ the line break,
      or at the end of document for the last line).
      */
      to, 
      /**
      This line's line number (1-based).
      */
      number, 
      /**
      The line's content.
      */
      text) {
          this.from = from;
          this.to = to;
          this.number = number;
          this.text = text;
      }
      /**
      The length of the line (not including any line break after it).
      */
      get length() { return this.to - this.from; }
  };
  function clip(text, from, to) {
      from = Math.max(0, Math.min(text.length, from));
      return [from, Math.max(from, Math.min(text.length, to))];
  }

  /**
  Returns a next grapheme cluster break _after_ (not equal to)
  `pos`, if `forward` is true, or before otherwise. Returns `pos`
  itself if no further cluster break is available in the string.
  Moves across surrogate pairs, extending characters (when
  `includeExtending` is true), characters joined with zero-width
  joiners, and flag emoji.
  */
  function findClusterBreak(str, pos, forward = true, includeExtending = true) {
      return findClusterBreak$1(str, pos, forward, includeExtending);
  }
  function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
  function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
  /**
  Find the code point at the given position in a string (like the
  [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
  string method).
  */
  function codePointAt(str, pos) {
      let code0 = str.charCodeAt(pos);
      if (!surrogateHigh(code0) || pos + 1 == str.length)
          return code0;
      let code1 = str.charCodeAt(pos + 1);
      if (!surrogateLow(code1))
          return code0;
      return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
  }
  /**
  The amount of positions a character takes up in a JavaScript string.
  */
  function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

  const DefaultSplit = /\r\n?|\n/;
  /**
  Distinguishes different ways in which positions can be mapped.
  */
  var MapMode = /*@__PURE__*/(function (MapMode) {
      /**
      Map a position to a valid new position, even when its context
      was deleted.
      */
      MapMode[MapMode["Simple"] = 0] = "Simple";
      /**
      Return null if deletion happens across the position.
      */
      MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
      /**
      Return null if the character _before_ the position is deleted.
      */
      MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
      /**
      Return null if the character _after_ the position is deleted.
      */
      MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
  return MapMode})(MapMode || (MapMode = {}));
  /**
  A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
  that doesn't store the inserted text. As such, it can't be
  applied, but is cheaper to store and manipulate.
  */
  class ChangeDesc {
      // Sections are encoded as pairs of integers. The first is the
      // length in the current document, and the second is -1 for
      // unaffected sections, and the length of the replacement content
      // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
      // 0), and a replacement two positive numbers.
      /**
      @internal
      */
      constructor(
      /**
      @internal
      */
      sections) {
          this.sections = sections;
      }
      /**
      The length of the document before the change.
      */
      get length() {
          let result = 0;
          for (let i = 0; i < this.sections.length; i += 2)
              result += this.sections[i];
          return result;
      }
      /**
      The length of the document after the change.
      */
      get newLength() {
          let result = 0;
          for (let i = 0; i < this.sections.length; i += 2) {
              let ins = this.sections[i + 1];
              result += ins < 0 ? this.sections[i] : ins;
          }
          return result;
      }
      /**
      False when there are actual changes in this set.
      */
      get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
      /**
      Iterate over the unchanged parts left by these changes. `posA`
      provides the position of the range in the old document, `posB`
      the new position in the changed document.
      */
      iterGaps(f) {
          for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
              let len = this.sections[i++], ins = this.sections[i++];
              if (ins < 0) {
                  f(posA, posB, len);
                  posB += len;
              }
              else {
                  posB += ins;
              }
              posA += len;
          }
      }
      /**
      Iterate over the ranges changed by these changes. (See
      [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
      variant that also provides you with the inserted text.)
      `fromA`/`toA` provides the extent of the change in the starting
      document, `fromB`/`toB` the extent of the replacement in the
      changed document.
      
      When `individual` is true, adjacent changes (which are kept
      separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
      reported separately.
      */
      iterChangedRanges(f, individual = false) {
          iterChanges(this, f, individual);
      }
      /**
      Get a description of the inverted form of these changes.
      */
      get invertedDesc() {
          let sections = [];
          for (let i = 0; i < this.sections.length;) {
              let len = this.sections[i++], ins = this.sections[i++];
              if (ins < 0)
                  sections.push(len, ins);
              else
                  sections.push(ins, len);
          }
          return new ChangeDesc(sections);
      }
      /**
      Compute the combined effect of applying another set of changes
      after this one. The length of the document after this set should
      match the length before `other`.
      */
      composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
      /**
      Map this description, which should start with the same document
      as `other`, over another set of changes, so that it can be
      applied after it. When `before` is true, map as if the changes
      in `this` happened before the ones in `other`.
      */
      mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
      mapPos(pos, assoc = -1, mode = MapMode.Simple) {
          let posA = 0, posB = 0;
          for (let i = 0; i < this.sections.length;) {
              let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
              if (ins < 0) {
                  if (endA > pos)
                      return posB + (pos - posA);
                  posB += len;
              }
              else {
                  if (mode != MapMode.Simple && endA >= pos &&
                      (mode == MapMode.TrackDel && posA < pos && endA > pos ||
                          mode == MapMode.TrackBefore && posA < pos ||
                          mode == MapMode.TrackAfter && endA > pos))
                      return null;
                  if (endA > pos || endA == pos && assoc < 0 && !len)
                      return pos == posA || assoc < 0 ? posB : posB + ins;
                  posB += ins;
              }
              posA = endA;
          }
          if (pos > posA)
              throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
          return posB;
      }
      /**
      Check whether these changes touch a given range. When one of the
      changes entirely covers the range, the string `"cover"` is
      returned.
      */
      touchesRange(from, to = from) {
          for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
              let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
              if (ins >= 0 && pos <= to && end >= from)
                  return pos < from && end > to ? "cover" : true;
              pos = end;
          }
          return false;
      }
      /**
      @internal
      */
      toString() {
          let result = "";
          for (let i = 0; i < this.sections.length;) {
              let len = this.sections[i++], ins = this.sections[i++];
              result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
          }
          return result;
      }
      /**
      Serialize this change desc to a JSON-representable value.
      */
      toJSON() { return this.sections; }
      /**
      Create a change desc from its JSON representation (as produced
      by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
      */
      static fromJSON(json) {
          if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
              throw new RangeError("Invalid JSON representation of ChangeDesc");
          return new ChangeDesc(json);
      }
      /**
      @internal
      */
      static create(sections) { return new ChangeDesc(sections); }
  }
  /**
  A change set represents a group of modifications to a document. It
  stores the document length, and can only be applied to documents
  with exactly that length.
  */
  class ChangeSet extends ChangeDesc {
      constructor(sections, 
      /**
      @internal
      */
      inserted) {
          super(sections);
          this.inserted = inserted;
      }
      /**
      Apply the changes to a document, returning the modified
      document.
      */
      apply(doc) {
          if (this.length != doc.length)
              throw new RangeError("Applying change set to a document with the wrong length");
          iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
          return doc;
      }
      mapDesc(other, before = false) { return mapSet(this, other, before, true); }
      /**
      Given the document as it existed _before_ the changes, return a
      change set that represents the inverse of this set, which could
      be used to go from the document created by the changes back to
      the document as it existed before the changes.
      */
      invert(doc) {
          let sections = this.sections.slice(), inserted = [];
          for (let i = 0, pos = 0; i < sections.length; i += 2) {
              let len = sections[i], ins = sections[i + 1];
              if (ins >= 0) {
                  sections[i] = ins;
                  sections[i + 1] = len;
                  let index = i >> 1;
                  while (inserted.length < index)
                      inserted.push(Text.empty);
                  inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
              }
              pos += len;
          }
          return new ChangeSet(sections, inserted);
      }
      /**
      Combine two subsequent change sets into a single set. `other`
      must start in the document produced by `this`. If `this` goes
      `docA` → `docB` and `other` represents `docB` → `docC`, the
      returned value will represent the change `docA` → `docC`.
      */
      compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
      /**
      Given another change set starting in the same document, maps this
      change set over the other, producing a new change set that can be
      applied to the document produced by applying `other`. When
      `before` is `true`, order changes as if `this` comes before
      `other`, otherwise (the default) treat `other` as coming first.
      
      Given two changes `A` and `B`, `A.compose(B.map(A))` and
      `B.compose(A.map(B, true))` will produce the same document. This
      provides a basic form of [operational
      transformation](https://en.wikipedia.org/wiki/Operational_transformation),
      and can be used for collaborative editing.
      */
      map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
      /**
      Iterate over the changed ranges in the document, calling `f` for
      each, with the range in the original document (`fromA`-`toA`)
      and the range that replaces it in the new document
      (`fromB`-`toB`).
      
      When `individual` is true, adjacent changes are reported
      separately.
      */
      iterChanges(f, individual = false) {
          iterChanges(this, f, individual);
      }
      /**
      Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
      set.
      */
      get desc() { return ChangeDesc.create(this.sections); }
      /**
      @internal
      */
      filter(ranges) {
          let resultSections = [], resultInserted = [], filteredSections = [];
          let iter = new SectionIter(this);
          done: for (let i = 0, pos = 0;;) {
              let next = i == ranges.length ? 1e9 : ranges[i++];
              while (pos < next || pos == next && iter.len == 0) {
                  if (iter.done)
                      break done;
                  let len = Math.min(iter.len, next - pos);
                  addSection(filteredSections, len, -1);
                  let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                  addSection(resultSections, len, ins);
                  if (ins > 0)
                      addInsert(resultInserted, resultSections, iter.text);
                  iter.forward(len);
                  pos += len;
              }
              let end = ranges[i++];
              while (pos < end) {
                  if (iter.done)
                      break done;
                  let len = Math.min(iter.len, end - pos);
                  addSection(resultSections, len, -1);
                  addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                  iter.forward(len);
                  pos += len;
              }
          }
          return { changes: new ChangeSet(resultSections, resultInserted),
              filtered: ChangeDesc.create(filteredSections) };
      }
      /**
      Serialize this change set to a JSON-representable value.
      */
      toJSON() {
          let parts = [];
          for (let i = 0; i < this.sections.length; i += 2) {
              let len = this.sections[i], ins = this.sections[i + 1];
              if (ins < 0)
                  parts.push(len);
              else if (ins == 0)
                  parts.push([len]);
              else
                  parts.push([len].concat(this.inserted[i >> 1].toJSON()));
          }
          return parts;
      }
      /**
      Create a change set for the given changes, for a document of the
      given length, using `lineSep` as line separator.
      */
      static of(changes, length, lineSep) {
          let sections = [], inserted = [], pos = 0;
          let total = null;
          function flush(force = false) {
              if (!force && !sections.length)
                  return;
              if (pos < length)
                  addSection(sections, length - pos, -1);
              let set = new ChangeSet(sections, inserted);
              total = total ? total.compose(set.map(total)) : set;
              sections = [];
              inserted = [];
              pos = 0;
          }
          function process(spec) {
              if (Array.isArray(spec)) {
                  for (let sub of spec)
                      process(sub);
              }
              else if (spec instanceof ChangeSet) {
                  if (spec.length != length)
                      throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
                  flush();
                  total = total ? total.compose(spec.map(total)) : spec;
              }
              else {
                  let { from, to = from, insert } = spec;
                  if (from > to || from < 0 || to > length)
                      throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
                  let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
                  let insLen = insText.length;
                  if (from == to && insLen == 0)
                      return;
                  if (from < pos)
                      flush();
                  if (from > pos)
                      addSection(sections, from - pos, -1);
                  addSection(sections, to - from, insLen);
                  addInsert(inserted, sections, insText);
                  pos = to;
              }
          }
          process(changes);
          flush(!total);
          return total;
      }
      /**
      Create an empty changeset of the given length.
      */
      static empty(length) {
          return new ChangeSet(length ? [length, -1] : [], []);
      }
      /**
      Create a changeset from its JSON representation (as produced by
      [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
      */
      static fromJSON(json) {
          if (!Array.isArray(json))
              throw new RangeError("Invalid JSON representation of ChangeSet");
          let sections = [], inserted = [];
          for (let i = 0; i < json.length; i++) {
              let part = json[i];
              if (typeof part == "number") {
                  sections.push(part, -1);
              }
              else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
                  throw new RangeError("Invalid JSON representation of ChangeSet");
              }
              else if (part.length == 1) {
                  sections.push(part[0], 0);
              }
              else {
                  while (inserted.length < i)
                      inserted.push(Text.empty);
                  inserted[i] = Text.of(part.slice(1));
                  sections.push(part[0], inserted[i].length);
              }
          }
          return new ChangeSet(sections, inserted);
      }
      /**
      @internal
      */
      static createSet(sections, inserted) {
          return new ChangeSet(sections, inserted);
      }
  }
  function addSection(sections, len, ins, forceJoin = false) {
      if (len == 0 && ins <= 0)
          return;
      let last = sections.length - 2;
      if (last >= 0 && ins <= 0 && ins == sections[last + 1])
          sections[last] += len;
      else if (last >= 0 && len == 0 && sections[last] == 0)
          sections[last + 1] += ins;
      else if (forceJoin) {
          sections[last] += len;
          sections[last + 1] += ins;
      }
      else
          sections.push(len, ins);
  }
  function addInsert(values, sections, value) {
      if (value.length == 0)
          return;
      let index = (sections.length - 2) >> 1;
      if (index < values.length) {
          values[values.length - 1] = values[values.length - 1].append(value);
      }
      else {
          while (values.length < index)
              values.push(Text.empty);
          values.push(value);
      }
  }
  function iterChanges(desc, f, individual) {
      let inserted = desc.inserted;
      for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
          let len = desc.sections[i++], ins = desc.sections[i++];
          if (ins < 0) {
              posA += len;
              posB += len;
          }
          else {
              let endA = posA, endB = posB, text = Text.empty;
              for (;;) {
                  endA += len;
                  endB += ins;
                  if (ins && inserted)
                      text = text.append(inserted[(i - 2) >> 1]);
                  if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                      break;
                  len = desc.sections[i++];
                  ins = desc.sections[i++];
              }
              f(posA, endA, posB, endB, text);
              posA = endA;
              posB = endB;
          }
      }
  }
  function mapSet(setA, setB, before, mkSet = false) {
      // Produce a copy of setA that applies to the document after setB
      // has been applied (assuming both start at the same document).
      let sections = [], insert = mkSet ? [] : null;
      let a = new SectionIter(setA), b = new SectionIter(setB);
      // Iterate over both sets in parallel. inserted tracks, for changes
      // in A that have to be processed piece-by-piece, whether their
      // content has been inserted already, and refers to the section
      // index.
      for (let inserted = -1;;) {
          if (a.done && b.len || b.done && a.len) {
              throw new Error("Mismatched change set lengths");
          }
          else if (a.ins == -1 && b.ins == -1) {
              // Move across ranges skipped by both sets.
              let len = Math.min(a.len, b.len);
              addSection(sections, len, -1);
              a.forward(len);
              b.forward(len);
          }
          else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
              // If there's a change in B that comes before the next change in
              // A (ordered by start pos, then len, then before flag), skip
              // that (and process any changes in A it covers).
              let len = b.len;
              addSection(sections, b.ins, -1);
              while (len) {
                  let piece = Math.min(a.len, len);
                  if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
                      addSection(sections, 0, a.ins);
                      if (insert)
                          addInsert(insert, sections, a.text);
                      inserted = a.i;
                  }
                  a.forward(piece);
                  len -= piece;
              }
              b.next();
          }
          else if (a.ins >= 0) {
              // Process the part of a change in A up to the start of the next
              // non-deletion change in B (if overlapping).
              let len = 0, left = a.len;
              while (left) {
                  if (b.ins == -1) {
                      let piece = Math.min(left, b.len);
                      len += piece;
                      left -= piece;
                      b.forward(piece);
                  }
                  else if (b.ins == 0 && b.len < left) {
                      left -= b.len;
                      b.next();
                  }
                  else {
                      break;
                  }
              }
              addSection(sections, len, inserted < a.i ? a.ins : 0);
              if (insert && inserted < a.i)
                  addInsert(insert, sections, a.text);
              inserted = a.i;
              a.forward(a.len - left);
          }
          else if (a.done && b.done) {
              return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
          }
          else {
              throw new Error("Mismatched change set lengths");
          }
      }
  }
  function composeSets(setA, setB, mkSet = false) {
      let sections = [];
      let insert = mkSet ? [] : null;
      let a = new SectionIter(setA), b = new SectionIter(setB);
      for (let open = false;;) {
          if (a.done && b.done) {
              return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
          }
          else if (a.ins == 0) { // Deletion in A
              addSection(sections, a.len, 0, open);
              a.next();
          }
          else if (b.len == 0 && !b.done) { // Insertion in B
              addSection(sections, 0, b.ins, open);
              if (insert)
                  addInsert(insert, sections, b.text);
              b.next();
          }
          else if (a.done || b.done) {
              throw new Error("Mismatched change set lengths");
          }
          else {
              let len = Math.min(a.len2, b.len), sectionLen = sections.length;
              if (a.ins == -1) {
                  let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
                  addSection(sections, len, insB, open);
                  if (insert && insB)
                      addInsert(insert, sections, b.text);
              }
              else if (b.ins == -1) {
                  addSection(sections, a.off ? 0 : a.len, len, open);
                  if (insert)
                      addInsert(insert, sections, a.textBit(len));
              }
              else {
                  addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
                  if (insert && !b.off)
                      addInsert(insert, sections, b.text);
              }
              open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
              a.forward2(len);
              b.forward(len);
          }
      }
  }
  class SectionIter {
      constructor(set) {
          this.set = set;
          this.i = 0;
          this.next();
      }
      next() {
          let { sections } = this.set;
          if (this.i < sections.length) {
              this.len = sections[this.i++];
              this.ins = sections[this.i++];
          }
          else {
              this.len = 0;
              this.ins = -2;
          }
          this.off = 0;
      }
      get done() { return this.ins == -2; }
      get len2() { return this.ins < 0 ? this.len : this.ins; }
      get text() {
          let { inserted } = this.set, index = (this.i - 2) >> 1;
          return index >= inserted.length ? Text.empty : inserted[index];
      }
      textBit(len) {
          let { inserted } = this.set, index = (this.i - 2) >> 1;
          return index >= inserted.length && !len ? Text.empty
              : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
      }
      forward(len) {
          if (len == this.len)
              this.next();
          else {
              this.len -= len;
              this.off += len;
          }
      }
      forward2(len) {
          if (this.ins == -1)
              this.forward(len);
          else if (len == this.ins)
              this.next();
          else {
              this.ins -= len;
              this.off += len;
          }
      }
  }

  /**
  A single selection range. When
  [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
  is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
  multiple ranges. By default, selections hold exactly one range.
  */
  class SelectionRange {
      constructor(
      /**
      The lower boundary of the range.
      */
      from, 
      /**
      The upper boundary of the range.
      */
      to, flags) {
          this.from = from;
          this.to = to;
          this.flags = flags;
      }
      /**
      The anchor of the range—the side that doesn't move when you
      extend it.
      */
      get anchor() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.to : this.from; }
      /**
      The head of the range, which is moved when the range is
      [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
      */
      get head() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.from : this.to; }
      /**
      True when `anchor` and `head` are at the same position.
      */
      get empty() { return this.from == this.to; }
      /**
      If this is a cursor that is explicitly associated with the
      character on one of its sides, this returns the side. -1 means
      the character before its position, 1 the character after, and 0
      means no association.
      */
      get assoc() { return this.flags & 8 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 16 /* RangeFlag.AssocAfter */ ? 1 : 0; }
      /**
      The bidirectional text level associated with this cursor, if
      any.
      */
      get bidiLevel() {
          let level = this.flags & 7 /* RangeFlag.BidiLevelMask */;
          return level == 7 ? null : level;
      }
      /**
      The goal column (stored vertical offset) associated with a
      cursor. This is used to preserve the vertical position when
      [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
      lines of different length.
      */
      get goalColumn() {
          let value = this.flags >> 6 /* RangeFlag.GoalColumnOffset */;
          return value == 16777215 /* RangeFlag.NoGoalColumn */ ? undefined : value;
      }
      /**
      Map this range through a change, producing a valid range in the
      updated document.
      */
      map(change, assoc = -1) {
          let from, to;
          if (this.empty) {
              from = to = change.mapPos(this.from, assoc);
          }
          else {
              from = change.mapPos(this.from, 1);
              to = change.mapPos(this.to, -1);
          }
          return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
      }
      /**
      Extend this range to cover at least `from` to `to`.
      */
      extend(from, to = from) {
          if (from <= this.anchor && to >= this.anchor)
              return EditorSelection.range(from, to);
          let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
          return EditorSelection.range(this.anchor, head);
      }
      /**
      Compare this range to another range.
      */
      eq(other, includeAssoc = false) {
          return this.anchor == other.anchor && this.head == other.head &&
              (!includeAssoc || !this.empty || this.assoc == other.assoc);
      }
      /**
      Return a JSON-serializable object representing the range.
      */
      toJSON() { return { anchor: this.anchor, head: this.head }; }
      /**
      Convert a JSON representation of a range to a `SelectionRange`
      instance.
      */
      static fromJSON(json) {
          if (!json || typeof json.anchor != "number" || typeof json.head != "number")
              throw new RangeError("Invalid JSON representation for SelectionRange");
          return EditorSelection.range(json.anchor, json.head);
      }
      /**
      @internal
      */
      static create(from, to, flags) {
          return new SelectionRange(from, to, flags);
      }
  }
  /**
  An editor selection holds one or more selection ranges.
  */
  class EditorSelection {
      constructor(
      /**
      The ranges in the selection, sorted by position. Ranges cannot
      overlap (but they may touch, if they aren't empty).
      */
      ranges, 
      /**
      The index of the _main_ range in the selection (which is
      usually the range that was added last).
      */
      mainIndex) {
          this.ranges = ranges;
          this.mainIndex = mainIndex;
      }
      /**
      Map a selection through a change. Used to adjust the selection
      position for changes.
      */
      map(change, assoc = -1) {
          if (change.empty)
              return this;
          return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
      }
      /**
      Compare this selection to another selection. By default, ranges
      are compared only by position. When `includeAssoc` is true,
      cursor ranges must also have the same
      [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
      */
      eq(other, includeAssoc = false) {
          if (this.ranges.length != other.ranges.length ||
              this.mainIndex != other.mainIndex)
              return false;
          for (let i = 0; i < this.ranges.length; i++)
              if (!this.ranges[i].eq(other.ranges[i], includeAssoc))
                  return false;
          return true;
      }
      /**
      Get the primary selection range. Usually, you should make sure
      your code applies to _all_ ranges, by using methods like
      [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
      */
      get main() { return this.ranges[this.mainIndex]; }
      /**
      Make sure the selection only has one range. Returns a selection
      holding only the main range from this selection.
      */
      asSingle() {
          return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
      }
      /**
      Extend this selection with an extra range.
      */
      addRange(range, main = true) {
          return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
      }
      /**
      Replace a given range with another range, and then normalize the
      selection to merge and sort ranges if necessary.
      */
      replaceRange(range, which = this.mainIndex) {
          let ranges = this.ranges.slice();
          ranges[which] = range;
          return EditorSelection.create(ranges, this.mainIndex);
      }
      /**
      Convert this selection to an object that can be serialized to
      JSON.
      */
      toJSON() {
          return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
      }
      /**
      Create a selection from a JSON representation.
      */
      static fromJSON(json) {
          if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
              throw new RangeError("Invalid JSON representation for EditorSelection");
          return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
      }
      /**
      Create a selection holding a single range.
      */
      static single(anchor, head = anchor) {
          return new EditorSelection([EditorSelection.range(anchor, head)], 0);
      }
      /**
      Sort and merge the given set of ranges, creating a valid
      selection.
      */
      static create(ranges, mainIndex = 0) {
          if (ranges.length == 0)
              throw new RangeError("A selection needs at least one range");
          for (let pos = 0, i = 0; i < ranges.length; i++) {
              let range = ranges[i];
              if (range.empty ? range.from <= pos : range.from < pos)
                  return EditorSelection.normalized(ranges.slice(), mainIndex);
              pos = range.to;
          }
          return new EditorSelection(ranges, mainIndex);
      }
      /**
      Create a cursor selection range at the given position. You can
      safely ignore the optional arguments in most situations.
      */
      static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
          return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 /* RangeFlag.AssocBefore */ : 16 /* RangeFlag.AssocAfter */) |
              (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) |
              ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */));
      }
      /**
      Create a selection range.
      */
      static range(anchor, head, goalColumn, bidiLevel) {
          let flags = ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */) |
              (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
          return head < anchor ? SelectionRange.create(head, anchor, 32 /* RangeFlag.Inverted */ | 16 /* RangeFlag.AssocAfter */ | flags)
              : SelectionRange.create(anchor, head, (head > anchor ? 8 /* RangeFlag.AssocBefore */ : 0) | flags);
      }
      /**
      @internal
      */
      static normalized(ranges, mainIndex = 0) {
          let main = ranges[mainIndex];
          ranges.sort((a, b) => a.from - b.from);
          mainIndex = ranges.indexOf(main);
          for (let i = 1; i < ranges.length; i++) {
              let range = ranges[i], prev = ranges[i - 1];
              if (range.empty ? range.from <= prev.to : range.from < prev.to) {
                  let from = prev.from, to = Math.max(range.to, prev.to);
                  if (i <= mainIndex)
                      mainIndex--;
                  ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
              }
          }
          return new EditorSelection(ranges, mainIndex);
      }
  }
  function checkSelection(selection, docLength) {
      for (let range of selection.ranges)
          if (range.to > docLength)
              throw new RangeError("Selection points outside of document");
  }

  let nextID = 0;
  /**
  A facet is a labeled value that is associated with an editor
  state. It takes inputs from any number of extensions, and combines
  those into a single output value.

  Examples of uses of facets are the [tab
  size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
  attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
  listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).

  Note that `Facet` instances can be used anywhere where
  [`FacetReader`](https://codemirror.net/6/docs/ref/#state.FacetReader) is expected.
  */
  class Facet {
      constructor(
      /**
      @internal
      */
      combine, 
      /**
      @internal
      */
      compareInput, 
      /**
      @internal
      */
      compare, isStatic, enables) {
          this.combine = combine;
          this.compareInput = compareInput;
          this.compare = compare;
          this.isStatic = isStatic;
          /**
          @internal
          */
          this.id = nextID++;
          this.default = combine([]);
          this.extensions = typeof enables == "function" ? enables(this) : enables;
      }
      /**
      Returns a facet reader for this facet, which can be used to
      [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
      */
      get reader() { return this; }
      /**
      Define a new facet.
      */
      static define(config = {}) {
          return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray$1 : (a, b) => a === b), !!config.static, config.enables);
      }
      /**
      Returns an extension that adds the given value to this facet.
      */
      of(value) {
          return new FacetProvider([], this, 0 /* Provider.Static */, value);
      }
      /**
      Create an extension that computes a value for the facet from a
      state. You must take care to declare the parts of the state that
      this value depends on, since your function is only called again
      for a new state when one of those parts changed.
      
      In cases where your value depends only on a single field, you'll
      want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
      */
      compute(deps, get) {
          if (this.isStatic)
              throw new Error("Can't compute a static facet");
          return new FacetProvider(deps, this, 1 /* Provider.Single */, get);
      }
      /**
      Create an extension that computes zero or more values for this
      facet from a state.
      */
      computeN(deps, get) {
          if (this.isStatic)
              throw new Error("Can't compute a static facet");
          return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);
      }
      from(field, get) {
          if (!get)
              get = x => x;
          return this.compute([field], state => get(state.field(field)));
      }
  }
  function sameArray$1(a, b) {
      return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
  }
  class FacetProvider {
      constructor(dependencies, facet, type, value) {
          this.dependencies = dependencies;
          this.facet = facet;
          this.type = type;
          this.value = value;
          this.id = nextID++;
      }
      dynamicSlot(addresses) {
          var _a;
          let getter = this.value;
          let compare = this.facet.compareInput;
          let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Provider.Multi */;
          let depDoc = false, depSel = false, depAddrs = [];
          for (let dep of this.dependencies) {
              if (dep == "doc")
                  depDoc = true;
              else if (dep == "selection")
                  depSel = true;
              else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
                  depAddrs.push(addresses[dep.id]);
          }
          return {
              create(state) {
                  state.values[idx] = getter(state);
                  return 1 /* SlotStatus.Changed */;
              },
              update(state, tr) {
                  if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {
                      let newVal = getter(state);
                      if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
                          state.values[idx] = newVal;
                          return 1 /* SlotStatus.Changed */;
                      }
                  }
                  return 0;
              },
              reconfigure: (state, oldState) => {
                  let newVal, oldAddr = oldState.config.address[id];
                  if (oldAddr != null) {
                      let oldVal = getAddr(oldState, oldAddr);
                      if (this.dependencies.every(dep => {
                          return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :
                              dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
                      }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {
                          state.values[idx] = oldVal;
                          return 0;
                      }
                  }
                  else {
                      newVal = getter(state);
                  }
                  state.values[idx] = newVal;
                  return 1 /* SlotStatus.Changed */;
              }
          };
      }
  }
  function compareArray(a, b, compare) {
      if (a.length != b.length)
          return false;
      for (let i = 0; i < a.length; i++)
          if (!compare(a[i], b[i]))
              return false;
      return true;
  }
  function ensureAll(state, addrs) {
      let changed = false;
      for (let addr of addrs)
          if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */)
              changed = true;
      return changed;
  }
  function dynamicFacetSlot(addresses, facet, providers) {
      let providerAddrs = providers.map(p => addresses[p.id]);
      let providerTypes = providers.map(p => p.type);
      let dynamic = providerAddrs.filter(p => !(p & 1));
      let idx = addresses[facet.id] >> 1;
      function get(state) {
          let values = [];
          for (let i = 0; i < providerAddrs.length; i++) {
              let value = getAddr(state, providerAddrs[i]);
              if (providerTypes[i] == 2 /* Provider.Multi */)
                  for (let val of value)
                      values.push(val);
              else
                  values.push(value);
          }
          return facet.combine(values);
      }
      return {
          create(state) {
              for (let addr of providerAddrs)
                  ensureAddr(state, addr);
              state.values[idx] = get(state);
              return 1 /* SlotStatus.Changed */;
          },
          update(state, tr) {
              if (!ensureAll(state, dynamic))
                  return 0;
              let value = get(state);
              if (facet.compare(value, state.values[idx]))
                  return 0;
              state.values[idx] = value;
              return 1 /* SlotStatus.Changed */;
          },
          reconfigure(state, oldState) {
              let depChanged = ensureAll(state, providerAddrs);
              let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
              if (oldProviders && !depChanged && sameArray$1(providers, oldProviders)) {
                  state.values[idx] = oldValue;
                  return 0;
              }
              let value = get(state);
              if (facet.compare(value, oldValue)) {
                  state.values[idx] = oldValue;
                  return 0;
              }
              state.values[idx] = value;
              return 1 /* SlotStatus.Changed */;
          }
      };
  }
  const initField = /*@__PURE__*/Facet.define({ static: true });
  /**
  Fields can store additional information in an editor state, and
  keep it in sync with the rest of the state.
  */
  class StateField {
      constructor(
      /**
      @internal
      */
      id, createF, updateF, compareF, 
      /**
      @internal
      */
      spec) {
          this.id = id;
          this.createF = createF;
          this.updateF = updateF;
          this.compareF = compareF;
          this.spec = spec;
          /**
          @internal
          */
          this.provides = undefined;
      }
      /**
      Define a state field.
      */
      static define(config) {
          let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
          if (config.provide)
              field.provides = config.provide(field);
          return field;
      }
      create(state) {
          let init = state.facet(initField).find(i => i.field == this);
          return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
      }
      /**
      @internal
      */
      slot(addresses) {
          let idx = addresses[this.id] >> 1;
          return {
              create: (state) => {
                  state.values[idx] = this.create(state);
                  return 1 /* SlotStatus.Changed */;
              },
              update: (state, tr) => {
                  let oldVal = state.values[idx];
                  let value = this.updateF(oldVal, tr);
                  if (this.compareF(oldVal, value))
                      return 0;
                  state.values[idx] = value;
                  return 1 /* SlotStatus.Changed */;
              },
              reconfigure: (state, oldState) => {
                  let init = state.facet(initField), oldInit = oldState.facet(initField), reInit;
                  if ((reInit = init.find(i => i.field == this)) && reInit != oldInit.find(i => i.field == this)) {
                      state.values[idx] = reInit.create(state);
                      return 1 /* SlotStatus.Changed */;
                  }
                  if (oldState.config.address[this.id] != null) {
                      state.values[idx] = oldState.field(this);
                      return 0;
                  }
                  state.values[idx] = this.create(state);
                  return 1 /* SlotStatus.Changed */;
              }
          };
      }
      /**
      Returns an extension that enables this field and overrides the
      way it is initialized. Can be useful when you need to provide a
      non-default starting value for the field.
      */
      init(create) {
          return [this, initField.of({ field: this, create })];
      }
      /**
      State field instances can be used as
      [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
      given state.
      */
      get extension() { return this; }
  }
  const Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
  function prec(value) {
      return (ext) => new PrecExtension(ext, value);
  }
  /**
  By default extensions are registered in the order they are found
  in the flattened form of nested array that was provided.
  Individual extension values can be assigned a precedence to
  override this. Extensions that do not have a precedence set get
  the precedence of the nearest parent with a precedence, or
  [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
  final ordering of extensions is determined by first sorting by
  precedence and then by order within each precedence.
  */
  const Prec = {
      /**
      The highest precedence level, for extensions that should end up
      near the start of the precedence ordering.
      */
      highest: /*@__PURE__*/prec(Prec_.highest),
      /**
      A higher-than-default precedence, for extensions that should
      come before those with default precedence.
      */
      high: /*@__PURE__*/prec(Prec_.high),
      /**
      The default precedence, which is also used for extensions
      without an explicit precedence.
      */
      default: /*@__PURE__*/prec(Prec_.default),
      /**
      A lower-than-default precedence.
      */
      low: /*@__PURE__*/prec(Prec_.low),
      /**
      The lowest precedence level. Meant for things that should end up
      near the end of the extension order.
      */
      lowest: /*@__PURE__*/prec(Prec_.lowest)
  };
  class PrecExtension {
      constructor(inner, prec) {
          this.inner = inner;
          this.prec = prec;
      }
  }
  /**
  Extension compartments can be used to make a configuration
  dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
  configuration in a compartment, you can later
  [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
  transaction.
  */
  class Compartment {
      /**
      Create an instance of this compartment to add to your [state
      configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
      */
      of(ext) { return new CompartmentInstance(this, ext); }
      /**
      Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
      reconfigures this compartment.
      */
      reconfigure(content) {
          return Compartment.reconfigure.of({ compartment: this, extension: content });
      }
      /**
      Get the current content of the compartment in the state, or
      `undefined` if it isn't present.
      */
      get(state) {
          return state.config.compartments.get(this);
      }
  }
  class CompartmentInstance {
      constructor(compartment, inner) {
          this.compartment = compartment;
          this.inner = inner;
      }
  }
  class Configuration {
      constructor(base, compartments, dynamicSlots, address, staticValues, facets) {
          this.base = base;
          this.compartments = compartments;
          this.dynamicSlots = dynamicSlots;
          this.address = address;
          this.staticValues = staticValues;
          this.facets = facets;
          this.statusTemplate = [];
          while (this.statusTemplate.length < dynamicSlots.length)
              this.statusTemplate.push(0 /* SlotStatus.Unresolved */);
      }
      staticFacet(facet) {
          let addr = this.address[facet.id];
          return addr == null ? facet.default : this.staticValues[addr >> 1];
      }
      static resolve(base, compartments, oldState) {
          let fields = [];
          let facets = Object.create(null);
          let newCompartments = new Map();
          for (let ext of flatten(base, compartments, newCompartments)) {
              if (ext instanceof StateField)
                  fields.push(ext);
              else
                  (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
          }
          let address = Object.create(null);
          let staticValues = [];
          let dynamicSlots = [];
          for (let field of fields) {
              address[field.id] = dynamicSlots.length << 1;
              dynamicSlots.push(a => field.slot(a));
          }
          let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
          for (let id in facets) {
              let providers = facets[id], facet = providers[0].facet;
              let oldProviders = oldFacets && oldFacets[id] || [];
              if (providers.every(p => p.type == 0 /* Provider.Static */)) {
                  address[facet.id] = (staticValues.length << 1) | 1;
                  if (sameArray$1(oldProviders, providers)) {
                      staticValues.push(oldState.facet(facet));
                  }
                  else {
                      let value = facet.combine(providers.map(p => p.value));
                      staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
                  }
              }
              else {
                  for (let p of providers) {
                      if (p.type == 0 /* Provider.Static */) {
                          address[p.id] = (staticValues.length << 1) | 1;
                          staticValues.push(p.value);
                      }
                      else {
                          address[p.id] = dynamicSlots.length << 1;
                          dynamicSlots.push(a => p.dynamicSlot(a));
                      }
                  }
                  address[facet.id] = dynamicSlots.length << 1;
                  dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
              }
          }
          let dynamic = dynamicSlots.map(f => f(address));
          return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
      }
  }
  function flatten(extension, compartments, newCompartments) {
      let result = [[], [], [], [], []];
      let seen = new Map();
      function inner(ext, prec) {
          let known = seen.get(ext);
          if (known != null) {
              if (known <= prec)
                  return;
              let found = result[known].indexOf(ext);
              if (found > -1)
                  result[known].splice(found, 1);
              if (ext instanceof CompartmentInstance)
                  newCompartments.delete(ext.compartment);
          }
          seen.set(ext, prec);
          if (Array.isArray(ext)) {
              for (let e of ext)
                  inner(e, prec);
          }
          else if (ext instanceof CompartmentInstance) {
              if (newCompartments.has(ext.compartment))
                  throw new RangeError(`Duplicate use of compartment in extensions`);
              let content = compartments.get(ext.compartment) || ext.inner;
              newCompartments.set(ext.compartment, content);
              inner(content, prec);
          }
          else if (ext instanceof PrecExtension) {
              inner(ext.inner, ext.prec);
          }
          else if (ext instanceof StateField) {
              result[prec].push(ext);
              if (ext.provides)
                  inner(ext.provides, prec);
          }
          else if (ext instanceof FacetProvider) {
              result[prec].push(ext);
              if (ext.facet.extensions)
                  inner(ext.facet.extensions, Prec_.default);
          }
          else {
              let content = ext.extension;
              if (!content)
                  throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
              inner(content, prec);
          }
      }
      inner(extension, Prec_.default);
      return result.reduce((a, b) => a.concat(b));
  }
  function ensureAddr(state, addr) {
      if (addr & 1)
          return 2 /* SlotStatus.Computed */;
      let idx = addr >> 1;
      let status = state.status[idx];
      if (status == 4 /* SlotStatus.Computing */)
          throw new Error("Cyclic dependency between fields and/or facets");
      if (status & 2 /* SlotStatus.Computed */)
          return status;
      state.status[idx] = 4 /* SlotStatus.Computing */;
      let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
      return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;
  }
  function getAddr(state, addr) {
      return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
  }

  const languageData = /*@__PURE__*/Facet.define();
  const allowMultipleSelections = /*@__PURE__*/Facet.define({
      combine: values => values.some(v => v),
      static: true
  });
  const lineSeparator = /*@__PURE__*/Facet.define({
      combine: values => values.length ? values[0] : undefined,
      static: true
  });
  const changeFilter = /*@__PURE__*/Facet.define();
  const transactionFilter = /*@__PURE__*/Facet.define();
  const transactionExtender = /*@__PURE__*/Facet.define();
  const readOnly = /*@__PURE__*/Facet.define({
      combine: values => values.length ? values[0] : false
  });

  /**
  Annotations are tagged values that are used to add metadata to
  transactions in an extensible way. They should be used to model
  things that effect the entire transaction (such as its [time
  stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
  [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
  _alongside_ the other changes made by the transaction, [state
  effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
  */
  class Annotation {
      /**
      @internal
      */
      constructor(
      /**
      The annotation type.
      */
      type, 
      /**
      The value of this annotation.
      */
      value) {
          this.type = type;
          this.value = value;
      }
      /**
      Define a new type of annotation.
      */
      static define() { return new AnnotationType(); }
  }
  /**
  Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
  */
  class AnnotationType {
      /**
      Create an instance of this annotation.
      */
      of(value) { return new Annotation(this, value); }
  }
  /**
  Representation of a type of state effect. Defined with
  [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
  */
  class StateEffectType {
      /**
      @internal
      */
      constructor(
      // The `any` types in these function types are there to work
      // around TypeScript issue #37631, where the type guard on
      // `StateEffect.is` mysteriously stops working when these properly
      // have type `Value`.
      /**
      @internal
      */
      map) {
          this.map = map;
      }
      /**
      Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
      type.
      */
      of(value) { return new StateEffect(this, value); }
  }
  /**
  State effects can be used to represent additional effects
  associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
  are often useful to model changes to custom [state
  fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
  document or selection changes.
  */
  class StateEffect {
      /**
      @internal
      */
      constructor(
      /**
      @internal
      */
      type, 
      /**
      The value of this effect.
      */
      value) {
          this.type = type;
          this.value = value;
      }
      /**
      Map this effect through a position mapping. Will return
      `undefined` when that ends up deleting the effect.
      */
      map(mapping) {
          let mapped = this.type.map(this.value, mapping);
          return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
      }
      /**
      Tells you whether this effect object is of a given
      [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
      */
      is(type) { return this.type == type; }
      /**
      Define a new effect type. The type parameter indicates the type
      of values that his effect holds. It should be a type that
      doesn't include `undefined`, since that is used in
      [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
      removed.
      */
      static define(spec = {}) {
          return new StateEffectType(spec.map || (v => v));
      }
      /**
      Map an array of effects through a change set.
      */
      static mapEffects(effects, mapping) {
          if (!effects.length)
              return effects;
          let result = [];
          for (let effect of effects) {
              let mapped = effect.map(mapping);
              if (mapped)
                  result.push(mapped);
          }
          return result;
      }
  }
  /**
  This effect can be used to reconfigure the root extensions of
  the editor. Doing this will discard any extensions
  [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
  the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
  compartments.
  */
  StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
  /**
  Append extensions to the top-level configuration of the editor.
  */
  StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
  /**
  Changes to the editor state are grouped into transactions.
  Typically, a user action creates a single transaction, which may
  contain any number of document changes, may change the selection,
  or have other effects. Create a transaction by calling
  [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
  dispatch one by calling
  [`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
  */
  class Transaction {
      constructor(
      /**
      The state from which the transaction starts.
      */
      startState, 
      /**
      The document changes made by this transaction.
      */
      changes, 
      /**
      The selection set by this transaction, or undefined if it
      doesn't explicitly set a selection.
      */
      selection, 
      /**
      The effects added to the transaction.
      */
      effects, 
      /**
      @internal
      */
      annotations, 
      /**
      Whether the selection should be scrolled into view after this
      transaction is dispatched.
      */
      scrollIntoView) {
          this.startState = startState;
          this.changes = changes;
          this.selection = selection;
          this.effects = effects;
          this.annotations = annotations;
          this.scrollIntoView = scrollIntoView;
          /**
          @internal
          */
          this._doc = null;
          /**
          @internal
          */
          this._state = null;
          if (selection)
              checkSelection(selection, changes.newLength);
          if (!annotations.some((a) => a.type == Transaction.time))
              this.annotations = annotations.concat(Transaction.time.of(Date.now()));
      }
      /**
      @internal
      */
      static create(startState, changes, selection, effects, annotations, scrollIntoView) {
          return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
      }
      /**
      The new document produced by the transaction. Contrary to
      [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
      force the entire new state to be computed right away, so it is
      recommended that [transaction
      filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
      when they need to look at the new document.
      */
      get newDoc() {
          return this._doc || (this._doc = this.changes.apply(this.startState.doc));
      }
      /**
      The new selection produced by the transaction. If
      [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
      this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
      current selection through the changes made by the transaction.
      */
      get newSelection() {
          return this.selection || this.startState.selection.map(this.changes);
      }
      /**
      The new state created by the transaction. Computed on demand
      (but retained for subsequent access), so it is recommended not to
      access it in [transaction
      filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
      */
      get state() {
          if (!this._state)
              this.startState.applyTransaction(this);
          return this._state;
      }
      /**
      Get the value of the given annotation type, if any.
      */
      annotation(type) {
          for (let ann of this.annotations)
              if (ann.type == type)
                  return ann.value;
          return undefined;
      }
      /**
      Indicates whether the transaction changed the document.
      */
      get docChanged() { return !this.changes.empty; }
      /**
      Indicates whether this transaction reconfigures the state
      (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
      with a top-level configuration
      [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
      */
      get reconfigured() { return this.startState.config != this.state.config; }
      /**
      Returns true if the transaction has a [user
      event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
      or more specific than `event`. For example, if the transaction
      has `"select.pointer"` as user event, `"select"` and
      `"select.pointer"` will match it.
      */
      isUserEvent(event) {
          let e = this.annotation(Transaction.userEvent);
          return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
      }
  }
  /**
  Annotation used to store transaction timestamps. Automatically
  added to every transaction, holding `Date.now()`.
  */
  Transaction.time = /*@__PURE__*/Annotation.define();
  /**
  Annotation used to associate a transaction with a user interface
  event. Holds a string identifying the event, using a
  dot-separated format to support attaching more specific
  information. The events used by the core libraries are:

   - `"input"` when content is entered
     - `"input.type"` for typed input
       - `"input.type.compose"` for composition
     - `"input.paste"` for pasted input
     - `"input.drop"` when adding content with drag-and-drop
     - `"input.complete"` when autocompleting
   - `"delete"` when the user deletes content
     - `"delete.selection"` when deleting the selection
     - `"delete.forward"` when deleting forward from the selection
     - `"delete.backward"` when deleting backward from the selection
     - `"delete.cut"` when cutting to the clipboard
   - `"move"` when content is moved
     - `"move.drop"` when content is moved within the editor through drag-and-drop
   - `"select"` when explicitly changing the selection
     - `"select.pointer"` when selecting with a mouse or other pointing device
   - `"undo"` and `"redo"` for history actions

  Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
  whether the annotation matches a given event.
  */
  Transaction.userEvent = /*@__PURE__*/Annotation.define();
  /**
  Annotation indicating whether a transaction should be added to
  the undo history or not.
  */
  Transaction.addToHistory = /*@__PURE__*/Annotation.define();
  /**
  Annotation indicating (when present and true) that a transaction
  represents a change made by some other actor, not the user. This
  is used, for example, to tag other people's changes in
  collaborative editing.
  */
  Transaction.remote = /*@__PURE__*/Annotation.define();
  function joinRanges(a, b) {
      let result = [];
      for (let iA = 0, iB = 0;;) {
          let from, to;
          if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
              from = a[iA++];
              to = a[iA++];
          }
          else if (iB < b.length) {
              from = b[iB++];
              to = b[iB++];
          }
          else
              return result;
          if (!result.length || result[result.length - 1] < from)
              result.push(from, to);
          else if (result[result.length - 1] < to)
              result[result.length - 1] = to;
      }
  }
  function mergeTransaction(a, b, sequential) {
      var _a;
      let mapForA, mapForB, changes;
      if (sequential) {
          mapForA = b.changes;
          mapForB = ChangeSet.empty(b.changes.length);
          changes = a.changes.compose(b.changes);
      }
      else {
          mapForA = b.changes.map(a.changes);
          mapForB = a.changes.mapDesc(b.changes, true);
          changes = a.changes.compose(mapForA);
      }
      return {
          changes,
          selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
          effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
          annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
          scrollIntoView: a.scrollIntoView || b.scrollIntoView
      };
  }
  function resolveTransactionInner(state, spec, docSize) {
      let sel = spec.selection, annotations = asArray$1(spec.annotations);
      if (spec.userEvent)
          annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
      return {
          changes: spec.changes instanceof ChangeSet ? spec.changes
              : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
          selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
          effects: asArray$1(spec.effects),
          annotations,
          scrollIntoView: !!spec.scrollIntoView
      };
  }
  function resolveTransaction(state, specs, filter) {
      let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
      if (specs.length && specs[0].filter === false)
          filter = false;
      for (let i = 1; i < specs.length; i++) {
          if (specs[i].filter === false)
              filter = false;
          let seq = !!specs[i].sequential;
          s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
      }
      let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
      return extendTransaction(filter ? filterTransaction(tr) : tr);
  }
  // Finish a transaction by applying filters if necessary.
  function filterTransaction(tr) {
      let state = tr.startState;
      // Change filters
      let result = true;
      for (let filter of state.facet(changeFilter)) {
          let value = filter(tr);
          if (value === false) {
              result = false;
              break;
          }
          if (Array.isArray(value))
              result = result === true ? value : joinRanges(result, value);
      }
      if (result !== true) {
          let changes, back;
          if (result === false) {
              back = tr.changes.invertedDesc;
              changes = ChangeSet.empty(state.doc.length);
          }
          else {
              let filtered = tr.changes.filter(result);
              changes = filtered.changes;
              back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
          }
          tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
      }
      // Transaction filters
      let filters = state.facet(transactionFilter);
      for (let i = filters.length - 1; i >= 0; i--) {
          let filtered = filters[i](tr);
          if (filtered instanceof Transaction)
              tr = filtered;
          else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
              tr = filtered[0];
          else
              tr = resolveTransaction(state, asArray$1(filtered), false);
      }
      return tr;
  }
  function extendTransaction(tr) {
      let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
      for (let i = extenders.length - 1; i >= 0; i--) {
          let extension = extenders[i](tr);
          if (extension && Object.keys(extension).length)
              spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
      }
      return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
  }
  const none$2 = [];
  function asArray$1(value) {
      return value == null ? none$2 : Array.isArray(value) ? value : [value];
  }

  /**
  The categories produced by a [character
  categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
  do things like selecting by word.
  */
  var CharCategory = /*@__PURE__*/(function (CharCategory) {
      /**
      Word characters.
      */
      CharCategory[CharCategory["Word"] = 0] = "Word";
      /**
      Whitespace.
      */
      CharCategory[CharCategory["Space"] = 1] = "Space";
      /**
      Anything else.
      */
      CharCategory[CharCategory["Other"] = 2] = "Other";
  return CharCategory})(CharCategory || (CharCategory = {}));
  const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
  let wordChar;
  try {
      wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
  }
  catch (_) { }
  function hasWordChar(str) {
      if (wordChar)
          return wordChar.test(str);
      for (let i = 0; i < str.length; i++) {
          let ch = str[i];
          if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
              return true;
      }
      return false;
  }
  function makeCategorizer(wordChars) {
      return (char) => {
          if (!/\S/.test(char))
              return CharCategory.Space;
          if (hasWordChar(char))
              return CharCategory.Word;
          for (let i = 0; i < wordChars.length; i++)
              if (char.indexOf(wordChars[i]) > -1)
                  return CharCategory.Word;
          return CharCategory.Other;
      };
  }

  /**
  The editor state class is a persistent (immutable) data structure.
  To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
  [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
  instance, without modifying the original object.

  As such, _never_ mutate properties of a state directly. That'll
  just break things.
  */
  class EditorState {
      constructor(
      /**
      @internal
      */
      config, 
      /**
      The current document.
      */
      doc, 
      /**
      The current selection.
      */
      selection, 
      /**
      @internal
      */
      values, computeSlot, tr) {
          this.config = config;
          this.doc = doc;
          this.selection = selection;
          this.values = values;
          this.status = config.statusTemplate.slice();
          this.computeSlot = computeSlot;
          // Fill in the computed state immediately, so that further queries
          // for it made during the update return this state
          if (tr)
              tr._state = this;
          for (let i = 0; i < this.config.dynamicSlots.length; i++)
              ensureAddr(this, i << 1);
          this.computeSlot = null;
      }
      field(field, require = true) {
          let addr = this.config.address[field.id];
          if (addr == null) {
              if (require)
                  throw new RangeError("Field is not present in this state");
              return undefined;
          }
          ensureAddr(this, addr);
          return getAddr(this, addr);
      }
      /**
      Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
      state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
      can be passed. Unless
      [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
      [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
      are assumed to start in the _current_ document (not the document
      produced by previous specs), and its
      [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
      [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
      to the document created by its _own_ changes. The resulting
      transaction contains the combined effect of all the different
      specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
      specs take precedence over earlier ones.
      */
      update(...specs) {
          return resolveTransaction(this, specs, true);
      }
      /**
      @internal
      */
      applyTransaction(tr) {
          let conf = this.config, { base, compartments } = conf;
          for (let effect of tr.effects) {
              if (effect.is(Compartment.reconfigure)) {
                  if (conf) {
                      compartments = new Map;
                      conf.compartments.forEach((val, key) => compartments.set(key, val));
                      conf = null;
                  }
                  compartments.set(effect.value.compartment, effect.value.extension);
              }
              else if (effect.is(StateEffect.reconfigure)) {
                  conf = null;
                  base = effect.value;
              }
              else if (effect.is(StateEffect.appendConfig)) {
                  conf = null;
                  base = asArray$1(base).concat(effect.value);
              }
          }
          let startValues;
          if (!conf) {
              conf = Configuration.resolve(base, compartments, this);
              let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
              startValues = intermediateState.values;
          }
          else {
              startValues = tr.startState.values.slice();
          }
          let selection = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();
          new EditorState(conf, tr.newDoc, selection, startValues, (state, slot) => slot.update(state, tr), tr);
      }
      /**
      Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
      replaces every selection range with the given content.
      */
      replaceSelection(text) {
          if (typeof text == "string")
              text = this.toText(text);
          return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
              range: EditorSelection.cursor(range.from + text.length) }));
      }
      /**
      Create a set of changes and a new selection by running the given
      function for each range in the active selection. The function
      can return an optional set of changes (in the coordinate space
      of the start document), plus an updated range (in the coordinate
      space of the document produced by the call's own changes). This
      method will merge all the changes and ranges into a single
      changeset and selection, and return it as a [transaction
      spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
      [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
      */
      changeByRange(f) {
          let sel = this.selection;
          let result1 = f(sel.ranges[0]);
          let changes = this.changes(result1.changes), ranges = [result1.range];
          let effects = asArray$1(result1.effects);
          for (let i = 1; i < sel.ranges.length; i++) {
              let result = f(sel.ranges[i]);
              let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
              for (let j = 0; j < i; j++)
                  ranges[j] = ranges[j].map(newMapped);
              let mapBy = changes.mapDesc(newChanges, true);
              ranges.push(result.range.map(mapBy));
              changes = changes.compose(newMapped);
              effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray$1(result.effects), mapBy));
          }
          return {
              changes,
              selection: EditorSelection.create(ranges, sel.mainIndex),
              effects
          };
      }
      /**
      Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
      description, taking the state's document length and line
      separator into account.
      */
      changes(spec = []) {
          if (spec instanceof ChangeSet)
              return spec;
          return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
      }
      /**
      Using the state's [line
      separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
      [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
      */
      toText(string) {
          return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
      }
      /**
      Return the given range of the document as a string.
      */
      sliceDoc(from = 0, to = this.doc.length) {
          return this.doc.sliceString(from, to, this.lineBreak);
      }
      /**
      Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
      */
      facet(facet) {
          let addr = this.config.address[facet.id];
          if (addr == null)
              return facet.default;
          ensureAddr(this, addr);
          return getAddr(this, addr);
      }
      /**
      Convert this state to a JSON-serializable object. When custom
      fields should be serialized, you can pass them in as an object
      mapping property names (in the resulting object, which should
      not use `doc` or `selection`) to fields.
      */
      toJSON(fields) {
          let result = {
              doc: this.sliceDoc(),
              selection: this.selection.toJSON()
          };
          if (fields)
              for (let prop in fields) {
                  let value = fields[prop];
                  if (value instanceof StateField && this.config.address[value.id] != null)
                      result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
              }
          return result;
      }
      /**
      Deserialize a state from its JSON representation. When custom
      fields should be deserialized, pass the same object you passed
      to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
      third argument.
      */
      static fromJSON(json, config = {}, fields) {
          if (!json || typeof json.doc != "string")
              throw new RangeError("Invalid JSON representation for EditorState");
          let fieldInit = [];
          if (fields)
              for (let prop in fields) {
                  if (Object.prototype.hasOwnProperty.call(json, prop)) {
                      let field = fields[prop], value = json[prop];
                      fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
                  }
              }
          return EditorState.create({
              doc: json.doc,
              selection: EditorSelection.fromJSON(json.selection),
              extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
          });
      }
      /**
      Create a new state. You'll usually only need this when
      initializing an editor—updated states are created by applying
      transactions.
      */
      static create(config = {}) {
          let configuration = Configuration.resolve(config.extensions || [], new Map);
          let doc = config.doc instanceof Text ? config.doc
              : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
          let selection = !config.selection ? EditorSelection.single(0)
              : config.selection instanceof EditorSelection ? config.selection
                  : EditorSelection.single(config.selection.anchor, config.selection.head);
          checkSelection(selection, doc.length);
          if (!configuration.staticFacet(allowMultipleSelections))
              selection = selection.asSingle();
          return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
      }
      /**
      The size (in columns) of a tab in the document, determined by
      the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
      */
      get tabSize() { return this.facet(EditorState.tabSize); }
      /**
      Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
      string for this state.
      */
      get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
      /**
      Returns true when the editor is
      [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
      */
      get readOnly() { return this.facet(readOnly); }
      /**
      Look up a translation for the given phrase (via the
      [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
      original string if no translation is found.
      
      If additional arguments are passed, they will be inserted in
      place of markers like `$1` (for the first value) and `$2`, etc.
      A single `$` is equivalent to `$1`, and `$$` will produce a
      literal dollar sign.
      */
      phrase(phrase, ...insert) {
          for (let map of this.facet(EditorState.phrases))
              if (Object.prototype.hasOwnProperty.call(map, phrase)) {
                  phrase = map[phrase];
                  break;
              }
          if (insert.length)
              phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
                  if (i == "$")
                      return "$";
                  let n = +(i || 1);
                  return !n || n > insert.length ? m : insert[n - 1];
              });
          return phrase;
      }
      /**
      Find the values for a given language data field, provided by the
      the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
      
      Examples of language data fields are...
      
      - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
        comment syntax.
      - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
        for providing language-specific completion sources.
      - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
        characters that should be considered part of words in this
        language.
      - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
        bracket closing behavior.
      */
      languageDataAt(name, pos, side = -1) {
          let values = [];
          for (let provider of this.facet(languageData)) {
              for (let result of provider(this, pos, side)) {
                  if (Object.prototype.hasOwnProperty.call(result, name))
                      values.push(result[name]);
              }
          }
          return values;
      }
      /**
      Return a function that can categorize strings (expected to
      represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
      into one of:
      
       - Word (contains an alphanumeric character or a character
         explicitly listed in the local language's `"wordChars"`
         language data, which should be a string)
       - Space (contains only whitespace)
       - Other (anything else)
      */
      charCategorizer(at) {
          return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
      }
      /**
      Find the word at the given position, meaning the range
      containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
      around it. If no word characters are adjacent to the position,
      this returns null.
      */
      wordAt(pos) {
          let { text, from, length } = this.doc.lineAt(pos);
          let cat = this.charCategorizer(pos);
          let start = pos - from, end = pos - from;
          while (start > 0) {
              let prev = findClusterBreak(text, start, false);
              if (cat(text.slice(prev, start)) != CharCategory.Word)
                  break;
              start = prev;
          }
          while (end < length) {
              let next = findClusterBreak(text, end);
              if (cat(text.slice(end, next)) != CharCategory.Word)
                  break;
              end = next;
          }
          return start == end ? null : EditorSelection.range(start + from, end + from);
      }
  }
  /**
  A facet that, when enabled, causes the editor to allow multiple
  ranges to be selected. Be careful though, because by default the
  editor relies on the native DOM selection, which cannot handle
  multiple selections. An extension like
  [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
  secondary selections visible to the user.
  */
  EditorState.allowMultipleSelections = allowMultipleSelections;
  /**
  Configures the tab size to use in this state. The first
  (highest-precedence) value of the facet is used. If no value is
  given, this defaults to 4.
  */
  EditorState.tabSize = /*@__PURE__*/Facet.define({
      combine: values => values.length ? values[0] : 4
  });
  /**
  The line separator to use. By default, any of `"\n"`, `"\r\n"`
  and `"\r"` is treated as a separator when splitting lines, and
  lines are joined with `"\n"`.

  When you configure a value here, only that precise separator
  will be used, allowing you to round-trip documents through the
  editor without normalizing line separators.
  */
  EditorState.lineSeparator = lineSeparator;
  /**
  This facet controls the value of the
  [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
  consulted by commands and extensions that implement editing
  functionality to determine whether they should apply. It
  defaults to false, but when its highest-precedence value is
  `true`, such functionality disables itself.

  Not to be confused with
  [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
  controls whether the editor's DOM is set to be editable (and
  thus focusable).
  */
  EditorState.readOnly = readOnly;
  /**
  Registers translation phrases. The
  [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
  all objects registered with this facet to find translations for
  its argument.
  */
  EditorState.phrases = /*@__PURE__*/Facet.define({
      compare(a, b) {
          let kA = Object.keys(a), kB = Object.keys(b);
          return kA.length == kB.length && kA.every(k => a[k] == b[k]);
      }
  });
  /**
  A facet used to register [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
  */
  EditorState.languageData = languageData;
  /**
  Facet used to register change filters, which are called for each
  transaction (unless explicitly
  [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
  part of the transaction's changes.

  Such a function can return `true` to indicate that it doesn't
  want to do anything, `false` to completely stop the changes in
  the transaction, or a set of ranges in which changes should be
  suppressed. Such ranges are represented as an array of numbers,
  with each pair of two numbers indicating the start and end of a
  range. So for example `[10, 20, 100, 110]` suppresses changes
  between 10 and 20, and between 100 and 110.
  */
  EditorState.changeFilter = changeFilter;
  /**
  Facet used to register a hook that gets a chance to update or
  replace transaction specs before they are applied. This will
  only be applied for transactions that don't have
  [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
  can either return a single transaction spec (possibly the input
  transaction), or an array of specs (which will be combined in
  the same way as the arguments to
  [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

  When possible, it is recommended to avoid accessing
  [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
  since it will force creation of a state that will then be
  discarded again, if the transaction is actually filtered.

  (This functionality should be used with care. Indiscriminately
  modifying transaction is likely to break something or degrade
  the user experience.)
  */
  EditorState.transactionFilter = transactionFilter;
  /**
  This is a more limited form of
  [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
  which can only add
  [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
  of filter runs even if the transaction has disabled regular
  [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
  for effects that don't need to touch the changes or selection,
  but do want to process every transaction.

  Extenders run _after_ filters, when both are present.
  */
  EditorState.transactionExtender = transactionExtender;
  Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

  /**
  Utility function for combining behaviors to fill in a config
  object from an array of provided configs. `defaults` should hold
  default values for all optional fields in `Config`.

  The function will, by default, error
  when a field gets two values that aren't `===`-equal, but you can
  provide combine functions per field to do something else.
  */
  function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
  combine = {}) {
      let result = {};
      for (let config of configs)
          for (let key of Object.keys(config)) {
              let value = config[key], current = result[key];
              if (current === undefined)
                  result[key] = value;
              else if (current === value || value === undefined) ; // No conflict
              else if (Object.hasOwnProperty.call(combine, key))
                  result[key] = combine[key](current, value);
              else
                  throw new Error("Config merge conflict for field " + key);
          }
      for (let key in defaults)
          if (result[key] === undefined)
              result[key] = defaults[key];
      return result;
  }

  /**
  Each range is associated with a value, which must inherit from
  this class.
  */
  class RangeValue {
      /**
      Compare this value with another value. Used when comparing
      rangesets. The default implementation compares by identity.
      Unless you are only creating a fixed number of unique instances
      of your value type, it is a good idea to implement this
      properly.
      */
      eq(other) { return this == other; }
      /**
      Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
      */
      range(from, to = from) { return Range.create(from, to, this); }
  }
  RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
  RangeValue.prototype.point = false;
  RangeValue.prototype.mapMode = MapMode.TrackDel;
  /**
  A range associates a value with a range of positions.
  */
  class Range {
      constructor(
      /**
      The range's start position.
      */
      from, 
      /**
      Its end position.
      */
      to, 
      /**
      The value associated with this range.
      */
      value) {
          this.from = from;
          this.to = to;
          this.value = value;
      }
      /**
      @internal
      */
      static create(from, to, value) {
          return new Range(from, to, value);
      }
  }
  function cmpRange(a, b) {
      return a.from - b.from || a.value.startSide - b.value.startSide;
  }
  class Chunk {
      constructor(from, to, value, 
      // Chunks are marked with the largest point that occurs
      // in them (or -1 for no points), so that scans that are
      // only interested in points (such as the
      // heightmap-related logic) can skip range-only chunks.
      maxPoint) {
          this.from = from;
          this.to = to;
          this.value = value;
          this.maxPoint = maxPoint;
      }
      get length() { return this.to[this.to.length - 1]; }
      // Find the index of the given position and side. Use the ranges'
      // `from` pos when `end == false`, `to` when `end == true`.
      findIndex(pos, side, end, startAt = 0) {
          let arr = end ? this.to : this.from;
          for (let lo = startAt, hi = arr.length;;) {
              if (lo == hi)
                  return lo;
              let mid = (lo + hi) >> 1;
              let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
              if (mid == lo)
                  return diff >= 0 ? lo : hi;
              if (diff >= 0)
                  hi = mid;
              else
                  lo = mid + 1;
          }
      }
      between(offset, from, to, f) {
          for (let i = this.findIndex(from, -1e9 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, i); i < e; i++)
              if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
                  return false;
      }
      map(offset, changes) {
          let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
          for (let i = 0; i < this.value.length; i++) {
              let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
              if (curFrom == curTo) {
                  let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
                  if (mapped == null)
                      continue;
                  newFrom = newTo = mapped;
                  if (val.startSide != val.endSide) {
                      newTo = changes.mapPos(curFrom, val.endSide);
                      if (newTo < newFrom)
                          continue;
                  }
              }
              else {
                  newFrom = changes.mapPos(curFrom, val.startSide);
                  newTo = changes.mapPos(curTo, val.endSide);
                  if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                      continue;
              }
              if ((newTo - newFrom || val.endSide - val.startSide) < 0)
                  continue;
              if (newPos < 0)
                  newPos = newFrom;
              if (val.point)
                  maxPoint = Math.max(maxPoint, newTo - newFrom);
              value.push(val);
              from.push(newFrom - newPos);
              to.push(newTo - newPos);
          }
          return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
      }
  }
  /**
  A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
  way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
  [update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
  structure.
  */
  class RangeSet {
      constructor(
      /**
      @internal
      */
      chunkPos, 
      /**
      @internal
      */
      chunk, 
      /**
      @internal
      */
      nextLayer, 
      /**
      @internal
      */
      maxPoint) {
          this.chunkPos = chunkPos;
          this.chunk = chunk;
          this.nextLayer = nextLayer;
          this.maxPoint = maxPoint;
      }
      /**
      @internal
      */
      static create(chunkPos, chunk, nextLayer, maxPoint) {
          return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
      }
      /**
      @internal
      */
      get length() {
          let last = this.chunk.length - 1;
          return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
      }
      /**
      The number of ranges in the set.
      */
      get size() {
          if (this.isEmpty)
              return 0;
          let size = this.nextLayer.size;
          for (let chunk of this.chunk)
              size += chunk.value.length;
          return size;
      }
      /**
      @internal
      */
      chunkEnd(index) {
          return this.chunkPos[index] + this.chunk[index].length;
      }
      /**
      Update the range set, optionally adding new ranges or filtering
      out existing ones.
      
      (Note: The type parameter is just there as a kludge to work
      around TypeScript variance issues that prevented `RangeSet<X>`
      from being a subtype of `RangeSet<Y>` when `X` is a subtype of
      `Y`.)
      */
      update(updateSpec) {
          let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
          let filter = updateSpec.filter;
          if (add.length == 0 && !filter)
              return this;
          if (sort)
              add = add.slice().sort(cmpRange);
          if (this.isEmpty)
              return add.length ? RangeSet.of(add) : this;
          let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
          let builder = new RangeSetBuilder();
          while (cur.value || i < add.length) {
              if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
                  let range = add[i++];
                  if (!builder.addInner(range.from, range.to, range.value))
                      spill.push(range);
              }
              else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
                  (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
                  (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
                  builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
                  cur.nextChunk();
              }
              else {
                  if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                      if (!builder.addInner(cur.from, cur.to, cur.value))
                          spill.push(Range.create(cur.from, cur.to, cur.value));
                  }
                  cur.next();
              }
          }
          return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty
              : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
      }
      /**
      Map this range set through a set of changes, return the new set.
      */
      map(changes) {
          if (changes.empty || this.isEmpty)
              return this;
          let chunks = [], chunkPos = [], maxPoint = -1;
          for (let i = 0; i < this.chunk.length; i++) {
              let start = this.chunkPos[i], chunk = this.chunk[i];
              let touch = changes.touchesRange(start, start + chunk.length);
              if (touch === false) {
                  maxPoint = Math.max(maxPoint, chunk.maxPoint);
                  chunks.push(chunk);
                  chunkPos.push(changes.mapPos(start));
              }
              else if (touch === true) {
                  let { mapped, pos } = chunk.map(start, changes);
                  if (mapped) {
                      maxPoint = Math.max(maxPoint, mapped.maxPoint);
                      chunks.push(mapped);
                      chunkPos.push(pos);
                  }
              }
          }
          let next = this.nextLayer.map(changes);
          return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
      }
      /**
      Iterate over the ranges that touch the region `from` to `to`,
      calling `f` for each. There is no guarantee that the ranges will
      be reported in any specific order. When the callback returns
      `false`, iteration stops.
      */
      between(from, to, f) {
          if (this.isEmpty)
              return;
          for (let i = 0; i < this.chunk.length; i++) {
              let start = this.chunkPos[i], chunk = this.chunk[i];
              if (to >= start && from <= start + chunk.length &&
                  chunk.between(start, from - start, to - start, f) === false)
                  return;
          }
          this.nextLayer.between(from, to, f);
      }
      /**
      Iterate over the ranges in this set, in order, including all
      ranges that end at or after `from`.
      */
      iter(from = 0) {
          return HeapCursor.from([this]).goto(from);
      }
      /**
      @internal
      */
      get isEmpty() { return this.nextLayer == this; }
      /**
      Iterate over the ranges in a collection of sets, in order,
      starting from `from`.
      */
      static iter(sets, from = 0) {
          return HeapCursor.from(sets).goto(from);
      }
      /**
      Iterate over two groups of sets, calling methods on `comparator`
      to notify it of possible differences.
      */
      static compare(oldSets, newSets, 
      /**
      This indicates how the underlying data changed between these
      ranges, and is needed to synchronize the iteration.
      */
      textDiff, comparator, 
      /**
      Can be used to ignore all non-point ranges, and points below
      the given size. When -1, all ranges are compared.
      */
      minPointSize = -1) {
          let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
          let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
          let sharedChunks = findSharedChunks(a, b, textDiff);
          let sideA = new SpanCursor(a, sharedChunks, minPointSize);
          let sideB = new SpanCursor(b, sharedChunks, minPointSize);
          textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
          if (textDiff.empty && textDiff.length == 0)
              compare(sideA, 0, sideB, 0, 0, comparator);
      }
      /**
      Compare the contents of two groups of range sets, returning true
      if they are equivalent in the given range.
      */
      static eq(oldSets, newSets, from = 0, to) {
          if (to == null)
              to = 1000000000 /* C.Far */ - 1;
          let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
          let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
          if (a.length != b.length)
              return false;
          if (!a.length)
              return true;
          let sharedChunks = findSharedChunks(a, b);
          let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
          for (;;) {
              if (sideA.to != sideB.to ||
                  !sameValues(sideA.active, sideB.active) ||
                  sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
                  return false;
              if (sideA.to > to)
                  return true;
              sideA.next();
              sideB.next();
          }
      }
      /**
      Iterate over a group of range sets at the same time, notifying
      the iterator about the ranges covering every given piece of
      content. Returns the open count (see
      [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
      of the iteration.
      */
      static spans(sets, from, to, iterator, 
      /**
      When given and greater than -1, only points of at least this
      size are taken into account.
      */
      minPointSize = -1) {
          let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
          let openRanges = cursor.openStart;
          for (;;) {
              let curTo = Math.min(cursor.to, to);
              if (cursor.point) {
                  let active = cursor.activeForPoint(cursor.to);
                  let openCount = cursor.pointFrom < from ? active.length + 1
                      : cursor.point.startSide < 0 ? active.length
                          : Math.min(active.length, openRanges);
                  iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
                  openRanges = Math.min(cursor.openEnd(curTo), active.length);
              }
              else if (curTo > pos) {
                  iterator.span(pos, curTo, cursor.active, openRanges);
                  openRanges = cursor.openEnd(curTo);
              }
              if (cursor.to > to)
                  return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
              pos = cursor.to;
              cursor.next();
          }
      }
      /**
      Create a range set for the given range or array of ranges. By
      default, this expects the ranges to be _sorted_ (by start
      position and, if two start at the same position,
      `value.startSide`). You can pass `true` as second argument to
      cause the method to sort them.
      */
      static of(ranges, sort = false) {
          let build = new RangeSetBuilder();
          for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)
              build.add(range.from, range.to, range.value);
          return build.finish();
      }
      /**
      Join an array of range sets into a single set.
      */
      static join(sets) {
          if (!sets.length)
              return RangeSet.empty;
          let result = sets[sets.length - 1];
          for (let i = sets.length - 2; i >= 0; i--) {
              for (let layer = sets[i]; layer != RangeSet.empty; layer = layer.nextLayer)
                  result = new RangeSet(layer.chunkPos, layer.chunk, result, Math.max(layer.maxPoint, result.maxPoint));
          }
          return result;
      }
  }
  /**
  The empty set of ranges.
  */
  RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
  function lazySort(ranges) {
      if (ranges.length > 1)
          for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
              let cur = ranges[i];
              if (cmpRange(prev, cur) > 0)
                  return ranges.slice().sort(cmpRange);
              prev = cur;
          }
      return ranges;
  }
  RangeSet.empty.nextLayer = RangeSet.empty;
  /**
  A range set builder is a data structure that helps build up a
  [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
  an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
  */
  class RangeSetBuilder {
      finishChunk(newArrays) {
          this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
          this.chunkPos.push(this.chunkStart);
          this.chunkStart = -1;
          this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
          this.maxPoint = -1;
          if (newArrays) {
              this.from = [];
              this.to = [];
              this.value = [];
          }
      }
      /**
      Create an empty builder.
      */
      constructor() {
          this.chunks = [];
          this.chunkPos = [];
          this.chunkStart = -1;
          this.last = null;
          this.lastFrom = -1e9 /* C.Far */;
          this.lastTo = -1e9 /* C.Far */;
          this.from = [];
          this.to = [];
          this.value = [];
          this.maxPoint = -1;
          this.setMaxPoint = -1;
          this.nextLayer = null;
      }
      /**
      Add a range. Ranges should be added in sorted (by `from` and
      `value.startSide`) order.
      */
      add(from, to, value) {
          if (!this.addInner(from, to, value))
              (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
      }
      /**
      @internal
      */
      addInner(from, to, value) {
          let diff = from - this.lastTo || value.startSide - this.last.endSide;
          if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
              throw new Error("Ranges must be added sorted by `from` position and `startSide`");
          if (diff < 0)
              return false;
          if (this.from.length == 250 /* C.ChunkSize */)
              this.finishChunk(true);
          if (this.chunkStart < 0)
              this.chunkStart = from;
          this.from.push(from - this.chunkStart);
          this.to.push(to - this.chunkStart);
          this.last = value;
          this.lastFrom = from;
          this.lastTo = to;
          this.value.push(value);
          if (value.point)
              this.maxPoint = Math.max(this.maxPoint, to - from);
          return true;
      }
      /**
      @internal
      */
      addChunk(from, chunk) {
          if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
              return false;
          if (this.from.length)
              this.finishChunk(true);
          this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
          this.chunks.push(chunk);
          this.chunkPos.push(from);
          let last = chunk.value.length - 1;
          this.last = chunk.value[last];
          this.lastFrom = chunk.from[last] + from;
          this.lastTo = chunk.to[last] + from;
          return true;
      }
      /**
      Finish the range set. Returns the new set. The builder can't be
      used anymore after this has been called.
      */
      finish() { return this.finishInner(RangeSet.empty); }
      /**
      @internal
      */
      finishInner(next) {
          if (this.from.length)
              this.finishChunk(false);
          if (this.chunks.length == 0)
              return next;
          let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
          this.from = null; // Make sure further `add` calls produce errors
          return result;
      }
  }
  function findSharedChunks(a, b, textDiff) {
      let inA = new Map();
      for (let set of a)
          for (let i = 0; i < set.chunk.length; i++)
              if (set.chunk[i].maxPoint <= 0)
                  inA.set(set.chunk[i], set.chunkPos[i]);
      let shared = new Set();
      for (let set of b)
          for (let i = 0; i < set.chunk.length; i++) {
              let known = inA.get(set.chunk[i]);
              if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&
                  !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
                  shared.add(set.chunk[i]);
          }
      return shared;
  }
  class LayerCursor {
      constructor(layer, skip, minPoint, rank = 0) {
          this.layer = layer;
          this.skip = skip;
          this.minPoint = minPoint;
          this.rank = rank;
      }
      get startSide() { return this.value ? this.value.startSide : 0; }
      get endSide() { return this.value ? this.value.endSide : 0; }
      goto(pos, side = -1e9 /* C.Far */) {
          this.chunkIndex = this.rangeIndex = 0;
          this.gotoInner(pos, side, false);
          return this;
      }
      gotoInner(pos, side, forward) {
          while (this.chunkIndex < this.layer.chunk.length) {
              let next = this.layer.chunk[this.chunkIndex];
              if (!(this.skip && this.skip.has(next) ||
                  this.layer.chunkEnd(this.chunkIndex) < pos ||
                  next.maxPoint < this.minPoint))
                  break;
              this.chunkIndex++;
              forward = false;
          }
          if (this.chunkIndex < this.layer.chunk.length) {
              let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
              if (!forward || this.rangeIndex < rangeIndex)
                  this.setRangeIndex(rangeIndex);
          }
          this.next();
      }
      forward(pos, side) {
          if ((this.to - pos || this.endSide - side) < 0)
              this.gotoInner(pos, side, true);
      }
      next() {
          for (;;) {
              if (this.chunkIndex == this.layer.chunk.length) {
                  this.from = this.to = 1000000000 /* C.Far */;
                  this.value = null;
                  break;
              }
              else {
                  let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
                  let from = chunkPos + chunk.from[this.rangeIndex];
                  this.from = from;
                  this.to = chunkPos + chunk.to[this.rangeIndex];
                  this.value = chunk.value[this.rangeIndex];
                  this.setRangeIndex(this.rangeIndex + 1);
                  if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                      break;
              }
          }
      }
      setRangeIndex(index) {
          if (index == this.layer.chunk[this.chunkIndex].value.length) {
              this.chunkIndex++;
              if (this.skip) {
                  while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                      this.chunkIndex++;
              }
              this.rangeIndex = 0;
          }
          else {
              this.rangeIndex = index;
          }
      }
      nextChunk() {
          this.chunkIndex++;
          this.rangeIndex = 0;
          this.next();
      }
      compare(other) {
          return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||
              this.to - other.to || this.endSide - other.endSide;
      }
  }
  class HeapCursor {
      constructor(heap) {
          this.heap = heap;
      }
      static from(sets, skip = null, minPoint = -1) {
          let heap = [];
          for (let i = 0; i < sets.length; i++) {
              for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
                  if (cur.maxPoint >= minPoint)
                      heap.push(new LayerCursor(cur, skip, minPoint, i));
              }
          }
          return heap.length == 1 ? heap[0] : new HeapCursor(heap);
      }
      get startSide() { return this.value ? this.value.startSide : 0; }
      goto(pos, side = -1e9 /* C.Far */) {
          for (let cur of this.heap)
              cur.goto(pos, side);
          for (let i = this.heap.length >> 1; i >= 0; i--)
              heapBubble(this.heap, i);
          this.next();
          return this;
      }
      forward(pos, side) {
          for (let cur of this.heap)
              cur.forward(pos, side);
          for (let i = this.heap.length >> 1; i >= 0; i--)
              heapBubble(this.heap, i);
          if ((this.to - pos || this.value.endSide - side) < 0)
              this.next();
      }
      next() {
          if (this.heap.length == 0) {
              this.from = this.to = 1000000000 /* C.Far */;
              this.value = null;
              this.rank = -1;
          }
          else {
              let top = this.heap[0];
              this.from = top.from;
              this.to = top.to;
              this.value = top.value;
              this.rank = top.rank;
              if (top.value)
                  top.next();
              heapBubble(this.heap, 0);
          }
      }
  }
  function heapBubble(heap, index) {
      for (let cur = heap[index];;) {
          let childIndex = (index << 1) + 1;
          if (childIndex >= heap.length)
              break;
          let child = heap[childIndex];
          if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
              child = heap[childIndex + 1];
              childIndex++;
          }
          if (cur.compare(child) < 0)
              break;
          heap[childIndex] = cur;
          heap[index] = child;
          index = childIndex;
      }
  }
  class SpanCursor {
      constructor(sets, skip, minPoint) {
          this.minPoint = minPoint;
          this.active = [];
          this.activeTo = [];
          this.activeRank = [];
          this.minActive = -1;
          // A currently active point range, if any
          this.point = null;
          this.pointFrom = 0;
          this.pointRank = 0;
          this.to = -1e9 /* C.Far */;
          this.endSide = 0;
          // The amount of open active ranges at the start of the iterator.
          // Not including points.
          this.openStart = -1;
          this.cursor = HeapCursor.from(sets, skip, minPoint);
      }
      goto(pos, side = -1e9 /* C.Far */) {
          this.cursor.goto(pos, side);
          this.active.length = this.activeTo.length = this.activeRank.length = 0;
          this.minActive = -1;
          this.to = pos;
          this.endSide = side;
          this.openStart = -1;
          this.next();
          return this;
      }
      forward(pos, side) {
          while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
              this.removeActive(this.minActive);
          this.cursor.forward(pos, side);
      }
      removeActive(index) {
          remove(this.active, index);
          remove(this.activeTo, index);
          remove(this.activeRank, index);
          this.minActive = findMinIndex(this.active, this.activeTo);
      }
      addActive(trackOpen) {
          let i = 0, { value, to, rank } = this.cursor;
          // Organize active marks by rank first, then by size
          while (i < this.activeRank.length && (rank - this.activeRank[i] || to - this.activeTo[i]) > 0)
              i++;
          insert(this.active, i, value);
          insert(this.activeTo, i, to);
          insert(this.activeRank, i, rank);
          if (trackOpen)
              insert(trackOpen, i, this.cursor.from);
          this.minActive = findMinIndex(this.active, this.activeTo);
      }
      // After calling this, if `this.point` != null, the next range is a
      // point. Otherwise, it's a regular range, covered by `this.active`.
      next() {
          let from = this.to, wasPoint = this.point;
          this.point = null;
          let trackOpen = this.openStart < 0 ? [] : null;
          for (;;) {
              let a = this.minActive;
              if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
                  if (this.activeTo[a] > from) {
                      this.to = this.activeTo[a];
                      this.endSide = this.active[a].endSide;
                      break;
                  }
                  this.removeActive(a);
                  if (trackOpen)
                      remove(trackOpen, a);
              }
              else if (!this.cursor.value) {
                  this.to = this.endSide = 1000000000 /* C.Far */;
                  break;
              }
              else if (this.cursor.from > from) {
                  this.to = this.cursor.from;
                  this.endSide = this.cursor.startSide;
                  break;
              }
              else {
                  let nextVal = this.cursor.value;
                  if (!nextVal.point) { // Opening a range
                      this.addActive(trackOpen);
                      this.cursor.next();
                  }
                  else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
                      // Ignore any non-empty points that end precisely at the end of the prev point
                      this.cursor.next();
                  }
                  else { // New point
                      this.point = nextVal;
                      this.pointFrom = this.cursor.from;
                      this.pointRank = this.cursor.rank;
                      this.to = this.cursor.to;
                      this.endSide = nextVal.endSide;
                      this.cursor.next();
                      this.forward(this.to, this.endSide);
                      break;
                  }
              }
          }
          if (trackOpen) {
              this.openStart = 0;
              for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)
                  this.openStart++;
          }
      }
      activeForPoint(to) {
          if (!this.active.length)
              return this.active;
          let active = [];
          for (let i = this.active.length - 1; i >= 0; i--) {
              if (this.activeRank[i] < this.pointRank)
                  break;
              if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
                  active.push(this.active[i]);
          }
          return active.reverse();
      }
      openEnd(to) {
          let open = 0;
          for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
              open++;
          return open;
      }
  }
  function compare(a, startA, b, startB, length, comparator) {
      a.goto(startA);
      b.goto(startB);
      let endB = startB + length;
      let pos = startB, dPos = startB - startA;
      for (;;) {
          let dEnd = (a.to + dPos) - b.to, diff = dEnd || a.endSide - b.endSide;
          let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
          if (a.point || b.point) {
              if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&
                  sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to))))
                  comparator.comparePoint(pos, clipEnd, a.point, b.point);
          }
          else {
              if (clipEnd > pos && !sameValues(a.active, b.active))
                  comparator.compareRange(pos, clipEnd, a.active, b.active);
          }
          if (end > endB)
              break;
          if ((dEnd || a.openEnd != b.openEnd) && comparator.boundChange)
              comparator.boundChange(end);
          pos = end;
          if (diff <= 0)
              a.next();
          if (diff >= 0)
              b.next();
      }
  }
  function sameValues(a, b) {
      if (a.length != b.length)
          return false;
      for (let i = 0; i < a.length; i++)
          if (a[i] != b[i] && !a[i].eq(b[i]))
              return false;
      return true;
  }
  function remove(array, index) {
      for (let i = index, e = array.length - 1; i < e; i++)
          array[i] = array[i + 1];
      array.pop();
  }
  function insert(array, index, value) {
      for (let i = array.length - 1; i >= index; i--)
          array[i + 1] = array[i];
      array[index] = value;
  }
  function findMinIndex(value, array) {
      let found = -1, foundPos = 1000000000 /* C.Far */;
      for (let i = 0; i < array.length; i++)
          if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
              found = i;
              foundPos = array[i];
          }
      return found;
  }

  /**
  Count the column position at the given offset into the string,
  taking extending characters and tab size into account.
  */
  function countColumn(string, tabSize, to = string.length) {
      let n = 0;
      for (let i = 0; i < to && i < string.length;) {
          if (string.charCodeAt(i) == 9) {
              n += tabSize - (n % tabSize);
              i++;
          }
          else {
              n++;
              i = findClusterBreak(string, i);
          }
      }
      return n;
  }
  /**
  Find the offset that corresponds to the given column position in a
  string, taking extending characters and tab size into account. By
  default, the string length is returned when it is too short to
  reach the column. Pass `strict` true to make it return -1 in that
  situation.
  */
  function findColumn(string, col, tabSize, strict) {
      for (let i = 0, n = 0;;) {
          if (n >= col)
              return i;
          if (i == string.length)
              break;
          n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
          i = findClusterBreak(string, i);
      }
      return string.length;
  }

  const C = "\u037c";
  const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
  const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
  const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

  // :: - Style modules encapsulate a set of CSS rules defined from
  // JavaScript. Their definitions are only available in a given DOM
  // root after it has been _mounted_ there with `StyleModule.mount`.
  //
  // Style modules should be created once and stored somewhere, as
  // opposed to re-creating them every time you need them. The amount of
  // CSS rules generated for a given DOM root is bounded by the amount
  // of style modules that were used. So to avoid leaking rules, don't
  // create these dynamically, but treat them as one-time allocations.
  class StyleModule {
    // :: (Object<Style>, ?{finish: ?(string) → string})
    // Create a style module from the given spec.
    //
    // When `finish` is given, it is called on regular (non-`@`)
    // selectors (after `&` expansion) to compute the final selector.
    constructor(spec, options) {
      this.rules = [];
      let {finish} = options || {};

      function splitSelector(selector) {
        return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
      }

      function render(selectors, spec, target, isKeyframes) {
        let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
        if (isAt && spec == null) return target.push(selectors[0] + ";")
        for (let prop in spec) {
          let value = spec[prop];
          if (/&/.test(prop)) {
            render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
                   value, target);
          } else if (value && typeof value == "object") {
            if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
            render(splitSelector(prop), value, local, keyframes);
          } else if (value != null) {
            local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
          }
        }
        if (local.length || keyframes) {
          target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
                      " {" + local.join(" ") + "}");
        }
      }

      for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
    }

    // :: () → string
    // Returns a string containing the module's CSS rules.
    getRules() { return this.rules.join("\n") }

    // :: () → string
    // Generate a new unique CSS class name.
    static newName() {
      let id = top[COUNT] || 1;
      top[COUNT] = id + 1;
      return C + id.toString(36)
    }

    // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
    //
    // Mount the given set of modules in the given DOM root, which ensures
    // that the CSS rules defined by the module are available in that
    // context.
    //
    // Rules are only added to the document once per root.
    //
    // Rule order will follow the order of the modules, so that rules from
    // modules later in the array take precedence of those from earlier
    // modules. If you call this function multiple times for the same root
    // in a way that changes the order of already mounted modules, the old
    // order will be changed.
    //
    // If a Content Security Policy nonce is provided, it is added to
    // the `<style>` tag generated by the library.
    static mount(root, modules, options) {
      let set = root[SET], nonce = options && options.nonce;
      if (!set) set = new StyleSet(root, nonce);
      else if (nonce) set.setNonce(nonce);
      set.mount(Array.isArray(modules) ? modules : [modules], root);
    }
  }

  let adoptedSet = new Map; //<Document, StyleSet>

  class StyleSet {
    constructor(root, nonce) {
      let doc = root.ownerDocument || root, win = doc.defaultView;
      if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
        let adopted = adoptedSet.get(doc);
        if (adopted) return root[SET] = adopted
        this.sheet = new win.CSSStyleSheet;
        adoptedSet.set(doc, this);
      } else {
        this.styleTag = doc.createElement("style");
        if (nonce) this.styleTag.setAttribute("nonce", nonce);
      }
      this.modules = [];
      root[SET] = this;
    }

    mount(modules, root) {
      let sheet = this.sheet;
      let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
      for (let i = 0; i < modules.length; i++) {
        let mod = modules[i], index = this.modules.indexOf(mod);
        if (index < j && index > -1) { // Ordering conflict
          this.modules.splice(index, 1);
          j--;
          index = -1;
        }
        if (index == -1) {
          this.modules.splice(j++, 0, mod);
          if (sheet) for (let k = 0; k < mod.rules.length; k++)
            sheet.insertRule(mod.rules[k], pos++);
        } else {
          while (j < index) pos += this.modules[j++].rules.length;
          pos += mod.rules.length;
          j++;
        }
      }

      if (sheet) {
        if (root.adoptedStyleSheets.indexOf(this.sheet) < 0)
          root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
      } else {
        let text = "";
        for (let i = 0; i < this.modules.length; i++)
          text += this.modules[i].getRules() + "\n";
        this.styleTag.textContent = text;
        let target = root.head || root;
        if (this.styleTag.parentNode != target)
          target.insertBefore(this.styleTag, target.firstChild);
      }
    }

    setNonce(nonce) {
      if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
        this.styleTag.setAttribute("nonce", nonce);
    }
  }

  // Style::Object<union<Style,string>>
  //
  // A style is an object that, in the simple case, maps CSS property
  // names to strings holding their values, as in `{color: "red",
  // fontWeight: "bold"}`. The property names can be given in
  // camel-case—the library will insert a dash before capital letters
  // when converting them to CSS.
  //
  // If you include an underscore in a property name, it and everything
  // after it will be removed from the output, which can be useful when
  // providing a property multiple times, for browser compatibility
  // reasons.
  //
  // A property in a style object can also be a sub-selector, which
  // extends the current context to add a pseudo-selector or a child
  // selector. Such a property should contain a `&` character, which
  // will be replaced by the current selector. For example `{"&:before":
  // {content: '"hi"'}}`. Sub-selectors and regular properties can
  // freely be mixed in a given object. Any property containing a `&` is
  // assumed to be a sub-selector.
  //
  // Finally, a property can specify an @-block to be wrapped around the
  // styles defined inside the object that's the property's value. For
  // example to create a media query you can do `{"@media screen and
  // (min-width: 400px)": {...}}`.

  var base = {
    8: "Backspace",
    9: "Tab",
    10: "Enter",
    12: "NumLock",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    44: "PrintScreen",
    45: "Insert",
    46: "Delete",
    59: ";",
    61: "=",
    91: "Meta",
    92: "Meta",
    106: "*",
    107: "+",
    108: ",",
    109: "-",
    110: ".",
    111: "/",
    144: "NumLock",
    145: "ScrollLock",
    160: "Shift",
    161: "Shift",
    162: "Control",
    163: "Control",
    164: "Alt",
    165: "Alt",
    173: "-",
    186: ";",
    187: "=",
    188: ",",
    189: "-",
    190: ".",
    191: "/",
    192: "`",
    219: "[",
    220: "\\",
    221: "]",
    222: "'"
  };

  var shift = {
    48: ")",
    49: "!",
    50: "@",
    51: "#",
    52: "$",
    53: "%",
    54: "^",
    55: "&",
    56: "*",
    57: "(",
    59: ":",
    61: "+",
    173: "_",
    186: ":",
    187: "+",
    188: "<",
    189: "_",
    190: ">",
    191: "?",
    192: "~",
    219: "{",
    220: "|",
    221: "}",
    222: "\""
  };

  var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
  var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);

  // Fill in the digit keys
  for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

  // The function keys
  for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

  // And the alphabetic keys
  for (var i = 65; i <= 90; i++) {
    base[i] = String.fromCharCode(i + 32);
    shift[i] = String.fromCharCode(i);
  }

  // For each code that doesn't have a shift-equivalent, copy the base name
  for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

  function keyName(event) {
    // On macOS, keys held with Shift and Cmd don't reflect the effect of Shift in `.key`.
    // On IE, shift effect is never included in `.key`.
    var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey ||
        ie$1 && event.shiftKey && event.key && event.key.length == 1 ||
        event.key == "Unidentified";
    var name = (!ignoreKey && event.key) ||
      (event.shiftKey ? shift : base)[event.keyCode] ||
      event.key || "Unidentified";
    // Edge sometimes produces wrong names (Issue #3)
    if (name == "Esc") name = "Escape";
    if (name == "Del") name = "Delete";
    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
    if (name == "Left") name = "ArrowLeft";
    if (name == "Up") name = "ArrowUp";
    if (name == "Right") name = "ArrowRight";
    if (name == "Down") name = "ArrowDown";
    return name
  }

  function getSelection(root) {
      let target;
      // Browsers differ on whether shadow roots have a getSelection
      // method. If it exists, use that, otherwise, call it on the
      // document.
      if (root.nodeType == 11) { // Shadow root
          target = root.getSelection ? root : root.ownerDocument;
      }
      else {
          target = root;
      }
      return target.getSelection();
  }
  function contains(dom, node) {
      return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
  }
  function hasSelection(dom, selection) {
      if (!selection.anchorNode)
          return false;
      try {
          // Firefox will raise 'permission denied' errors when accessing
          // properties of `sel.anchorNode` when it's in a generated CSS
          // element.
          return contains(dom, selection.anchorNode);
      }
      catch (_) {
          return false;
      }
  }
  function clientRectsFor(dom) {
      if (dom.nodeType == 3)
          return textRange(dom, 0, dom.nodeValue.length).getClientRects();
      else if (dom.nodeType == 1)
          return dom.getClientRects();
      else
          return [];
  }
  // Scans forward and backward through DOM positions equivalent to the
  // given one to see if the two are in the same place (i.e. after a
  // text node vs at the end of that text node)
  function isEquivalentPosition(node, off, targetNode, targetOff) {
      return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
          scanFor(node, off, targetNode, targetOff, 1)) : false;
  }
  function domIndex(node) {
      for (var index = 0;; index++) {
          node = node.previousSibling;
          if (!node)
              return index;
      }
  }
  function isBlockElement(node) {
      return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
  }
  function scanFor(node, off, targetNode, targetOff, dir) {
      for (;;) {
          if (node == targetNode && off == targetOff)
              return true;
          if (off == (dir < 0 ? 0 : maxOffset(node))) {
              if (node.nodeName == "DIV")
                  return false;
              let parent = node.parentNode;
              if (!parent || parent.nodeType != 1)
                  return false;
              off = domIndex(node) + (dir < 0 ? 0 : 1);
              node = parent;
          }
          else if (node.nodeType == 1) {
              node = node.childNodes[off + (dir < 0 ? -1 : 0)];
              if (node.nodeType == 1 && node.contentEditable == "false")
                  return false;
              off = dir < 0 ? maxOffset(node) : 0;
          }
          else {
              return false;
          }
      }
  }
  function maxOffset(node) {
      return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
  }
  function flattenRect(rect, left) {
      let x = left ? rect.left : rect.right;
      return { left: x, right: x, top: rect.top, bottom: rect.bottom };
  }
  function windowRect(win) {
      let vp = win.visualViewport;
      if (vp)
          return {
              left: 0, right: vp.width,
              top: 0, bottom: vp.height
          };
      return { left: 0, right: win.innerWidth,
          top: 0, bottom: win.innerHeight };
  }
  function getScale(elt, rect) {
      let scaleX = rect.width / elt.offsetWidth;
      let scaleY = rect.height / elt.offsetHeight;
      if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1)
          scaleX = 1;
      if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1)
          scaleY = 1;
      return { scaleX, scaleY };
  }
  function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
      let doc = dom.ownerDocument, win = doc.defaultView || window;
      for (let cur = dom, stop = false; cur && !stop;) {
          if (cur.nodeType == 1) { // Element
              let bounding, top = cur == doc.body;
              let scaleX = 1, scaleY = 1;
              if (top) {
                  bounding = windowRect(win);
              }
              else {
                  if (/^(fixed|sticky)$/.test(getComputedStyle(cur).position))
                      stop = true;
                  if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                      cur = cur.assignedSlot || cur.parentNode;
                      continue;
                  }
                  let rect = cur.getBoundingClientRect();
                  ({ scaleX, scaleY } = getScale(cur, rect));
                  // Make sure scrollbar width isn't included in the rectangle
                  bounding = { left: rect.left, right: rect.left + cur.clientWidth * scaleX,
                      top: rect.top, bottom: rect.top + cur.clientHeight * scaleY };
              }
              let moveX = 0, moveY = 0;
              if (y == "nearest") {
                  if (rect.top < bounding.top) {
                      moveY = -(bounding.top - rect.top + yMargin);
                      if (side > 0 && rect.bottom > bounding.bottom + moveY)
                          moveY = rect.bottom - bounding.bottom + moveY + yMargin;
                  }
                  else if (rect.bottom > bounding.bottom) {
                      moveY = rect.bottom - bounding.bottom + yMargin;
                      if (side < 0 && (rect.top - moveY) < bounding.top)
                          moveY = -(bounding.top + moveY - rect.top + yMargin);
                  }
              }
              else {
                  let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
                  let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :
                      y == "start" || y == "center" && side < 0 ? rect.top - yMargin :
                          rect.bottom - boundingHeight + yMargin;
                  moveY = targetTop - bounding.top;
              }
              if (x == "nearest") {
                  if (rect.left < bounding.left) {
                      moveX = -(bounding.left - rect.left + xMargin);
                      if (side > 0 && rect.right > bounding.right + moveX)
                          moveX = rect.right - bounding.right + moveX + xMargin;
                  }
                  else if (rect.right > bounding.right) {
                      moveX = rect.right - bounding.right + xMargin;
                      if (side < 0 && rect.left < bounding.left + moveX)
                          moveX = -(bounding.left + moveX - rect.left + xMargin);
                  }
              }
              else {
                  let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :
                      (x == "start") == ltr ? rect.left - xMargin :
                          rect.right - (bounding.right - bounding.left) + xMargin;
                  moveX = targetLeft - bounding.left;
              }
              if (moveX || moveY) {
                  if (top) {
                      win.scrollBy(moveX, moveY);
                  }
                  else {
                      let movedX = 0, movedY = 0;
                      if (moveY) {
                          let start = cur.scrollTop;
                          cur.scrollTop += moveY / scaleY;
                          movedY = (cur.scrollTop - start) * scaleY;
                      }
                      if (moveX) {
                          let start = cur.scrollLeft;
                          cur.scrollLeft += moveX / scaleX;
                          movedX = (cur.scrollLeft - start) * scaleX;
                      }
                      rect = { left: rect.left - movedX, top: rect.top - movedY,
                          right: rect.right - movedX, bottom: rect.bottom - movedY };
                      if (movedX && Math.abs(movedX - moveX) < 1)
                          x = "nearest";
                      if (movedY && Math.abs(movedY - moveY) < 1)
                          y = "nearest";
                  }
              }
              if (top)
                  break;
              cur = cur.assignedSlot || cur.parentNode;
          }
          else if (cur.nodeType == 11) { // A shadow root
              cur = cur.host;
          }
          else {
              break;
          }
      }
  }
  function scrollableParents(dom) {
      let doc = dom.ownerDocument, x, y;
      for (let cur = dom.parentNode; cur;) {
          if (cur == doc.body || (x && y)) {
              break;
          }
          else if (cur.nodeType == 1) {
              if (!y && cur.scrollHeight > cur.clientHeight)
                  y = cur;
              if (!x && cur.scrollWidth > cur.clientWidth)
                  x = cur;
              cur = cur.assignedSlot || cur.parentNode;
          }
          else if (cur.nodeType == 11) {
              cur = cur.host;
          }
          else {
              break;
          }
      }
      return { x, y };
  }
  class DOMSelectionState {
      constructor() {
          this.anchorNode = null;
          this.anchorOffset = 0;
          this.focusNode = null;
          this.focusOffset = 0;
      }
      eq(domSel) {
          return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
              this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
      }
      setRange(range) {
          let { anchorNode, focusNode } = range;
          // Clip offsets to node size to avoid crashes when Safari reports bogus offsets (#1152)
          this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
      }
      set(anchorNode, anchorOffset, focusNode, focusOffset) {
          this.anchorNode = anchorNode;
          this.anchorOffset = anchorOffset;
          this.focusNode = focusNode;
          this.focusOffset = focusOffset;
      }
  }
  let preventScrollSupported = null;
  // Feature-detects support for .focus({preventScroll: true}), and uses
  // a fallback kludge when not supported.
  function focusPreventScroll(dom) {
      if (dom.setActive)
          return dom.setActive(); // in IE
      if (preventScrollSupported)
          return dom.focus(preventScrollSupported);
      let stack = [];
      for (let cur = dom; cur; cur = cur.parentNode) {
          stack.push(cur, cur.scrollTop, cur.scrollLeft);
          if (cur == cur.ownerDocument)
              break;
      }
      dom.focus(preventScrollSupported == null ? {
          get preventScroll() {
              preventScrollSupported = { preventScroll: true };
              return true;
          }
      } : undefined);
      if (!preventScrollSupported) {
          preventScrollSupported = false;
          for (let i = 0; i < stack.length;) {
              let elt = stack[i++], top = stack[i++], left = stack[i++];
              if (elt.scrollTop != top)
                  elt.scrollTop = top;
              if (elt.scrollLeft != left)
                  elt.scrollLeft = left;
          }
      }
  }
  let scratchRange;
  function textRange(node, from, to = from) {
      let range = scratchRange || (scratchRange = document.createRange());
      range.setEnd(node, to);
      range.setStart(node, from);
      return range;
  }
  function dispatchKey(elt, name, code, mods) {
      let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
      if (mods)
          ({ altKey: options.altKey, ctrlKey: options.ctrlKey, shiftKey: options.shiftKey, metaKey: options.metaKey } = mods);
      let down = new KeyboardEvent("keydown", options);
      down.synthetic = true;
      elt.dispatchEvent(down);
      let up = new KeyboardEvent("keyup", options);
      up.synthetic = true;
      elt.dispatchEvent(up);
      return down.defaultPrevented || up.defaultPrevented;
  }
  function getRoot(node) {
      while (node) {
          if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
              return node;
          node = node.assignedSlot || node.parentNode;
      }
      return null;
  }
  function clearAttributes(node) {
      while (node.attributes.length)
          node.removeAttributeNode(node.attributes[0]);
  }
  function atElementStart(doc, selection) {
      let node = selection.focusNode, offset = selection.focusOffset;
      if (!node || selection.anchorNode != node || selection.anchorOffset != offset)
          return false;
      // Safari can report bogus offsets (#1152)
      offset = Math.min(offset, maxOffset(node));
      for (;;) {
          if (offset) {
              if (node.nodeType != 1)
                  return false;
              let prev = node.childNodes[offset - 1];
              if (prev.contentEditable == "false")
                  offset--;
              else {
                  node = prev;
                  offset = maxOffset(node);
              }
          }
          else if (node == doc) {
              return true;
          }
          else {
              offset = domIndex(node);
              node = node.parentNode;
          }
      }
  }
  function isScrolledToBottom(elt) {
      return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
  }
  function textNodeBefore(startNode, startOffset) {
      for (let node = startNode, offset = startOffset;;) {
          if (node.nodeType == 3 && offset > 0) {
              return { node: node, offset: offset };
          }
          else if (node.nodeType == 1 && offset > 0) {
              if (node.contentEditable == "false")
                  return null;
              node = node.childNodes[offset - 1];
              offset = maxOffset(node);
          }
          else if (node.parentNode && !isBlockElement(node)) {
              offset = domIndex(node);
              node = node.parentNode;
          }
          else {
              return null;
          }
      }
  }
  function textNodeAfter(startNode, startOffset) {
      for (let node = startNode, offset = startOffset;;) {
          if (node.nodeType == 3 && offset < node.nodeValue.length) {
              return { node: node, offset: offset };
          }
          else if (node.nodeType == 1 && offset < node.childNodes.length) {
              if (node.contentEditable == "false")
                  return null;
              node = node.childNodes[offset];
              offset = 0;
          }
          else if (node.parentNode && !isBlockElement(node)) {
              offset = domIndex(node) + 1;
              node = node.parentNode;
          }
          else {
              return null;
          }
      }
  }

  class DOMPos {
      constructor(node, offset, precise = true) {
          this.node = node;
          this.offset = offset;
          this.precise = precise;
      }
      static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
      static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
  }
  const noChildren = [];
  class ContentView {
      constructor() {
          this.parent = null;
          this.dom = null;
          this.flags = 2 /* ViewFlag.NodeDirty */;
      }
      get overrideDOMText() { return null; }
      get posAtStart() {
          return this.parent ? this.parent.posBefore(this) : 0;
      }
      get posAtEnd() {
          return this.posAtStart + this.length;
      }
      posBefore(view) {
          let pos = this.posAtStart;
          for (let child of this.children) {
              if (child == view)
                  return pos;
              pos += child.length + child.breakAfter;
          }
          throw new RangeError("Invalid child in posBefore");
      }
      posAfter(view) {
          return this.posBefore(view) + view.length;
      }
      sync(view, track) {
          if (this.flags & 2 /* ViewFlag.NodeDirty */) {
              let parent = this.dom;
              let prev = null, next;
              for (let child of this.children) {
                  if (child.flags & 7 /* ViewFlag.Dirty */) {
                      if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                          let contentView = ContentView.get(next);
                          if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
                              child.reuseDOM(next);
                      }
                      child.sync(view, track);
                      child.flags &= -8 /* ViewFlag.Dirty */;
                  }
                  next = prev ? prev.nextSibling : parent.firstChild;
                  if (track && !track.written && track.node == parent && next != child.dom)
                      track.written = true;
                  if (child.dom.parentNode == parent) {
                      while (next && next != child.dom)
                          next = rm$1(next);
                  }
                  else {
                      parent.insertBefore(child.dom, next);
                  }
                  prev = child.dom;
              }
              next = prev ? prev.nextSibling : parent.firstChild;
              if (next && track && track.node == parent)
                  track.written = true;
              while (next)
                  next = rm$1(next);
          }
          else if (this.flags & 1 /* ViewFlag.ChildDirty */) {
              for (let child of this.children)
                  if (child.flags & 7 /* ViewFlag.Dirty */) {
                      child.sync(view, track);
                      child.flags &= -8 /* ViewFlag.Dirty */;
                  }
          }
      }
      reuseDOM(_dom) { }
      localPosFromDOM(node, offset) {
          let after;
          if (node == this.dom) {
              after = this.dom.childNodes[offset];
          }
          else {
              let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
              for (;;) {
                  let parent = node.parentNode;
                  if (parent == this.dom)
                      break;
                  if (bias == 0 && parent.firstChild != parent.lastChild) {
                      if (node == parent.firstChild)
                          bias = -1;
                      else
                          bias = 1;
                  }
                  node = parent;
              }
              if (bias < 0)
                  after = node;
              else
                  after = node.nextSibling;
          }
          if (after == this.dom.firstChild)
              return 0;
          while (after && !ContentView.get(after))
              after = after.nextSibling;
          if (!after)
              return this.length;
          for (let i = 0, pos = 0;; i++) {
              let child = this.children[i];
              if (child.dom == after)
                  return pos;
              pos += child.length + child.breakAfter;
          }
      }
      domBoundsAround(from, to, offset = 0) {
          let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
          for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
              let child = this.children[i], end = pos + child.length;
              if (pos < from && end > to)
                  return child.domBoundsAround(from, to, pos);
              if (end >= from && fromI == -1) {
                  fromI = i;
                  fromStart = pos;
              }
              if (pos > to && child.dom.parentNode == this.dom) {
                  toI = i;
                  toEnd = prevEnd;
                  break;
              }
              prevEnd = end;
              pos = end + child.breakAfter;
          }
          return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,
              startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
              endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };
      }
      markDirty(andParent = false) {
          this.flags |= 2 /* ViewFlag.NodeDirty */;
          this.markParentsDirty(andParent);
      }
      markParentsDirty(childList) {
          for (let parent = this.parent; parent; parent = parent.parent) {
              if (childList)
                  parent.flags |= 2 /* ViewFlag.NodeDirty */;
              if (parent.flags & 1 /* ViewFlag.ChildDirty */)
                  return;
              parent.flags |= 1 /* ViewFlag.ChildDirty */;
              childList = false;
          }
      }
      setParent(parent) {
          if (this.parent != parent) {
              this.parent = parent;
              if (this.flags & 7 /* ViewFlag.Dirty */)
                  this.markParentsDirty(true);
          }
      }
      setDOM(dom) {
          if (this.dom == dom)
              return;
          if (this.dom)
              this.dom.cmView = null;
          this.dom = dom;
          dom.cmView = this;
      }
      get rootView() {
          for (let v = this;;) {
              let parent = v.parent;
              if (!parent)
                  return v;
              v = parent;
          }
      }
      replaceChildren(from, to, children = noChildren) {
          this.markDirty();
          for (let i = from; i < to; i++) {
              let child = this.children[i];
              if (child.parent == this && children.indexOf(child) < 0)
                  child.destroy();
          }
          if (children.length < 250)
              this.children.splice(from, to - from, ...children);
          else
              this.children = [].concat(this.children.slice(0, from), children, this.children.slice(to));
          for (let i = 0; i < children.length; i++)
              children[i].setParent(this);
      }
      ignoreMutation(_rec) { return false; }
      ignoreEvent(_event) { return false; }
      childCursor(pos = this.length) {
          return new ChildCursor(this.children, pos, this.children.length);
      }
      childPos(pos, bias = 1) {
          return this.childCursor().findPos(pos, bias);
      }
      toString() {
          let name = this.constructor.name.replace("View", "");
          return name + (this.children.length ? "(" + this.children.join() + ")" :
              this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
              (this.breakAfter ? "#" : "");
      }
      static get(node) { return node.cmView; }
      get isEditable() { return true; }
      get isWidget() { return false; }
      get isHidden() { return false; }
      merge(from, to, source, hasStart, openStart, openEnd) {
          return false;
      }
      become(other) { return false; }
      canReuseDOM(other) {
          return other.constructor == this.constructor && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
      }
      // When this is a zero-length view with a side, this should return a
      // number <= 0 to indicate it is before its position, or a
      // number > 0 when after its position.
      getSide() { return 0; }
      destroy() {
          for (let child of this.children)
              if (child.parent == this)
                  child.destroy();
          this.parent = null;
      }
  }
  ContentView.prototype.breakAfter = 0;
  // Remove a DOM node and return its next sibling.
  function rm$1(dom) {
      let next = dom.nextSibling;
      dom.parentNode.removeChild(dom);
      return next;
  }
  class ChildCursor {
      constructor(children, pos, i) {
          this.children = children;
          this.pos = pos;
          this.i = i;
          this.off = 0;
      }
      findPos(pos, bias = 1) {
          for (;;) {
              if (pos > this.pos || pos == this.pos &&
                  (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                  this.off = pos - this.pos;
                  return this;
              }
              let next = this.children[--this.i];
              this.pos -= next.length + next.breakAfter;
          }
      }
  }
  function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
      let { children } = parent;
      let before = children.length ? children[fromI] : null;
      let last = insert.length ? insert[insert.length - 1] : null;
      let breakAtEnd = last ? last.breakAfter : breakAtStart;
      // Change within a single child
      if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&
          before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))
          return;
      if (toI < children.length) {
          let after = children[toI];
          // Make sure the end of the child after the update is preserved in `after`
          if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
              // If we're splitting a child, separate part of it to avoid that
              // being mangled when updating the child before the update.
              if (fromI == toI) {
                  after = after.split(toOff);
                  toOff = 0;
              }
              // If the element after the replacement should be merged with
              // the last replacing element, update `content`
              if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                  insert[insert.length - 1] = after;
              }
              else {
                  // Remove the start of the after element, if necessary, and
                  // add it to `content`.
                  if (toOff || after.children.length && !after.children[0].length)
                      after.merge(0, toOff, null, false, 0, openEnd);
                  insert.push(after);
              }
          }
          else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
              // The element at `toI` is entirely covered by this range.
              // Preserve its line break, if any.
              if (last)
                  last.breakAfter = 1;
              else
                  breakAtStart = 1;
          }
          // Since we've handled the next element from the current elements
          // now, make sure `toI` points after that.
          toI++;
      }
      if (before) {
          before.breakAfter = breakAtStart;
          if (fromOff > 0) {
              if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
                  before.breakAfter = insert.shift().breakAfter;
              }
              else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                  before.merge(fromOff, before.length, null, false, openStart, 0);
              }
              fromI++;
          }
      }
      // Try to merge widgets on the boundaries of the replacement
      while (fromI < toI && insert.length) {
          if (children[toI - 1].become(insert[insert.length - 1])) {
              toI--;
              insert.pop();
              openEnd = insert.length ? 0 : openStart;
          }
          else if (children[fromI].become(insert[0])) {
              fromI++;
              insert.shift();
              openStart = insert.length ? 0 : openEnd;
          }
          else {
              break;
          }
      }
      if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&
          children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
          fromI--;
      if (fromI < toI || insert.length)
          parent.replaceChildren(fromI, toI, insert);
  }
  function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
      let cur = parent.childCursor();
      let { i: toI, off: toOff } = cur.findPos(to, 1);
      let { i: fromI, off: fromOff } = cur.findPos(from, -1);
      let dLen = from - to;
      for (let view of insert)
          dLen += view.length;
      parent.length += dLen;
      replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
  }

  let nav$1 = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
  let doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
  const ie_edge = /*@__PURE__*//Edge\/(\d+)/.exec(nav$1.userAgent);
  const ie_upto10 = /*@__PURE__*//MSIE \d/.test(nav$1.userAgent);
  const ie_11up = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav$1.userAgent);
  const ie = !!(ie_upto10 || ie_11up || ie_edge);
  const gecko = !ie && /*@__PURE__*//gecko\/(\d+)/i.test(nav$1.userAgent);
  const chrome = !ie && /*@__PURE__*//Chrome\/(\d+)/.exec(nav$1.userAgent);
  const webkit = "webkitFontSmoothing" in doc.documentElement.style;
  const safari = !ie && /*@__PURE__*//Apple Computer/.test(nav$1.vendor);
  const ios = safari && (/*@__PURE__*//Mobile\/\w+/.test(nav$1.userAgent) || nav$1.maxTouchPoints > 2);
  var browser = {
      mac: ios || /*@__PURE__*//Mac/.test(nav$1.platform),
      windows: /*@__PURE__*//Win/.test(nav$1.platform),
      linux: /*@__PURE__*//Linux|X11/.test(nav$1.platform),
      ie,
      ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
      gecko,
      gecko_version: gecko ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav$1.userAgent) || [0, 0])[1] : 0,
      chrome: !!chrome,
      chrome_version: chrome ? +chrome[1] : 0,
      ios,
      android: /*@__PURE__*//Android\b/.test(nav$1.userAgent),
      webkit,
      safari,
      webkit_version: webkit ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(nav$1.userAgent) || [0, 0])[1] : 0,
      tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
  };

  const MaxJoinLen = 256;
  class TextView extends ContentView {
      constructor(text) {
          super();
          this.text = text;
      }
      get length() { return this.text.length; }
      createDOM(textDOM) {
          this.setDOM(textDOM || document.createTextNode(this.text));
      }
      sync(view, track) {
          if (!this.dom)
              this.createDOM();
          if (this.dom.nodeValue != this.text) {
              if (track && track.node == this.dom)
                  track.written = true;
              this.dom.nodeValue = this.text;
          }
      }
      reuseDOM(dom) {
          if (dom.nodeType == 3)
              this.createDOM(dom);
      }
      merge(from, to, source) {
          if ((this.flags & 8 /* ViewFlag.Composition */) ||
              source && (!(source instanceof TextView) ||
                  this.length - (to - from) + source.length > MaxJoinLen ||
                  (source.flags & 8 /* ViewFlag.Composition */)))
              return false;
          this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
          this.markDirty();
          return true;
      }
      split(from) {
          let result = new TextView(this.text.slice(from));
          this.text = this.text.slice(0, from);
          this.markDirty();
          result.flags |= this.flags & 8 /* ViewFlag.Composition */;
          return result;
      }
      localPosFromDOM(node, offset) {
          return node == this.dom ? offset : offset ? this.text.length : 0;
      }
      domAtPos(pos) { return new DOMPos(this.dom, pos); }
      domBoundsAround(_from, _to, offset) {
          return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
      }
      coordsAt(pos, side) {
          return textCoords(this.dom, pos, side);
      }
  }
  class MarkView extends ContentView {
      constructor(mark, children = [], length = 0) {
          super();
          this.mark = mark;
          this.children = children;
          this.length = length;
          for (let ch of children)
              ch.setParent(this);
      }
      setAttrs(dom) {
          clearAttributes(dom);
          if (this.mark.class)
              dom.className = this.mark.class;
          if (this.mark.attrs)
              for (let name in this.mark.attrs)
                  dom.setAttribute(name, this.mark.attrs[name]);
          return dom;
      }
      canReuseDOM(other) {
          return super.canReuseDOM(other) && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
      }
      reuseDOM(node) {
          if (node.nodeName == this.mark.tagName.toUpperCase()) {
              this.setDOM(node);
              this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
          }
      }
      sync(view, track) {
          if (!this.dom)
              this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
          else if (this.flags & 4 /* ViewFlag.AttrsDirty */)
              this.setAttrs(this.dom);
          super.sync(view, track);
      }
      merge(from, to, source, _hasStart, openStart, openEnd) {
          if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
              (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
              return false;
          mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart - 1, openEnd - 1);
          this.markDirty();
          return true;
      }
      split(from) {
          let result = [], off = 0, detachFrom = -1, i = 0;
          for (let elt of this.children) {
              let end = off + elt.length;
              if (end > from)
                  result.push(off < from ? elt.split(from - off) : elt);
              if (detachFrom < 0 && off >= from)
                  detachFrom = i;
              off = end;
              i++;
          }
          let length = this.length - from;
          this.length = from;
          if (detachFrom > -1) {
              this.children.length = detachFrom;
              this.markDirty();
          }
          return new MarkView(this.mark, result, length);
      }
      domAtPos(pos) {
          return inlineDOMAtPos(this, pos);
      }
      coordsAt(pos, side) {
          return coordsInChildren(this, pos, side);
      }
  }
  function textCoords(text, pos, side) {
      let length = text.nodeValue.length;
      if (pos > length)
          pos = length;
      let from = pos, to = pos, flatten = 0;
      if (pos == 0 && side < 0 || pos == length && side >= 0) {
          if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
              if (pos) {
                  from--;
                  flatten = 1;
              } // FIXME this is wrong in RTL text
              else if (to < length) {
                  to++;
                  flatten = -1;
              }
          }
      }
      else {
          if (side < 0)
              from--;
          else if (to < length)
              to++;
      }
      let rects = textRange(text, from, to).getClientRects();
      if (!rects.length)
          return null;
      let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
      if (browser.safari && !flatten && rect.width == 0)
          rect = Array.prototype.find.call(rects, r => r.width) || rect;
      return flatten ? flattenRect(rect, flatten < 0) : rect || null;
  }
  // Also used for collapsed ranges that don't have a placeholder widget!
  class WidgetView extends ContentView {
      static create(widget, length, side) {
          return new WidgetView(widget, length, side);
      }
      constructor(widget, length, side) {
          super();
          this.widget = widget;
          this.length = length;
          this.side = side;
          this.prevWidget = null;
      }
      split(from) {
          let result = WidgetView.create(this.widget, this.length - from, this.side);
          this.length -= from;
          return result;
      }
      sync(view) {
          if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
              if (this.dom && this.prevWidget)
                  this.prevWidget.destroy(this.dom);
              this.prevWidget = null;
              this.setDOM(this.widget.toDOM(view));
              if (!this.widget.editable)
                  this.dom.contentEditable = "false";
          }
      }
      getSide() { return this.side; }
      merge(from, to, source, hasStart, openStart, openEnd) {
          if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
              from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
              return false;
          this.length = from + (source ? source.length : 0) + (this.length - to);
          return true;
      }
      become(other) {
          if (other instanceof WidgetView && other.side == this.side &&
              this.widget.constructor == other.widget.constructor) {
              if (!this.widget.compare(other.widget))
                  this.markDirty(true);
              if (this.dom && !this.prevWidget)
                  this.prevWidget = this.widget;
              this.widget = other.widget;
              this.length = other.length;
              return true;
          }
          return false;
      }
      ignoreMutation() { return true; }
      ignoreEvent(event) { return this.widget.ignoreEvent(event); }
      get overrideDOMText() {
          if (this.length == 0)
              return Text.empty;
          let top = this;
          while (top.parent)
              top = top.parent;
          let { view } = top, text = view && view.state.doc, start = this.posAtStart;
          return text ? text.slice(start, start + this.length) : Text.empty;
      }
      domAtPos(pos) {
          return (this.length ? pos == 0 : this.side > 0)
              ? DOMPos.before(this.dom)
              : DOMPos.after(this.dom, pos == this.length);
      }
      domBoundsAround() { return null; }
      coordsAt(pos, side) {
          let custom = this.widget.coordsAt(this.dom, pos, side);
          if (custom)
              return custom;
          let rects = this.dom.getClientRects(), rect = null;
          if (!rects.length)
              return null;
          let fromBack = this.side ? this.side < 0 : pos > 0;
          for (let i = fromBack ? rects.length - 1 : 0;; i += (fromBack ? -1 : 1)) {
              rect = rects[i];
              if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
                  break;
          }
          return flattenRect(rect, !fromBack);
      }
      get isEditable() { return false; }
      get isWidget() { return true; }
      get isHidden() { return this.widget.isHidden; }
      destroy() {
          super.destroy();
          if (this.dom)
              this.widget.destroy(this.dom);
      }
  }
  // These are drawn around uneditable widgets to avoid a number of
  // browser bugs that show up when the cursor is directly next to
  // uneditable inline content.
  class WidgetBufferView extends ContentView {
      constructor(side) {
          super();
          this.side = side;
      }
      get length() { return 0; }
      merge() { return false; }
      become(other) {
          return other instanceof WidgetBufferView && other.side == this.side;
      }
      split() { return new WidgetBufferView(this.side); }
      sync() {
          if (!this.dom) {
              let dom = document.createElement("img");
              dom.className = "cm-widgetBuffer";
              dom.setAttribute("aria-hidden", "true");
              this.setDOM(dom);
          }
      }
      getSide() { return this.side; }
      domAtPos(pos) { return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom); }
      localPosFromDOM() { return 0; }
      domBoundsAround() { return null; }
      coordsAt(pos) {
          return this.dom.getBoundingClientRect();
      }
      get overrideDOMText() {
          return Text.empty;
      }
      get isHidden() { return true; }
  }
  TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
  function inlineDOMAtPos(parent, pos) {
      let dom = parent.dom, { children } = parent, i = 0;
      for (let off = 0; i < children.length; i++) {
          let child = children[i], end = off + child.length;
          if (end == off && child.getSide() <= 0)
              continue;
          if (pos > off && pos < end && child.dom.parentNode == dom)
              return child.domAtPos(pos - off);
          if (pos <= off)
              break;
          off = end;
      }
      for (let j = i; j > 0; j--) {
          let prev = children[j - 1];
          if (prev.dom.parentNode == dom)
              return prev.domAtPos(prev.length);
      }
      for (let j = i; j < children.length; j++) {
          let next = children[j];
          if (next.dom.parentNode == dom)
              return next.domAtPos(0);
      }
      return new DOMPos(dom, 0);
  }
  // Assumes `view`, if a mark view, has precisely 1 child.
  function joinInlineInto(parent, view, open) {
      let last, { children } = parent;
      if (open > 0 && view instanceof MarkView && children.length &&
          (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
          joinInlineInto(last, view.children[0], open - 1);
      }
      else {
          children.push(view);
          view.setParent(parent);
      }
      parent.length += view.length;
  }
  function coordsInChildren(view, pos, side) {
      let before = null, beforePos = -1, after = null, afterPos = -1;
      function scan(view, pos) {
          for (let i = 0, off = 0; i < view.children.length && off <= pos; i++) {
              let child = view.children[i], end = off + child.length;
              if (end >= pos) {
                  if (child.children.length) {
                      scan(child, pos - off);
                  }
                  else if ((!after || after.isHidden && side > 0) &&
                      (end > pos || off == end && child.getSide() > 0)) {
                      after = child;
                      afterPos = pos - off;
                  }
                  else if (off < pos || (off == end && child.getSide() < 0) && !child.isHidden) {
                      before = child;
                      beforePos = pos - off;
                  }
              }
              off = end;
          }
      }
      scan(view, pos);
      let target = (side < 0 ? before : after) || before || after;
      if (target)
          return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
      return fallbackRect(view);
  }
  function fallbackRect(view) {
      let last = view.dom.lastChild;
      if (!last)
          return view.dom.getBoundingClientRect();
      let rects = clientRectsFor(last);
      return rects[rects.length - 1] || null;
  }

  function combineAttrs(source, target) {
      for (let name in source) {
          if (name == "class" && target.class)
              target.class += " " + source.class;
          else if (name == "style" && target.style)
              target.style += ";" + source.style;
          else
              target[name] = source[name];
      }
      return target;
  }
  const noAttrs = /*@__PURE__*/Object.create(null);
  function attrsEq(a, b, ignore) {
      if (a == b)
          return true;
      if (!a)
          a = noAttrs;
      if (!b)
          b = noAttrs;
      let keysA = Object.keys(a), keysB = Object.keys(b);
      if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) !=
          keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
          return false;
      for (let key of keysA) {
          if (key != ignore && (keysB.indexOf(key) == -1 || a[key] !== b[key]))
              return false;
      }
      return true;
  }
  function updateAttrs(dom, prev, attrs) {
      let changed = false;
      if (prev)
          for (let name in prev)
              if (!(attrs && name in attrs)) {
                  changed = true;
                  if (name == "style")
                      dom.style.cssText = "";
                  else
                      dom.removeAttribute(name);
              }
      if (attrs)
          for (let name in attrs)
              if (!(prev && prev[name] == attrs[name])) {
                  changed = true;
                  if (name == "style")
                      dom.style.cssText = attrs[name];
                  else
                      dom.setAttribute(name, attrs[name]);
              }
      return changed;
  }
  function getAttrs(dom) {
      let attrs = Object.create(null);
      for (let i = 0; i < dom.attributes.length; i++) {
          let attr = dom.attributes[i];
          attrs[attr.name] = attr.value;
      }
      return attrs;
  }

  /**
  Widgets added to the content are described by subclasses of this
  class. Using a description object like that makes it possible to
  delay creating of the DOM structure for a widget until it is
  needed, and to avoid redrawing widgets even if the decorations
  that define them are recreated.
  */
  class WidgetType {
      /**
      Compare this instance to another instance of the same type.
      (TypeScript can't express this, but only instances of the same
      specific class will be passed to this method.) This is used to
      avoid redrawing widgets when they are replaced by a new
      decoration of the same type. The default implementation just
      returns `false`, which will cause new instances of the widget to
      always be redrawn.
      */
      eq(widget) { return false; }
      /**
      Update a DOM element created by a widget of the same type (but
      different, non-`eq` content) to reflect this widget. May return
      true to indicate that it could update, false to indicate it
      couldn't (in which case the widget will be redrawn). The default
      implementation just returns false.
      */
      updateDOM(dom, view) { return false; }
      /**
      @internal
      */
      compare(other) {
          return this == other || this.constructor == other.constructor && this.eq(other);
      }
      /**
      The estimated height this widget will have, to be used when
      estimating the height of content that hasn't been drawn. May
      return -1 to indicate you don't know. The default implementation
      returns -1.
      */
      get estimatedHeight() { return -1; }
      /**
      For inline widgets that are displayed inline (as opposed to
      `inline-block`) and introduce line breaks (through `<br>` tags
      or textual newlines), this must indicate the amount of line
      breaks they introduce. Defaults to 0.
      */
      get lineBreaks() { return 0; }
      /**
      Can be used to configure which kinds of events inside the widget
      should be ignored by the editor. The default is to ignore all
      events.
      */
      ignoreEvent(event) { return true; }
      /**
      Override the way screen coordinates for positions at/in the
      widget are found. `pos` will be the offset into the widget, and
      `side` the side of the position that is being queried—less than
      zero for before, greater than zero for after, and zero for
      directly at that position.
      */
      coordsAt(dom, pos, side) { return null; }
      /**
      @internal
      */
      get isHidden() { return false; }
      /**
      @internal
      */
      get editable() { return false; }
      /**
      This is called when the an instance of the widget is removed
      from the editor view.
      */
      destroy(dom) { }
  }
  /**
  The different types of blocks that can occur in an editor view.
  */
  var BlockType = /*@__PURE__*/(function (BlockType) {
      /**
      A line of text.
      */
      BlockType[BlockType["Text"] = 0] = "Text";
      /**
      A block widget associated with the position after it.
      */
      BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
      /**
      A block widget associated with the position before it.
      */
      BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
      /**
      A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
      */
      BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
  return BlockType})(BlockType || (BlockType = {}));
  /**
  A decoration provides information on how to draw or style a piece
  of content. You'll usually use it wrapped in a
  [`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
  @nonabstract
  */
  class Decoration extends RangeValue {
      constructor(
      /**
      @internal
      */
      startSide, 
      /**
      @internal
      */
      endSide, 
      /**
      @internal
      */
      widget, 
      /**
      The config object used to create this decoration. You can
      include additional properties in there to store metadata about
      your decoration.
      */
      spec) {
          super();
          this.startSide = startSide;
          this.endSide = endSide;
          this.widget = widget;
          this.spec = spec;
      }
      /**
      @internal
      */
      get heightRelevant() { return false; }
      /**
      Create a mark decoration, which influences the styling of the
      content in its range. Nested mark decorations will cause nested
      DOM elements to be created. Nesting order is determined by
      precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
      the higher-precedence decorations creating the inner DOM nodes.
      Such elements are split on line boundaries and on the boundaries
      of lower-precedence decorations.
      */
      static mark(spec) {
          return new MarkDecoration(spec);
      }
      /**
      Create a widget decoration, which displays a DOM element at the
      given position.
      */
      static widget(spec) {
          let side = Math.max(-1e4, Math.min(10000, spec.side || 0)), block = !!spec.block;
          side += (block && !spec.inlineOrder)
              ? (side > 0 ? 300000000 /* Side.BlockAfter */ : -4e8 /* Side.BlockBefore */)
              : (side > 0 ? 100000000 /* Side.InlineAfter */ : -1e8 /* Side.InlineBefore */);
          return new PointDecoration(spec, side, side, block, spec.widget || null, false);
      }
      /**
      Create a replace decoration which replaces the given range with
      a widget, or simply hides it.
      */
      static replace(spec) {
          let block = !!spec.block, startSide, endSide;
          if (spec.isBlockGap) {
              startSide = -5e8 /* Side.GapStart */;
              endSide = 400000000 /* Side.GapEnd */;
          }
          else {
              let { start, end } = getInclusive(spec, block);
              startSide = (start ? (block ? -3e8 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */) : 500000000 /* Side.NonIncStart */) - 1;
              endSide = (end ? (block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */) : -6e8 /* Side.NonIncEnd */) + 1;
          }
          return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
      }
      /**
      Create a line decoration, which can add DOM attributes to the
      line starting at the given position.
      */
      static line(spec) {
          return new LineDecoration(spec);
      }
      /**
      Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
      decorated range or ranges. If the ranges aren't already sorted,
      pass `true` for `sort` to make the library sort them for you.
      */
      static set(of, sort = false) {
          return RangeSet.of(of, sort);
      }
      /**
      @internal
      */
      hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
  }
  /**
  The empty set of decorations.
  */
  Decoration.none = RangeSet.empty;
  class MarkDecoration extends Decoration {
      constructor(spec) {
          let { start, end } = getInclusive(spec);
          super(start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -6e8 /* Side.NonIncEnd */, null, spec);
          this.tagName = spec.tagName || "span";
          this.class = spec.class || "";
          this.attrs = spec.attributes || null;
      }
      eq(other) {
          var _a, _b;
          return this == other ||
              other instanceof MarkDecoration &&
                  this.tagName == other.tagName &&
                  (this.class || ((_a = this.attrs) === null || _a === void 0 ? void 0 : _a.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) &&
                  attrsEq(this.attrs, other.attrs, "class");
      }
      range(from, to = from) {
          if (from >= to)
              throw new RangeError("Mark decorations may not be empty");
          return super.range(from, to);
      }
  }
  MarkDecoration.prototype.point = false;
  class LineDecoration extends Decoration {
      constructor(spec) {
          super(-2e8 /* Side.Line */, -2e8 /* Side.Line */, null, spec);
      }
      eq(other) {
          return other instanceof LineDecoration &&
              this.spec.class == other.spec.class &&
              attrsEq(this.spec.attributes, other.spec.attributes);
      }
      range(from, to = from) {
          if (to != from)
              throw new RangeError("Line decoration ranges must be zero-length");
          return super.range(from, to);
      }
  }
  LineDecoration.prototype.mapMode = MapMode.TrackBefore;
  LineDecoration.prototype.point = true;
  class PointDecoration extends Decoration {
      constructor(spec, startSide, endSide, block, widget, isReplace) {
          super(startSide, endSide, widget, spec);
          this.block = block;
          this.isReplace = isReplace;
          this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
      }
      // Only relevant when this.block == true
      get type() {
          return this.startSide != this.endSide ? BlockType.WidgetRange
              : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
      }
      get heightRelevant() {
          return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
      }
      eq(other) {
          return other instanceof PointDecoration &&
              widgetsEq(this.widget, other.widget) &&
              this.block == other.block &&
              this.startSide == other.startSide && this.endSide == other.endSide;
      }
      range(from, to = from) {
          if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))
              throw new RangeError("Invalid range for replacement decoration");
          if (!this.isReplace && to != from)
              throw new RangeError("Widget decorations can only have zero-length ranges");
          return super.range(from, to);
      }
  }
  PointDecoration.prototype.point = true;
  function getInclusive(spec, block = false) {
      let { inclusiveStart: start, inclusiveEnd: end } = spec;
      if (start == null)
          start = spec.inclusive;
      if (end == null)
          end = spec.inclusive;
      return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
  }
  function widgetsEq(a, b) {
      return a == b || !!(a && b && a.compare(b));
  }
  function addRange(from, to, ranges, margin = 0) {
      let last = ranges.length - 1;
      if (last >= 0 && ranges[last] + margin >= from)
          ranges[last] = Math.max(ranges[last], to);
      else
          ranges.push(from, to);
  }

  class LineView extends ContentView {
      constructor() {
          super(...arguments);
          this.children = [];
          this.length = 0;
          this.prevAttrs = undefined;
          this.attrs = null;
          this.breakAfter = 0;
      }
      // Consumes source
      merge(from, to, source, hasStart, openStart, openEnd) {
          if (source) {
              if (!(source instanceof LineView))
                  return false;
              if (!this.dom)
                  source.transferDOM(this); // Reuse source.dom when appropriate
          }
          if (hasStart)
              this.setDeco(source ? source.attrs : null);
          mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart, openEnd);
          return true;
      }
      split(at) {
          let end = new LineView;
          end.breakAfter = this.breakAfter;
          if (this.length == 0)
              return end;
          let { i, off } = this.childPos(at);
          if (off) {
              end.append(this.children[i].split(off), 0);
              this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
              i++;
          }
          for (let j = i; j < this.children.length; j++)
              end.append(this.children[j], 0);
          while (i > 0 && this.children[i - 1].length == 0)
              this.children[--i].destroy();
          this.children.length = i;
          this.markDirty();
          this.length = at;
          return end;
      }
      transferDOM(other) {
          if (!this.dom)
              return;
          this.markDirty();
          other.setDOM(this.dom);
          other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
          this.prevAttrs = undefined;
          this.dom = null;
      }
      setDeco(attrs) {
          if (!attrsEq(this.attrs, attrs)) {
              if (this.dom) {
                  this.prevAttrs = this.attrs;
                  this.markDirty();
              }
              this.attrs = attrs;
          }
      }
      append(child, openStart) {
          joinInlineInto(this, child, openStart);
      }
      // Only called when building a line view in ContentBuilder
      addLineDeco(deco) {
          let attrs = deco.spec.attributes, cls = deco.spec.class;
          if (attrs)
              this.attrs = combineAttrs(attrs, this.attrs || {});
          if (cls)
              this.attrs = combineAttrs({ class: cls }, this.attrs || {});
      }
      domAtPos(pos) {
          return inlineDOMAtPos(this, pos);
      }
      reuseDOM(node) {
          if (node.nodeName == "DIV") {
              this.setDOM(node);
              this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
          }
      }
      sync(view, track) {
          var _a;
          if (!this.dom) {
              this.setDOM(document.createElement("div"));
              this.dom.className = "cm-line";
              this.prevAttrs = this.attrs ? null : undefined;
          }
          else if (this.flags & 4 /* ViewFlag.AttrsDirty */) {
              clearAttributes(this.dom);
              this.dom.className = "cm-line";
              this.prevAttrs = this.attrs ? null : undefined;
          }
          if (this.prevAttrs !== undefined) {
              updateAttrs(this.dom, this.prevAttrs, this.attrs);
              this.dom.classList.add("cm-line");
              this.prevAttrs = undefined;
          }
          super.sync(view, track);
          let last = this.dom.lastChild;
          while (last && ContentView.get(last) instanceof MarkView)
              last = last.lastChild;
          if (!last || !this.length ||
              last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&
                  (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
              let hack = document.createElement("BR");
              hack.cmIgnore = true;
              this.dom.appendChild(hack);
          }
      }
      measureTextSize() {
          if (this.children.length == 0 || this.length > 20)
              return null;
          let totalWidth = 0, textHeight;
          for (let child of this.children) {
              if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
                  return null;
              let rects = clientRectsFor(child.dom);
              if (rects.length != 1)
                  return null;
              totalWidth += rects[0].width;
              textHeight = rects[0].height;
          }
          return !totalWidth ? null : {
              lineHeight: this.dom.getBoundingClientRect().height,
              charWidth: totalWidth / this.length,
              textHeight
          };
      }
      coordsAt(pos, side) {
          let rect = coordsInChildren(this, pos, side);
          // Correct rectangle height for empty lines when the returned
          // height is larger than the text height.
          if (!this.children.length && rect && this.parent) {
              let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
              if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
                  let dist = (height - heightOracle.textHeight) / 2;
                  return { top: rect.top + dist, bottom: rect.bottom - dist, left: rect.left, right: rect.left };
              }
          }
          return rect;
      }
      become(other) {
          return other instanceof LineView && this.children.length == 0 && other.children.length == 0 &&
              attrsEq(this.attrs, other.attrs) && this.breakAfter == other.breakAfter;
      }
      covers() { return true; }
      static find(docView, pos) {
          for (let i = 0, off = 0; i < docView.children.length; i++) {
              let block = docView.children[i], end = off + block.length;
              if (end >= pos) {
                  if (block instanceof LineView)
                      return block;
                  if (end > pos)
                      break;
              }
              off = end + block.breakAfter;
          }
          return null;
      }
  }
  class BlockWidgetView extends ContentView {
      constructor(widget, length, deco) {
          super();
          this.widget = widget;
          this.length = length;
          this.deco = deco;
          this.breakAfter = 0;
          this.prevWidget = null;
      }
      merge(from, to, source, _takeDeco, openStart, openEnd) {
          if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
              from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
              return false;
          this.length = from + (source ? source.length : 0) + (this.length - to);
          return true;
      }
      domAtPos(pos) {
          return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
      }
      split(at) {
          let len = this.length - at;
          this.length = at;
          let end = new BlockWidgetView(this.widget, len, this.deco);
          end.breakAfter = this.breakAfter;
          return end;
      }
      get children() { return noChildren; }
      sync(view) {
          if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
              if (this.dom && this.prevWidget)
                  this.prevWidget.destroy(this.dom);
              this.prevWidget = null;
              this.setDOM(this.widget.toDOM(view));
              if (!this.widget.editable)
                  this.dom.contentEditable = "false";
          }
      }
      get overrideDOMText() {
          return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
      }
      domBoundsAround() { return null; }
      become(other) {
          if (other instanceof BlockWidgetView &&
              other.widget.constructor == this.widget.constructor) {
              if (!other.widget.compare(this.widget))
                  this.markDirty(true);
              if (this.dom && !this.prevWidget)
                  this.prevWidget = this.widget;
              this.widget = other.widget;
              this.length = other.length;
              this.deco = other.deco;
              this.breakAfter = other.breakAfter;
              return true;
          }
          return false;
      }
      ignoreMutation() { return true; }
      ignoreEvent(event) { return this.widget.ignoreEvent(event); }
      get isEditable() { return false; }
      get isWidget() { return true; }
      coordsAt(pos, side) {
          let custom = this.widget.coordsAt(this.dom, pos, side);
          if (custom)
              return custom;
          if (this.widget instanceof BlockGapWidget)
              return null;
          return flattenRect(this.dom.getBoundingClientRect(), this.length ? pos == 0 : side <= 0);
      }
      destroy() {
          super.destroy();
          if (this.dom)
              this.widget.destroy(this.dom);
      }
      covers(side) {
          let { startSide, endSide } = this.deco;
          return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
      }
  }
  class BlockGapWidget extends WidgetType {
      constructor(height) {
          super();
          this.height = height;
      }
      toDOM() {
          let elt = document.createElement("div");
          elt.className = "cm-gap";
          this.updateDOM(elt);
          return elt;
      }
      eq(other) { return other.height == this.height; }
      updateDOM(elt) {
          elt.style.height = this.height + "px";
          return true;
      }
      get editable() { return true; }
      get estimatedHeight() { return this.height; }
      ignoreEvent() { return false; }
  }

  class ContentBuilder {
      constructor(doc, pos, end, disallowBlockEffectsFor) {
          this.doc = doc;
          this.pos = pos;
          this.end = end;
          this.disallowBlockEffectsFor = disallowBlockEffectsFor;
          this.content = [];
          this.curLine = null;
          this.breakAtStart = 0;
          this.pendingBuffer = 0 /* Buf.No */;
          this.bufferMarks = [];
          // Set to false directly after a widget that covers the position after it
          this.atCursorPos = true;
          this.openStart = -1;
          this.openEnd = -1;
          this.text = "";
          this.textOff = 0;
          this.cursor = doc.iter();
          this.skip = pos;
      }
      posCovered() {
          if (this.content.length == 0)
              return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
          let last = this.content[this.content.length - 1];
          return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
      }
      getLine() {
          if (!this.curLine) {
              this.content.push(this.curLine = new LineView);
              this.atCursorPos = true;
          }
          return this.curLine;
      }
      flushBuffer(active = this.bufferMarks) {
          if (this.pendingBuffer) {
              this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
              this.pendingBuffer = 0 /* Buf.No */;
          }
      }
      addBlockWidget(view) {
          this.flushBuffer();
          this.curLine = null;
          this.content.push(view);
      }
      finish(openEnd) {
          if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
              this.flushBuffer();
          else
              this.pendingBuffer = 0 /* Buf.No */;
          if (!this.posCovered() &&
              !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))
              this.getLine();
      }
      buildText(length, active, openStart) {
          while (length > 0) {
              if (this.textOff == this.text.length) {
                  let { value, lineBreak, done } = this.cursor.next(this.skip);
                  this.skip = 0;
                  if (done)
                      throw new Error("Ran out of text content when drawing inline views");
                  if (lineBreak) {
                      if (!this.posCovered())
                          this.getLine();
                      if (this.content.length)
                          this.content[this.content.length - 1].breakAfter = 1;
                      else
                          this.breakAtStart = 1;
                      this.flushBuffer();
                      this.curLine = null;
                      this.atCursorPos = true;
                      length--;
                      continue;
                  }
                  else {
                      this.text = value;
                      this.textOff = 0;
                  }
              }
              let take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);
              this.flushBuffer(active.slice(active.length - openStart));
              this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
              this.atCursorPos = true;
              this.textOff += take;
              length -= take;
              openStart = 0;
          }
      }
      span(from, to, active, openStart) {
          this.buildText(to - from, active, openStart);
          this.pos = to;
          if (this.openStart < 0)
              this.openStart = openStart;
      }
      point(from, to, deco, active, openStart, index) {
          if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
              if (deco.block)
                  throw new RangeError("Block decorations may not be specified via plugins");
              if (to > this.doc.lineAt(this.pos).to)
                  throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
          }
          let len = to - from;
          if (deco instanceof PointDecoration) {
              if (deco.block) {
                  if (deco.startSide > 0 && !this.posCovered())
                      this.getLine();
                  this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));
              }
              else {
                  let view = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);
                  let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length &&
                      (from < to || deco.startSide > 0);
                  let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
                  let line = this.getLine();
                  if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore && !view.isEditable)
                      this.pendingBuffer = 0 /* Buf.No */;
                  this.flushBuffer(active);
                  if (cursorBefore) {
                      line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
                      openStart = active.length + Math.max(0, openStart - active.length);
                  }
                  line.append(wrapMarks(view, active), openStart);
                  this.atCursorPos = cursorAfter;
                  this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;
                  if (this.pendingBuffer)
                      this.bufferMarks = active.slice();
              }
          }
          else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
              this.getLine().addLineDeco(deco);
          }
          if (len) {
              // Advance the iterator past the replaced content
              if (this.textOff + len <= this.text.length) {
                  this.textOff += len;
              }
              else {
                  this.skip += len - (this.text.length - this.textOff);
                  this.text = "";
                  this.textOff = 0;
              }
              this.pos = to;
          }
          if (this.openStart < 0)
              this.openStart = openStart;
      }
      static build(text, from, to, decorations, dynamicDecorationMap) {
          let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
          builder.openEnd = RangeSet.spans(decorations, from, to, builder);
          if (builder.openStart < 0)
              builder.openStart = builder.openEnd;
          builder.finish(builder.openEnd);
          return builder;
      }
  }
  function wrapMarks(view, active) {
      for (let mark of active)
          view = new MarkView(mark, [view], view.length);
      return view;
  }
  class NullWidget extends WidgetType {
      constructor(tag) {
          super();
          this.tag = tag;
      }
      eq(other) { return other.tag == this.tag; }
      toDOM() { return document.createElement(this.tag); }
      updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
      get isHidden() { return true; }
  }
  NullWidget.inline = /*@__PURE__*/new NullWidget("span");
  NullWidget.block = /*@__PURE__*/new NullWidget("div");

  /**
  Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  */
  var Direction = /*@__PURE__*/(function (Direction) {
      // (These are chosen to match the base levels, in bidi algorithm
      // terms, of spans in that direction.)
      /**
      Left-to-right.
      */
      Direction[Direction["LTR"] = 0] = "LTR";
      /**
      Right-to-left.
      */
      Direction[Direction["RTL"] = 1] = "RTL";
  return Direction})(Direction || (Direction = {}));
  const LTR = Direction.LTR, RTL = Direction.RTL;
  // Decode a string with each type encoded as log2(type)
  function dec(str) {
      let result = [];
      for (let i = 0; i < str.length; i++)
          result.push(1 << +str[i]);
      return result;
  }
  // Character types for codepoints 0 to 0xf8
  const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
  // Character types for codepoints 0x600 to 0x6f9
  const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
  const Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];
  // There's a lot more in
  // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
  // which are left out to keep code size down.
  for (let p of ["()", "[]", "{}"]) {
      let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);
      Brackets[l] = r;
      Brackets[r] = -l;
  }
  function charType(ch) {
      return ch <= 0xf7 ? LowTypes[ch] :
          0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ :
              0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
                  0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ :
                      0x2000 <= ch && ch <= 0x200c ? 256 /* T.NI */ :
                          0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ : 1 /* T.L */;
  }
  const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
  /**
  Represents a contiguous range of text that has a single direction
  (as in left-to-right or right-to-left).
  */
  class BidiSpan {
      /**
      The direction of this span.
      */
      get dir() { return this.level % 2 ? RTL : LTR; }
      /**
      @internal
      */
      constructor(
      /**
      The start of the span (relative to the start of the line).
      */
      from, 
      /**
      The end of the span.
      */
      to, 
      /**
      The ["bidi
      level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
      of the span (in this context, 0 means
      left-to-right, 1 means right-to-left, 2 means left-to-right
      number inside right-to-left text).
      */
      level) {
          this.from = from;
          this.to = to;
          this.level = level;
      }
      /**
      @internal
      */
      side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
      /**
      @internal
      */
      forward(forward, dir) { return forward == (this.dir == dir); }
      /**
      @internal
      */
      static find(order, index, level, assoc) {
          let maybe = -1;
          for (let i = 0; i < order.length; i++) {
              let span = order[i];
              if (span.from <= index && span.to >= index) {
                  if (span.level == level)
                      return i;
                  // When multiple spans match, if assoc != 0, take the one that
                  // covers that side, otherwise take the one with the minimum
                  // level.
                  if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
                      maybe = i;
              }
          }
          if (maybe < 0)
              throw new RangeError("Index out of range");
          return maybe;
      }
  }
  function isolatesEq(a, b) {
      if (a.length != b.length)
          return false;
      for (let i = 0; i < a.length; i++) {
          let iA = a[i], iB = b[i];
          if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))
              return false;
      }
      return true;
  }
  // Reused array of character types
  const types = [];
  // Fill in the character types (in `types`) from `from` to `to` and
  // apply W normalization rules.
  function computeCharTypes(line, rFrom, rTo, isolates, outerType) {
      for (let iI = 0; iI <= isolates.length; iI++) {
          let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
          let prevType = iI ? 256 /* T.NI */ : outerType;
          // W1. Examine each non-spacing mark (NSM) in the level run, and
          // change the type of the NSM to the type of the previous
          // character. If the NSM is at the start of the level run, it will
          // get the type of sor.
          // W2. Search backwards from each instance of a European number
          // until the first strong type (R, L, AL, or sor) is found. If an
          // AL is found, change the type of the European number to Arabic
          // number.
          // W3. Change all ALs to R.
          // (Left after this: L, R, EN, AN, ET, CS, NI)
          for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
              let type = charType(line.charCodeAt(i));
              if (type == 512 /* T.NSM */)
                  type = prev;
              else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */)
                  type = 16 /* T.AN */;
              types[i] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;
              if (type & 7 /* T.Strong */)
                  prevStrong = type;
              prev = type;
          }
          // W5. A sequence of European terminators adjacent to European
          // numbers changes to all European numbers.
          // W6. Otherwise, separators and terminators change to Other
          // Neutral.
          // W7. Search backwards from each instance of a European number
          // until the first strong type (R, L, or sor) is found. If an L is
          // found, then change the type of the European number to L.
          // (Left after this: L, R, EN+AN, NI)
          for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
              let type = types[i];
              if (type == 128 /* T.CS */) {
                  if (i < to - 1 && prev == types[i + 1] && (prev & 24 /* T.Num */))
                      type = types[i] = prev;
                  else
                      types[i] = 256 /* T.NI */;
              }
              else if (type == 64 /* T.ET */) {
                  let end = i + 1;
                  while (end < to && types[end] == 64 /* T.ET */)
                      end++;
                  let replace = (i && prev == 8 /* T.EN */) || (end < rTo && types[end] == 8 /* T.EN */) ? (prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */) : 256 /* T.NI */;
                  for (let j = i; j < end; j++)
                      types[j] = replace;
                  i = end - 1;
              }
              else if (type == 8 /* T.EN */ && prevStrong == 1 /* T.L */) {
                  types[i] = 1 /* T.L */;
              }
              prev = type;
              if (type & 7 /* T.Strong */)
                  prevStrong = type;
          }
      }
  }
  // Process brackets throughout a run sequence.
  function processBracketPairs(line, rFrom, rTo, isolates, outerType) {
      let oppositeType = outerType == 1 /* T.L */ ? 2 /* T.R */ : 1 /* T.L */;
      for (let iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {
          let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
          // N0. Process bracket pairs in an isolating run sequence
          // sequentially in the logical order of the text positions of the
          // opening paired brackets using the logic given below. Within this
          // scope, bidirectional types EN and AN are treated as R.
          for (let i = from, ch, br, type; i < to; i++) {
              // Keeps [startIndex, type, strongSeen] triples for each open
              // bracket on BracketStack.
              if (br = Brackets[ch = line.charCodeAt(i)]) {
                  if (br < 0) { // Closing bracket
                      for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                          if (BracketStack[sJ + 1] == -br) {
                              let flags = BracketStack[sJ + 2];
                              let type = (flags & 2 /* Bracketed.EmbedInside */) ? outerType :
                                  !(flags & 4 /* Bracketed.OppositeInside */) ? 0 :
                                      (flags & 1 /* Bracketed.OppositeBefore */) ? oppositeType : outerType;
                              if (type)
                                  types[i] = types[BracketStack[sJ]] = type;
                              sI = sJ;
                              break;
                          }
                      }
                  }
                  else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {
                      break;
                  }
                  else {
                      BracketStack[sI++] = i;
                      BracketStack[sI++] = ch;
                      BracketStack[sI++] = context;
                  }
              }
              else if ((type = types[i]) == 2 /* T.R */ || type == 1 /* T.L */) {
                  let embed = type == outerType;
                  context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;
                  for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                      let cur = BracketStack[sJ + 2];
                      if (cur & 2 /* Bracketed.EmbedInside */)
                          break;
                      if (embed) {
                          BracketStack[sJ + 2] |= 2 /* Bracketed.EmbedInside */;
                      }
                      else {
                          if (cur & 4 /* Bracketed.OppositeInside */)
                              break;
                          BracketStack[sJ + 2] |= 4 /* Bracketed.OppositeInside */;
                      }
                  }
              }
          }
      }
  }
  function processNeutrals(rFrom, rTo, isolates, outerType) {
      for (let iI = 0, prev = outerType; iI <= isolates.length; iI++) {
          let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
          // N1. A sequence of neutrals takes the direction of the
          // surrounding strong text if the text on both sides has the same
          // direction. European and Arabic numbers act as if they were R in
          // terms of their influence on neutrals. Start-of-level-run (sor)
          // and end-of-level-run (eor) are used at level run boundaries.
          // N2. Any remaining neutrals take the embedding direction.
          // (Left after this: L, R, EN+AN)
          for (let i = from; i < to;) {
              let type = types[i];
              if (type == 256 /* T.NI */) {
                  let end = i + 1;
                  for (;;) {
                      if (end == to) {
                          if (iI == isolates.length)
                              break;
                          end = isolates[iI++].to;
                          to = iI < isolates.length ? isolates[iI].from : rTo;
                      }
                      else if (types[end] == 256 /* T.NI */) {
                          end++;
                      }
                      else {
                          break;
                      }
                  }
                  let beforeL = prev == 1 /* T.L */;
                  let afterL = (end < rTo ? types[end] : outerType) == 1 /* T.L */;
                  let replace = beforeL == afterL ? (beforeL ? 1 /* T.L */ : 2 /* T.R */) : outerType;
                  for (let j = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j > i;) {
                      if (j == fromJ) {
                          j = isolates[--jI].from;
                          fromJ = jI ? isolates[jI - 1].to : rFrom;
                      }
                      types[--j] = replace;
                  }
                  i = end;
              }
              else {
                  prev = type;
                  i++;
              }
          }
      }
  }
  // Find the contiguous ranges of character types in a given range, and
  // emit spans for them. Flip the order of the spans as appropriate
  // based on the level, and call through to compute the spans for
  // isolates at the proper point.
  function emitSpans(line, from, to, level, baseLevel, isolates, order) {
      let ourType = level % 2 ? 2 /* T.R */ : 1 /* T.L */;
      if ((level % 2) == (baseLevel % 2)) { // Same dir as base direction, don't flip
          for (let iCh = from, iI = 0; iCh < to;) {
              // Scan a section of characters in direction ourType, unless
              // there's another type of char right after iCh, in which case
              // we scan a section of other characters (which, if ourType ==
              // T.L, may contain both T.R and T.AN chars).
              let sameDir = true, isNum = false;
              if (iI == isolates.length || iCh < isolates[iI].from) {
                  let next = types[iCh];
                  if (next != ourType) {
                      sameDir = false;
                      isNum = next == 16 /* T.AN */;
                  }
              }
              // Holds an array of isolates to pass to a recursive call if we
              // must recurse (to distinguish T.AN inside an RTL section in
              // LTR text), null if we can emit directly
              let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
              let localLevel = sameDir ? level : level + 1;
              let iScan = iCh;
              run: for (;;) {
                  if (iI < isolates.length && iScan == isolates[iI].from) {
                      if (isNum)
                          break run;
                      let iso = isolates[iI];
                      // Scan ahead to verify that there is another char in this dir after the isolate(s)
                      if (!sameDir)
                          for (let upto = iso.to, jI = iI + 1;;) {
                              if (upto == to)
                                  break run;
                              if (jI < isolates.length && isolates[jI].from == upto)
                                  upto = isolates[jI++].to;
                              else if (types[upto] == ourType)
                                  break run;
                              else
                                  break;
                          }
                      iI++;
                      if (recurse) {
                          recurse.push(iso);
                      }
                      else {
                          if (iso.from > iCh)
                              order.push(new BidiSpan(iCh, iso.from, localLevel));
                          let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
                          computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
                          iCh = iso.to;
                      }
                      iScan = iso.to;
                  }
                  else if (iScan == to || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
                      break;
                  }
                  else {
                      iScan++;
                  }
              }
              if (recurse)
                  emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order);
              else if (iCh < iScan)
                  order.push(new BidiSpan(iCh, iScan, localLevel));
              iCh = iScan;
          }
      }
      else {
          // Iterate in reverse to flip the span order. Same code again, but
          // going from the back of the section to the front
          for (let iCh = to, iI = isolates.length; iCh > from;) {
              let sameDir = true, isNum = false;
              if (!iI || iCh > isolates[iI - 1].to) {
                  let next = types[iCh - 1];
                  if (next != ourType) {
                      sameDir = false;
                      isNum = next == 16 /* T.AN */;
                  }
              }
              let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
              let localLevel = sameDir ? level : level + 1;
              let iScan = iCh;
              run: for (;;) {
                  if (iI && iScan == isolates[iI - 1].to) {
                      if (isNum)
                          break run;
                      let iso = isolates[--iI];
                      // Scan ahead to verify that there is another char in this dir after the isolate(s)
                      if (!sameDir)
                          for (let upto = iso.from, jI = iI;;) {
                              if (upto == from)
                                  break run;
                              if (jI && isolates[jI - 1].to == upto)
                                  upto = isolates[--jI].from;
                              else if (types[upto - 1] == ourType)
                                  break run;
                              else
                                  break;
                          }
                      if (recurse) {
                          recurse.push(iso);
                      }
                      else {
                          if (iso.to < iCh)
                              order.push(new BidiSpan(iso.to, iCh, localLevel));
                          let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
                          computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
                          iCh = iso.from;
                      }
                      iScan = iso.from;
                  }
                  else if (iScan == from || (sameDir ? types[iScan - 1] != ourType : types[iScan - 1] == ourType)) {
                      break;
                  }
                  else {
                      iScan--;
                  }
              }
              if (recurse)
                  emitSpans(line, iScan, iCh, level + 1, baseLevel, recurse, order);
              else if (iScan < iCh)
                  order.push(new BidiSpan(iScan, iCh, localLevel));
              iCh = iScan;
          }
      }
  }
  function computeSectionOrder(line, level, baseLevel, isolates, from, to, order) {
      let outerType = (level % 2 ? 2 /* T.R */ : 1 /* T.L */);
      computeCharTypes(line, from, to, isolates, outerType);
      processBracketPairs(line, from, to, isolates, outerType);
      processNeutrals(from, to, isolates, outerType);
      emitSpans(line, from, to, level, baseLevel, isolates, order);
  }
  function computeOrder(line, direction, isolates) {
      if (!line)
          return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
      if (direction == LTR && !isolates.length && !BidiRE.test(line))
          return trivialOrder(line.length);
      if (isolates.length)
          while (line.length > types.length)
              types[types.length] = 256 /* T.NI */; // Make sure types array has no gaps
      let order = [], level = direction == LTR ? 0 : 1;
      computeSectionOrder(line, level, level, isolates, 0, line.length, order);
      return order;
  }
  function trivialOrder(length) {
      return [new BidiSpan(0, length, 0)];
  }
  let movedOver = "";
  // This implementation moves strictly visually, without concern for a
  // traversal visiting every logical position in the string. It will
  // still do so for simple input, but situations like multiple isolates
  // with the same level next to each other, or text going against the
  // main dir at the end of the line, will make some positions
  // unreachable with this motion. Each visible cursor position will
  // correspond to the lower-level bidi span that touches it.
  //
  // The alternative would be to solve an order globally for a given
  // line, making sure that it includes every position, but that would
  // require associating non-canonical (higher bidi span level)
  // positions with a given visual position, which is likely to confuse
  // people. (And would generally be a lot more complicated.)
  function moveVisually(line, order, dir, start, forward) {
      var _a;
      let startIndex = start.head - line.from;
      let spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
      let span = order[spanI], spanEnd = span.side(forward, dir);
      // End of span
      if (startIndex == spanEnd) {
          let nextI = spanI += forward ? 1 : -1;
          if (nextI < 0 || nextI >= order.length)
              return null;
          span = order[spanI = nextI];
          startIndex = span.side(!forward, dir);
          spanEnd = span.side(forward, dir);
      }
      let nextIndex = findClusterBreak(line.text, startIndex, span.forward(forward, dir));
      if (nextIndex < span.from || nextIndex > span.to)
          nextIndex = spanEnd;
      movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
      let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
      if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level)
          return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
      return EditorSelection.cursor(nextIndex + line.from, span.forward(forward, dir) ? -1 : 1, span.level);
  }
  function autoDirection(text, from, to) {
      for (let i = from; i < to; i++) {
          let type = charType(text.charCodeAt(i));
          if (type == 1 /* T.L */)
              return LTR;
          if (type == 2 /* T.R */ || type == 4 /* T.AL */)
              return RTL;
      }
      return LTR;
  }

  const clickAddsSelectionRange = /*@__PURE__*/Facet.define();
  const dragMovesSelection$1 = /*@__PURE__*/Facet.define();
  const mouseSelectionStyle = /*@__PURE__*/Facet.define();
  const exceptionSink = /*@__PURE__*/Facet.define();
  const updateListener = /*@__PURE__*/Facet.define();
  const inputHandler = /*@__PURE__*/Facet.define();
  const focusChangeEffect = /*@__PURE__*/Facet.define();
  const clipboardInputFilter = /*@__PURE__*/Facet.define();
  const clipboardOutputFilter = /*@__PURE__*/Facet.define();
  const perLineTextDirection = /*@__PURE__*/Facet.define({
      combine: values => values.some(x => x)
  });
  const nativeSelectionHidden = /*@__PURE__*/Facet.define({
      combine: values => values.some(x => x)
  });
  const scrollHandler = /*@__PURE__*/Facet.define();
  class ScrollTarget {
      constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5, 
      // This data structure is abused to also store precise scroll
      // snapshots, instead of a `scrollIntoView` request. When this
      // flag is `true`, `range` points at a position in the reference
      // line, `yMargin` holds the difference between the top of that
      // line and the top of the editor, and `xMargin` holds the
      // editor's `scrollLeft`.
      isSnapshot = false) {
          this.range = range;
          this.y = y;
          this.x = x;
          this.yMargin = yMargin;
          this.xMargin = xMargin;
          this.isSnapshot = isSnapshot;
      }
      map(changes) {
          return changes.empty ? this :
              new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
      }
      clip(state) {
          return this.range.to <= state.doc.length ? this :
              new ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
      }
  }
  const scrollIntoView = /*@__PURE__*/StateEffect.define({ map: (t, ch) => t.map(ch) });
  const setEditContextFormatting = /*@__PURE__*/StateEffect.define();
  /**
  Log or report an unhandled exception in client code. Should
  probably only be used by extension code that allows client code to
  provide functions, and calls those functions in a context where an
  exception can't be propagated to calling code in a reasonable way
  (for example when in an event handler).

  Either calls a handler registered with
  [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
  `window.onerror`, if defined, or `console.error` (in which case
  it'll pass `context`, when given, as first argument).
  */
  function logException(state, exception, context) {
      let handler = state.facet(exceptionSink);
      if (handler.length)
          handler[0](exception);
      else if (window.onerror)
          window.onerror(String(exception), context, undefined, undefined, exception);
      else if (context)
          console.error(context + ":", exception);
      else
          console.error(exception);
  }
  const editable = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });
  let nextPluginID = 0;
  const viewPlugin = /*@__PURE__*/Facet.define();
  /**
  View plugins associate stateful values with a view. They can
  influence the way the content is drawn, and are notified of things
  that happen in the view.
  */
  class ViewPlugin {
      constructor(
      /**
      @internal
      */
      id, 
      /**
      @internal
      */
      create, 
      /**
      @internal
      */
      domEventHandlers, 
      /**
      @internal
      */
      domEventObservers, buildExtensions) {
          this.id = id;
          this.create = create;
          this.domEventHandlers = domEventHandlers;
          this.domEventObservers = domEventObservers;
          this.extension = buildExtensions(this);
      }
      /**
      Define a plugin from a constructor function that creates the
      plugin's value, given an editor view.
      */
      static define(create, spec) {
          const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};
          return new ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, plugin => {
              let ext = [viewPlugin.of(plugin)];
              if (deco)
                  ext.push(decorations.of(view => {
                      let pluginInst = view.plugin(plugin);
                      return pluginInst ? deco(pluginInst) : Decoration.none;
                  }));
              if (provide)
                  ext.push(provide(plugin));
              return ext;
          });
      }
      /**
      Create a plugin for a class whose constructor takes a single
      editor view as argument.
      */
      static fromClass(cls, spec) {
          return ViewPlugin.define(view => new cls(view), spec);
      }
  }
  class PluginInstance {
      constructor(spec) {
          this.spec = spec;
          // When starting an update, all plugins have this field set to the
          // update object, indicating they need to be updated. When finished
          // updating, it is set to `false`. Retrieving a plugin that needs to
          // be updated with `view.plugin` forces an eager update.
          this.mustUpdate = null;
          // This is null when the plugin is initially created, but
          // initialized on the first update.
          this.value = null;
      }
      update(view) {
          if (!this.value) {
              if (this.spec) {
                  try {
                      this.value = this.spec.create(view);
                  }
                  catch (e) {
                      logException(view.state, e, "CodeMirror plugin crashed");
                      this.deactivate();
                  }
              }
          }
          else if (this.mustUpdate) {
              let update = this.mustUpdate;
              this.mustUpdate = null;
              if (this.value.update) {
                  try {
                      this.value.update(update);
                  }
                  catch (e) {
                      logException(update.state, e, "CodeMirror plugin crashed");
                      if (this.value.destroy)
                          try {
                              this.value.destroy();
                          }
                          catch (_) { }
                      this.deactivate();
                  }
              }
          }
          return this;
      }
      destroy(view) {
          var _a;
          if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
              try {
                  this.value.destroy();
              }
              catch (e) {
                  logException(view.state, e, "CodeMirror plugin crashed");
              }
          }
      }
      deactivate() {
          this.spec = this.value = null;
      }
  }
  const editorAttributes = /*@__PURE__*/Facet.define();
  const contentAttributes = /*@__PURE__*/Facet.define();
  // Provide decorations
  const decorations = /*@__PURE__*/Facet.define();
  const outerDecorations = /*@__PURE__*/Facet.define();
  const atomicRanges = /*@__PURE__*/Facet.define();
  const bidiIsolatedRanges = /*@__PURE__*/Facet.define();
  function getIsolatedRanges(view, line) {
      let isolates = view.state.facet(bidiIsolatedRanges);
      if (!isolates.length)
          return isolates;
      let sets = isolates.map(i => i instanceof Function ? i(view) : i);
      let result = [];
      RangeSet.spans(sets, line.from, line.to, {
          point() { },
          span(fromDoc, toDoc, active, open) {
              let from = fromDoc - line.from, to = toDoc - line.from;
              let level = result;
              for (let i = active.length - 1; i >= 0; i--, open--) {
                  let direction = active[i].spec.bidiIsolate, update;
                  if (direction == null)
                      direction = autoDirection(line.text, from, to);
                  if (open > 0 && level.length &&
                      (update = level[level.length - 1]).to == from && update.direction == direction) {
                      update.to = to;
                      level = update.inner;
                  }
                  else {
                      let add = { from, to, direction, inner: [] };
                      level.push(add);
                      level = add.inner;
                  }
              }
          }
      });
      return result;
  }
  const scrollMargins = /*@__PURE__*/Facet.define();
  function getScrollMargins(view) {
      let left = 0, right = 0, top = 0, bottom = 0;
      for (let source of view.state.facet(scrollMargins)) {
          let m = source(view);
          if (m) {
              if (m.left != null)
                  left = Math.max(left, m.left);
              if (m.right != null)
                  right = Math.max(right, m.right);
              if (m.top != null)
                  top = Math.max(top, m.top);
              if (m.bottom != null)
                  bottom = Math.max(bottom, m.bottom);
          }
      }
      return { left, right, top, bottom };
  }
  const styleModule = /*@__PURE__*/Facet.define();
  class ChangedRange {
      constructor(fromA, toA, fromB, toB) {
          this.fromA = fromA;
          this.toA = toA;
          this.fromB = fromB;
          this.toB = toB;
      }
      join(other) {
          return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
      }
      addToSet(set) {
          let i = set.length, me = this;
          for (; i > 0; i--) {
              let range = set[i - 1];
              if (range.fromA > me.toA)
                  continue;
              if (range.toA < me.fromA)
                  break;
              me = me.join(range);
              set.splice(i - 1, 1);
          }
          set.splice(i, 0, me);
          return set;
      }
      static extendWithRanges(diff, ranges) {
          if (ranges.length == 0)
              return diff;
          let result = [];
          for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
              let next = dI == diff.length ? null : diff[dI], off = posA - posB;
              let end = next ? next.fromB : 1e9;
              while (rI < ranges.length && ranges[rI] < end) {
                  let from = ranges[rI], to = ranges[rI + 1];
                  let fromB = Math.max(posB, from), toB = Math.min(end, to);
                  if (fromB <= toB)
                      new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                  if (to > end)
                      break;
                  else
                      rI += 2;
              }
              if (!next)
                  return result;
              new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
              posA = next.toA;
              posB = next.toB;
          }
      }
  }
  /**
  View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
  class, which describe what happened, whenever the view is updated.
  */
  class ViewUpdate {
      constructor(
      /**
      The editor view that the update is associated with.
      */
      view, 
      /**
      The new editor state.
      */
      state, 
      /**
      The transactions involved in the update. May be empty.
      */
      transactions) {
          this.view = view;
          this.state = state;
          this.transactions = transactions;
          /**
          @internal
          */
          this.flags = 0;
          this.startState = view.state;
          this.changes = ChangeSet.empty(this.startState.doc.length);
          for (let tr of transactions)
              this.changes = this.changes.compose(tr.changes);
          let changedRanges = [];
          this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
          this.changedRanges = changedRanges;
      }
      /**
      @internal
      */
      static create(view, state, transactions) {
          return new ViewUpdate(view, state, transactions);
      }
      /**
      Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
      [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
      update.
      */
      get viewportChanged() {
          return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;
      }
      /**
      Returns true when
      [`viewportChanged`](https://codemirror.net/6/docs/ref/#view.ViewUpdate.viewportChanged) is true
      and the viewport change is not just the result of mapping it in
      response to document changes.
      */
      get viewportMoved() {
          return (this.flags & 8 /* UpdateFlag.ViewportMoved */) > 0;
      }
      /**
      Indicates whether the height of a block element in the editor
      changed in this update.
      */
      get heightChanged() {
          return (this.flags & 2 /* UpdateFlag.Height */) > 0;
      }
      /**
      Returns true when the document was modified or the size of the
      editor, or elements within the editor, changed.
      */
      get geometryChanged() {
          return this.docChanged || (this.flags & (16 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;
      }
      /**
      True when this update indicates a focus change.
      */
      get focusChanged() {
          return (this.flags & 1 /* UpdateFlag.Focus */) > 0;
      }
      /**
      Whether the document changed in this update.
      */
      get docChanged() {
          return !this.changes.empty;
      }
      /**
      Whether the selection was explicitly set in this update.
      */
      get selectionSet() {
          return this.transactions.some(tr => tr.selection);
      }
      /**
      @internal
      */
      get empty() { return this.flags == 0 && this.transactions.length == 0; }
  }

  class DocView extends ContentView {
      get length() { return this.view.state.doc.length; }
      constructor(view) {
          super();
          this.view = view;
          this.decorations = [];
          this.dynamicDecorationMap = [false];
          this.domChanged = null;
          this.hasComposition = null;
          this.markedForComposition = new Set;
          this.editContextFormatting = Decoration.none;
          this.lastCompositionAfterCursor = false;
          // Track a minimum width for the editor. When measuring sizes in
          // measureVisibleLineHeights, this is updated to point at the width
          // of a given element and its extent in the document. When a change
          // happens in that range, these are reset. That way, once we've seen
          // a line/element of a given length, we keep the editor wide enough
          // to fit at least that element, until it is changed, at which point
          // we forget it again.
          this.minWidth = 0;
          this.minWidthFrom = 0;
          this.minWidthTo = 0;
          // Track whether the DOM selection was set in a lossy way, so that
          // we don't mess it up when reading it back it
          this.impreciseAnchor = null;
          this.impreciseHead = null;
          this.forceSelection = false;
          // Used by the resize observer to ignore resizes that we caused
          // ourselves
          this.lastUpdate = Date.now();
          this.setDOM(view.contentDOM);
          this.children = [new LineView];
          this.children[0].setParent(this);
          this.updateDeco();
          this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
      }
      // Update the document view to a given state.
      update(update) {
          var _a;
          let changedRanges = update.changedRanges;
          if (this.minWidth > 0 && changedRanges.length) {
              if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
                  this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
              }
              else {
                  this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
                  this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
              }
          }
          this.updateEditContextFormatting(update);
          let readCompositionAt = -1;
          if (this.view.inputState.composing >= 0 && !this.view.observer.editContext) {
              if ((_a = this.domChanged) === null || _a === void 0 ? void 0 : _a.newSel)
                  readCompositionAt = this.domChanged.newSel.head;
              else if (!touchesComposition(update.changes, this.hasComposition) && !update.selectionSet)
                  readCompositionAt = update.state.selection.main.head;
          }
          let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update.changes, readCompositionAt) : null;
          this.domChanged = null;
          if (this.hasComposition) {
              this.markedForComposition.clear();
              let { from, to } = this.hasComposition;
              changedRanges = new ChangedRange(from, to, update.changes.mapPos(from, -1), update.changes.mapPos(to, 1))
                  .addToSet(changedRanges.slice());
          }
          this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
          // When the DOM nodes around the selection are moved to another
          // parent, Chrome sometimes reports a different selection through
          // getSelection than the one that it actually shows to the user.
          // This forces a selection update when lines are joined to work
          // around that. Issue #54
          if ((browser.ie || browser.chrome) && !composition && update &&
              update.state.doc.lines != update.startState.doc.lines)
              this.forceSelection = true;
          let prevDeco = this.decorations, deco = this.updateDeco();
          let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
          changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
          if (!(this.flags & 7 /* ViewFlag.Dirty */) && changedRanges.length == 0) {
              return false;
          }
          else {
              this.updateInner(changedRanges, update.startState.doc.length, composition);
              if (update.transactions.length)
                  this.lastUpdate = Date.now();
              return true;
          }
      }
      // Used by update and the constructor do perform the actual DOM
      // update
      updateInner(changes, oldLength, composition) {
          this.view.viewState.mustMeasureContent = true;
          this.updateChildren(changes, oldLength, composition);
          let { observer } = this.view;
          observer.ignore(() => {
              // Lock the height during redrawing, since Chrome sometimes
              // messes with the scroll position during DOM mutation (though
              // no relayout is triggered and I cannot imagine how it can
              // recompute the scroll position without a layout)
              this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
              this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
              // Chrome will sometimes, when DOM mutations occur directly
              // around the selection, get confused and report a different
              // selection from the one it displays (issue #218). This tries
              // to detect that situation.
              let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;
              this.sync(this.view, track);
              this.flags &= -8 /* ViewFlag.Dirty */;
              if (track && (track.written || observer.selectionRange.focusNode != track.node))
                  this.forceSelection = true;
              this.dom.style.height = "";
          });
          this.markedForComposition.forEach(cView => cView.flags &= -9 /* ViewFlag.Composition */);
          let gaps = [];
          if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
              for (let child of this.children)
                  if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
                      gaps.push(child.dom);
          observer.updateGaps(gaps);
      }
      updateChildren(changes, oldLength, composition) {
          let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
          let cursor = this.childCursor(oldLength);
          for (let i = ranges.length - 1;; i--) {
              let next = i >= 0 ? ranges[i] : null;
              if (!next)
                  break;
              let { fromA, toA, fromB, toB } = next, content, breakAtStart, openStart, openEnd;
              if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
                  let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
                  let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
                  breakAtStart = before.breakAtStart;
                  openStart = before.openStart;
                  openEnd = after.openEnd;
                  let compLine = this.compositionView(composition);
                  if (after.breakAtStart) {
                      compLine.breakAfter = 1;
                  }
                  else if (after.content.length &&
                      compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
                      compLine.breakAfter = after.content[0].breakAfter;
                      after.content.shift();
                  }
                  if (before.content.length &&
                      compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
                      before.content.pop();
                  }
                  content = before.content.concat(compLine).concat(after.content);
              }
              else {
                  ({ content, breakAtStart, openStart, openEnd } =
                      ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
              }
              let { i: toI, off: toOff } = cursor.findPos(toA, 1);
              let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
              replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
          }
          if (composition)
              this.fixCompositionDOM(composition);
      }
      updateEditContextFormatting(update) {
          this.editContextFormatting = this.editContextFormatting.map(update.changes);
          for (let tr of update.transactions)
              for (let effect of tr.effects)
                  if (effect.is(setEditContextFormatting)) {
                      this.editContextFormatting = effect.value;
                  }
      }
      compositionView(composition) {
          let cur = new TextView(composition.text.nodeValue);
          cur.flags |= 8 /* ViewFlag.Composition */;
          for (let { deco } of composition.marks)
              cur = new MarkView(deco, [cur], cur.length);
          let line = new LineView;
          line.append(cur, 0);
          return line;
      }
      fixCompositionDOM(composition) {
          let fix = (dom, cView) => {
              cView.flags |= 8 /* ViewFlag.Composition */ | (cView.children.some(c => c.flags & 7 /* ViewFlag.Dirty */) ? 1 /* ViewFlag.ChildDirty */ : 0);
              this.markedForComposition.add(cView);
              let prev = ContentView.get(dom);
              if (prev && prev != cView)
                  prev.dom = null;
              cView.setDOM(dom);
          };
          let pos = this.childPos(composition.range.fromB, 1);
          let cView = this.children[pos.i];
          fix(composition.line, cView);
          for (let i = composition.marks.length - 1; i >= -1; i--) {
              pos = cView.childPos(pos.off, 1);
              cView = cView.children[pos.i];
              fix(i >= 0 ? composition.marks[i].node : composition.text, cView);
          }
      }
      // Sync the DOM selection to this.state.selection
      updateSelection(mustRead = false, fromPointer = false) {
          if (mustRead || !this.view.observer.selectionRange.focusNode)
              this.view.observer.readSelectionRange();
          let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
          let selectionNotFocus = !focused && !(this.view.state.facet(editable) || this.dom.tabIndex > -1) &&
              hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
          if (!(focused || fromPointer || selectionNotFocus))
              return;
          let force = this.forceSelection;
          this.forceSelection = false;
          let main = this.view.state.selection.main;
          let anchor = this.moveToLine(this.domAtPos(main.anchor));
          let head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
          // Always reset on Firefox when next to an uneditable node to
          // avoid invisible cursor bugs (#111)
          if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
              let dummy = document.createTextNode("");
              this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
              anchor = head = new DOMPos(dummy, 0);
              force = true;
          }
          let domSel = this.view.observer.selectionRange;
          // If the selection is already here, or in an equivalent position, don't touch it
          if (force || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
              !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {
              this.view.observer.ignore(() => {
                  // Chrome Android will hide the virtual keyboard when tapping
                  // inside an uneditable node, and not bring it back when we
                  // move the cursor to its proper position. This tries to
                  // restore the keyboard by cycling focus.
                  if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) &&
                      inUneditable(domSel.focusNode, this.dom)) {
                      this.dom.blur();
                      this.dom.focus({ preventScroll: true });
                  }
                  let rawSel = getSelection(this.view.root);
                  if (!rawSel) ;
                  else if (main.empty) {
                      // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                      if (browser.gecko) {
                          let nextTo = nextToUneditable(anchor.node, anchor.offset);
                          if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {
                              let text = (nextTo == 1 /* NextTo.Before */ ? textNodeBefore : textNodeAfter)(anchor.node, anchor.offset);
                              if (text)
                                  anchor = new DOMPos(text.node, text.offset);
                          }
                      }
                      rawSel.collapse(anchor.node, anchor.offset);
                      if (main.bidiLevel != null && rawSel.caretBidiLevel !== undefined)
                          rawSel.caretBidiLevel = main.bidiLevel;
                  }
                  else if (rawSel.extend) {
                      // Selection.extend can be used to create an 'inverted' selection
                      // (one where the focus is before the anchor), but not all
                      // browsers support it yet.
                      rawSel.collapse(anchor.node, anchor.offset);
                      // Safari will ignore the call above when the editor is
                      // hidden, and then raise an error on the call to extend
                      // (#940).
                      try {
                          rawSel.extend(head.node, head.offset);
                      }
                      catch (_) { }
                  }
                  else {
                      // Primitive (IE) way
                      let range = document.createRange();
                      if (main.anchor > main.head)
                          [anchor, head] = [head, anchor];
                      range.setEnd(head.node, head.offset);
                      range.setStart(anchor.node, anchor.offset);
                      rawSel.removeAllRanges();
                      rawSel.addRange(range);
                  }
                  if (selectionNotFocus && this.view.root.activeElement == this.dom) {
                      this.dom.blur();
                      if (activeElt)
                          activeElt.focus();
                  }
              });
              this.view.observer.setSelectionRange(anchor, head);
          }
          this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
          this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
      }
      // If a zero-length widget is inserted next to the cursor during
      // composition, avoid moving it across it and disrupting the
      // composition.
      suppressWidgetCursorChange(sel, cursor) {
          return this.hasComposition && cursor.empty &&
              isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) &&
              this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor.head;
      }
      enforceCursorAssoc() {
          if (this.hasComposition)
              return;
          let { view } = this, cursor = view.state.selection.main;
          let sel = getSelection(view.root);
          let { anchorNode, anchorOffset } = view.observer.selectionRange;
          if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
              return;
          let line = LineView.find(this, cursor.head);
          if (!line)
              return;
          let lineStart = line.posAtStart;
          if (cursor.head == lineStart || cursor.head == lineStart + line.length)
              return;
          let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
          if (!before || !after || before.bottom > after.top)
              return;
          let dom = this.domAtPos(cursor.head + cursor.assoc);
          sel.collapse(dom.node, dom.offset);
          sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
          // This can go wrong in corner cases like single-character lines,
          // so check and reset if necessary.
          view.observer.readSelectionRange();
          let newRange = view.observer.selectionRange;
          if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
              sel.collapse(anchorNode, anchorOffset);
      }
      // If a position is in/near a block widget, move it to a nearby text
      // line, since we don't want the cursor inside a block widget.
      moveToLine(pos) {
          // Block widgets will return positions before/after them, which
          // are thus directly in the document DOM element.
          let dom = this.dom, newPos;
          if (pos.node != dom)
              return pos;
          for (let i = pos.offset; !newPos && i < dom.childNodes.length; i++) {
              let view = ContentView.get(dom.childNodes[i]);
              if (view instanceof LineView)
                  newPos = view.domAtPos(0);
          }
          for (let i = pos.offset - 1; !newPos && i >= 0; i--) {
              let view = ContentView.get(dom.childNodes[i]);
              if (view instanceof LineView)
                  newPos = view.domAtPos(view.length);
          }
          return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
      }
      nearest(dom) {
          for (let cur = dom; cur;) {
              let domView = ContentView.get(cur);
              if (domView && domView.rootView == this)
                  return domView;
              cur = cur.parentNode;
          }
          return null;
      }
      posFromDOM(node, offset) {
          let view = this.nearest(node);
          if (!view)
              throw new RangeError("Trying to find position for a DOM position outside of the document");
          return view.localPosFromDOM(node, offset) + view.posAtStart;
      }
      domAtPos(pos) {
          let { i, off } = this.childCursor().findPos(pos, -1);
          for (; i < this.children.length - 1;) {
              let child = this.children[i];
              if (off < child.length || child instanceof LineView)
                  break;
              i++;
              off = 0;
          }
          return this.children[i].domAtPos(off);
      }
      coordsAt(pos, side) {
          let best = null, bestPos = 0;
          for (let off = this.length, i = this.children.length - 1; i >= 0; i--) {
              let child = this.children[i], end = off - child.breakAfter, start = end - child.length;
              if (end < pos)
                  break;
              if (start <= pos && (start < pos || child.covers(-1)) && (end > pos || child.covers(1)) &&
                  (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
                  best = child;
                  bestPos = start;
              }
              else if (best && start == pos && end == pos && child instanceof BlockWidgetView && Math.abs(side) < 2) {
                  if (child.deco.startSide < 0)
                      break;
                  else if (i)
                      best = null;
              }
              off = start;
          }
          return best ? best.coordsAt(pos - bestPos, side) : null;
      }
      coordsForChar(pos) {
          let { i, off } = this.childPos(pos, 1), child = this.children[i];
          if (!(child instanceof LineView))
              return null;
          while (child.children.length) {
              let { i, off: childOff } = child.childPos(off, 1);
              for (;; i++) {
                  if (i == child.children.length)
                      return null;
                  if ((child = child.children[i]).length)
                      break;
              }
              off = childOff;
          }
          if (!(child instanceof TextView))
              return null;
          let end = findClusterBreak(child.text, off);
          if (end == off)
              return null;
          let rects = textRange(child.dom, off, end).getClientRects();
          for (let i = 0; i < rects.length; i++) {
              let rect = rects[i];
              if (i == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right)
                  return rect;
          }
          return null;
      }
      measureVisibleLineHeights(viewport) {
          let result = [], { from, to } = viewport;
          let contentWidth = this.view.contentDOM.clientWidth;
          let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
          let widest = -1, ltr = this.view.textDirection == Direction.LTR;
          for (let pos = 0, i = 0; i < this.children.length; i++) {
              let child = this.children[i], end = pos + child.length;
              if (end > to)
                  break;
              if (pos >= from) {
                  let childRect = child.dom.getBoundingClientRect();
                  result.push(childRect.height);
                  if (isWider) {
                      let last = child.dom.lastChild;
                      let rects = last ? clientRectsFor(last) : [];
                      if (rects.length) {
                          let rect = rects[rects.length - 1];
                          let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
                          if (width > widest) {
                              widest = width;
                              this.minWidth = contentWidth;
                              this.minWidthFrom = pos;
                              this.minWidthTo = end;
                          }
                      }
                  }
              }
              pos = end + child.breakAfter;
          }
          return result;
      }
      textDirectionAt(pos) {
          let { i } = this.childPos(pos, 1);
          return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
      }
      measureTextSize() {
          for (let child of this.children) {
              if (child instanceof LineView) {
                  let measure = child.measureTextSize();
                  if (measure)
                      return measure;
              }
          }
          // If no workable line exists, force a layout of a measurable element
          let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
          dummy.className = "cm-line";
          dummy.style.width = "99999px";
          dummy.style.position = "absolute";
          dummy.textContent = "abc def ghi jkl mno pqr stu";
          this.view.observer.ignore(() => {
              this.dom.appendChild(dummy);
              let rect = clientRectsFor(dummy.firstChild)[0];
              lineHeight = dummy.getBoundingClientRect().height;
              charWidth = rect ? rect.width / 27 : 7;
              textHeight = rect ? rect.height : lineHeight;
              dummy.remove();
          });
          return { lineHeight, charWidth, textHeight };
      }
      childCursor(pos = this.length) {
          // Move back to start of last element when possible, so that
          // `ChildCursor.findPos` doesn't have to deal with the edge case
          // of being after the last element.
          let i = this.children.length;
          if (i)
              pos -= this.children[--i].length;
          return new ChildCursor(this.children, pos, i);
      }
      computeBlockGapDeco() {
          let deco = [], vs = this.view.viewState;
          for (let pos = 0, i = 0;; i++) {
              let next = i == vs.viewports.length ? null : vs.viewports[i];
              let end = next ? next.from - 1 : this.length;
              if (end > pos) {
                  let height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
                  deco.push(Decoration.replace({
                      widget: new BlockGapWidget(height),
                      block: true,
                      inclusive: true,
                      isBlockGap: true,
                  }).range(pos, end));
              }
              if (!next)
                  break;
              pos = next.to + 1;
          }
          return Decoration.set(deco);
      }
      updateDeco() {
          let i = 1;
          let allDeco = this.view.state.facet(decorations).map(d => {
              let dynamic = this.dynamicDecorationMap[i++] = typeof d == "function";
              return dynamic ? d(this.view) : d;
          });
          let dynamicOuter = false, outerDeco = this.view.state.facet(outerDecorations).map((d, i) => {
              let dynamic = typeof d == "function";
              if (dynamic)
                  dynamicOuter = true;
              return dynamic ? d(this.view) : d;
          });
          if (outerDeco.length) {
              this.dynamicDecorationMap[i++] = dynamicOuter;
              allDeco.push(RangeSet.join(outerDeco));
          }
          this.decorations = [
              this.editContextFormatting,
              ...allDeco,
              this.computeBlockGapDeco(),
              this.view.viewState.lineGapDeco
          ];
          while (i < this.decorations.length)
              this.dynamicDecorationMap[i++] = false;
          return this.decorations;
      }
      scrollIntoView(target) {
          if (target.isSnapshot) {
              let ref = this.view.viewState.lineBlockAt(target.range.head);
              this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
              this.view.scrollDOM.scrollLeft = target.xMargin;
              return;
          }
          for (let handler of this.view.state.facet(scrollHandler)) {
              try {
                  if (handler(this.view, target.range, target))
                      return true;
              }
              catch (e) {
                  logException(this.view.state, e, "scroll handler");
              }
          }
          let { range } = target;
          let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
          if (!rect)
              return;
          if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
              rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),
                  right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };
          let margins = getScrollMargins(this.view);
          let targetRect = {
              left: rect.left - margins.left, top: rect.top - margins.top,
              right: rect.right + margins.right, bottom: rect.bottom + margins.bottom
          };
          let { offsetWidth, offsetHeight } = this.view.scrollDOM;
          scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);
      }
  }
  function betweenUneditable(pos) {
      return pos.node.nodeType == 1 && pos.node.firstChild &&
          (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
          (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
  }
  function findCompositionNode(view, headPos) {
      let sel = view.observer.selectionRange;
      if (!sel.focusNode)
          return null;
      let textBefore = textNodeBefore(sel.focusNode, sel.focusOffset);
      let textAfter = textNodeAfter(sel.focusNode, sel.focusOffset);
      let textNode = textBefore || textAfter;
      if (textAfter && textBefore && textAfter.node != textBefore.node) {
          let descAfter = ContentView.get(textAfter.node);
          if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {
              textNode = textAfter;
          }
          else if (view.docView.lastCompositionAfterCursor) {
              let descBefore = ContentView.get(textBefore.node);
              if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue))
                  textNode = textAfter;
          }
      }
      view.docView.lastCompositionAfterCursor = textNode != textBefore;
      if (!textNode)
          return null;
      let from = headPos - textNode.offset;
      return { from, to: from + textNode.node.nodeValue.length, node: textNode.node };
  }
  function findCompositionRange(view, changes, headPos) {
      let found = findCompositionNode(view, headPos);
      if (!found)
          return null;
      let { node: textNode, from, to } = found, text = textNode.nodeValue;
      // Don't try to preserve multi-line compositions
      if (/[\n\r]/.test(text))
          return null;
      if (view.state.doc.sliceString(found.from, found.to) != text)
          return null;
      let inv = changes.invertedDesc;
      let range = new ChangedRange(inv.mapPos(from), inv.mapPos(to), from, to);
      let marks = [];
      for (let parent = textNode.parentNode;; parent = parent.parentNode) {
          let parentView = ContentView.get(parent);
          if (parentView instanceof MarkView)
              marks.push({ node: parent, deco: parentView.mark });
          else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM)
              return { range, text: textNode, marks, line: parent };
          else if (parent != view.contentDOM)
              marks.push({ node: parent, deco: new MarkDecoration({
                      inclusive: true,
                      attributes: getAttrs(parent),
                      tagName: parent.tagName.toLowerCase()
                  }) });
          else
              return null;
      }
  }
  function nextToUneditable(node, offset) {
      if (node.nodeType != 1)
          return 0;
      return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* NextTo.Before */ : 0) |
          (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* NextTo.After */ : 0);
  }
  let DecorationComparator$1 = class DecorationComparator {
      constructor() {
          this.changes = [];
      }
      compareRange(from, to) { addRange(from, to, this.changes); }
      comparePoint(from, to) { addRange(from, to, this.changes); }
      boundChange(pos) { addRange(pos, pos, this.changes); }
  };
  function findChangedDeco(a, b, diff) {
      let comp = new DecorationComparator$1;
      RangeSet.compare(a, b, diff, comp);
      return comp.changes;
  }
  function inUneditable(node, inside) {
      for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
          if (cur.nodeType == 1 && cur.contentEditable == 'false') {
              return true;
          }
      }
      return false;
  }
  function touchesComposition(changes, composition) {
      let touched = false;
      if (composition)
          changes.iterChangedRanges((from, to) => {
              if (from < composition.to && to > composition.from)
                  touched = true;
          });
      return touched;
  }

  function groupAt(state, pos, bias = 1) {
      let categorize = state.charCategorizer(pos);
      let line = state.doc.lineAt(pos), linePos = pos - line.from;
      if (line.length == 0)
          return EditorSelection.cursor(pos);
      if (linePos == 0)
          bias = 1;
      else if (linePos == line.length)
          bias = -1;
      let from = linePos, to = linePos;
      if (bias < 0)
          from = findClusterBreak(line.text, linePos, false);
      else
          to = findClusterBreak(line.text, linePos);
      let cat = categorize(line.text.slice(from, to));
      while (from > 0) {
          let prev = findClusterBreak(line.text, from, false);
          if (categorize(line.text.slice(prev, from)) != cat)
              break;
          from = prev;
      }
      while (to < line.length) {
          let next = findClusterBreak(line.text, to);
          if (categorize(line.text.slice(to, next)) != cat)
              break;
          to = next;
      }
      return EditorSelection.range(from + line.from, to + line.from);
  }
  // Search the DOM for the {node, offset} position closest to the given
  // coordinates. Very inefficient and crude, but can usually be avoided
  // by calling caret(Position|Range)FromPoint instead.
  function getdx(x, rect) {
      return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
  }
  function getdy(y, rect) {
      return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
  }
  function yOverlap(a, b) {
      return a.top < b.bottom - 1 && a.bottom > b.top + 1;
  }
  function upTop(rect, top) {
      return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
  }
  function upBot(rect, bottom) {
      return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
  }
  function domPosAtCoords(parent, x, y) {
      let closest, closestRect, closestX, closestY, closestOverlap = false;
      let above, below, aboveRect, belowRect;
      for (let child = parent.firstChild; child; child = child.nextSibling) {
          let rects = clientRectsFor(child);
          for (let i = 0; i < rects.length; i++) {
              let rect = rects[i];
              if (closestRect && yOverlap(closestRect, rect))
                  rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
              let dx = getdx(x, rect), dy = getdy(y, rect);
              if (dx == 0 && dy == 0)
                  return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
              if (!closest || closestY > dy || closestY == dy && closestX > dx) {
                  closest = child;
                  closestRect = rect;
                  closestX = dx;
                  closestY = dy;
                  let side = dy ? (y < rect.top ? -1 : 1) : dx ? (x < rect.left ? -1 : 1) : 0;
                  closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);
              }
              if (dx == 0) {
                  if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                      above = child;
                      aboveRect = rect;
                  }
                  else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                      below = child;
                      belowRect = rect;
                  }
              }
              else if (aboveRect && yOverlap(aboveRect, rect)) {
                  aboveRect = upBot(aboveRect, rect.bottom);
              }
              else if (belowRect && yOverlap(belowRect, rect)) {
                  belowRect = upTop(belowRect, rect.top);
              }
          }
      }
      if (aboveRect && aboveRect.bottom >= y) {
          closest = above;
          closestRect = aboveRect;
      }
      else if (belowRect && belowRect.top <= y) {
          closest = below;
          closestRect = belowRect;
      }
      if (!closest)
          return { node: parent, offset: 0 };
      let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
      if (closest.nodeType == 3)
          return domPosInText(closest, clipX, y);
      if (closestOverlap && closest.contentEditable != "false")
          return domPosAtCoords(closest, clipX, y);
      let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
          (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
      return { node: parent, offset };
  }
  function domPosInText(node, x, y) {
      let len = node.nodeValue.length;
      let closestOffset = -1, closestDY = 1e9, generalSide = 0;
      for (let i = 0; i < len; i++) {
          let rects = textRange(node, i, i + 1).getClientRects();
          for (let j = 0; j < rects.length; j++) {
              let rect = rects[j];
              if (rect.top == rect.bottom)
                  continue;
              if (!generalSide)
                  generalSide = x - rect.left;
              let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
              if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
                  let right = x >= (rect.left + rect.right) / 2, after = right;
                  if (browser.chrome || browser.gecko) {
                      // Check for RTL on browsers that support getting client
                      // rects for empty ranges.
                      let rectBefore = textRange(node, i).getBoundingClientRect();
                      if (rectBefore.left == rect.right)
                          after = !right;
                  }
                  if (dy <= 0)
                      return { node, offset: i + (after ? 1 : 0) };
                  closestOffset = i + (after ? 1 : 0);
                  closestDY = dy;
              }
          }
      }
      return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
  }
  function posAtCoords(view, coords, precise, bias = -1) {
      var _a, _b;
      let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;
      let block, { docHeight } = view.viewState;
      let { x, y } = coords, yOffset = y - docTop;
      if (yOffset < 0)
          return 0;
      if (yOffset > docHeight)
          return view.state.doc.length;
      // Scan for a text block near the queried y position
      for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false;;) {
          block = view.elementAtHeight(yOffset);
          if (block.type == BlockType.Text)
              break;
          for (;;) {
              // Move the y position out of this block
              yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
              if (yOffset >= 0 && yOffset <= docHeight)
                  break;
              // If the document consists entirely of replaced widgets, we
              // won't find a text block, so return 0
              if (bounced)
                  return precise ? null : 0;
              bounced = true;
              bias = -bias;
          }
      }
      y = docTop + yOffset;
      let lineStart = block.from;
      // If this is outside of the rendered viewport, we can't determine a position
      if (lineStart < view.viewport.from)
          return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
      if (lineStart > view.viewport.to)
          return view.viewport.to == view.state.doc.length ? view.state.doc.length :
              precise ? null : posAtCoordsImprecise(view, content, block, x, y);
      // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
      let doc = view.dom.ownerDocument;
      let root = view.root.elementFromPoint ? view.root : doc;
      let element = root.elementFromPoint(x, y);
      if (element && !view.contentDOM.contains(element))
          element = null;
      // If the element is unexpected, clip x at the sides of the content area and try again
      if (!element) {
          x = Math.max(content.left + 1, Math.min(content.right - 1, x));
          element = root.elementFromPoint(x, y);
          if (element && !view.contentDOM.contains(element))
              element = null;
      }
      // There's visible editor content under the point, so we can try
      // using caret(Position|Range)FromPoint as a shortcut
      let node, offset = -1;
      if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
          if (doc.caretPositionFromPoint) {
              let pos = doc.caretPositionFromPoint(x, y);
              if (pos)
                  ({ offsetNode: node, offset } = pos);
          }
          else if (doc.caretRangeFromPoint) {
              let range = doc.caretRangeFromPoint(x, y);
              if (range) {
                  ({ startContainer: node, startOffset: offset } = range);
                  if (!view.contentDOM.contains(node) ||
                      browser.safari && isSuspiciousSafariCaretResult(node, offset, x) ||
                      browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))
                      node = undefined;
              }
          }
          // Chrome will return offsets into <input> elements without child
          // nodes, which will lead to a null deref below, so clip the
          // offset to the node size.
          if (node)
              offset = Math.min(maxOffset(node), offset);
      }
      // No luck, do our own (potentially expensive) search
      if (!node || !view.docView.dom.contains(node)) {
          let line = LineView.find(view.docView, lineStart);
          if (!line)
              return yOffset > block.top + block.height / 2 ? block.to : block.from;
          ({ node, offset } = domPosAtCoords(line.dom, x, y));
      }
      let nearest = view.docView.nearest(node);
      if (!nearest)
          return null;
      if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
          let rect = nearest.dom.getBoundingClientRect();
          return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2
              ? nearest.posAtStart : nearest.posAtEnd;
      }
      else {
          return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
      }
  }
  function posAtCoordsImprecise(view, contentRect, block, x, y) {
      let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
      if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
          let textHeight = view.viewState.heightOracle.textHeight;
          let line = Math.floor((y - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
          into += line * view.viewState.heightOracle.lineLength;
      }
      let content = view.state.sliceDoc(block.from, block.to);
      return block.from + findColumn(content, into, view.state.tabSize);
  }
  // In case of a high line height, Safari's caretRangeFromPoint treats
  // the space between lines as belonging to the last character of the
  // line before. This is used to detect such a result so that it can be
  // ignored (issue #401).
  function isSuspiciousSafariCaretResult(node, offset, x) {
      let len;
      if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
          return false;
      for (let next = node.nextSibling; next; next = next.nextSibling)
          if (next.nodeType != 1 || next.nodeName != "BR")
              return false;
      return textRange(node, len - 1, len).getBoundingClientRect().left > x;
  }
  // Chrome will move positions between lines to the start of the next line
  function isSuspiciousChromeCaretResult(node, offset, x) {
      if (offset != 0)
          return false;
      for (let cur = node;;) {
          let parent = cur.parentNode;
          if (!parent || parent.nodeType != 1 || parent.firstChild != cur)
              return false;
          if (parent.classList.contains("cm-line"))
              break;
          cur = parent;
      }
      let rect = node.nodeType == 1 ? node.getBoundingClientRect()
          : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
      return x - rect.left > 5;
  }
  function blockAt(view, pos) {
      let line = view.lineBlockAt(pos);
      if (Array.isArray(line.type))
          for (let l of line.type) {
              if (l.to > pos || l.to == pos && (l.to == line.to || l.type == BlockType.Text))
                  return l;
          }
      return line;
  }
  function moveToLineBoundary(view, start, forward, includeWrap) {
      let line = blockAt(view, start.head);
      let coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null
          : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
      if (coords) {
          let editorRect = view.dom.getBoundingClientRect();
          let direction = view.textDirectionAt(line.from);
          let pos = view.posAtCoords({ x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
              y: (coords.top + coords.bottom) / 2 });
          if (pos != null)
              return EditorSelection.cursor(pos, forward ? -1 : 1);
      }
      return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
  }
  function moveByChar(view, start, forward, by) {
      let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
      let direction = view.textDirectionAt(line.from);
      for (let cur = start, check = null;;) {
          let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;
          if (!next) {
              if (line.number == (forward ? view.state.doc.lines : 1))
                  return cur;
              char = "\n";
              line = view.state.doc.line(line.number + (forward ? 1 : -1));
              spans = view.bidiSpans(line);
              next = view.visualLineSide(line, !forward);
          }
          if (!check) {
              if (!by)
                  return next;
              check = by(char);
          }
          else if (!check(char)) {
              return cur;
          }
          cur = next;
      }
  }
  function byGroup(view, pos, start) {
      let categorize = view.state.charCategorizer(pos);
      let cat = categorize(start);
      return (next) => {
          let nextCat = categorize(next);
          if (cat == CharCategory.Space)
              cat = nextCat;
          return cat == nextCat;
      };
  }
  function moveVertically(view, start, forward, distance) {
      let startPos = start.head, dir = forward ? 1 : -1;
      if (startPos == (forward ? view.state.doc.length : 0))
          return EditorSelection.cursor(startPos, start.assoc);
      let goal = start.goalColumn, startY;
      let rect = view.contentDOM.getBoundingClientRect();
      let startCoords = view.coordsAtPos(startPos, start.assoc || -1), docTop = view.documentTop;
      if (startCoords) {
          if (goal == null)
              goal = startCoords.left - rect.left;
          startY = dir < 0 ? startCoords.top : startCoords.bottom;
      }
      else {
          let line = view.viewState.lineBlockAt(startPos);
          if (goal == null)
              goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
          startY = (dir < 0 ? line.top : line.bottom) + docTop;
      }
      let resolvedGoal = rect.left + goal;
      let dist = distance !== null && distance !== void 0 ? distance : (view.viewState.heightOracle.textHeight >> 1);
      for (let extra = 0;; extra += 10) {
          let curY = startY + (dist + extra) * dir;
          let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
          if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
              let charRect = view.docView.coordsForChar(pos);
              let assoc = !charRect || curY < charRect.top ? -1 : 1;
              return EditorSelection.cursor(pos, assoc, undefined, goal);
          }
      }
  }
  function skipAtomicRanges(atoms, pos, bias) {
      for (;;) {
          let moved = 0;
          for (let set of atoms) {
              set.between(pos - 1, pos + 1, (from, to, value) => {
                  if (pos > from && pos < to) {
                      let side = moved || bias || (pos - from < to - pos ? -1 : 1);
                      pos = side < 0 ? from : to;
                      moved = side;
                  }
              });
          }
          if (!moved)
              return pos;
      }
  }
  function skipAtoms(view, oldPos, pos) {
      let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map(f => f(view)), pos.from, oldPos.head > pos.from ? -1 : 1);
      return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
  }

  const LineBreakPlaceholder = "\uffff";
  class DOMReader {
      constructor(points, state) {
          this.points = points;
          this.text = "";
          this.lineSeparator = state.facet(EditorState.lineSeparator);
      }
      append(text) {
          this.text += text;
      }
      lineBreak() {
          this.text += LineBreakPlaceholder;
      }
      readRange(start, end) {
          if (!start)
              return this;
          let parent = start.parentNode;
          for (let cur = start;;) {
              this.findPointBefore(parent, cur);
              let oldLen = this.text.length;
              this.readNode(cur);
              let next = cur.nextSibling;
              if (next == end)
                  break;
              let view = ContentView.get(cur), nextView = ContentView.get(next);
              if (view && nextView ? view.breakAfter :
                  (view ? view.breakAfter : isBlockElement(cur)) ||
                      (isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore) && this.text.length > oldLen))
                  this.lineBreak();
              cur = next;
          }
          this.findPointBefore(parent, end);
          return this;
      }
      readTextNode(node) {
          let text = node.nodeValue;
          for (let point of this.points)
              if (point.node == node)
                  point.pos = this.text.length + Math.min(point.offset, text.length);
          for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
              let nextBreak = -1, breakSize = 1, m;
              if (this.lineSeparator) {
                  nextBreak = text.indexOf(this.lineSeparator, off);
                  breakSize = this.lineSeparator.length;
              }
              else if (m = re.exec(text)) {
                  nextBreak = m.index;
                  breakSize = m[0].length;
              }
              this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
              if (nextBreak < 0)
                  break;
              this.lineBreak();
              if (breakSize > 1)
                  for (let point of this.points)
                      if (point.node == node && point.pos > this.text.length)
                          point.pos -= breakSize - 1;
              off = nextBreak + breakSize;
          }
      }
      readNode(node) {
          if (node.cmIgnore)
              return;
          let view = ContentView.get(node);
          let fromView = view && view.overrideDOMText;
          if (fromView != null) {
              this.findPointInside(node, fromView.length);
              for (let i = fromView.iter(); !i.next().done;) {
                  if (i.lineBreak)
                      this.lineBreak();
                  else
                      this.append(i.value);
              }
          }
          else if (node.nodeType == 3) {
              this.readTextNode(node);
          }
          else if (node.nodeName == "BR") {
              if (node.nextSibling)
                  this.lineBreak();
          }
          else if (node.nodeType == 1) {
              this.readRange(node.firstChild, null);
          }
      }
      findPointBefore(node, next) {
          for (let point of this.points)
              if (point.node == node && node.childNodes[point.offset] == next)
                  point.pos = this.text.length;
      }
      findPointInside(node, length) {
          for (let point of this.points)
              if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
                  point.pos = this.text.length + (isAtEnd(node, point.node, point.offset) ? length : 0);
      }
  }
  function isAtEnd(parent, node, offset) {
      for (;;) {
          if (!node || offset < maxOffset(node))
              return false;
          if (node == parent)
              return true;
          offset = domIndex(node) + 1;
          node = node.parentNode;
      }
  }
  class DOMPoint {
      constructor(node, offset) {
          this.node = node;
          this.offset = offset;
          this.pos = -1;
      }
  }

  class DOMChange {
      constructor(view, start, end, typeOver) {
          this.typeOver = typeOver;
          this.bounds = null;
          this.text = "";
          this.domChanged = start > -1;
          let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
          if (view.state.readOnly && start > -1) {
              // Ignore changes when the editor is read-only
              this.newSel = null;
          }
          else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
              let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
              let reader = new DOMReader(selPoints, view.state);
              reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
              this.text = reader.text;
              this.newSel = selectionFromPoints(selPoints, this.bounds.from);
          }
          else {
              let domSel = view.observer.selectionRange;
              let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||
                  !contains(view.contentDOM, domSel.focusNode)
                  ? view.state.selection.main.head
                  : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
              let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||
                  !contains(view.contentDOM, domSel.anchorNode)
                  ? view.state.selection.main.anchor
                  : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
              // iOS will refuse to select the block gaps when doing
              // select-all.
              // Chrome will put the selection *inside* them, confusing
              // posFromDOM
              let vp = view.viewport;
              if ((browser.ios || browser.chrome) && view.state.selection.main.empty && head != anchor &&
                  (vp.from > 0 || vp.to < view.state.doc.length)) {
                  let from = Math.min(head, anchor), to = Math.max(head, anchor);
                  let offFrom = vp.from - from, offTo = vp.to - to;
                  if ((offFrom == 0 || offFrom == 1 || from == 0) && (offTo == 0 || offTo == -1 || to == view.state.doc.length)) {
                      head = 0;
                      anchor = view.state.doc.length;
                  }
              }
              this.newSel = EditorSelection.single(anchor, head);
          }
      }
  }
  function applyDOMChange(view, domChange) {
      let change;
      let { newSel } = domChange, sel = view.state.selection.main;
      let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
      if (domChange.bounds) {
          let { from, to } = domChange.bounds;
          let preferredPos = sel.from, preferredSide = null;
          // Prefer anchoring to end when Backspace is pressed (or, on
          // Android, when something was deleted)
          if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
              preferredPos = sel.to;
              preferredSide = "end";
          }
          let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
          if (diff) {
              // Chrome inserts two newlines when pressing shift-enter at the
              // end of a line. DomChange drops one of those.
              if (browser.chrome && lastKey == 13 &&
                  diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
                  diff.toB--;
              change = { from: from + diff.from, to: from + diff.toA,
                  insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };
          }
      }
      else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
          newSel = null;
      }
      if (!change && !newSel)
          return false;
      if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
          // Heuristic to notice typing over a selected character
          change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
      }
      else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 &&
          /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
          // Detect insert-period-on-double-space Mac and Android behavior,
          // and transform it into a regular space insert.
          if (newSel && change.insert.length == 2)
              newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
          change = { from: change.from, to: change.to, insert: Text.of([change.insert.toString().replace(".", " ")]) };
      }
      else if (change && change.from >= sel.from && change.to <= sel.to &&
          (change.from != sel.from || change.to != sel.to) &&
          (sel.to - sel.from) - (change.to - change.from) <= 4) {
          // If the change is inside the selection and covers most of it,
          // assume it is a selection replace (with identical characters at
          // the start/end not included in the diff)
          change = {
              from: sel.from, to: sel.to,
              insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
          };
      }
      else if (browser.chrome && change && change.from == change.to && change.from == sel.head &&
          change.insert.toString() == "\n " && view.lineWrapping) {
          // In Chrome, if you insert a space at the start of a wrapped
          // line, it will actually insert a newline and a space, causing a
          // bogus new line to be created in CodeMirror (#968)
          if (newSel)
              newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
          change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
      }
      if (change) {
          return applyDOMChangeInner(view, change, newSel, lastKey);
      }
      else if (newSel && !newSel.main.eq(sel)) {
          let scrollIntoView = false, userEvent = "select";
          if (view.inputState.lastSelectionTime > Date.now() - 50) {
              if (view.inputState.lastSelectionOrigin == "select")
                  scrollIntoView = true;
              userEvent = view.inputState.lastSelectionOrigin;
          }
          view.dispatch({ selection: newSel, scrollIntoView, userEvent });
          return true;
      }
      else {
          return false;
      }
  }
  function applyDOMChangeInner(view, change, newSel, lastKey = -1) {
      if (browser.ios && view.inputState.flushIOSKey(change))
          return true;
      let sel = view.state.selection.main;
      // Android browsers don't fire reasonable key events for enter,
      // backspace, or delete. So this detects changes that look like
      // they're caused by those keys, and reinterprets them as key
      // events. (Some of these keys are also handled by beforeinput
      // events and the pendingAndroidKey mechanism, but that's not
      // reliable in all situations.)
      if (browser.android &&
          ((change.to == sel.to &&
              // GBoard will sometimes remove a space it just inserted
              // after a completion when you press enter
              (change.from == sel.from || change.from == sel.from - 1 && view.state.sliceDoc(change.from, sel.from) == " ") &&
              change.insert.length == 1 && change.insert.lines == 2 &&
              dispatchKey(view.contentDOM, "Enter", 13)) ||
              ((change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 ||
                  lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) &&
                  dispatchKey(view.contentDOM, "Backspace", 8)) ||
              (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
                  dispatchKey(view.contentDOM, "Delete", 46))))
          return true;
      let text = change.insert.toString();
      if (view.inputState.composing >= 0)
          view.inputState.composing++;
      let defaultTr;
      let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
      if (!view.state.facet(inputHandler).some(h => h(view, change.from, change.to, text, defaultInsert)))
          view.dispatch(defaultInsert());
      return true;
  }
  function applyDefaultInsert(view, change, newSel) {
      let tr, startState = view.state, sel = startState.selection.main;
      if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
          (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&
          view.inputState.composing < 0) {
          let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
          let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
          tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
      }
      else {
          let changes = startState.changes(change);
          let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;
          // Try to apply a composition change to all cursors
          if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&
              change.to <= sel.to && change.to >= sel.to - 10) {
              let replaced = view.state.sliceDoc(change.from, change.to);
              let compositionRange, composition = newSel && findCompositionNode(view, newSel.main.head);
              if (composition) {
                  let dLen = change.insert.length - (change.to - change.from);
                  compositionRange = { from: composition.from, to: composition.to - dLen };
              }
              else {
                  compositionRange = view.state.doc.lineAt(sel.head);
              }
              let offset = sel.to - change.to, size = sel.to - sel.from;
              tr = startState.changeByRange(range => {
                  if (range.from == sel.from && range.to == sel.to)
                      return { changes, range: mainSel || range.map(changes) };
                  let to = range.to - offset, from = to - replaced.length;
                  if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
                      // Unfortunately, there's no way to make multiple
                      // changes in the same node work without aborting
                      // composition, so cursors in the composition range are
                      // ignored.
                      range.to >= compositionRange.from && range.from <= compositionRange.to)
                      return { range };
                  let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
                  return {
                      changes: rangeChanges,
                      range: !mainSel ? range.map(rangeChanges) :
                          EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
                  };
              });
          }
          else {
              tr = {
                  changes,
                  selection: mainSel && startState.selection.replaceRange(mainSel)
              };
          }
      }
      let userEvent = "input.type";
      if (view.composing ||
          view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
          view.inputState.compositionPendingChange = false;
          userEvent += ".compose";
          if (view.inputState.compositionFirstChange) {
              userEvent += ".start";
              view.inputState.compositionFirstChange = false;
          }
      }
      return startState.update(tr, { userEvent, scrollIntoView: true });
  }
  function findDiff(a, b, preferredPos, preferredSide) {
      let minLen = Math.min(a.length, b.length);
      let from = 0;
      while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
          from++;
      if (from == minLen && a.length == b.length)
          return null;
      let toA = a.length, toB = b.length;
      while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
          toA--;
          toB--;
      }
      if (preferredSide == "end") {
          let adjust = Math.max(0, from - Math.min(toA, toB));
          preferredPos -= toA + adjust - from;
      }
      if (toA < from && a.length < b.length) {
          let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
          from -= move;
          toB = from + (toB - toA);
          toA = from;
      }
      else if (toB < from) {
          let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
          from -= move;
          toA = from + (toA - toB);
          toB = from;
      }
      return { from, toA, toB };
  }
  function selectionPoints(view) {
      let result = [];
      if (view.root.activeElement != view.contentDOM)
          return result;
      let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
      if (anchorNode) {
          result.push(new DOMPoint(anchorNode, anchorOffset));
          if (focusNode != anchorNode || focusOffset != anchorOffset)
              result.push(new DOMPoint(focusNode, focusOffset));
      }
      return result;
  }
  function selectionFromPoints(points, base) {
      if (points.length == 0)
          return null;
      let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
      return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
  }

  class InputState {
      setSelectionOrigin(origin) {
          this.lastSelectionOrigin = origin;
          this.lastSelectionTime = Date.now();
      }
      constructor(view) {
          this.view = view;
          this.lastKeyCode = 0;
          this.lastKeyTime = 0;
          this.lastTouchTime = 0;
          this.lastFocusTime = 0;
          this.lastScrollTop = 0;
          this.lastScrollLeft = 0;
          // On iOS, some keys need to have their default behavior happen
          // (after which we retroactively handle them and reset the DOM) to
          // avoid messing up the virtual keyboard state.
          this.pendingIOSKey = undefined;
          /**
          When enabled (>-1), tab presses are not given to key handlers,
          leaving the browser's default behavior. If >0, the mode expires
          at that timestamp, and any other keypress clears it.
          Esc enables temporary tab focus mode for two seconds when not
          otherwise handled.
          */
          this.tabFocusMode = -1;
          this.lastSelectionOrigin = null;
          this.lastSelectionTime = 0;
          this.lastContextMenu = 0;
          this.scrollHandlers = [];
          this.handlers = Object.create(null);
          // -1 means not in a composition. Otherwise, this counts the number
          // of changes made during the composition. The count is used to
          // avoid treating the start state of the composition, before any
          // changes have been made, as part of the composition.
          this.composing = -1;
          // Tracks whether the next change should be marked as starting the
          // composition (null means no composition, true means next is the
          // first, false means first has already been marked for this
          // composition)
          this.compositionFirstChange = null;
          // End time of the previous composition
          this.compositionEndedAt = 0;
          // Used in a kludge to detect when an Enter keypress should be
          // considered part of the composition on Safari, which fires events
          // in the wrong order
          this.compositionPendingKey = false;
          // Used to categorize changes as part of a composition, even when
          // the mutation events fire shortly after the compositionend event
          this.compositionPendingChange = false;
          this.mouseSelection = null;
          // When a drag from the editor is active, this points at the range
          // being dragged.
          this.draggedContent = null;
          this.handleEvent = this.handleEvent.bind(this);
          this.notifiedFocused = view.hasFocus;
          // On Safari adding an input event handler somehow prevents an
          // issue where the composition vanishes when you press enter.
          if (browser.safari)
              view.contentDOM.addEventListener("input", () => null);
          if (browser.gecko)
              firefoxCopyCutHack(view.contentDOM.ownerDocument);
      }
      handleEvent(event) {
          if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))
              return;
          if (event.type == "keydown" && this.keydown(event))
              return;
          if (this.view.updateState != 0 /* UpdateState.Idle */)
              Promise.resolve().then(() => this.runHandlers(event.type, event));
          else
              this.runHandlers(event.type, event);
      }
      runHandlers(type, event) {
          let handlers = this.handlers[type];
          if (handlers) {
              for (let observer of handlers.observers)
                  observer(this.view, event);
              for (let handler of handlers.handlers) {
                  if (event.defaultPrevented)
                      break;
                  if (handler(this.view, event)) {
                      event.preventDefault();
                      break;
                  }
              }
          }
      }
      ensureHandlers(plugins) {
          let handlers = computeHandlers(plugins), prev = this.handlers, dom = this.view.contentDOM;
          for (let type in handlers)
              if (type != "scroll") {
                  let passive = !handlers[type].handlers.length;
                  let exists = prev[type];
                  if (exists && passive != !exists.handlers.length) {
                      dom.removeEventListener(type, this.handleEvent);
                      exists = null;
                  }
                  if (!exists)
                      dom.addEventListener(type, this.handleEvent, { passive });
              }
          for (let type in prev)
              if (type != "scroll" && !handlers[type])
                  dom.removeEventListener(type, this.handleEvent);
          this.handlers = handlers;
      }
      keydown(event) {
          // Must always run, even if a custom handler handled the event
          this.lastKeyCode = event.keyCode;
          this.lastKeyTime = Date.now();
          if (event.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
              return true;
          if (this.tabFocusMode > 0 && event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
              this.tabFocusMode = -1;
          // Chrome for Android usually doesn't fire proper key events, but
          // occasionally does, usually surrounded by a bunch of complicated
          // composition changes. When an enter or backspace key event is
          // seen, hold off on handling DOM events for a bit, and then
          // dispatch it.
          if (browser.android && browser.chrome && !event.synthetic &&
              (event.keyCode == 13 || event.keyCode == 8)) {
              this.view.observer.delayAndroidKey(event.key, event.keyCode);
              return true;
          }
          // Preventing the default behavior of Enter on iOS makes the
          // virtual keyboard get stuck in the wrong (lowercase)
          // state. So we let it go through, and then, in
          // applyDOMChange, notify key handlers of it and reset to
          // the state they produce.
          let pending;
          if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey &&
              ((pending = PendingKeys.find(key => key.keyCode == event.keyCode)) && !event.ctrlKey ||
                  EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
              this.pendingIOSKey = pending || event;
              setTimeout(() => this.flushIOSKey(), 250);
              return true;
          }
          if (event.keyCode != 229)
              this.view.observer.forceFlush();
          return false;
      }
      flushIOSKey(change) {
          let key = this.pendingIOSKey;
          if (!key)
              return false;
          // This looks like an autocorrection before Enter
          if (key.key == "Enter" && change && change.from < change.to && /^\S+$/.test(change.insert.toString()))
              return false;
          this.pendingIOSKey = undefined;
          return dispatchKey(this.view.contentDOM, key.key, key.keyCode, key instanceof KeyboardEvent ? key : undefined);
      }
      ignoreDuringComposition(event) {
          if (!/^key/.test(event.type))
              return false;
          if (this.composing > 0)
              return true;
          // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
          // On some input method editors (IMEs), the Enter key is used to
          // confirm character selection. On Safari, when Enter is pressed,
          // compositionend and keydown events are sometimes emitted in the
          // wrong order. The key event should still be ignored, even when
          // it happens after the compositionend event.
          if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
              this.compositionPendingKey = false;
              return true;
          }
          return false;
      }
      startMouseSelection(mouseSelection) {
          if (this.mouseSelection)
              this.mouseSelection.destroy();
          this.mouseSelection = mouseSelection;
      }
      update(update) {
          this.view.observer.update(update);
          if (this.mouseSelection)
              this.mouseSelection.update(update);
          if (this.draggedContent && update.docChanged)
              this.draggedContent = this.draggedContent.map(update.changes);
          if (update.transactions.length)
              this.lastKeyCode = this.lastSelectionTime = 0;
      }
      destroy() {
          if (this.mouseSelection)
              this.mouseSelection.destroy();
      }
  }
  function bindHandler(plugin, handler) {
      return (view, event) => {
          try {
              return handler.call(plugin, event, view);
          }
          catch (e) {
              logException(view.state, e);
          }
      };
  }
  function computeHandlers(plugins) {
      let result = Object.create(null);
      function record(type) {
          return result[type] || (result[type] = { observers: [], handlers: [] });
      }
      for (let plugin of plugins) {
          let spec = plugin.spec;
          if (spec && spec.domEventHandlers)
              for (let type in spec.domEventHandlers) {
                  let f = spec.domEventHandlers[type];
                  if (f)
                      record(type).handlers.push(bindHandler(plugin.value, f));
              }
          if (spec && spec.domEventObservers)
              for (let type in spec.domEventObservers) {
                  let f = spec.domEventObservers[type];
                  if (f)
                      record(type).observers.push(bindHandler(plugin.value, f));
              }
      }
      for (let type in handlers)
          record(type).handlers.push(handlers[type]);
      for (let type in observers)
          record(type).observers.push(observers[type]);
      return result;
  }
  const PendingKeys = [
      { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
      { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
      { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
      { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
  ];
  const EmacsyPendingKeys = "dthko";
  // Key codes for modifier keys
  const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
  const dragScrollMargin = 6;
  function dragScrollSpeed(dist) {
      return Math.max(0, dist) * 0.7 + 8;
  }
  function dist(a, b) {
      return Math.max(Math.abs(a.clientX - b.clientX), Math.abs(a.clientY - b.clientY));
  }
  class MouseSelection {
      constructor(view, startEvent, style, mustSelect) {
          this.view = view;
          this.startEvent = startEvent;
          this.style = style;
          this.mustSelect = mustSelect;
          this.scrollSpeed = { x: 0, y: 0 };
          this.scrolling = -1;
          this.lastEvent = startEvent;
          this.scrollParents = scrollableParents(view.contentDOM);
          this.atoms = view.state.facet(atomicRanges).map(f => f(view));
          let doc = view.contentDOM.ownerDocument;
          doc.addEventListener("mousemove", this.move = this.move.bind(this));
          doc.addEventListener("mouseup", this.up = this.up.bind(this));
          this.extend = startEvent.shiftKey;
          this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
          this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
      }
      start(event) {
          // When clicking outside of the selection, immediately apply the
          // effect of starting the selection
          if (this.dragging === false)
              this.select(event);
      }
      move(event) {
          if (event.buttons == 0)
              return this.destroy();
          if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)
              return;
          this.select(this.lastEvent = event);
          let sx = 0, sy = 0;
          let left = 0, top = 0, right = this.view.win.innerWidth, bottom = this.view.win.innerHeight;
          if (this.scrollParents.x)
              ({ left, right } = this.scrollParents.x.getBoundingClientRect());
          if (this.scrollParents.y)
              ({ top, bottom } = this.scrollParents.y.getBoundingClientRect());
          let margins = getScrollMargins(this.view);
          if (event.clientX - margins.left <= left + dragScrollMargin)
              sx = -dragScrollSpeed(left - event.clientX);
          else if (event.clientX + margins.right >= right - dragScrollMargin)
              sx = dragScrollSpeed(event.clientX - right);
          if (event.clientY - margins.top <= top + dragScrollMargin)
              sy = -dragScrollSpeed(top - event.clientY);
          else if (event.clientY + margins.bottom >= bottom - dragScrollMargin)
              sy = dragScrollSpeed(event.clientY - bottom);
          this.setScrollSpeed(sx, sy);
      }
      up(event) {
          if (this.dragging == null)
              this.select(this.lastEvent);
          if (!this.dragging)
              event.preventDefault();
          this.destroy();
      }
      destroy() {
          this.setScrollSpeed(0, 0);
          let doc = this.view.contentDOM.ownerDocument;
          doc.removeEventListener("mousemove", this.move);
          doc.removeEventListener("mouseup", this.up);
          this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
      }
      setScrollSpeed(sx, sy) {
          this.scrollSpeed = { x: sx, y: sy };
          if (sx || sy) {
              if (this.scrolling < 0)
                  this.scrolling = setInterval(() => this.scroll(), 50);
          }
          else if (this.scrolling > -1) {
              clearInterval(this.scrolling);
              this.scrolling = -1;
          }
      }
      scroll() {
          let { x, y } = this.scrollSpeed;
          if (x && this.scrollParents.x) {
              this.scrollParents.x.scrollLeft += x;
              x = 0;
          }
          if (y && this.scrollParents.y) {
              this.scrollParents.y.scrollTop += y;
              y = 0;
          }
          if (x || y)
              this.view.win.scrollBy(x, y);
          if (this.dragging === false)
              this.select(this.lastEvent);
      }
      skipAtoms(sel) {
          let ranges = null;
          for (let i = 0; i < sel.ranges.length; i++) {
              let range = sel.ranges[i], updated = null;
              if (range.empty) {
                  let pos = skipAtomicRanges(this.atoms, range.from, 0);
                  if (pos != range.from)
                      updated = EditorSelection.cursor(pos, -1);
              }
              else {
                  let from = skipAtomicRanges(this.atoms, range.from, -1);
                  let to = skipAtomicRanges(this.atoms, range.to, 1);
                  if (from != range.from || to != range.to)
                      updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);
              }
              if (updated) {
                  if (!ranges)
                      ranges = sel.ranges.slice();
                  ranges[i] = updated;
              }
          }
          return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
      }
      select(event) {
          let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
          if (this.mustSelect || !selection.eq(view.state.selection, this.dragging === false))
              this.view.dispatch({
                  selection,
                  userEvent: "select.pointer"
              });
          this.mustSelect = false;
      }
      update(update) {
          if (update.transactions.some(tr => tr.isUserEvent("input.type")))
              this.destroy();
          else if (this.style.update(update))
              setTimeout(() => this.select(this.lastEvent), 20);
      }
  }
  function addsSelectionRange(view, event) {
      let facet = view.state.facet(clickAddsSelectionRange);
      return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
  }
  function dragMovesSelection(view, event) {
      let facet = view.state.facet(dragMovesSelection$1);
      return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
  }
  function isInPrimarySelection(view, event) {
      let { main } = view.state.selection;
      if (main.empty)
          return false;
      // On boundary clicks, check whether the coordinates are inside the
      // selection's client rectangles
      let sel = getSelection(view.root);
      if (!sel || sel.rangeCount == 0)
          return true;
      let rects = sel.getRangeAt(0).getClientRects();
      for (let i = 0; i < rects.length; i++) {
          let rect = rects[i];
          if (rect.left <= event.clientX && rect.right >= event.clientX &&
              rect.top <= event.clientY && rect.bottom >= event.clientY)
              return true;
      }
      return false;
  }
  function eventBelongsToEditor(view, event) {
      if (!event.bubbles)
          return true;
      if (event.defaultPrevented)
          return false;
      for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
          if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
              return false;
      return true;
  }
  const handlers = /*@__PURE__*/Object.create(null);
  const observers = /*@__PURE__*/Object.create(null);
  // This is very crude, but unfortunately both these browsers _pretend_
  // that they have a clipboard API—all the objects and methods are
  // there, they just don't work, and they are hard to test.
  const brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||
      (browser.ios && browser.webkit_version < 604);
  function capturePaste(view) {
      let parent = view.dom.parentNode;
      if (!parent)
          return;
      let target = parent.appendChild(document.createElement("textarea"));
      target.style.cssText = "position: fixed; left: -10000px; top: 10px";
      target.focus();
      setTimeout(() => {
          view.focus();
          target.remove();
          doPaste(view, target.value);
      }, 50);
  }
  function textFilter(state, facet, text) {
      for (let filter of state.facet(facet))
          text = filter(text, state);
      return text;
  }
  function doPaste(view, input) {
      input = textFilter(view.state, clipboardInputFilter, input);
      let { state } = view, changes, i = 1, text = state.toText(input);
      let byLine = text.lines == state.selection.ranges.length;
      let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
      if (linewise) {
          let lastLine = -1;
          changes = state.changeByRange(range => {
              let line = state.doc.lineAt(range.from);
              if (line.from == lastLine)
                  return { range };
              lastLine = line.from;
              let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
              return { changes: { from: line.from, insert },
                  range: EditorSelection.cursor(range.from + insert.length) };
          });
      }
      else if (byLine) {
          changes = state.changeByRange(range => {
              let line = text.line(i++);
              return { changes: { from: range.from, to: range.to, insert: line.text },
                  range: EditorSelection.cursor(range.from + line.length) };
          });
      }
      else {
          changes = state.replaceSelection(text);
      }
      view.dispatch(changes, {
          userEvent: "input.paste",
          scrollIntoView: true
      });
  }
  observers.scroll = view => {
      view.inputState.lastScrollTop = view.scrollDOM.scrollTop;
      view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;
  };
  handlers.keydown = (view, event) => {
      view.inputState.setSelectionOrigin("select");
      if (event.keyCode == 27 && view.inputState.tabFocusMode != 0)
          view.inputState.tabFocusMode = Date.now() + 2000;
      return false;
  };
  observers.touchstart = (view, e) => {
      view.inputState.lastTouchTime = Date.now();
      view.inputState.setSelectionOrigin("select.pointer");
  };
  observers.touchmove = view => {
      view.inputState.setSelectionOrigin("select.pointer");
  };
  handlers.mousedown = (view, event) => {
      view.observer.flush();
      if (view.inputState.lastTouchTime > Date.now() - 2000)
          return false; // Ignore touch interaction
      let style = null;
      for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
          style = makeStyle(view, event);
          if (style)
              break;
      }
      if (!style && event.button == 0)
          style = basicMouseSelection(view, event);
      if (style) {
          let mustFocus = !view.hasFocus;
          view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
          if (mustFocus)
              view.observer.ignore(() => {
                  focusPreventScroll(view.contentDOM);
                  let active = view.root.activeElement;
                  if (active && !active.contains(view.contentDOM))
                      active.blur();
              });
          let mouseSel = view.inputState.mouseSelection;
          if (mouseSel) {
              mouseSel.start(event);
              return mouseSel.dragging === false;
          }
      }
      return false;
  };
  function rangeForClick(view, pos, bias, type) {
      if (type == 1) { // Single click
          return EditorSelection.cursor(pos, bias);
      }
      else if (type == 2) { // Double click
          return groupAt(view.state, pos, bias);
      }
      else { // Triple click
          let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
          let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
          if (to < view.state.doc.length && to == line.to)
              to++;
          return EditorSelection.range(from, to);
      }
  }
  let inside = (x, y, rect) => y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right;
  // Try to determine, for the given coordinates, associated with the
  // given position, whether they are related to the element before or
  // the element after the position.
  function findPositionSide(view, pos, x, y) {
      let line = LineView.find(view.docView, pos);
      if (!line)
          return 1;
      let off = pos - line.posAtStart;
      // Line boundaries point into the line
      if (off == 0)
          return 1;
      if (off == line.length)
          return -1;
      // Positions on top of an element point at that element
      let before = line.coordsAt(off, -1);
      if (before && inside(x, y, before))
          return -1;
      let after = line.coordsAt(off, 1);
      if (after && inside(x, y, after))
          return 1;
      // This is probably a line wrap point. Pick before if the point is
      // above its bottom.
      return before && before.bottom >= y ? -1 : 1;
  }
  function queryPos(view, event) {
      let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
      return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
  }
  const BadMouseDetail = browser.ie && browser.ie_version <= 11;
  let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
  function getClickType(event) {
      if (!BadMouseDetail)
          return event.detail;
      let last = lastMouseDown, lastTime = lastMouseDownTime;
      lastMouseDown = event;
      lastMouseDownTime = Date.now();
      return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
          Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
  }
  function basicMouseSelection(view, event) {
      let start = queryPos(view, event), type = getClickType(event);
      let startSel = view.state.selection;
      return {
          update(update) {
              if (update.docChanged) {
                  start.pos = update.changes.mapPos(start.pos);
                  startSel = startSel.map(update.changes);
              }
          },
          get(event, extend, multiple) {
              let cur = queryPos(view, event), removed;
              let range = rangeForClick(view, cur.pos, cur.bias, type);
              if (start.pos != cur.pos && !extend) {
                  let startRange = rangeForClick(view, start.pos, start.bias, type);
                  let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
                  range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
              }
              if (extend)
                  return startSel.replaceRange(startSel.main.extend(range.from, range.to));
              else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos)))
                  return removed;
              else if (multiple)
                  return startSel.addRange(range);
              else
                  return EditorSelection.create([range]);
          }
      };
  }
  function removeRangeAround(sel, pos) {
      for (let i = 0; i < sel.ranges.length; i++) {
          let { from, to } = sel.ranges[i];
          if (from <= pos && to >= pos)
              return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
      }
      return null;
  }
  handlers.dragstart = (view, event) => {
      let { selection: { main: range } } = view.state;
      if (event.target.draggable) {
          let cView = view.docView.nearest(event.target);
          if (cView && cView.isWidget) {
              let from = cView.posAtStart, to = from + cView.length;
              if (from >= range.to || to <= range.from)
                  range = EditorSelection.range(from, to);
          }
      }
      let { inputState } = view;
      if (inputState.mouseSelection)
          inputState.mouseSelection.dragging = true;
      inputState.draggedContent = range;
      if (event.dataTransfer) {
          event.dataTransfer.setData("Text", textFilter(view.state, clipboardOutputFilter, view.state.sliceDoc(range.from, range.to)));
          event.dataTransfer.effectAllowed = "copyMove";
      }
      return false;
  };
  handlers.dragend = view => {
      view.inputState.draggedContent = null;
      return false;
  };
  function dropText(view, event, text, direct) {
      text = textFilter(view.state, clipboardInputFilter, text);
      if (!text)
          return;
      let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
      let { draggedContent } = view.inputState;
      let del = direct && draggedContent && dragMovesSelection(view, event)
          ? { from: draggedContent.from, to: draggedContent.to } : null;
      let ins = { from: dropPos, insert: text };
      let changes = view.state.changes(del ? [del, ins] : ins);
      view.focus();
      view.dispatch({
          changes,
          selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
          userEvent: del ? "move.drop" : "input.drop"
      });
      view.inputState.draggedContent = null;
  }
  handlers.drop = (view, event) => {
      if (!event.dataTransfer)
          return false;
      if (view.state.readOnly)
          return true;
      let files = event.dataTransfer.files;
      if (files && files.length) { // For a file drop, read the file's text.
          let text = Array(files.length), read = 0;
          let finishFile = () => {
              if (++read == files.length)
                  dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
          };
          for (let i = 0; i < files.length; i++) {
              let reader = new FileReader;
              reader.onerror = finishFile;
              reader.onload = () => {
                  if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
                      text[i] = reader.result;
                  finishFile();
              };
              reader.readAsText(files[i]);
          }
          return true;
      }
      else {
          let text = event.dataTransfer.getData("Text");
          if (text) {
              dropText(view, event, text, true);
              return true;
          }
      }
      return false;
  };
  handlers.paste = (view, event) => {
      if (view.state.readOnly)
          return true;
      view.observer.flush();
      let data = brokenClipboardAPI ? null : event.clipboardData;
      if (data) {
          doPaste(view, data.getData("text/plain") || data.getData("text/uri-list"));
          return true;
      }
      else {
          capturePaste(view);
          return false;
      }
  };
  function captureCopy(view, text) {
      // The extra wrapper is somehow necessary on IE/Edge to prevent the
      // content from being mangled when it is put onto the clipboard
      let parent = view.dom.parentNode;
      if (!parent)
          return;
      let target = parent.appendChild(document.createElement("textarea"));
      target.style.cssText = "position: fixed; left: -10000px; top: 10px";
      target.value = text;
      target.focus();
      target.selectionEnd = text.length;
      target.selectionStart = 0;
      setTimeout(() => {
          target.remove();
          view.focus();
      }, 50);
  }
  function copiedRange(state) {
      let content = [], ranges = [], linewise = false;
      for (let range of state.selection.ranges)
          if (!range.empty) {
              content.push(state.sliceDoc(range.from, range.to));
              ranges.push(range);
          }
      if (!content.length) {
          // Nothing selected, do a line-wise copy
          let upto = -1;
          for (let { from } of state.selection.ranges) {
              let line = state.doc.lineAt(from);
              if (line.number > upto) {
                  content.push(line.text);
                  ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
              }
              upto = line.number;
          }
          linewise = true;
      }
      return { text: textFilter(state, clipboardOutputFilter, content.join(state.lineBreak)), ranges, linewise };
  }
  let lastLinewiseCopy = null;
  handlers.copy = handlers.cut = (view, event) => {
      let { text, ranges, linewise } = copiedRange(view.state);
      if (!text && !linewise)
          return false;
      lastLinewiseCopy = linewise ? text : null;
      if (event.type == "cut" && !view.state.readOnly)
          view.dispatch({
              changes: ranges,
              scrollIntoView: true,
              userEvent: "delete.cut"
          });
      let data = brokenClipboardAPI ? null : event.clipboardData;
      if (data) {
          data.clearData();
          data.setData("text/plain", text);
          return true;
      }
      else {
          captureCopy(view, text);
          return false;
      }
  };
  const isFocusChange = /*@__PURE__*/Annotation.define();
  function focusChangeTransaction(state, focus) {
      let effects = [];
      for (let getEffect of state.facet(focusChangeEffect)) {
          let effect = getEffect(state, focus);
          if (effect)
              effects.push(effect);
      }
      return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
  }
  function updateForFocusChange(view) {
      setTimeout(() => {
          let focus = view.hasFocus;
          if (focus != view.inputState.notifiedFocused) {
              let tr = focusChangeTransaction(view.state, focus);
              if (tr)
                  view.dispatch(tr);
              else
                  view.update([]);
          }
      }, 10);
  }
  observers.focus = view => {
      view.inputState.lastFocusTime = Date.now();
      // When focusing reset the scroll position, move it back to where it was
      if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
          view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
          view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
      }
      updateForFocusChange(view);
  };
  observers.blur = view => {
      view.observer.clearSelectionRange();
      updateForFocusChange(view);
  };
  observers.compositionstart = observers.compositionupdate = view => {
      if (view.observer.editContext)
          return; // Composition handled by edit context
      if (view.inputState.compositionFirstChange == null)
          view.inputState.compositionFirstChange = true;
      if (view.inputState.composing < 0) {
          // FIXME possibly set a timeout to clear it again on Android
          view.inputState.composing = 0;
      }
  };
  observers.compositionend = view => {
      if (view.observer.editContext)
          return; // Composition handled by edit context
      view.inputState.composing = -1;
      view.inputState.compositionEndedAt = Date.now();
      view.inputState.compositionPendingKey = true;
      view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
      view.inputState.compositionFirstChange = null;
      if (browser.chrome && browser.android) {
          // Delay flushing for a bit on Android because it'll often fire a
          // bunch of contradictory changes in a row at end of compositon
          view.observer.flushSoon();
      }
      else if (view.inputState.compositionPendingChange) {
          // If we found pending records, schedule a flush.
          Promise.resolve().then(() => view.observer.flush());
      }
      else {
          // Otherwise, make sure that, if no changes come in soon, the
          // composition view is cleared.
          setTimeout(() => {
              if (view.inputState.composing < 0 && view.docView.hasComposition)
                  view.update([]);
          }, 50);
      }
  };
  observers.contextmenu = view => {
      view.inputState.lastContextMenu = Date.now();
  };
  handlers.beforeinput = (view, event) => {
      var _a, _b;
      // In EditContext mode, we must handle insertReplacementText events
      // directly, to make spell checking corrections work
      if (event.inputType == "insertReplacementText" && view.observer.editContext) {
          let text = (_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.getData("text/plain"), ranges = event.getTargetRanges();
          if (text && ranges.length) {
              let r = ranges[0];
              let from = view.posAtDOM(r.startContainer, r.startOffset), to = view.posAtDOM(r.endContainer, r.endOffset);
              applyDOMChangeInner(view, { from, to, insert: view.state.toText(text) }, null);
              return true;
          }
      }
      // Because Chrome Android doesn't fire useful key events, use
      // beforeinput to detect backspace (and possibly enter and delete,
      // but those usually don't even seem to fire beforeinput events at
      // the moment) and fake a key event for it.
      //
      // (preventDefault on beforeinput, though supported in the spec,
      // seems to do nothing at all on Chrome).
      let pending;
      if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {
          view.observer.delayAndroidKey(pending.key, pending.keyCode);
          if (pending.key == "Backspace" || pending.key == "Delete") {
              let startViewHeight = ((_b = window.visualViewport) === null || _b === void 0 ? void 0 : _b.height) || 0;
              setTimeout(() => {
                  var _a;
                  // Backspacing near uneditable nodes on Chrome Android sometimes
                  // closes the virtual keyboard. This tries to crudely detect
                  // that and refocus to get it back.
                  if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
                      view.contentDOM.blur();
                      view.focus();
                  }
              }, 100);
          }
      }
      if (browser.ios && event.inputType == "deleteContentForward") {
          // For some reason, DOM changes (and beforeinput) happen _before_
          // the key event for ctrl-d on iOS when using an external
          // keyboard.
          view.observer.flushSoon();
      }
      // Safari will occasionally forget to fire compositionend at the end of a dead-key composition
      if (browser.safari && event.inputType == "insertText" && view.inputState.composing >= 0) {
          setTimeout(() => observers.compositionend(view, event), 20);
      }
      return false;
  };
  const appliedFirefoxHack = /*@__PURE__*/new Set;
  // In Firefox, when cut/copy handlers are added to the document, that
  // somehow avoids a bug where those events aren't fired when the
  // selection is empty. See https://github.com/codemirror/dev/issues/1082
  // and https://bugzilla.mozilla.org/show_bug.cgi?id=995961
  function firefoxCopyCutHack(doc) {
      if (!appliedFirefoxHack.has(doc)) {
          appliedFirefoxHack.add(doc);
          doc.addEventListener("copy", () => { });
          doc.addEventListener("cut", () => { });
      }
  }

  const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
  // Used to track, during updateHeight, if any actual heights changed
  let heightChangeFlag = false;
  function clearHeightChangeFlag() { heightChangeFlag = false; }
  class HeightOracle {
      constructor(lineWrapping) {
          this.lineWrapping = lineWrapping;
          this.doc = Text.empty;
          this.heightSamples = {};
          this.lineHeight = 14; // The height of an entire line (line-height)
          this.charWidth = 7;
          this.textHeight = 14; // The height of the actual font (font-size)
          this.lineLength = 30;
      }
      heightForGap(from, to) {
          let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
          if (this.lineWrapping)
              lines += Math.max(0, Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength));
          return this.lineHeight * lines;
      }
      heightForLine(length) {
          if (!this.lineWrapping)
              return this.lineHeight;
          let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
          return lines * this.lineHeight;
      }
      setDoc(doc) { this.doc = doc; return this; }
      mustRefreshForWrapping(whiteSpace) {
          return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;
      }
      mustRefreshForHeights(lineHeights) {
          let newHeight = false;
          for (let i = 0; i < lineHeights.length; i++) {
              let h = lineHeights[i];
              if (h < 0) {
                  i++;
              }
              else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
                  newHeight = true;
                  this.heightSamples[Math.floor(h * 10)] = true;
              }
          }
          return newHeight;
      }
      refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
          let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
          let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
          this.lineWrapping = lineWrapping;
          this.lineHeight = lineHeight;
          this.charWidth = charWidth;
          this.textHeight = textHeight;
          this.lineLength = lineLength;
          if (changed) {
              this.heightSamples = {};
              for (let i = 0; i < knownHeights.length; i++) {
                  let h = knownHeights[i];
                  if (h < 0)
                      i++;
                  else
                      this.heightSamples[Math.floor(h * 10)] = true;
              }
          }
          return changed;
      }
  }
  // This object is used by `updateHeight` to make DOM measurements
  // arrive at the right nides. The `heights` array is a sequence of
  // block heights, starting from position `from`.
  class MeasuredHeights {
      constructor(from, heights) {
          this.from = from;
          this.heights = heights;
          this.index = 0;
      }
      get more() { return this.index < this.heights.length; }
  }
  /**
  Record used to represent information about a block-level element
  in the editor view.
  */
  class BlockInfo {
      /**
      @internal
      */
      constructor(
      /**
      The start of the element in the document.
      */
      from, 
      /**
      The length of the element.
      */
      length, 
      /**
      The top position of the element (relative to the top of the
      document).
      */
      top, 
      /**
      Its height.
      */
      height, 
      /**
      @internal Weird packed field that holds an array of children
      for composite blocks, a decoration for block widgets, and a
      number indicating the amount of widget-create line breaks for
      text blocks.
      */
      _content) {
          this.from = from;
          this.length = length;
          this.top = top;
          this.height = height;
          this._content = _content;
      }
      /**
      The type of element this is. When querying lines, this may be
      an array of all the blocks that make up the line.
      */
      get type() {
          return typeof this._content == "number" ? BlockType.Text :
              Array.isArray(this._content) ? this._content : this._content.type;
      }
      /**
      The end of the element as a document position.
      */
      get to() { return this.from + this.length; }
      /**
      The bottom position of the element.
      */
      get bottom() { return this.top + this.height; }
      /**
      If this is a widget block, this will return the widget
      associated with it.
      */
      get widget() {
          return this._content instanceof PointDecoration ? this._content.widget : null;
      }
      /**
      If this is a textblock, this holds the number of line breaks
      that appear in widgets inside the block.
      */
      get widgetLineBreaks() {
          return typeof this._content == "number" ? this._content : 0;
      }
      /**
      @internal
      */
      join(other) {
          let content = (Array.isArray(this._content) ? this._content : [this])
              .concat(Array.isArray(other._content) ? other._content : [other]);
          return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content);
      }
  }
  var QueryType = /*@__PURE__*/(function (QueryType) {
      QueryType[QueryType["ByPos"] = 0] = "ByPos";
      QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
      QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
  return QueryType})(QueryType || (QueryType = {}));
  const Epsilon = 1e-3;
  class HeightMap {
      constructor(length, // The number of characters covered
      height, // Height of this part of the document
      flags = 2 /* Flag.Outdated */) {
          this.length = length;
          this.height = height;
          this.flags = flags;
      }
      get outdated() { return (this.flags & 2 /* Flag.Outdated */) > 0; }
      set outdated(value) { this.flags = (value ? 2 /* Flag.Outdated */ : 0) | (this.flags & -3 /* Flag.Outdated */); }
      setHeight(height) {
          if (this.height != height) {
              if (Math.abs(this.height - height) > Epsilon)
                  heightChangeFlag = true;
              this.height = height;
          }
      }
      // Base case is to replace a leaf node, which simply builds a tree
      // from the new nodes and returns that (HeightMapBranch and
      // HeightMapGap override this to actually use from/to)
      replace(_from, _to, nodes) {
          return HeightMap.of(nodes);
      }
      // Again, these are base cases, and are overridden for branch and gap nodes.
      decomposeLeft(_to, result) { result.push(this); }
      decomposeRight(_from, result) { result.push(this); }
      applyChanges(decorations, oldDoc, oracle, changes) {
          let me = this, doc = oracle.doc;
          for (let i = changes.length - 1; i >= 0; i--) {
              let { fromA, toA, fromB, toB } = changes[i];
              let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
              let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
              toB += end.to - toA;
              toA = end.to;
              while (i > 0 && start.from <= changes[i - 1].toA) {
                  fromA = changes[i - 1].fromA;
                  fromB = changes[i - 1].fromB;
                  i--;
                  if (fromA < start.from)
                      start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
              }
              fromB += start.from - fromA;
              fromA = start.from;
              let nodes = NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);
              me = replace(me, me.replace(fromA, toA, nodes));
          }
          return me.updateHeight(oracle, 0);
      }
      static empty() { return new HeightMapText(0, 0); }
      // nodes uses null values to indicate the position of line breaks.
      // There are never line breaks at the start or end of the array, or
      // two line breaks next to each other, and the array isn't allowed
      // to be empty (same restrictions as return value from the builder).
      static of(nodes) {
          if (nodes.length == 1)
              return nodes[0];
          let i = 0, j = nodes.length, before = 0, after = 0;
          for (;;) {
              if (i == j) {
                  if (before > after * 2) {
                      let split = nodes[i - 1];
                      if (split.break)
                          nodes.splice(--i, 1, split.left, null, split.right);
                      else
                          nodes.splice(--i, 1, split.left, split.right);
                      j += 1 + split.break;
                      before -= split.size;
                  }
                  else if (after > before * 2) {
                      let split = nodes[j];
                      if (split.break)
                          nodes.splice(j, 1, split.left, null, split.right);
                      else
                          nodes.splice(j, 1, split.left, split.right);
                      j += 2 + split.break;
                      after -= split.size;
                  }
                  else {
                      break;
                  }
              }
              else if (before < after) {
                  let next = nodes[i++];
                  if (next)
                      before += next.size;
              }
              else {
                  let next = nodes[--j];
                  if (next)
                      after += next.size;
              }
          }
          let brk = 0;
          if (nodes[i - 1] == null) {
              brk = 1;
              i--;
          }
          else if (nodes[i] == null) {
              brk = 1;
              j++;
          }
          return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
      }
  }
  function replace(old, val) {
      if (old == val)
          return old;
      if (old.constructor != val.constructor)
          heightChangeFlag = true;
      return val;
  }
  HeightMap.prototype.size = 1;
  class HeightMapBlock extends HeightMap {
      constructor(length, height, deco) {
          super(length, height);
          this.deco = deco;
      }
      blockAt(_height, _oracle, top, offset) {
          return new BlockInfo(offset, this.length, top, this.height, this.deco || 0);
      }
      lineAt(_value, _type, oracle, top, offset) {
          return this.blockAt(0, oracle, top, offset);
      }
      forEachLine(from, to, oracle, top, offset, f) {
          if (from <= offset + this.length && to >= offset)
              f(this.blockAt(0, oracle, top, offset));
      }
      updateHeight(oracle, offset = 0, _force = false, measured) {
          if (measured && measured.from <= offset && measured.more)
              this.setHeight(measured.heights[measured.index++]);
          this.outdated = false;
          return this;
      }
      toString() { return `block(${this.length})`; }
  }
  class HeightMapText extends HeightMapBlock {
      constructor(length, height) {
          super(length, height, null);
          this.collapsed = 0; // Amount of collapsed content in the line
          this.widgetHeight = 0; // Maximum inline widget height
          this.breaks = 0; // Number of widget-introduced line breaks on the line
      }
      blockAt(_height, _oracle, top, offset) {
          return new BlockInfo(offset, this.length, top, this.height, this.breaks);
      }
      replace(_from, _to, nodes) {
          let node = nodes[0];
          if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* Flag.SingleLine */)) &&
              Math.abs(this.length - node.length) < 10) {
              if (node instanceof HeightMapGap)
                  node = new HeightMapText(node.length, this.height);
              else
                  node.height = this.height;
              if (!this.outdated)
                  node.outdated = false;
              return node;
          }
          else {
              return HeightMap.of(nodes);
          }
      }
      updateHeight(oracle, offset = 0, force = false, measured) {
          if (measured && measured.from <= offset && measured.more)
              this.setHeight(measured.heights[measured.index++]);
          else if (force || this.outdated)
              this.setHeight(Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) +
                  this.breaks * oracle.lineHeight);
          this.outdated = false;
          return this;
      }
      toString() {
          return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
      }
  }
  class HeightMapGap extends HeightMap {
      constructor(length) { super(length, 0); }
      heightMetrics(oracle, offset) {
          let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
          let lines = lastLine - firstLine + 1;
          let perLine, perChar = 0;
          if (oracle.lineWrapping) {
              let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
              perLine = totalPerLine / lines;
              if (this.length > lines + 1)
                  perChar = (this.height - totalPerLine) / (this.length - lines - 1);
          }
          else {
              perLine = this.height / lines;
          }
          return { firstLine, lastLine, perLine, perChar };
      }
      blockAt(height, oracle, top, offset) {
          let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
          if (oracle.lineWrapping) {
              let guess = offset + (height < oracle.lineHeight ? 0
                  : Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length));
              let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
              let lineTop = Math.max(top, height - lineHeight / 2);
              return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
          }
          else {
              let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));
              let { from, length } = oracle.doc.line(firstLine + line);
              return new BlockInfo(from, length, top + perLine * line, perLine, 0);
          }
      }
      lineAt(value, type, oracle, top, offset) {
          if (type == QueryType.ByHeight)
              return this.blockAt(value, oracle, top, offset);
          if (type == QueryType.ByPosNoHeight) {
              let { from, to } = oracle.doc.lineAt(value);
              return new BlockInfo(from, to - from, 0, 0, 0);
          }
          let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
          let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
          let linesAbove = line.number - firstLine;
          let lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
          return new BlockInfo(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, 0);
      }
      forEachLine(from, to, oracle, top, offset, f) {
          from = Math.max(from, offset);
          to = Math.min(to, offset + this.length);
          let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
          for (let pos = from, lineTop = top; pos <= to;) {
              let line = oracle.doc.lineAt(pos);
              if (pos == from) {
                  let linesAbove = line.number - firstLine;
                  lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
              }
              let lineHeight = perLine + perChar * line.length;
              f(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
              lineTop += lineHeight;
              pos = line.to + 1;
          }
      }
      replace(from, to, nodes) {
          let after = this.length - to;
          if (after > 0) {
              let last = nodes[nodes.length - 1];
              if (last instanceof HeightMapGap)
                  nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
              else
                  nodes.push(null, new HeightMapGap(after - 1));
          }
          if (from > 0) {
              let first = nodes[0];
              if (first instanceof HeightMapGap)
                  nodes[0] = new HeightMapGap(from + first.length);
              else
                  nodes.unshift(new HeightMapGap(from - 1), null);
          }
          return HeightMap.of(nodes);
      }
      decomposeLeft(to, result) {
          result.push(new HeightMapGap(to - 1), null);
      }
      decomposeRight(from, result) {
          result.push(null, new HeightMapGap(this.length - from - 1));
      }
      updateHeight(oracle, offset = 0, force = false, measured) {
          let end = offset + this.length;
          if (measured && measured.from <= offset + this.length && measured.more) {
              // Fill in part of this gap with measured lines. We know there
              // can't be widgets or collapsed ranges in those lines, because
              // they would already have been added to the heightmap (gaps
              // only contain plain text).
              let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
              if (measured.from > offset)
                  nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
              while (pos <= end && measured.more) {
                  let len = oracle.doc.lineAt(pos).length;
                  if (nodes.length)
                      nodes.push(null);
                  let height = measured.heights[measured.index++];
                  if (singleHeight == -1)
                      singleHeight = height;
                  else if (Math.abs(height - singleHeight) >= Epsilon)
                      singleHeight = -2;
                  let line = new HeightMapText(len, height);
                  line.outdated = false;
                  nodes.push(line);
                  pos += len + 1;
              }
              if (pos <= end)
                  nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
              let result = HeightMap.of(nodes);
              if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||
                  Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
                  heightChangeFlag = true;
              return replace(this, result);
          }
          else if (force || this.outdated) {
              this.setHeight(oracle.heightForGap(offset, offset + this.length));
              this.outdated = false;
          }
          return this;
      }
      toString() { return `gap(${this.length})`; }
  }
  class HeightMapBranch extends HeightMap {
      constructor(left, brk, right) {
          super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0));
          this.left = left;
          this.right = right;
          this.size = left.size + right.size;
      }
      get break() { return this.flags & 1 /* Flag.Break */; }
      blockAt(height, oracle, top, offset) {
          let mid = top + this.left.height;
          return height < mid ? this.left.blockAt(height, oracle, top, offset)
              : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
      }
      lineAt(value, type, oracle, top, offset) {
          let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
          let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
          let base = left ? this.left.lineAt(value, type, oracle, top, offset)
              : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
          if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
              return base;
          let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
          if (left)
              return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
          else
              return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);
      }
      forEachLine(from, to, oracle, top, offset, f) {
          let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
          if (this.break) {
              if (from < rightOffset)
                  this.left.forEachLine(from, to, oracle, top, offset, f);
              if (to >= rightOffset)
                  this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
          }
          else {
              let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top, offset);
              if (from < mid.from)
                  this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);
              if (mid.to >= from && mid.from <= to)
                  f(mid);
              if (to > mid.to)
                  this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
          }
      }
      replace(from, to, nodes) {
          let rightStart = this.left.length + this.break;
          if (to < rightStart)
              return this.balanced(this.left.replace(from, to, nodes), this.right);
          if (from > this.left.length)
              return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
          let result = [];
          if (from > 0)
              this.decomposeLeft(from, result);
          let left = result.length;
          for (let node of nodes)
              result.push(node);
          if (from > 0)
              mergeGaps(result, left - 1);
          if (to < this.length) {
              let right = result.length;
              this.decomposeRight(to, result);
              mergeGaps(result, right);
          }
          return HeightMap.of(result);
      }
      decomposeLeft(to, result) {
          let left = this.left.length;
          if (to <= left)
              return this.left.decomposeLeft(to, result);
          result.push(this.left);
          if (this.break) {
              left++;
              if (to >= left)
                  result.push(null);
          }
          if (to > left)
              this.right.decomposeLeft(to - left, result);
      }
      decomposeRight(from, result) {
          let left = this.left.length, right = left + this.break;
          if (from >= right)
              return this.right.decomposeRight(from - right, result);
          if (from < left)
              this.left.decomposeRight(from, result);
          if (this.break && from < right)
              result.push(null);
          result.push(this.right);
      }
      balanced(left, right) {
          if (left.size > 2 * right.size || right.size > 2 * left.size)
              return HeightMap.of(this.break ? [left, null, right] : [left, right]);
          this.left = replace(this.left, left);
          this.right = replace(this.right, right);
          this.setHeight(left.height + right.height);
          this.outdated = left.outdated || right.outdated;
          this.size = left.size + right.size;
          this.length = left.length + this.break + right.length;
          return this;
      }
      updateHeight(oracle, offset = 0, force = false, measured) {
          let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
          if (measured && measured.from <= offset + left.length && measured.more)
              rebalance = left = left.updateHeight(oracle, offset, force, measured);
          else
              left.updateHeight(oracle, offset, force);
          if (measured && measured.from <= rightStart + right.length && measured.more)
              rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
          else
              right.updateHeight(oracle, rightStart, force);
          if (rebalance)
              return this.balanced(left, right);
          this.height = this.left.height + this.right.height;
          this.outdated = false;
          return this;
      }
      toString() { return this.left + (this.break ? " " : "-") + this.right; }
  }
  function mergeGaps(nodes, around) {
      let before, after;
      if (nodes[around] == null &&
          (before = nodes[around - 1]) instanceof HeightMapGap &&
          (after = nodes[around + 1]) instanceof HeightMapGap)
          nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
  }
  const relevantWidgetHeight = 5;
  class NodeBuilder {
      constructor(pos, oracle) {
          this.pos = pos;
          this.oracle = oracle;
          this.nodes = [];
          this.lineStart = -1;
          this.lineEnd = -1;
          this.covering = null;
          this.writtenTo = pos;
      }
      get isCovered() {
          return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
      }
      span(_from, to) {
          if (this.lineStart > -1) {
              let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
              if (last instanceof HeightMapText)
                  last.length += end - this.pos;
              else if (end > this.pos || !this.isCovered)
                  this.nodes.push(new HeightMapText(end - this.pos, -1));
              this.writtenTo = end;
              if (to > end) {
                  this.nodes.push(null);
                  this.writtenTo++;
                  this.lineStart = -1;
              }
          }
          this.pos = to;
      }
      point(from, to, deco) {
          if (from < to || deco.heightRelevant) {
              let height = deco.widget ? deco.widget.estimatedHeight : 0;
              let breaks = deco.widget ? deco.widget.lineBreaks : 0;
              if (height < 0)
                  height = this.oracle.lineHeight;
              let len = to - from;
              if (deco.block) {
                  this.addBlock(new HeightMapBlock(len, height, deco));
              }
              else if (len || breaks || height >= relevantWidgetHeight) {
                  this.addLineDeco(height, breaks, len);
              }
          }
          else if (to > from) {
              this.span(from, to);
          }
          if (this.lineEnd > -1 && this.lineEnd < this.pos)
              this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
      }
      enterLine() {
          if (this.lineStart > -1)
              return;
          let { from, to } = this.oracle.doc.lineAt(this.pos);
          this.lineStart = from;
          this.lineEnd = to;
          if (this.writtenTo < from) {
              if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
                  this.nodes.push(this.blankContent(this.writtenTo, from - 1));
              this.nodes.push(null);
          }
          if (this.pos > from)
              this.nodes.push(new HeightMapText(this.pos - from, -1));
          this.writtenTo = this.pos;
      }
      blankContent(from, to) {
          let gap = new HeightMapGap(to - from);
          if (this.oracle.doc.lineAt(from).to == to)
              gap.flags |= 4 /* Flag.SingleLine */;
          return gap;
      }
      ensureLine() {
          this.enterLine();
          let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
          if (last instanceof HeightMapText)
              return last;
          let line = new HeightMapText(0, -1);
          this.nodes.push(line);
          return line;
      }
      addBlock(block) {
          this.enterLine();
          let deco = block.deco;
          if (deco && deco.startSide > 0 && !this.isCovered)
              this.ensureLine();
          this.nodes.push(block);
          this.writtenTo = this.pos = this.pos + block.length;
          if (deco && deco.endSide > 0)
              this.covering = block;
      }
      addLineDeco(height, breaks, length) {
          let line = this.ensureLine();
          line.length += length;
          line.collapsed += length;
          line.widgetHeight = Math.max(line.widgetHeight, height);
          line.breaks += breaks;
          this.writtenTo = this.pos = this.pos + length;
      }
      finish(from) {
          let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
          if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
              this.nodes.push(new HeightMapText(0, -1));
          else if (this.writtenTo < this.pos || last == null)
              this.nodes.push(this.blankContent(this.writtenTo, this.pos));
          let pos = from;
          for (let node of this.nodes) {
              if (node instanceof HeightMapText)
                  node.updateHeight(this.oracle, pos);
              pos += node ? node.length : 1;
          }
          return this.nodes;
      }
      // Always called with a region that on both sides either stretches
      // to a line break or the end of the document.
      // The returned array uses null to indicate line breaks, but never
      // starts or ends in a line break, or has multiple line breaks next
      // to each other.
      static build(oracle, decorations, from, to) {
          let builder = new NodeBuilder(from, oracle);
          RangeSet.spans(decorations, from, to, builder, 0);
          return builder.finish(from);
      }
  }
  function heightRelevantDecoChanges(a, b, diff) {
      let comp = new DecorationComparator;
      RangeSet.compare(a, b, diff, comp, 0);
      return comp.changes;
  }
  class DecorationComparator {
      constructor() {
          this.changes = [];
      }
      compareRange() { }
      comparePoint(from, to, a, b) {
          if (from < to || a && a.heightRelevant || b && b.heightRelevant)
              addRange(from, to, this.changes, 5);
      }
  }

  function visiblePixelRange(dom, paddingTop) {
      let rect = dom.getBoundingClientRect();
      let doc = dom.ownerDocument, win = doc.defaultView || window;
      let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
      let top = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
      for (let parent = dom.parentNode; parent && parent != doc.body;) {
          if (parent.nodeType == 1) {
              let elt = parent;
              let style = window.getComputedStyle(elt);
              if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&
                  style.overflow != "visible") {
                  let parentRect = elt.getBoundingClientRect();
                  left = Math.max(left, parentRect.left);
                  right = Math.min(right, parentRect.right);
                  top = Math.max(top, parentRect.top);
                  bottom = Math.min(parent == dom.parentNode ? win.innerHeight : bottom, parentRect.bottom);
              }
              parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
          }
          else if (parent.nodeType == 11) { // Shadow root
              parent = parent.host;
          }
          else {
              break;
          }
      }
      return { left: left - rect.left, right: Math.max(left, right) - rect.left,
          top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };
  }
  function inWindow(elt) {
      let rect = elt.getBoundingClientRect(), win = elt.ownerDocument.defaultView || window;
      return rect.left < win.innerWidth && rect.right > 0 &&
          rect.top < win.innerHeight && rect.bottom > 0;
  }
  function fullPixelRange(dom, paddingTop) {
      let rect = dom.getBoundingClientRect();
      return { left: 0, right: rect.right - rect.left,
          top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };
  }
  // Line gaps are placeholder widgets used to hide pieces of overlong
  // lines within the viewport, as a kludge to keep the editor
  // responsive when a ridiculously long line is loaded into it.
  class LineGap {
      constructor(from, to, size, displaySize) {
          this.from = from;
          this.to = to;
          this.size = size;
          this.displaySize = displaySize;
      }
      static same(a, b) {
          if (a.length != b.length)
              return false;
          for (let i = 0; i < a.length; i++) {
              let gA = a[i], gB = b[i];
              if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
                  return false;
          }
          return true;
      }
      draw(viewState, wrapping) {
          return Decoration.replace({
              widget: new LineGapWidget(this.displaySize * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
          }).range(this.from, this.to);
      }
  }
  class LineGapWidget extends WidgetType {
      constructor(size, vertical) {
          super();
          this.size = size;
          this.vertical = vertical;
      }
      eq(other) { return other.size == this.size && other.vertical == this.vertical; }
      toDOM() {
          let elt = document.createElement("div");
          if (this.vertical) {
              elt.style.height = this.size + "px";
          }
          else {
              elt.style.width = this.size + "px";
              elt.style.height = "2px";
              elt.style.display = "inline-block";
          }
          return elt;
      }
      get estimatedHeight() { return this.vertical ? this.size : -1; }
  }
  class ViewState {
      constructor(state) {
          this.state = state;
          // These are contentDOM-local coordinates
          this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
          this.inView = true;
          this.paddingTop = 0; // Padding above the document, scaled
          this.paddingBottom = 0; // Padding below the document, scaled
          this.contentDOMWidth = 0; // contentDOM.getBoundingClientRect().width
          this.contentDOMHeight = 0; // contentDOM.getBoundingClientRect().height
          this.editorHeight = 0; // scrollDOM.clientHeight, unscaled
          this.editorWidth = 0; // scrollDOM.clientWidth, unscaled
          this.scrollTop = 0; // Last seen scrollDOM.scrollTop, scaled
          this.scrolledToBottom = false;
          // The CSS-transformation scale of the editor (transformed size /
          // concrete size)
          this.scaleX = 1;
          this.scaleY = 1;
          // The vertical position (document-relative) to which to anchor the
          // scroll position. -1 means anchor to the end of the document.
          this.scrollAnchorPos = 0;
          // The height at the anchor position. Set by the DOM update phase.
          // -1 means no height available.
          this.scrollAnchorHeight = -1;
          // See VP.MaxDOMHeight
          this.scaler = IdScaler;
          this.scrollTarget = null;
          // Briefly set to true when printing, to disable viewport limiting
          this.printing = false;
          // Flag set when editor content was redrawn, so that the next
          // measure stage knows it must read DOM layout
          this.mustMeasureContent = true;
          this.defaultTextDirection = Direction.LTR;
          this.visibleRanges = [];
          // Cursor 'assoc' is only significant when the cursor is on a line
          // wrap point, where it must stick to the character that it is
          // associated with. Since browsers don't provide a reasonable
          // interface to set or query this, when a selection is set that
          // might cause this to be significant, this flag is set. The next
          // measure phase will check whether the cursor is on a line-wrapping
          // boundary and, if so, reset it to make sure it is positioned in
          // the right place.
          this.mustEnforceCursorAssoc = false;
          let guessWrapping = state.facet(contentAttributes).some(v => typeof v != "function" && v.class == "cm-lineWrapping");
          this.heightOracle = new HeightOracle(guessWrapping);
          this.stateDeco = state.facet(decorations).filter(d => typeof d != "function");
          this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
          for (let i = 0; i < 2; i++) {
              this.viewport = this.getViewport(0, null);
              if (!this.updateForViewport())
                  break;
          }
          this.updateViewportLines();
          this.lineGaps = this.ensureLineGaps([]);
          this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(this, false)));
          this.computeVisibleRanges();
      }
      updateForViewport() {
          let viewports = [this.viewport], { main } = this.state.selection;
          for (let i = 0; i <= 1; i++) {
              let pos = i ? main.head : main.anchor;
              if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
                  let { from, to } = this.lineBlockAt(pos);
                  viewports.push(new Viewport(from, to));
              }
          }
          this.viewports = viewports.sort((a, b) => a.from - b.from);
          return this.updateScaler();
      }
      updateScaler() {
          let scaler = this.scaler;
          this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler :
              new BigScaler(this.heightOracle, this.heightMap, this.viewports);
          return scaler.eq(this.scaler) ? 0 : 2 /* UpdateFlag.Height */;
      }
      updateViewportLines() {
          this.viewportLines = [];
          this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, block => {
              this.viewportLines.push(scaleBlock(block, this.scaler));
          });
      }
      update(update, scrollTarget = null) {
          this.state = update.state;
          let prevDeco = this.stateDeco;
          this.stateDeco = this.state.facet(decorations).filter(d => typeof d != "function");
          let contentChanges = update.changedRanges;
          let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
          let prevHeight = this.heightMap.height;
          let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
          clearHeightChangeFlag();
          this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
          if (this.heightMap.height != prevHeight || heightChangeFlag)
              update.flags |= 2 /* UpdateFlag.Height */;
          if (scrollAnchor) {
              this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
              this.scrollAnchorHeight = scrollAnchor.top;
          }
          else {
              this.scrollAnchorPos = -1;
              this.scrollAnchorHeight = this.heightMap.height;
          }
          let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
          if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||
              !this.viewportIsAppropriate(viewport))
              viewport = this.getViewport(0, scrollTarget);
          let viewportChange = viewport.from != this.viewport.from || viewport.to != this.viewport.to;
          this.viewport = viewport;
          update.flags |= this.updateForViewport();
          if (viewportChange || !update.changes.empty || (update.flags & 2 /* UpdateFlag.Height */))
              this.updateViewportLines();
          if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
              this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
          update.flags |= this.computeVisibleRanges(update.changes);
          if (scrollTarget)
              this.scrollTarget = scrollTarget;
          if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
              update.state.selection.main.empty && update.state.selection.main.assoc &&
              !update.state.facet(nativeSelectionHidden))
              this.mustEnforceCursorAssoc = true;
      }
      measure(view) {
          let dom = view.contentDOM, style = window.getComputedStyle(dom);
          let oracle = this.heightOracle;
          let whiteSpace = style.whiteSpace;
          this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
          let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
          let domRect = dom.getBoundingClientRect();
          let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
          this.contentDOMHeight = domRect.height;
          this.mustMeasureContent = false;
          let result = 0, bias = 0;
          if (domRect.width && domRect.height) {
              let { scaleX, scaleY } = getScale(dom, domRect);
              if (scaleX > .005 && Math.abs(this.scaleX - scaleX) > .005 ||
                  scaleY > .005 && Math.abs(this.scaleY - scaleY) > .005) {
                  this.scaleX = scaleX;
                  this.scaleY = scaleY;
                  result |= 16 /* UpdateFlag.Geometry */;
                  refresh = measureContent = true;
              }
          }
          // Vertical padding
          let paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
          let paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
          if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
              this.paddingTop = paddingTop;
              this.paddingBottom = paddingBottom;
              result |= 16 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;
          }
          if (this.editorWidth != view.scrollDOM.clientWidth) {
              if (oracle.lineWrapping)
                  measureContent = true;
              this.editorWidth = view.scrollDOM.clientWidth;
              result |= 16 /* UpdateFlag.Geometry */;
          }
          let scrollTop = view.scrollDOM.scrollTop * this.scaleY;
          if (this.scrollTop != scrollTop) {
              this.scrollAnchorHeight = -1;
              this.scrollTop = scrollTop;
          }
          this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
          // Pixel viewport
          let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
          let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
          this.pixelViewport = pixelViewport;
          let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
          if (inView != this.inView) {
              this.inView = inView;
              if (inView)
                  measureContent = true;
          }
          if (!this.inView && !this.scrollTarget && !inWindow(view.dom))
              return 0;
          let contentWidth = domRect.width;
          if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
              this.contentDOMWidth = domRect.width;
              this.editorHeight = view.scrollDOM.clientHeight;
              result |= 16 /* UpdateFlag.Geometry */;
          }
          if (measureContent) {
              let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
              if (oracle.mustRefreshForHeights(lineHeights))
                  refresh = true;
              if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
                  let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
                  refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
                  if (refresh) {
                      view.docView.minWidth = 0;
                      result |= 16 /* UpdateFlag.Geometry */;
                  }
              }
              if (dTop > 0 && dBottom > 0)
                  bias = Math.max(dTop, dBottom);
              else if (dTop < 0 && dBottom < 0)
                  bias = Math.min(dTop, dBottom);
              clearHeightChangeFlag();
              for (let vp of this.viewports) {
                  let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
                  this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
              }
              if (heightChangeFlag)
                  result |= 2 /* UpdateFlag.Height */;
          }
          let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||
              this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from ||
                  this.scrollTarget.range.head > this.viewport.to);
          if (viewportChange) {
              if (result & 2 /* UpdateFlag.Height */)
                  result |= this.updateScaler();
              this.viewport = this.getViewport(bias, this.scrollTarget);
              result |= this.updateForViewport();
          }
          if ((result & 2 /* UpdateFlag.Height */) || viewportChange)
              this.updateViewportLines();
          if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
              this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
          result |= this.computeVisibleRanges();
          if (this.mustEnforceCursorAssoc) {
              this.mustEnforceCursorAssoc = false;
              // This is done in the read stage, because moving the selection
              // to a line end is going to trigger a layout anyway, so it
              // can't be a pure write. It should be rare that it does any
              // writing.
              view.docView.enforceCursorAssoc();
          }
          return result;
      }
      get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }
      get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }
      getViewport(bias, scrollTarget) {
          // This will divide VP.Margin between the top and the
          // bottom, depending on the bias (the change in viewport position
          // since the last update). It'll hold a number between 0 and 1
          let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));
          let map = this.heightMap, oracle = this.heightOracle;
          let { visibleTop, visibleBottom } = this;
          let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).to);
          // If scrollTarget is given, make sure the viewport includes that position
          if (scrollTarget) {
              let { head } = scrollTarget.range;
              if (head < viewport.from || head > viewport.to) {
                  let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
                  let block = map.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
                  if (scrollTarget.y == "center")
                      topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
                  else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
                      topPos = block.top;
                  else
                      topPos = block.bottom - viewHeight;
                  viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).to);
              }
          }
          return viewport;
      }
      mapViewport(viewport, changes) {
          let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
          return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
      }
      // Checks if a given viewport covers the visible part of the
      // document and not too much beyond that.
      viewportIsAppropriate({ from, to }, bias = 0) {
          if (!this.inView)
              return true;
          let { top } = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0);
          let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);
          let { visibleTop, visibleBottom } = this;
          return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) &&
              (to == this.state.doc.length ||
                  bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) &&
              (top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */);
      }
      mapLineGaps(gaps, changes) {
          if (!gaps.length || changes.empty)
              return gaps;
          let mapped = [];
          for (let gap of gaps)
              if (!changes.touchesRange(gap.from, gap.to))
                  mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size, gap.displaySize));
          return mapped;
      }
      // Computes positions in the viewport where the start or end of a
      // line should be hidden, trying to reuse existing line gaps when
      // appropriate to avoid unneccesary redraws.
      // Uses crude character-counting for the positioning and sizing,
      // since actual DOM coordinates aren't always available and
      // predictable. Relies on generous margins (see LG.Margin) to hide
      // the artifacts this might produce from the user.
      ensureLineGaps(current, mayMeasure) {
          let wrapping = this.heightOracle.lineWrapping;
          let margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */, halfMargin = margin >> 1, doubleMargin = margin << 1;
          // The non-wrapping logic won't work at all in predominantly right-to-left text.
          if (this.defaultTextDirection != Direction.LTR && !wrapping)
              return [];
          let gaps = [];
          let addGap = (from, to, line, structure) => {
              if (to - from < halfMargin)
                  return;
              let sel = this.state.selection.main, avoid = [sel.from];
              if (!sel.empty)
                  avoid.push(sel.to);
              for (let pos of avoid) {
                  if (pos > from && pos < to) {
                      addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);
                      addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);
                      return;
                  }
              }
              let gap = find(current, gap => gap.from >= line.from && gap.to <= line.to &&
                  Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin &&
                  !avoid.some(pos => gap.from < pos && gap.to > pos));
              if (!gap) {
                  // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping
                  if (to < line.to && mayMeasure && wrapping &&
                      mayMeasure.visibleRanges.some(r => r.from <= to && r.to >= to)) {
                      let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
                      if (lineStart > from)
                          to = lineStart;
                  }
                  let size = this.gapSize(line, from, to, structure);
                  let displaySize = wrapping || size < 2000000 /* VP.MaxHorizGap */ ? size : 2000000 /* VP.MaxHorizGap */;
                  gap = new LineGap(from, to, size, displaySize);
              }
              gaps.push(gap);
          };
          let checkLine = (line) => {
              if (line.length < doubleMargin || line.type != BlockType.Text)
                  return;
              let structure = lineStructure(line.from, line.to, this.stateDeco);
              if (structure.total < doubleMargin)
                  return;
              let target = this.scrollTarget ? this.scrollTarget.range.head : null;
              let viewFrom, viewTo;
              if (wrapping) {
                  let marginHeight = (margin / this.heightOracle.lineLength) * this.heightOracle.lineHeight;
                  let top, bot;
                  if (target != null) {
                      let targetFrac = findFraction(structure, target);
                      let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
                      top = targetFrac - spaceFrac;
                      bot = targetFrac + spaceFrac;
                  }
                  else {
                      top = (this.visibleTop - line.top - marginHeight) / line.height;
                      bot = (this.visibleBottom - line.top + marginHeight) / line.height;
                  }
                  viewFrom = findPosition(structure, top);
                  viewTo = findPosition(structure, bot);
              }
              else {
                  let totalWidth = structure.total * this.heightOracle.charWidth;
                  let marginWidth = margin * this.heightOracle.charWidth;
                  let horizOffset = 0;
                  if (totalWidth > 2000000 /* VP.MaxHorizGap */)
                      for (let old of current) {
                          if (old.from >= line.from && old.from < line.to && old.size != old.displaySize &&
                              old.from * this.heightOracle.charWidth + horizOffset < this.pixelViewport.left)
                              horizOffset = old.size - old.displaySize;
                      }
                  let pxLeft = this.pixelViewport.left + horizOffset, pxRight = this.pixelViewport.right + horizOffset;
                  let left, right;
                  if (target != null) {
                      let targetFrac = findFraction(structure, target);
                      let spaceFrac = ((pxRight - pxLeft) / 2 + marginWidth) / totalWidth;
                      left = targetFrac - spaceFrac;
                      right = targetFrac + spaceFrac;
                  }
                  else {
                      left = (pxLeft - marginWidth) / totalWidth;
                      right = (pxRight + marginWidth) / totalWidth;
                  }
                  viewFrom = findPosition(structure, left);
                  viewTo = findPosition(structure, right);
              }
              if (viewFrom > line.from)
                  addGap(line.from, viewFrom, line, structure);
              if (viewTo < line.to)
                  addGap(viewTo, line.to, line, structure);
          };
          for (let line of this.viewportLines) {
              if (Array.isArray(line.type))
                  line.type.forEach(checkLine);
              else
                  checkLine(line);
          }
          return gaps;
      }
      gapSize(line, from, to, structure) {
          let fraction = findFraction(structure, to) - findFraction(structure, from);
          if (this.heightOracle.lineWrapping) {
              return line.height * fraction;
          }
          else {
              return structure.total * this.heightOracle.charWidth * fraction;
          }
      }
      updateLineGaps(gaps) {
          if (!LineGap.same(gaps, this.lineGaps)) {
              this.lineGaps = gaps;
              this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this, this.heightOracle.lineWrapping)));
          }
      }
      computeVisibleRanges(changes) {
          let deco = this.stateDeco;
          if (this.lineGaps.length)
              deco = deco.concat(this.lineGapDeco);
          let ranges = [];
          RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
              span(from, to) { ranges.push({ from, to }); },
              point() { }
          }, 20);
          let changed = 0;
          if (ranges.length != this.visibleRanges.length) {
              changed = 8 /* UpdateFlag.ViewportMoved */ | 4 /* UpdateFlag.Viewport */;
          }
          else {
              for (let i = 0; i < ranges.length && !(changed & 8 /* UpdateFlag.ViewportMoved */); i++) {
                  let old = this.visibleRanges[i], nw = ranges[i];
                  if (old.from != nw.from || old.to != nw.to) {
                      changed |= 4 /* UpdateFlag.Viewport */;
                      if (!(changes && changes.mapPos(old.from, -1) == nw.from && changes.mapPos(old.to, 1) == nw.to))
                          changed |= 8 /* UpdateFlag.ViewportMoved */;
                  }
              }
          }
          this.visibleRanges = ranges;
          return changed;
      }
      lineBlockAt(pos) {
          return (pos >= this.viewport.from && pos <= this.viewport.to &&
              this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||
              scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
      }
      lineBlockAtHeight(height) {
          return (height >= this.viewportLines[0].top && height <= this.viewportLines[this.viewportLines.length - 1].bottom &&
              this.viewportLines.find(l => l.top <= height && l.bottom >= height)) ||
              scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
      }
      scrollAnchorAt(scrollTop) {
          let block = this.lineBlockAtHeight(scrollTop + 8);
          return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];
      }
      elementAtHeight(height) {
          return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
      }
      get docHeight() {
          return this.scaler.toDOM(this.heightMap.height);
      }
      get contentHeight() {
          return this.docHeight + this.paddingTop + this.paddingBottom;
      }
  }
  class Viewport {
      constructor(from, to) {
          this.from = from;
          this.to = to;
      }
  }
  function lineStructure(from, to, stateDeco) {
      let ranges = [], pos = from, total = 0;
      RangeSet.spans(stateDeco, from, to, {
          span() { },
          point(from, to) {
              if (from > pos) {
                  ranges.push({ from: pos, to: from });
                  total += from - pos;
              }
              pos = to;
          }
      }, 20); // We're only interested in collapsed ranges of a significant size
      if (pos < to) {
          ranges.push({ from: pos, to });
          total += to - pos;
      }
      return { total, ranges };
  }
  function findPosition({ total, ranges }, ratio) {
      if (ratio <= 0)
          return ranges[0].from;
      if (ratio >= 1)
          return ranges[ranges.length - 1].to;
      let dist = Math.floor(total * ratio);
      for (let i = 0;; i++) {
          let { from, to } = ranges[i], size = to - from;
          if (dist <= size)
              return from + dist;
          dist -= size;
      }
  }
  function findFraction(structure, pos) {
      let counted = 0;
      for (let { from, to } of structure.ranges) {
          if (pos <= to) {
              counted += pos - from;
              break;
          }
          counted += to - from;
      }
      return counted / structure.total;
  }
  function find(array, f) {
      for (let val of array)
          if (f(val))
              return val;
      return undefined;
  }
  // Don't scale when the document height is within the range of what
  // the DOM can handle.
  const IdScaler = {
      toDOM(n) { return n; },
      fromDOM(n) { return n; },
      scale: 1,
      eq(other) { return other == this; }
  };
  // When the height is too big (> VP.MaxDOMHeight), scale down the
  // regions outside the viewports so that the total height is
  // VP.MaxDOMHeight.
  class BigScaler {
      constructor(oracle, heightMap, viewports) {
          let vpHeight = 0, base = 0, domBase = 0;
          this.viewports = viewports.map(({ from, to }) => {
              let top = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;
              let bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
              vpHeight += bottom - top;
              return { from, to, top, bottom, domTop: 0, domBottom: 0 };
          });
          this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
          for (let obj of this.viewports) {
              obj.domTop = domBase + (obj.top - base) * this.scale;
              domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
              base = obj.bottom;
          }
      }
      toDOM(n) {
          for (let i = 0, base = 0, domBase = 0;; i++) {
              let vp = i < this.viewports.length ? this.viewports[i] : null;
              if (!vp || n < vp.top)
                  return domBase + (n - base) * this.scale;
              if (n <= vp.bottom)
                  return vp.domTop + (n - vp.top);
              base = vp.bottom;
              domBase = vp.domBottom;
          }
      }
      fromDOM(n) {
          for (let i = 0, base = 0, domBase = 0;; i++) {
              let vp = i < this.viewports.length ? this.viewports[i] : null;
              if (!vp || n < vp.domTop)
                  return base + (n - domBase) / this.scale;
              if (n <= vp.domBottom)
                  return vp.top + (n - vp.domTop);
              base = vp.bottom;
              domBase = vp.domBottom;
          }
      }
      eq(other) {
          if (!(other instanceof BigScaler))
              return false;
          return this.scale == other.scale && this.viewports.length == other.viewports.length &&
              this.viewports.every((vp, i) => vp.from == other.viewports[i].from && vp.to == other.viewports[i].to);
      }
  }
  function scaleBlock(block, scaler) {
      if (scaler.scale == 1)
          return block;
      let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
      return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map(b => scaleBlock(b, scaler)) : block._content);
  }

  const theme$1 = /*@__PURE__*/Facet.define({ combine: strs => strs.join(" ") });
  const darkTheme = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });
  const baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();
  const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
  function buildTheme(main, spec, scopes) {
      return new StyleModule(spec, {
          finish(sel) {
              return /&/.test(sel) ? sel.replace(/&\w*/, m => {
                  if (m == "&")
                      return main;
                  if (!scopes || !scopes[m])
                      throw new RangeError(`Unsupported selector: ${m}`);
                  return scopes[m];
              }) : main + " " + sel;
          }
      });
  }
  const baseTheme$1$1 = /*@__PURE__*/buildTheme("." + baseThemeID, {
      "&": {
          position: "relative !important",
          boxSizing: "border-box",
          "&.cm-focused": {
              // Provide a simple default outline to make sure a focused
              // editor is visually distinct. Can't leave the default behavior
              // because that will apply to the content element, which is
              // inside the scrollable container and doesn't include the
              // gutters. We also can't use an 'auto' outline, since those
              // are, for some reason, drawn behind the element content, which
              // will cause things like the active line background to cover
              // the outline (#297).
              outline: "1px dotted #212121"
          },
          display: "flex !important",
          flexDirection: "column"
      },
      ".cm-scroller": {
          display: "flex !important",
          alignItems: "flex-start !important",
          fontFamily: "monospace",
          lineHeight: 1.4,
          height: "100%",
          overflowX: "auto",
          position: "relative",
          zIndex: 0,
          overflowAnchor: "none",
      },
      ".cm-content": {
          margin: 0,
          flexGrow: 2,
          flexShrink: 0,
          display: "block",
          whiteSpace: "pre",
          wordWrap: "normal", // https://github.com/codemirror/dev/issues/456
          boxSizing: "border-box",
          minHeight: "100%",
          padding: "4px 0",
          outline: "none",
          "&[contenteditable=true]": {
              WebkitUserModify: "read-write-plaintext-only",
          }
      },
      ".cm-lineWrapping": {
          whiteSpace_fallback: "pre-wrap", // For IE
          whiteSpace: "break-spaces",
          wordBreak: "break-word", // For Safari, which doesn't support overflow-wrap: anywhere
          overflowWrap: "anywhere",
          flexShrink: 1
      },
      "&light .cm-content": { caretColor: "black" },
      "&dark .cm-content": { caretColor: "white" },
      ".cm-line": {
          display: "block",
          padding: "0 2px 0 6px"
      },
      ".cm-layer": {
          position: "absolute",
          left: 0,
          top: 0,
          contain: "size style",
          "& > *": {
              position: "absolute"
          }
      },
      "&light .cm-selectionBackground": {
          background: "#d9d9d9"
      },
      "&dark .cm-selectionBackground": {
          background: "#222"
      },
      "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
          background: "#d7d4f0"
      },
      "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
          background: "#233"
      },
      ".cm-cursorLayer": {
          pointerEvents: "none"
      },
      "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
          animation: "steps(1) cm-blink 1.2s infinite"
      },
      // Two animations defined so that we can switch between them to
      // restart the animation without forcing another style
      // recomputation.
      "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
      "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
      ".cm-cursor, .cm-dropCursor": {
          borderLeft: "1.2px solid black",
          marginLeft: "-0.6px",
          pointerEvents: "none",
      },
      ".cm-cursor": {
          display: "none"
      },
      "&dark .cm-cursor": {
          borderLeftColor: "#ddd"
      },
      ".cm-dropCursor": {
          position: "absolute"
      },
      "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
          display: "block"
      },
      ".cm-iso": {
          unicodeBidi: "isolate"
      },
      ".cm-announced": {
          position: "fixed",
          top: "-10000px"
      },
      "@media print": {
          ".cm-announced": { display: "none" }
      },
      "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
      "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
      "&light .cm-specialChar": { color: "red" },
      "&dark .cm-specialChar": { color: "#f78" },
      ".cm-gutters": {
          flexShrink: 0,
          display: "flex",
          height: "100%",
          boxSizing: "border-box",
          insetInlineStart: 0,
          zIndex: 200
      },
      "&light .cm-gutters": {
          backgroundColor: "#f5f5f5",
          color: "#6c6c6c",
          borderRight: "1px solid #ddd"
      },
      "&dark .cm-gutters": {
          backgroundColor: "#333338",
          color: "#ccc"
      },
      ".cm-gutter": {
          display: "flex !important", // Necessary -- prevents margin collapsing
          flexDirection: "column",
          flexShrink: 0,
          boxSizing: "border-box",
          minHeight: "100%",
          overflow: "hidden"
      },
      ".cm-gutterElement": {
          boxSizing: "border-box"
      },
      ".cm-lineNumbers .cm-gutterElement": {
          padding: "0 3px 0 5px",
          minWidth: "20px",
          textAlign: "right",
          whiteSpace: "nowrap"
      },
      "&light .cm-activeLineGutter": {
          backgroundColor: "#e2f2ff"
      },
      "&dark .cm-activeLineGutter": {
          backgroundColor: "#222227"
      },
      ".cm-panels": {
          boxSizing: "border-box",
          position: "sticky",
          left: 0,
          right: 0,
          zIndex: 300
      },
      "&light .cm-panels": {
          backgroundColor: "#f5f5f5",
          color: "black"
      },
      "&light .cm-panels-top": {
          borderBottom: "1px solid #ddd"
      },
      "&light .cm-panels-bottom": {
          borderTop: "1px solid #ddd"
      },
      "&dark .cm-panels": {
          backgroundColor: "#333338",
          color: "white"
      },
      ".cm-tab": {
          display: "inline-block",
          overflow: "hidden",
          verticalAlign: "bottom"
      },
      ".cm-widgetBuffer": {
          verticalAlign: "text-top",
          height: "1em",
          width: 0,
          display: "inline"
      },
      ".cm-placeholder": {
          color: "#888",
          display: "inline-block",
          verticalAlign: "top",
      },
      ".cm-highlightSpace": {
          backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
          backgroundPosition: "center",
      },
      ".cm-highlightTab": {
          backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
          backgroundSize: "auto 100%",
          backgroundPosition: "right 90%",
          backgroundRepeat: "no-repeat"
      },
      ".cm-trailingSpace": {
          backgroundColor: "#ff332255"
      },
      ".cm-button": {
          verticalAlign: "middle",
          color: "inherit",
          fontSize: "70%",
          padding: ".2em 1em",
          borderRadius: "1px"
      },
      "&light .cm-button": {
          backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
          border: "1px solid #888",
          "&:active": {
              backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
          }
      },
      "&dark .cm-button": {
          backgroundImage: "linear-gradient(#393939, #111)",
          border: "1px solid #888",
          "&:active": {
              backgroundImage: "linear-gradient(#111, #333)"
          }
      },
      ".cm-textfield": {
          verticalAlign: "middle",
          color: "inherit",
          fontSize: "70%",
          border: "1px solid silver",
          padding: ".2em .5em"
      },
      "&light .cm-textfield": {
          backgroundColor: "white"
      },
      "&dark .cm-textfield": {
          border: "1px solid #555",
          backgroundColor: "inherit"
      }
  }, lightDarkIDs);

  const observeOptions = {
      childList: true,
      characterData: true,
      subtree: true,
      attributes: true,
      characterDataOldValue: true
  };
  // IE11 has very broken mutation observers, so we also listen to
  // DOMCharacterDataModified there
  const useCharData = browser.ie && browser.ie_version <= 11;
  class DOMObserver {
      constructor(view) {
          this.view = view;
          this.active = false;
          this.editContext = null;
          // The known selection. Kept in our own object, as opposed to just
          // directly accessing the selection because:
          //  - Safari doesn't report the right selection in shadow DOM
          //  - Reading from the selection forces a DOM layout
          //  - This way, we can ignore selectionchange events if we have
          //    already seen the 'new' selection
          this.selectionRange = new DOMSelectionState;
          // Set when a selection change is detected, cleared on flush
          this.selectionChanged = false;
          this.delayedFlush = -1;
          this.resizeTimeout = -1;
          this.queue = [];
          this.delayedAndroidKey = null;
          this.flushingAndroidKey = -1;
          this.lastChange = 0;
          this.scrollTargets = [];
          this.intersection = null;
          this.resizeScroll = null;
          this.intersecting = false;
          this.gapIntersection = null;
          this.gaps = [];
          this.printQuery = null;
          // Timeout for scheduling check of the parents that need scroll handlers
          this.parentCheck = -1;
          this.dom = view.contentDOM;
          this.observer = new MutationObserver(mutations => {
              for (let mut of mutations)
                  this.queue.push(mut);
              // IE11 will sometimes (on typing over a selection or
              // backspacing out a single character text node) call the
              // observer callback before actually updating the DOM.
              //
              // Unrelatedly, iOS Safari will, when ending a composition,
              // sometimes first clear it, deliver the mutations, and then
              // reinsert the finished text. CodeMirror's handling of the
              // deletion will prevent the reinsertion from happening,
              // breaking composition.
              if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&
                  mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                      m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                  this.flushSoon();
              else
                  this.flush();
          });
          if (window.EditContext && view.constructor.EDIT_CONTEXT !== false &&
              // Chrome <126 doesn't support inverted selections in edit context (#1392)
              !(browser.chrome && browser.chrome_version < 126)) {
              this.editContext = new EditContextManager(view);
              if (view.state.facet(editable))
                  view.contentDOM.editContext = this.editContext.editContext;
          }
          if (useCharData)
              this.onCharData = (event) => {
                  this.queue.push({ target: event.target,
                      type: "characterData",
                      oldValue: event.prevValue });
                  this.flushSoon();
              };
          this.onSelectionChange = this.onSelectionChange.bind(this);
          this.onResize = this.onResize.bind(this);
          this.onPrint = this.onPrint.bind(this);
          this.onScroll = this.onScroll.bind(this);
          if (window.matchMedia)
              this.printQuery = window.matchMedia("print");
          if (typeof ResizeObserver == "function") {
              this.resizeScroll = new ResizeObserver(() => {
                  var _a;
                  if (((_a = this.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75)
                      this.onResize();
              });
              this.resizeScroll.observe(view.scrollDOM);
          }
          this.addWindowListeners(this.win = view.win);
          this.start();
          if (typeof IntersectionObserver == "function") {
              this.intersection = new IntersectionObserver(entries => {
                  if (this.parentCheck < 0)
                      this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
                  if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {
                      this.intersecting = !this.intersecting;
                      if (this.intersecting != this.view.inView)
                          this.onScrollChanged(document.createEvent("Event"));
                  }
              }, { threshold: [0, .001] });
              this.intersection.observe(this.dom);
              this.gapIntersection = new IntersectionObserver(entries => {
                  if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
                      this.onScrollChanged(document.createEvent("Event"));
              }, {});
          }
          this.listenForScroll();
          this.readSelectionRange();
      }
      onScrollChanged(e) {
          this.view.inputState.runHandlers("scroll", e);
          if (this.intersecting)
              this.view.measure();
      }
      onScroll(e) {
          if (this.intersecting)
              this.flush(false);
          if (this.editContext)
              this.view.requestMeasure(this.editContext.measureReq);
          this.onScrollChanged(e);
      }
      onResize() {
          if (this.resizeTimeout < 0)
              this.resizeTimeout = setTimeout(() => {
                  this.resizeTimeout = -1;
                  this.view.requestMeasure();
              }, 50);
      }
      onPrint(event) {
          if ((event.type == "change" || !event.type) && !event.matches)
              return;
          this.view.viewState.printing = true;
          this.view.measure();
          setTimeout(() => {
              this.view.viewState.printing = false;
              this.view.requestMeasure();
          }, 500);
      }
      updateGaps(gaps) {
          if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
              this.gapIntersection.disconnect();
              for (let gap of gaps)
                  this.gapIntersection.observe(gap);
              this.gaps = gaps;
          }
      }
      onSelectionChange(event) {
          let wasChanged = this.selectionChanged;
          if (!this.readSelectionRange() || this.delayedAndroidKey)
              return;
          let { view } = this, sel = this.selectionRange;
          if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(this.dom, sel))
              return;
          let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
          if (context && context.ignoreEvent(event)) {
              if (!wasChanged)
                  this.selectionChanged = false;
              return;
          }
          // Deletions on IE11 fire their events in the wrong order, giving
          // us a selection change event before the DOM changes are
          // reported.
          // Chrome Android has a similar issue when backspacing out a
          // selection (#645).
          if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
              // (Selection.isCollapsed isn't reliable on IE)
              sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
              this.flushSoon();
          else
              this.flush(false);
      }
      readSelectionRange() {
          let { view } = this;
          // The Selection object is broken in shadow roots in Safari. See
          // https://github.com/codemirror/dev/issues/414
          let selection = getSelection(view.root);
          if (!selection)
              return false;
          let range = browser.safari && view.root.nodeType == 11 &&
              view.root.activeElement == this.dom &&
              safariSelectionRangeHack(this.view, selection) || selection;
          if (!range || this.selectionRange.eq(range))
              return false;
          let local = hasSelection(this.dom, range);
          // Detect the situation where the browser has, on focus, moved the
          // selection to the start of the content element. Reset it to the
          // position from the editor state.
          if (local && !this.selectionChanged &&
              view.inputState.lastFocusTime > Date.now() - 200 &&
              view.inputState.lastTouchTime < Date.now() - 300 &&
              atElementStart(this.dom, range)) {
              this.view.inputState.lastFocusTime = 0;
              view.docView.updateSelection();
              return false;
          }
          this.selectionRange.setRange(range);
          if (local)
              this.selectionChanged = true;
          return true;
      }
      setSelectionRange(anchor, head) {
          this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
          this.selectionChanged = false;
      }
      clearSelectionRange() {
          this.selectionRange.set(null, 0, null, 0);
      }
      listenForScroll() {
          this.parentCheck = -1;
          let i = 0, changed = null;
          for (let dom = this.dom; dom;) {
              if (dom.nodeType == 1) {
                  if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                      i++;
                  else if (!changed)
                      changed = this.scrollTargets.slice(0, i);
                  if (changed)
                      changed.push(dom);
                  dom = dom.assignedSlot || dom.parentNode;
              }
              else if (dom.nodeType == 11) { // Shadow root
                  dom = dom.host;
              }
              else {
                  break;
              }
          }
          if (i < this.scrollTargets.length && !changed)
              changed = this.scrollTargets.slice(0, i);
          if (changed) {
              for (let dom of this.scrollTargets)
                  dom.removeEventListener("scroll", this.onScroll);
              for (let dom of this.scrollTargets = changed)
                  dom.addEventListener("scroll", this.onScroll);
          }
      }
      ignore(f) {
          if (!this.active)
              return f();
          try {
              this.stop();
              return f();
          }
          finally {
              this.start();
              this.clear();
          }
      }
      start() {
          if (this.active)
              return;
          this.observer.observe(this.dom, observeOptions);
          if (useCharData)
              this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
          this.active = true;
      }
      stop() {
          if (!this.active)
              return;
          this.active = false;
          this.observer.disconnect();
          if (useCharData)
              this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
      }
      // Throw away any pending changes
      clear() {
          this.processRecords();
          this.queue.length = 0;
          this.selectionChanged = false;
      }
      // Chrome Android, especially in combination with GBoard, not only
      // doesn't reliably fire regular key events, but also often
      // surrounds the effect of enter or backspace with a bunch of
      // composition events that, when interrupted, cause text duplication
      // or other kinds of corruption. This hack makes the editor back off
      // from handling DOM changes for a moment when such a key is
      // detected (via beforeinput or keydown), and then tries to flush
      // them or, if that has no effect, dispatches the given key.
      delayAndroidKey(key, keyCode) {
          var _a;
          if (!this.delayedAndroidKey) {
              let flush = () => {
                  let key = this.delayedAndroidKey;
                  if (key) {
                      this.clearDelayedAndroidKey();
                      this.view.inputState.lastKeyCode = key.keyCode;
                      this.view.inputState.lastKeyTime = Date.now();
                      let flushed = this.flush();
                      if (!flushed && key.force)
                          dispatchKey(this.dom, key.key, key.keyCode);
                  }
              };
              this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
          }
          // Since backspace beforeinput is sometimes signalled spuriously,
          // Enter always takes precedence.
          if (!this.delayedAndroidKey || key == "Enter")
              this.delayedAndroidKey = {
                  key, keyCode,
                  // Only run the key handler when no changes are detected if
                  // this isn't coming right after another change, in which case
                  // it is probably part of a weird chain of updates, and should
                  // be ignored if it returns the DOM to its previous state.
                  force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)
              };
      }
      clearDelayedAndroidKey() {
          this.win.cancelAnimationFrame(this.flushingAndroidKey);
          this.delayedAndroidKey = null;
          this.flushingAndroidKey = -1;
      }
      flushSoon() {
          if (this.delayedFlush < 0)
              this.delayedFlush = this.view.win.requestAnimationFrame(() => { this.delayedFlush = -1; this.flush(); });
      }
      forceFlush() {
          if (this.delayedFlush >= 0) {
              this.view.win.cancelAnimationFrame(this.delayedFlush);
              this.delayedFlush = -1;
          }
          this.flush();
      }
      pendingRecords() {
          for (let mut of this.observer.takeRecords())
              this.queue.push(mut);
          return this.queue;
      }
      processRecords() {
          let records = this.pendingRecords();
          if (records.length)
              this.queue = [];
          let from = -1, to = -1, typeOver = false;
          for (let record of records) {
              let range = this.readMutation(record);
              if (!range)
                  continue;
              if (range.typeOver)
                  typeOver = true;
              if (from == -1) {
                  ({ from, to } = range);
              }
              else {
                  from = Math.min(range.from, from);
                  to = Math.max(range.to, to);
              }
          }
          return { from, to, typeOver };
      }
      readChange() {
          let { from, to, typeOver } = this.processRecords();
          let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
          if (from < 0 && !newSel)
              return null;
          if (from > -1)
              this.lastChange = Date.now();
          this.view.inputState.lastFocusTime = 0;
          this.selectionChanged = false;
          let change = new DOMChange(this.view, from, to, typeOver);
          this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };
          return change;
      }
      // Apply pending changes, if any
      flush(readSelection = true) {
          // Completely hold off flushing when pending keys are set—the code
          // managing those will make sure processRecords is called and the
          // view is resynchronized after
          if (this.delayedFlush >= 0 || this.delayedAndroidKey)
              return false;
          if (readSelection)
              this.readSelectionRange();
          let domChange = this.readChange();
          if (!domChange) {
              this.view.requestMeasure();
              return false;
          }
          let startState = this.view.state;
          let handled = applyDOMChange(this.view, domChange);
          // The view wasn't updated but DOM/selection changes were seen. Reset the view.
          if (this.view.state == startState &&
              (domChange.domChanged || domChange.newSel && !domChange.newSel.main.eq(this.view.state.selection.main)))
              this.view.update([]);
          return handled;
      }
      readMutation(rec) {
          let cView = this.view.docView.nearest(rec.target);
          if (!cView || cView.ignoreMutation(rec))
              return null;
          cView.markDirty(rec.type == "attributes");
          if (rec.type == "attributes")
              cView.flags |= 4 /* ViewFlag.AttrsDirty */;
          if (rec.type == "childList") {
              let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
              let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
              return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                  to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
          }
          else if (rec.type == "characterData") {
              return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
          }
          else {
              return null;
          }
      }
      setWindow(win) {
          if (win != this.win) {
              this.removeWindowListeners(this.win);
              this.win = win;
              this.addWindowListeners(this.win);
          }
      }
      addWindowListeners(win) {
          win.addEventListener("resize", this.onResize);
          if (this.printQuery) {
              if (this.printQuery.addEventListener)
                  this.printQuery.addEventListener("change", this.onPrint);
              else
                  this.printQuery.addListener(this.onPrint);
          }
          else
              win.addEventListener("beforeprint", this.onPrint);
          win.addEventListener("scroll", this.onScroll);
          win.document.addEventListener("selectionchange", this.onSelectionChange);
      }
      removeWindowListeners(win) {
          win.removeEventListener("scroll", this.onScroll);
          win.removeEventListener("resize", this.onResize);
          if (this.printQuery) {
              if (this.printQuery.removeEventListener)
                  this.printQuery.removeEventListener("change", this.onPrint);
              else
                  this.printQuery.removeListener(this.onPrint);
          }
          else
              win.removeEventListener("beforeprint", this.onPrint);
          win.document.removeEventListener("selectionchange", this.onSelectionChange);
      }
      update(update) {
          if (this.editContext) {
              this.editContext.update(update);
              if (update.startState.facet(editable) != update.state.facet(editable))
                  update.view.contentDOM.editContext = update.state.facet(editable) ? this.editContext.editContext : null;
          }
      }
      destroy() {
          var _a, _b, _c;
          this.stop();
          (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
          (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
          (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
          for (let dom of this.scrollTargets)
              dom.removeEventListener("scroll", this.onScroll);
          this.removeWindowListeners(this.win);
          clearTimeout(this.parentCheck);
          clearTimeout(this.resizeTimeout);
          this.win.cancelAnimationFrame(this.delayedFlush);
          this.win.cancelAnimationFrame(this.flushingAndroidKey);
          if (this.editContext) {
              this.view.contentDOM.editContext = null;
              this.editContext.destroy();
          }
      }
  }
  function findChild(cView, dom, dir) {
      while (dom) {
          let curView = ContentView.get(dom);
          if (curView && curView.parent == cView)
              return curView;
          let parent = dom.parentNode;
          dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
      }
      return null;
  }
  function buildSelectionRangeFromRange(view, range) {
      let anchorNode = range.startContainer, anchorOffset = range.startOffset;
      let focusNode = range.endContainer, focusOffset = range.endOffset;
      let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
      // Since such a range doesn't distinguish between anchor and head,
      // use a heuristic that flips it around if its end matches the
      // current anchor.
      if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
          [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
      return { anchorNode, anchorOffset, focusNode, focusOffset };
  }
  // Used to work around a Safari Selection/shadow DOM bug (#414)
  function safariSelectionRangeHack(view, selection) {
      if (selection.getComposedRanges) {
          let range = selection.getComposedRanges(view.root)[0];
          if (range)
              return buildSelectionRangeFromRange(view, range);
      }
      let found = null;
      // Because Safari (at least in 2018-2021) doesn't provide regular
      // access to the selection inside a shadowroot, we have to perform a
      // ridiculous hack to get at it—using `execCommand` to trigger a
      // `beforeInput` event so that we can read the target range from the
      // event.
      function read(event) {
          event.preventDefault();
          event.stopImmediatePropagation();
          found = event.getTargetRanges()[0];
      }
      view.contentDOM.addEventListener("beforeinput", read, true);
      view.dom.ownerDocument.execCommand("indent");
      view.contentDOM.removeEventListener("beforeinput", read, true);
      return found ? buildSelectionRangeFromRange(view, found) : null;
  }
  class EditContextManager {
      constructor(view) {
          // The document window for which the text in the context is
          // maintained. For large documents, this may be smaller than the
          // editor document. This window always includes the selection head.
          this.from = 0;
          this.to = 0;
          // When applying a transaction, this is used to compare the change
          // made to the context content to the change in the transaction in
          // order to make the minimal changes to the context (since touching
          // that sometimes breaks series of multiple edits made for a single
          // user action on some Android keyboards)
          this.pendingContextChange = null;
          this.handlers = Object.create(null);
          // Kludge to work around the fact that EditContext does not respond
          // well to having its content updated during a composition (see #1472)
          this.composing = null;
          this.resetRange(view.state);
          let context = this.editContext = new window.EditContext({
              text: view.state.doc.sliceString(this.from, this.to),
              selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, view.state.selection.main.anchor))),
              selectionEnd: this.toContextPos(view.state.selection.main.head)
          });
          this.handlers.textupdate = e => {
              let main = view.state.selection.main, { anchor, head } = main;
              let from = this.toEditorPos(e.updateRangeStart), to = this.toEditorPos(e.updateRangeEnd);
              if (view.inputState.composing >= 0 && !this.composing)
                  this.composing = { contextBase: e.updateRangeStart, editorBase: from, drifted: false };
              let change = { from, to, insert: Text.of(e.text.split("\n")) };
              // If the window doesn't include the anchor, assume changes
              // adjacent to a side go up to the anchor.
              if (change.from == this.from && anchor < this.from)
                  change.from = anchor;
              else if (change.to == this.to && anchor > this.to)
                  change.to = anchor;
              // Edit contexts sometimes fire empty changes
              if (change.from == change.to && !change.insert.length) {
                  let newSel = EditorSelection.single(this.toEditorPos(e.selectionStart), this.toEditorPos(e.selectionEnd));
                  if (!newSel.main.eq(main))
                      view.dispatch({ selection: newSel, userEvent: "select" });
                  return;
              }
              if ((browser.mac || browser.android) && change.from == head - 1 &&
                  /^\. ?$/.test(e.text) && view.contentDOM.getAttribute("autocorrect") == "off")
                  change = { from, to, insert: Text.of([e.text.replace(".", " ")]) };
              this.pendingContextChange = change;
              if (!view.state.readOnly) {
                  let newLen = this.to - this.from + (change.to - change.from + change.insert.length);
                  applyDOMChangeInner(view, change, EditorSelection.single(this.toEditorPos(e.selectionStart, newLen), this.toEditorPos(e.selectionEnd, newLen)));
              }
              // If the transaction didn't flush our change, revert it so
              // that the context is in sync with the editor state again.
              if (this.pendingContextChange) {
                  this.revertPending(view.state);
                  this.setSelection(view.state);
              }
          };
          this.handlers.characterboundsupdate = e => {
              let rects = [], prev = null;
              for (let i = this.toEditorPos(e.rangeStart), end = this.toEditorPos(e.rangeEnd); i < end; i++) {
                  let rect = view.coordsForChar(i);
                  prev = (rect && new DOMRect(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top))
                      || prev || new DOMRect;
                  rects.push(prev);
              }
              context.updateCharacterBounds(e.rangeStart, rects);
          };
          this.handlers.textformatupdate = e => {
              let deco = [];
              for (let format of e.getTextFormats()) {
                  let lineStyle = format.underlineStyle, thickness = format.underlineThickness;
                  if (lineStyle != "None" && thickness != "None") {
                      let from = this.toEditorPos(format.rangeStart), to = this.toEditorPos(format.rangeEnd);
                      if (from < to) {
                          let style = `text-decoration: underline ${lineStyle == "Dashed" ? "dashed " : lineStyle == "Squiggle" ? "wavy " : ""}${thickness == "Thin" ? 1 : 2}px`;
                          deco.push(Decoration.mark({ attributes: { style } }).range(from, to));
                      }
                  }
              }
              view.dispatch({ effects: setEditContextFormatting.of(Decoration.set(deco)) });
          };
          this.handlers.compositionstart = () => {
              if (view.inputState.composing < 0) {
                  view.inputState.composing = 0;
                  view.inputState.compositionFirstChange = true;
              }
          };
          this.handlers.compositionend = () => {
              view.inputState.composing = -1;
              view.inputState.compositionFirstChange = null;
              if (this.composing) {
                  let { drifted } = this.composing;
                  this.composing = null;
                  if (drifted)
                      this.reset(view.state);
              }
          };
          for (let event in this.handlers)
              context.addEventListener(event, this.handlers[event]);
          this.measureReq = { read: view => {
                  this.editContext.updateControlBounds(view.contentDOM.getBoundingClientRect());
                  let sel = getSelection(view.root);
                  if (sel && sel.rangeCount)
                      this.editContext.updateSelectionBounds(sel.getRangeAt(0).getBoundingClientRect());
              } };
      }
      applyEdits(update) {
          let off = 0, abort = false, pending = this.pendingContextChange;
          update.changes.iterChanges((fromA, toA, _fromB, _toB, insert) => {
              if (abort)
                  return;
              let dLen = insert.length - (toA - fromA);
              if (pending && toA >= pending.to) {
                  if (pending.from == fromA && pending.to == toA && pending.insert.eq(insert)) {
                      pending = this.pendingContextChange = null; // Match
                      off += dLen;
                      this.to += dLen;
                      return;
                  }
                  else { // Mismatch, revert
                      pending = null;
                      this.revertPending(update.state);
                  }
              }
              fromA += off;
              toA += off;
              if (toA <= this.from) { // Before the window
                  this.from += dLen;
                  this.to += dLen;
              }
              else if (fromA < this.to) { // Overlaps with window
                  if (fromA < this.from || toA > this.to || (this.to - this.from) + insert.length > 30000 /* CxVp.MaxSize */) {
                      abort = true;
                      return;
                  }
                  this.editContext.updateText(this.toContextPos(fromA), this.toContextPos(toA), insert.toString());
                  this.to += dLen;
              }
              off += dLen;
          });
          if (pending && !abort)
              this.revertPending(update.state);
          return !abort;
      }
      update(update) {
          let reverted = this.pendingContextChange, startSel = update.startState.selection.main;
          if (this.composing &&
              (this.composing.drifted ||
                  (!update.changes.touchesRange(startSel.from, startSel.to) &&
                      update.transactions.some(tr => !tr.isUserEvent("input.type") && tr.changes.touchesRange(this.from, this.to))))) {
              this.composing.drifted = true;
              this.composing.editorBase = update.changes.mapPos(this.composing.editorBase);
          }
          else if (!this.applyEdits(update) || !this.rangeIsValid(update.state)) {
              this.pendingContextChange = null;
              this.reset(update.state);
          }
          else if (update.docChanged || update.selectionSet || reverted) {
              this.setSelection(update.state);
          }
          if (update.geometryChanged || update.docChanged || update.selectionSet)
              update.view.requestMeasure(this.measureReq);
      }
      resetRange(state) {
          let { head } = state.selection.main;
          this.from = Math.max(0, head - 10000 /* CxVp.Margin */);
          this.to = Math.min(state.doc.length, head + 10000 /* CxVp.Margin */);
      }
      reset(state) {
          this.resetRange(state);
          this.editContext.updateText(0, this.editContext.text.length, state.doc.sliceString(this.from, this.to));
          this.setSelection(state);
      }
      revertPending(state) {
          let pending = this.pendingContextChange;
          this.pendingContextChange = null;
          this.editContext.updateText(this.toContextPos(pending.from), this.toContextPos(pending.from + pending.insert.length), state.doc.sliceString(pending.from, pending.to));
      }
      setSelection(state) {
          let { main } = state.selection;
          let start = this.toContextPos(Math.max(this.from, Math.min(this.to, main.anchor)));
          let end = this.toContextPos(main.head);
          if (this.editContext.selectionStart != start || this.editContext.selectionEnd != end)
              this.editContext.updateSelection(start, end);
      }
      rangeIsValid(state) {
          let { head } = state.selection.main;
          return !(this.from > 0 && head - this.from < 500 /* CxVp.MinMargin */ ||
              this.to < state.doc.length && this.to - head < 500 /* CxVp.MinMargin */ ||
              this.to - this.from > 10000 /* CxVp.Margin */ * 3);
      }
      toEditorPos(contextPos, clipLen = this.to - this.from) {
          contextPos = Math.min(contextPos, clipLen);
          let c = this.composing;
          return c && c.drifted ? c.editorBase + (contextPos - c.contextBase) : contextPos + this.from;
      }
      toContextPos(editorPos) {
          let c = this.composing;
          return c && c.drifted ? c.contextBase + (editorPos - c.editorBase) : editorPos - this.from;
      }
      destroy() {
          for (let event in this.handlers)
              this.editContext.removeEventListener(event, this.handlers[event]);
      }
  }

  // The editor's update state machine looks something like this:
  //
  //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
  //                                         ↑      ↓
  //                                         Updating (measure)
  //
  // The difference between 'Idle' and 'Idle (unchecked)' lies in
  // whether a layout check has been scheduled. A regular update through
  // the `update` method updates the DOM in a write-only fashion, and
  // relies on a check (scheduled with `requestAnimationFrame`) to make
  // sure everything is where it should be and the viewport covers the
  // visible code. That check continues to measure and then optionally
  // update until it reaches a coherent state.
  /**
  An editor view represents the editor's user interface. It holds
  the editable DOM surface, and possibly other elements such as the
  line number gutter. It handles events and dispatches state
  transactions for editing actions.
  */
  class EditorView {
      /**
      The current editor state.
      */
      get state() { return this.viewState.state; }
      /**
      To be able to display large documents without consuming too much
      memory or overloading the browser, CodeMirror only draws the
      code that is visible (plus a margin around it) to the DOM. This
      property tells you the extent of the current drawn viewport, in
      document positions.
      */
      get viewport() { return this.viewState.viewport; }
      /**
      When there are, for example, large collapsed ranges in the
      viewport, its size can be a lot bigger than the actual visible
      content. Thus, if you are doing something like styling the
      content in the viewport, it is preferable to only do so for
      these ranges, which are the subset of the viewport that is
      actually drawn.
      */
      get visibleRanges() { return this.viewState.visibleRanges; }
      /**
      Returns false when the editor is entirely scrolled out of view
      or otherwise hidden.
      */
      get inView() { return this.viewState.inView; }
      /**
      Indicates whether the user is currently composing text via
      [IME](https://en.wikipedia.org/wiki/Input_method), and at least
      one change has been made in the current composition.
      */
      get composing() { return this.inputState.composing > 0; }
      /**
      Indicates whether the user is currently in composing state. Note
      that on some platforms, like Android, this will be the case a
      lot, since just putting the cursor on a word starts a
      composition there.
      */
      get compositionStarted() { return this.inputState.composing >= 0; }
      /**
      The document or shadow root that the view lives in.
      */
      get root() { return this._root; }
      /**
      @internal
      */
      get win() { return this.dom.ownerDocument.defaultView || window; }
      /**
      Construct a new view. You'll want to either provide a `parent`
      option, or put `view.dom` into your document after creating a
      view, so that the user can see the editor.
      */
      constructor(config = {}) {
          var _a;
          this.plugins = [];
          this.pluginMap = new Map;
          this.editorAttrs = {};
          this.contentAttrs = {};
          this.bidiCache = [];
          this.destroyed = false;
          /**
          @internal
          */
          this.updateState = 2 /* UpdateState.Updating */;
          /**
          @internal
          */
          this.measureScheduled = -1;
          /**
          @internal
          */
          this.measureRequests = [];
          this.contentDOM = document.createElement("div");
          this.scrollDOM = document.createElement("div");
          this.scrollDOM.tabIndex = -1;
          this.scrollDOM.className = "cm-scroller";
          this.scrollDOM.appendChild(this.contentDOM);
          this.announceDOM = document.createElement("div");
          this.announceDOM.className = "cm-announced";
          this.announceDOM.setAttribute("aria-live", "polite");
          this.dom = document.createElement("div");
          this.dom.appendChild(this.announceDOM);
          this.dom.appendChild(this.scrollDOM);
          if (config.parent)
              config.parent.appendChild(this.dom);
          let { dispatch } = config;
          this.dispatchTransactions = config.dispatchTransactions ||
              (dispatch && ((trs) => trs.forEach(tr => dispatch(tr, this)))) ||
              ((trs) => this.update(trs));
          this.dispatch = this.dispatch.bind(this);
          this._root = (config.root || getRoot(config.parent) || document);
          this.viewState = new ViewState(config.state || EditorState.create(config));
          if (config.scrollTo && config.scrollTo.is(scrollIntoView))
              this.viewState.scrollTarget = config.scrollTo.value.clip(this.viewState.state);
          this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));
          for (let plugin of this.plugins)
              plugin.update(this);
          this.observer = new DOMObserver(this);
          this.inputState = new InputState(this);
          this.inputState.ensureHandlers(this.plugins);
          this.docView = new DocView(this);
          this.mountStyles();
          this.updateAttrs();
          this.updateState = 0 /* UpdateState.Idle */;
          this.requestMeasure();
          if ((_a = document.fonts) === null || _a === void 0 ? void 0 : _a.ready)
              document.fonts.ready.then(() => this.requestMeasure());
      }
      dispatch(...input) {
          let trs = input.length == 1 && input[0] instanceof Transaction ? input
              : input.length == 1 && Array.isArray(input[0]) ? input[0]
                  : [this.state.update(...input)];
          this.dispatchTransactions(trs, this);
      }
      /**
      Update the view for the given array of transactions. This will
      update the visible document and selection to match the state
      produced by the transactions, and notify view plugins of the
      change. You should usually call
      [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
      as a primitive.
      */
      update(transactions) {
          if (this.updateState != 0 /* UpdateState.Idle */)
              throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
          let redrawn = false, attrsChanged = false, update;
          let state = this.state;
          for (let tr of transactions) {
              if (tr.startState != state)
                  throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
              state = tr.state;
          }
          if (this.destroyed) {
              this.viewState.state = state;
              return;
          }
          let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
          if (transactions.some(tr => tr.annotation(isFocusChange))) {
              this.inputState.notifiedFocused = focus;
              // If a focus-change transaction is being dispatched, set this update flag.
              focusFlag = 1 /* UpdateFlag.Focus */;
          }
          else if (focus != this.inputState.notifiedFocused) {
              this.inputState.notifiedFocused = focus;
              // Schedule a separate focus transaction if necessary, otherwise
              // add a flag to this update
              dispatchFocus = focusChangeTransaction(state, focus);
              if (!dispatchFocus)
                  focusFlag = 1 /* UpdateFlag.Focus */;
          }
          // If there was a pending DOM change, eagerly read it and try to
          // apply it after the given transactions.
          let pendingKey = this.observer.delayedAndroidKey, domChange = null;
          if (pendingKey) {
              this.observer.clearDelayedAndroidKey();
              domChange = this.observer.readChange();
              // Only try to apply DOM changes if the transactions didn't
              // change the doc or selection.
              if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
                  domChange = null;
          }
          else {
              this.observer.clear();
          }
          // When the phrases change, redraw the editor
          if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
              return this.setState(state);
          update = ViewUpdate.create(this, state, transactions);
          update.flags |= focusFlag;
          let scrollTarget = this.viewState.scrollTarget;
          try {
              this.updateState = 2 /* UpdateState.Updating */;
              for (let tr of transactions) {
                  if (scrollTarget)
                      scrollTarget = scrollTarget.map(tr.changes);
                  if (tr.scrollIntoView) {
                      let { main } = tr.state.selection;
                      scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
                  }
                  for (let e of tr.effects)
                      if (e.is(scrollIntoView))
                          scrollTarget = e.value.clip(this.state);
              }
              this.viewState.update(update, scrollTarget);
              this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
              if (!update.empty) {
                  this.updatePlugins(update);
                  this.inputState.update(update);
              }
              redrawn = this.docView.update(update);
              if (this.state.facet(styleModule) != this.styleModules)
                  this.mountStyles();
              attrsChanged = this.updateAttrs();
              this.showAnnouncements(transactions);
              this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent("select.pointer")));
          }
          finally {
              this.updateState = 0 /* UpdateState.Idle */;
          }
          if (update.startState.facet(theme$1) != update.state.facet(theme$1))
              this.viewState.mustMeasureContent = true;
          if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
              this.requestMeasure();
          if (redrawn)
              this.docViewUpdate();
          if (!update.empty)
              for (let listener of this.state.facet(updateListener)) {
                  try {
                      listener(update);
                  }
                  catch (e) {
                      logException(this.state, e, "update listener");
                  }
              }
          if (dispatchFocus || domChange)
              Promise.resolve().then(() => {
                  if (dispatchFocus && this.state == dispatchFocus.startState)
                      this.dispatch(dispatchFocus);
                  if (domChange) {
                      if (!applyDOMChange(this, domChange) && pendingKey.force)
                          dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
                  }
              });
      }
      /**
      Reset the view to the given state. (This will cause the entire
      document to be redrawn and all view plugins to be reinitialized,
      so you should probably only use it when the new state isn't
      derived from the old state. Otherwise, use
      [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
      */
      setState(newState) {
          if (this.updateState != 0 /* UpdateState.Idle */)
              throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
          if (this.destroyed) {
              this.viewState.state = newState;
              return;
          }
          this.updateState = 2 /* UpdateState.Updating */;
          let hadFocus = this.hasFocus;
          try {
              for (let plugin of this.plugins)
                  plugin.destroy(this);
              this.viewState = new ViewState(newState);
              this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));
              this.pluginMap.clear();
              for (let plugin of this.plugins)
                  plugin.update(this);
              this.docView.destroy();
              this.docView = new DocView(this);
              this.inputState.ensureHandlers(this.plugins);
              this.mountStyles();
              this.updateAttrs();
              this.bidiCache = [];
          }
          finally {
              this.updateState = 0 /* UpdateState.Idle */;
          }
          if (hadFocus)
              this.focus();
          this.requestMeasure();
      }
      updatePlugins(update) {
          let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
          if (prevSpecs != specs) {
              let newPlugins = [];
              for (let spec of specs) {
                  let found = prevSpecs.indexOf(spec);
                  if (found < 0) {
                      newPlugins.push(new PluginInstance(spec));
                  }
                  else {
                      let plugin = this.plugins[found];
                      plugin.mustUpdate = update;
                      newPlugins.push(plugin);
                  }
              }
              for (let plugin of this.plugins)
                  if (plugin.mustUpdate != update)
                      plugin.destroy(this);
              this.plugins = newPlugins;
              this.pluginMap.clear();
          }
          else {
              for (let p of this.plugins)
                  p.mustUpdate = update;
          }
          for (let i = 0; i < this.plugins.length; i++)
              this.plugins[i].update(this);
          if (prevSpecs != specs)
              this.inputState.ensureHandlers(this.plugins);
      }
      docViewUpdate() {
          for (let plugin of this.plugins) {
              let val = plugin.value;
              if (val && val.docViewUpdate) {
                  try {
                      val.docViewUpdate(this);
                  }
                  catch (e) {
                      logException(this.state, e, "doc view update listener");
                  }
              }
          }
      }
      /**
      @internal
      */
      measure(flush = true) {
          if (this.destroyed)
              return;
          if (this.measureScheduled > -1)
              this.win.cancelAnimationFrame(this.measureScheduled);
          if (this.observer.delayedAndroidKey) {
              this.measureScheduled = -1;
              this.requestMeasure();
              return;
          }
          this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
          if (flush)
              this.observer.forceFlush();
          let updated = null;
          let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
          let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
          if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
              scrollAnchorHeight = -1;
          this.viewState.scrollAnchorHeight = -1;
          try {
              for (let i = 0;; i++) {
                  if (scrollAnchorHeight < 0) {
                      if (isScrolledToBottom(sDOM)) {
                          scrollAnchorPos = -1;
                          scrollAnchorHeight = this.viewState.heightMap.height;
                      }
                      else {
                          let block = this.viewState.scrollAnchorAt(scrollTop);
                          scrollAnchorPos = block.from;
                          scrollAnchorHeight = block.top;
                      }
                  }
                  this.updateState = 1 /* UpdateState.Measuring */;
                  let changed = this.viewState.measure(this);
                  if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
                      break;
                  if (i > 5) {
                      console.warn(this.measureRequests.length
                          ? "Measure loop restarted more than 5 times"
                          : "Viewport failed to stabilize");
                      break;
                  }
                  let measuring = [];
                  // Only run measure requests in this cycle when the viewport didn't change
                  if (!(changed & 4 /* UpdateFlag.Viewport */))
                      [this.measureRequests, measuring] = [measuring, this.measureRequests];
                  let measured = measuring.map(m => {
                      try {
                          return m.read(this);
                      }
                      catch (e) {
                          logException(this.state, e);
                          return BadMeasure;
                      }
                  });
                  let update = ViewUpdate.create(this, this.state, []), redrawn = false;
                  update.flags |= changed;
                  if (!updated)
                      updated = update;
                  else
                      updated.flags |= changed;
                  this.updateState = 2 /* UpdateState.Updating */;
                  if (!update.empty) {
                      this.updatePlugins(update);
                      this.inputState.update(update);
                      this.updateAttrs();
                      redrawn = this.docView.update(update);
                      if (redrawn)
                          this.docViewUpdate();
                  }
                  for (let i = 0; i < measuring.length; i++)
                      if (measured[i] != BadMeasure) {
                          try {
                              let m = measuring[i];
                              if (m.write)
                                  m.write(measured[i], this);
                          }
                          catch (e) {
                              logException(this.state, e);
                          }
                      }
                  if (redrawn)
                      this.docView.updateSelection(true);
                  if (!update.viewportChanged && this.measureRequests.length == 0) {
                      if (this.viewState.editorHeight) {
                          if (this.viewState.scrollTarget) {
                              this.docView.scrollIntoView(this.viewState.scrollTarget);
                              this.viewState.scrollTarget = null;
                              scrollAnchorHeight = -1;
                              continue;
                          }
                          else {
                              let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height :
                                  this.viewState.lineBlockAt(scrollAnchorPos).top;
                              let diff = newAnchorHeight - scrollAnchorHeight;
                              if (diff > 1 || diff < -1) {
                                  scrollTop = scrollTop + diff;
                                  sDOM.scrollTop = scrollTop / this.scaleY;
                                  scrollAnchorHeight = -1;
                                  continue;
                              }
                          }
                      }
                      break;
                  }
              }
          }
          finally {
              this.updateState = 0 /* UpdateState.Idle */;
              this.measureScheduled = -1;
          }
          if (updated && !updated.empty)
              for (let listener of this.state.facet(updateListener))
                  listener(updated);
      }
      /**
      Get the CSS classes for the currently active editor themes.
      */
      get themeClasses() {
          return baseThemeID + " " +
              (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " +
              this.state.facet(theme$1);
      }
      updateAttrs() {
          let editorAttrs = attrsFromFacet(this, editorAttributes, {
              class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
          });
          let contentAttrs = {
              spellcheck: "false",
              autocorrect: "off",
              autocapitalize: "off",
              writingsuggestions: "false",
              translate: "no",
              contenteditable: !this.state.facet(editable) ? "false" : "true",
              class: "cm-content",
              style: `${browser.tabSize}: ${this.state.tabSize}`,
              role: "textbox",
              "aria-multiline": "true"
          };
          if (this.state.readOnly)
              contentAttrs["aria-readonly"] = "true";
          attrsFromFacet(this, contentAttributes, contentAttrs);
          let changed = this.observer.ignore(() => {
              let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
              let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
              return changedContent || changedEditor;
          });
          this.editorAttrs = editorAttrs;
          this.contentAttrs = contentAttrs;
          return changed;
      }
      showAnnouncements(trs) {
          let first = true;
          for (let tr of trs)
              for (let effect of tr.effects)
                  if (effect.is(EditorView.announce)) {
                      if (first)
                          this.announceDOM.textContent = "";
                      first = false;
                      let div = this.announceDOM.appendChild(document.createElement("div"));
                      div.textContent = effect.value;
                  }
      }
      mountStyles() {
          this.styleModules = this.state.facet(styleModule);
          let nonce = this.state.facet(EditorView.cspNonce);
          StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1$1).reverse(), nonce ? { nonce } : undefined);
      }
      readMeasured() {
          if (this.updateState == 2 /* UpdateState.Updating */)
              throw new Error("Reading the editor layout isn't allowed during an update");
          if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1)
              this.measure(false);
      }
      /**
      Schedule a layout measurement, optionally providing callbacks to
      do custom DOM measuring followed by a DOM write phase. Using
      this is preferable reading DOM layout directly from, for
      example, an event handler, because it'll make sure measuring and
      drawing done by other components is synchronized, avoiding
      unnecessary DOM layout computations.
      */
      requestMeasure(request) {
          if (this.measureScheduled < 0)
              this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
          if (request) {
              if (this.measureRequests.indexOf(request) > -1)
                  return;
              if (request.key != null)
                  for (let i = 0; i < this.measureRequests.length; i++) {
                      if (this.measureRequests[i].key === request.key) {
                          this.measureRequests[i] = request;
                          return;
                      }
                  }
              this.measureRequests.push(request);
          }
      }
      /**
      Get the value of a specific plugin, if present. Note that
      plugins that crash can be dropped from a view, so even when you
      know you registered a given plugin, it is recommended to check
      the return value of this method.
      */
      plugin(plugin) {
          let known = this.pluginMap.get(plugin);
          if (known === undefined || known && known.spec != plugin)
              this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);
          return known && known.update(this).value;
      }
      /**
      The top position of the document, in screen coordinates. This
      may be negative when the editor is scrolled down. Points
      directly to the top of the first line, not above the padding.
      */
      get documentTop() {
          return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
      }
      /**
      Reports the padding above and below the document.
      */
      get documentPadding() {
          return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
      }
      /**
      If the editor is transformed with CSS, this provides the scale
      along the X axis. Otherwise, it will just be 1. Note that
      transforms other than translation and scaling are not supported.
      */
      get scaleX() { return this.viewState.scaleX; }
      /**
      Provide the CSS transformed scale along the Y axis.
      */
      get scaleY() { return this.viewState.scaleY; }
      /**
      Find the text line or block widget at the given vertical
      position (which is interpreted as relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
      */
      elementAtHeight(height) {
          this.readMeasured();
          return this.viewState.elementAtHeight(height);
      }
      /**
      Find the line block (see
      [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
      height, again interpreted relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
      */
      lineBlockAtHeight(height) {
          this.readMeasured();
          return this.viewState.lineBlockAtHeight(height);
      }
      /**
      Get the extent and vertical position of all [line
      blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
      are relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
      */
      get viewportLineBlocks() {
          return this.viewState.viewportLines;
      }
      /**
      Find the line block around the given document position. A line
      block is a range delimited on both sides by either a
      non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
      start/end of the document. It will usually just hold a line of
      text, but may be broken into multiple textblocks by block
      widgets.
      */
      lineBlockAt(pos) {
          return this.viewState.lineBlockAt(pos);
      }
      /**
      The editor's total content height.
      */
      get contentHeight() {
          return this.viewState.contentHeight;
      }
      /**
      Move a cursor position by [grapheme
      cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
      the motion is away from the line start, or towards it. In
      bidirectional text, the line is traversed in visual order, using
      the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
      When the start position was the last one on the line, the
      returned position will be across the line break. If there is no
      further line, the original position is returned.
      
      By default, this method moves over a single cluster. The
      optional `by` argument can be used to move across more. It will
      be called with the first cluster as argument, and should return
      a predicate that determines, for each subsequent cluster,
      whether it should also be moved over.
      */
      moveByChar(start, forward, by) {
          return skipAtoms(this, start, moveByChar(this, start, forward, by));
      }
      /**
      Move a cursor position across the next group of either
      [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
      non-whitespace characters.
      */
      moveByGroup(start, forward) {
          return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
      }
      /**
      Get the cursor position visually at the start or end of a line.
      Note that this may differ from the _logical_ position at its
      start or end (which is simply at `line.from`/`line.to`) if text
      at the start or end goes against the line's base text direction.
      */
      visualLineSide(line, end) {
          let order = this.bidiSpans(line), dir = this.textDirectionAt(line.from);
          let span = order[end ? order.length - 1 : 0];
          return EditorSelection.cursor(span.side(end, dir) + line.from, span.forward(!end, dir) ? 1 : -1);
      }
      /**
      Move to the next line boundary in the given direction. If
      `includeWrap` is true, line wrapping is on, and there is a
      further wrap point on the current line, the wrap point will be
      returned. Otherwise this function will return the start or end
      of the line.
      */
      moveToLineBoundary(start, forward, includeWrap = true) {
          return moveToLineBoundary(this, start, forward, includeWrap);
      }
      /**
      Move a cursor position vertically. When `distance` isn't given,
      it defaults to moving to the next line (including wrapped
      lines). Otherwise, `distance` should provide a positive distance
      in pixels.
      
      When `start` has a
      [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
      motion will use that as a target horizontal position. Otherwise,
      the cursor's own horizontal position is used. The returned
      cursor will have its goal column set to whichever column was
      used.
      */
      moveVertically(start, forward, distance) {
          return skipAtoms(this, start, moveVertically(this, start, forward, distance));
      }
      /**
      Find the DOM parent node and offset (child offset if `node` is
      an element, character offset when it is a text node) at the
      given document position.
      
      Note that for positions that aren't currently in
      `visibleRanges`, the resulting DOM position isn't necessarily
      meaningful (it may just point before or after a placeholder
      element).
      */
      domAtPos(pos) {
          return this.docView.domAtPos(pos);
      }
      /**
      Find the document position at the given DOM node. Can be useful
      for associating positions with DOM events. Will raise an error
      when `node` isn't part of the editor content.
      */
      posAtDOM(node, offset = 0) {
          return this.docView.posFromDOM(node, offset);
      }
      posAtCoords(coords, precise = true) {
          this.readMeasured();
          return posAtCoords(this, coords, precise);
      }
      /**
      Get the screen coordinates at the given document position.
      `side` determines whether the coordinates are based on the
      element before (-1) or after (1) the position (if no element is
      available on the given side, the method will transparently use
      another strategy to get reasonable coordinates).
      */
      coordsAtPos(pos, side = 1) {
          this.readMeasured();
          let rect = this.docView.coordsAt(pos, side);
          if (!rect || rect.left == rect.right)
              return rect;
          let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
          let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
          return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));
      }
      /**
      Return the rectangle around a given character. If `pos` does not
      point in front of a character that is in the viewport and
      rendered (i.e. not replaced, not a line break), this will return
      null. For space characters that are a line wrap point, this will
      return the position before the line break.
      */
      coordsForChar(pos) {
          this.readMeasured();
          return this.docView.coordsForChar(pos);
      }
      /**
      The default width of a character in the editor. May not
      accurately reflect the width of all characters (given variable
      width fonts or styling of invididual ranges).
      */
      get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
      /**
      The default height of a line in the editor. May not be accurate
      for all lines.
      */
      get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
      /**
      The text direction
      ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
      CSS property) of the editor's content element.
      */
      get textDirection() { return this.viewState.defaultTextDirection; }
      /**
      Find the text direction of the block at the given position, as
      assigned by CSS. If
      [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
      isn't enabled, or the given position is outside of the viewport,
      this will always return the same as
      [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
      this may trigger a DOM layout.
      */
      textDirectionAt(pos) {
          let perLine = this.state.facet(perLineTextDirection);
          if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
              return this.textDirection;
          this.readMeasured();
          return this.docView.textDirectionAt(pos);
      }
      /**
      Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
      (as determined by the
      [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
      CSS property of its content element).
      */
      get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
      /**
      Returns the bidirectional text structure of the given line
      (which should be in the current document) as an array of span
      objects. The order of these spans matches the [text
      direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
      left-to-right, the leftmost spans come first, otherwise the
      rightmost spans come first.
      */
      bidiSpans(line) {
          if (line.length > MaxBidiLine)
              return trivialOrder(line.length);
          let dir = this.textDirectionAt(line.from), isolates;
          for (let entry of this.bidiCache) {
              if (entry.from == line.from && entry.dir == dir &&
                  (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line))))
                  return entry.order;
          }
          if (!isolates)
              isolates = getIsolatedRanges(this, line);
          let order = computeOrder(line.text, dir, isolates);
          this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));
          return order;
      }
      /**
      Check whether the editor has focus.
      */
      get hasFocus() {
          var _a;
          // Safari return false for hasFocus when the context menu is open
          // or closing, which leads us to ignore selection changes from the
          // context menu because it looks like the editor isn't focused.
          // This kludges around that.
          return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&
              this.root.activeElement == this.contentDOM;
      }
      /**
      Put focus on the editor.
      */
      focus() {
          this.observer.ignore(() => {
              focusPreventScroll(this.contentDOM);
              this.docView.updateSelection();
          });
      }
      /**
      Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
      necessary when moving the editor's existing DOM to a new window or shadow root.
      */
      setRoot(root) {
          if (this._root != root) {
              this._root = root;
              this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
              this.mountStyles();
          }
      }
      /**
      Clean up this editor view, removing its element from the
      document, unregistering event handlers, and notifying
      plugins. The view instance can no longer be used after
      calling this.
      */
      destroy() {
          if (this.root.activeElement == this.contentDOM)
              this.contentDOM.blur();
          for (let plugin of this.plugins)
              plugin.destroy(this);
          this.plugins = [];
          this.inputState.destroy();
          this.docView.destroy();
          this.dom.remove();
          this.observer.destroy();
          if (this.measureScheduled > -1)
              this.win.cancelAnimationFrame(this.measureScheduled);
          this.destroyed = true;
      }
      /**
      Returns an effect that can be
      [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
      cause it to scroll the given position or range into view.
      */
      static scrollIntoView(pos, options = {}) {
          return scrollIntoView.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
      }
      /**
      Return an effect that resets the editor to its current (at the
      time this method was called) scroll position. Note that this
      only affects the editor's own scrollable element, not parents.
      See also
      [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
      
      The effect should be used with a document identical to the one
      it was created for. Failing to do so is not an error, but may
      not scroll to the expected position. You can
      [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
      */
      scrollSnapshot() {
          let { scrollTop, scrollLeft } = this.scrollDOM;
          let ref = this.viewState.scrollAnchorAt(scrollTop);
          return scrollIntoView.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
      }
      /**
      Enable or disable tab-focus mode, which disables key bindings
      for Tab and Shift-Tab, letting the browser's default
      focus-changing behavior go through instead. This is useful to
      prevent trapping keyboard users in your editor.
      
      Without argument, this toggles the mode. With a boolean, it
      enables (true) or disables it (false). Given a number, it
      temporarily enables the mode until that number of milliseconds
      have passed or another non-Tab key is pressed.
      */
      setTabFocusMode(to) {
          if (to == null)
              this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1;
          else if (typeof to == "boolean")
              this.inputState.tabFocusMode = to ? 0 : -1;
          else if (this.inputState.tabFocusMode != 0)
              this.inputState.tabFocusMode = Date.now() + to;
      }
      /**
      Returns an extension that can be used to add DOM event handlers.
      The value should be an object mapping event names to handler
      functions. For any given event, such functions are ordered by
      extension precedence, and the first handler to return true will
      be assumed to have handled that event, and no other handlers or
      built-in behavior will be activated for it. These are registered
      on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
      for `scroll` handlers, which will be called any time the
      editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
      its parent nodes is scrolled.
      */
      static domEventHandlers(handlers) {
          return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
      }
      /**
      Create an extension that registers DOM event observers. Contrary
      to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
      observers can't be prevented from running by a higher-precedence
      handler returning true. They also don't prevent other handlers
      and observers from running when they return true, and should not
      call `preventDefault`.
      */
      static domEventObservers(observers) {
          return ViewPlugin.define(() => ({}), { eventObservers: observers });
      }
      /**
      Create a theme extension. The first argument can be a
      [`style-mod`](https://github.com/marijnh/style-mod#documentation)
      style spec providing the styles for the theme. These will be
      prefixed with a generated class for the style.
      
      Because the selectors will be prefixed with a scope class, rule
      that directly match the editor's [wrapper
      element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
      added—need to be explicitly differentiated by adding an `&` to
      the selector for that element—for example
      `&.cm-focused`.
      
      When `dark` is set to true, the theme will be marked as dark,
      which will cause the `&dark` rules from [base
      themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
      `&light` when a light theme is active).
      */
      static theme(spec, options) {
          let prefix = StyleModule.newName();
          let result = [theme$1.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
          if (options && options.dark)
              result.push(darkTheme.of(true));
          return result;
      }
      /**
      Create an extension that adds styles to the base theme. Like
      with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
      place of the editor wrapper element when directly targeting
      that. You can also use `&dark` or `&light` instead to only
      target editors with a dark or light theme.
      */
      static baseTheme(spec) {
          return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
      }
      /**
      Retrieve an editor view instance from the view's DOM
      representation.
      */
      static findFromDOM(dom) {
          var _a;
          let content = dom.querySelector(".cm-content");
          let cView = content && ContentView.get(content) || ContentView.get(dom);
          return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
      }
  }
  /**
  Facet to add a [style
  module](https://github.com/marijnh/style-mod#documentation) to
  an editor view. The view will ensure that the module is
  mounted in its [document
  root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
  */
  EditorView.styleModule = styleModule;
  /**
  An input handler can override the way changes to the editable
  DOM content are handled. Handlers are passed the document
  positions between which the change was found, and the new
  content. When one returns true, no further input handlers are
  called and the default behavior is prevented.

  The `insert` argument can be used to get the default transaction
  that would be applied for this input. This can be useful when
  dispatching the custom behavior as a separate transaction.
  */
  EditorView.inputHandler = inputHandler;
  /**
  Functions provided in this facet will be used to transform text
  pasted or dropped into the editor.
  */
  EditorView.clipboardInputFilter = clipboardInputFilter;
  /**
  Transform text copied or dragged from the editor.
  */
  EditorView.clipboardOutputFilter = clipboardOutputFilter;
  /**
  Scroll handlers can override how things are scrolled into view.
  If they return `true`, no further handling happens for the
  scrolling. If they return false, the default scroll behavior is
  applied. Scroll handlers should never initiate editor updates.
  */
  EditorView.scrollHandler = scrollHandler;
  /**
  This facet can be used to provide functions that create effects
  to be dispatched when the editor's focus state changes.
  */
  EditorView.focusChangeEffect = focusChangeEffect;
  /**
  By default, the editor assumes all its content has the same
  [text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
  value to make it read the text direction of every (rendered)
  line separately.
  */
  EditorView.perLineTextDirection = perLineTextDirection;
  /**
  Allows you to provide a function that should be called when the
  library catches an exception from an extension (mostly from view
  plugins, but may be used by other extensions to route exceptions
  from user-code-provided callbacks). This is mostly useful for
  debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
  */
  EditorView.exceptionSink = exceptionSink;
  /**
  A facet that can be used to register a function to be called
  every time the view updates.
  */
  EditorView.updateListener = updateListener;
  /**
  Facet that controls whether the editor content DOM is editable.
  When its highest-precedence value is `false`, the element will
  not have its `contenteditable` attribute set. (Note that this
  doesn't affect API calls that change the editor content, even
  when those are bound to keys or buttons. See the
  [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
  */
  EditorView.editable = editable;
  /**
  Allows you to influence the way mouse selection happens. The
  functions in this facet will be called for a `mousedown` event
  on the editor, and can return an object that overrides the way a
  selection is computed from that mouse click or drag.
  */
  EditorView.mouseSelectionStyle = mouseSelectionStyle;
  /**
  Facet used to configure whether a given selection drag event
  should move or copy the selection. The given predicate will be
  called with the `mousedown` event, and can return `true` when
  the drag should move the content.
  */
  EditorView.dragMovesSelection = dragMovesSelection$1;
  /**
  Facet used to configure whether a given selecting click adds a
  new range to the existing selection or replaces it entirely. The
  default behavior is to check `event.metaKey` on macOS, and
  `event.ctrlKey` elsewhere.
  */
  EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
  /**
  A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
  are shown in the view. Decorations can be provided in two
  ways—directly, or via a function that takes an editor view.

  Only decoration sets provided directly are allowed to influence
  the editor's vertical layout structure. The ones provided as
  functions are called _after_ the new viewport has been computed,
  and thus **must not** introduce block widgets or replacing
  decorations that cover line breaks.

  If you want decorated ranges to behave like atomic units for
  cursor motion and deletion purposes, also provide the range set
  containing the decorations to
  [`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).
  */
  EditorView.decorations = decorations;
  /**
  Facet that works much like
  [`decorations`](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), but puts its
  inputs at the very bottom of the precedence stack, meaning mark
  decorations provided here will only be split by other, partially
  overlapping \`outerDecorations\` ranges, and wrap around all
  regular decorations. Use this for mark elements that should, as
  much as possible, remain in one piece.
  */
  EditorView.outerDecorations = outerDecorations;
  /**
  Used to provide ranges that should be treated as atoms as far as
  cursor motion is concerned. This causes methods like
  [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
  [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
  commands built on top of them) to skip across such regions when
  a selection endpoint would enter them. This does _not_ prevent
  direct programmatic [selection
  updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
  regions.
  */
  EditorView.atomicRanges = atomicRanges;
  /**
  When range decorations add a `unicode-bidi: isolate` style, they
  should also include a
  [`bidiIsolate`](https://codemirror.net/6/docs/ref/#view.MarkDecorationSpec.bidiIsolate) property
  in their decoration spec, and be exposed through this facet, so
  that the editor can compute the proper text order. (Other values
  for `unicode-bidi`, except of course `normal`, are not
  supported.)
  */
  EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
  /**
  Facet that allows extensions to provide additional scroll
  margins (space around the sides of the scrolling element that
  should be considered invisible). This can be useful when the
  plugin introduces elements that cover part of that element (for
  example a horizontally fixed gutter).
  */
  EditorView.scrollMargins = scrollMargins;
  /**
  This facet records whether a dark theme is active. The extension
  returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
  includes an instance of this when the `dark` option is set to
  true.
  */
  EditorView.darkTheme = darkTheme;
  /**
  Provides a Content Security Policy nonce to use when creating
  the style sheets for the editor. Holds the empty string when no
  nonce has been provided.
  */
  EditorView.cspNonce = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : "" });
  /**
  Facet that provides additional DOM attributes for the editor's
  editable DOM element.
  */
  EditorView.contentAttributes = contentAttributes;
  /**
  Facet that provides DOM attributes for the editor's outer
  element.
  */
  EditorView.editorAttributes = editorAttributes;
  /**
  An extension that enables line wrapping in the editor (by
  setting CSS `white-space` to `pre-wrap` in the content).
  */
  EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
  /**
  State effect used to include screen reader announcements in a
  transaction. These will be added to the DOM in a visually hidden
  element with `aria-live="polite"` set, and should be used to
  describe effects that are visually obvious but may not be
  noticed by screen reader users (such as moving to the next
  search match).
  */
  EditorView.announce = /*@__PURE__*/StateEffect.define();
  // Maximum line length for which we compute accurate bidi info
  const MaxBidiLine = 4096;
  const BadMeasure = {};
  class CachedOrder {
      constructor(from, to, dir, isolates, fresh, order) {
          this.from = from;
          this.to = to;
          this.dir = dir;
          this.isolates = isolates;
          this.fresh = fresh;
          this.order = order;
      }
      static update(cache, changes) {
          if (changes.empty && !cache.some(c => c.fresh))
              return cache;
          let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
          for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
              let entry = cache[i];
              if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
                  result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
          }
          return result;
      }
  }
  function attrsFromFacet(view, facet, base) {
      for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
          let source = sources[i], value = typeof source == "function" ? source(view) : source;
          if (value)
              combineAttrs(value, base);
      }
      return base;
  }

  const currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
  function normalizeKeyName(name, platform) {
      const parts = name.split(/-(?!$)/);
      let result = parts[parts.length - 1];
      if (result == "Space")
          result = " ";
      let alt, ctrl, shift, meta;
      for (let i = 0; i < parts.length - 1; ++i) {
          const mod = parts[i];
          if (/^(cmd|meta|m)$/i.test(mod))
              meta = true;
          else if (/^a(lt)?$/i.test(mod))
              alt = true;
          else if (/^(c|ctrl|control)$/i.test(mod))
              ctrl = true;
          else if (/^s(hift)?$/i.test(mod))
              shift = true;
          else if (/^mod$/i.test(mod)) {
              if (platform == "mac")
                  meta = true;
              else
                  ctrl = true;
          }
          else
              throw new Error("Unrecognized modifier name: " + mod);
      }
      if (alt)
          result = "Alt-" + result;
      if (ctrl)
          result = "Ctrl-" + result;
      if (meta)
          result = "Meta-" + result;
      if (shift)
          result = "Shift-" + result;
      return result;
  }
  function modifiers(name, event, shift) {
      if (event.altKey)
          name = "Alt-" + name;
      if (event.ctrlKey)
          name = "Ctrl-" + name;
      if (event.metaKey)
          name = "Meta-" + name;
      if (shift !== false && event.shiftKey)
          name = "Shift-" + name;
      return name;
  }
  const handleKeyEvents = /*@__PURE__*/Prec.default(/*@__PURE__*/EditorView.domEventHandlers({
      keydown(event, view) {
          return runHandlers(getKeymap(view.state), event, view, "editor");
      }
  }));
  /**
  Facet used for registering keymaps.

  You can add multiple keymaps to an editor. Their priorities
  determine their precedence (the ones specified early or with high
  priority get checked first). When a handler has returned `true`
  for a given key, no further handlers are called.
  */
  const keymap = /*@__PURE__*/Facet.define({ enables: handleKeyEvents });
  const Keymaps = /*@__PURE__*/new WeakMap();
  // This is hidden behind an indirection, rather than directly computed
  // by the facet, to keep internal types out of the facet's type.
  function getKeymap(state) {
      let bindings = state.facet(keymap);
      let map = Keymaps.get(bindings);
      if (!map)
          Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
      return map;
  }
  let storedPrefix = null;
  const PrefixTimeout = 4000;
  function buildKeymap(bindings, platform = currentPlatform) {
      let bound = Object.create(null);
      let isPrefix = Object.create(null);
      let checkPrefix = (name, is) => {
          let current = isPrefix[name];
          if (current == null)
              isPrefix[name] = is;
          else if (current != is)
              throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
      };
      let add = (scope, key, command, preventDefault, stopPropagation) => {
          var _a, _b;
          let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
          let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
          for (let i = 1; i < parts.length; i++) {
              let prefix = parts.slice(0, i).join(" ");
              checkPrefix(prefix, true);
              if (!scopeObj[prefix])
                  scopeObj[prefix] = {
                      preventDefault: true,
                      stopPropagation: false,
                      run: [(view) => {
                              let ourObj = storedPrefix = { view, prefix, scope };
                              setTimeout(() => { if (storedPrefix == ourObj)
                                  storedPrefix = null; }, PrefixTimeout);
                              return true;
                          }]
                  };
          }
          let full = parts.join(" ");
          checkPrefix(full, false);
          let binding = scopeObj[full] || (scopeObj[full] = {
              preventDefault: false,
              stopPropagation: false,
              run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
          });
          if (command)
              binding.run.push(command);
          if (preventDefault)
              binding.preventDefault = true;
          if (stopPropagation)
              binding.stopPropagation = true;
      };
      for (let b of bindings) {
          let scopes = b.scope ? b.scope.split(" ") : ["editor"];
          if (b.any)
              for (let scope of scopes) {
                  let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
                  if (!scopeObj._any)
                      scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };
                  let { any } = b;
                  for (let key in scopeObj)
                      scopeObj[key].run.push(view => any(view, currentKeyEvent));
              }
          let name = b[platform] || b.key;
          if (!name)
              continue;
          for (let scope of scopes) {
              add(scope, name, b.run, b.preventDefault, b.stopPropagation);
              if (b.shift)
                  add(scope, "Shift-" + name, b.shift, b.preventDefault, b.stopPropagation);
          }
      }
      return bound;
  }
  let currentKeyEvent = null;
  function runHandlers(map, event, view, scope) {
      currentKeyEvent = event;
      let name = keyName(event);
      let charCode = codePointAt(name, 0), isChar = codePointSize(charCode) == name.length && name != " ";
      let prefix = "", handled = false, prevented = false, stopPropagation = false;
      if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
          prefix = storedPrefix.prefix + " ";
          if (modifierCodes.indexOf(event.keyCode) < 0) {
              prevented = true;
              storedPrefix = null;
          }
      }
      let ran = new Set;
      let runFor = (binding) => {
          if (binding) {
              for (let cmd of binding.run)
                  if (!ran.has(cmd)) {
                      ran.add(cmd);
                      if (cmd(view)) {
                          if (binding.stopPropagation)
                              stopPropagation = true;
                          return true;
                      }
                  }
              if (binding.preventDefault) {
                  if (binding.stopPropagation)
                      stopPropagation = true;
                  prevented = true;
              }
          }
          return false;
      };
      let scopeObj = map[scope], baseName, shiftName;
      if (scopeObj) {
          if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) {
              handled = true;
          }
          else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) &&
              // Ctrl-Alt may be used for AltGr on Windows
              !(browser.windows && event.ctrlKey && event.altKey) &&
              (baseName = base[event.keyCode]) && baseName != name) {
              if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {
                  handled = true;
              }
              else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name && shiftName != baseName &&
                  runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {
                  handled = true;
              }
          }
          else if (isChar && event.shiftKey &&
              runFor(scopeObj[prefix + modifiers(name, event, true)])) {
              handled = true;
          }
          if (!handled && runFor(scopeObj._any))
              handled = true;
      }
      if (prevented)
          handled = true;
      if (handled && stopPropagation)
          event.stopPropagation();
      currentKeyEvent = null;
      return handled;
  }

  /**
  Implementation of [`LayerMarker`](https://codemirror.net/6/docs/ref/#view.LayerMarker) that creates
  a rectangle at a given set of coordinates.
  */
  class RectangleMarker {
      /**
      Create a marker with the given class and dimensions. If `width`
      is null, the DOM element will get no width style.
      */
      constructor(className, 
      /**
      The left position of the marker (in pixels, document-relative).
      */
      left, 
      /**
      The top position of the marker.
      */
      top, 
      /**
      The width of the marker, or null if it shouldn't get a width assigned.
      */
      width, 
      /**
      The height of the marker.
      */
      height) {
          this.className = className;
          this.left = left;
          this.top = top;
          this.width = width;
          this.height = height;
      }
      draw() {
          let elt = document.createElement("div");
          elt.className = this.className;
          this.adjust(elt);
          return elt;
      }
      update(elt, prev) {
          if (prev.className != this.className)
              return false;
          this.adjust(elt);
          return true;
      }
      adjust(elt) {
          elt.style.left = this.left + "px";
          elt.style.top = this.top + "px";
          if (this.width != null)
              elt.style.width = this.width + "px";
          elt.style.height = this.height + "px";
      }
      eq(p) {
          return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&
              this.className == p.className;
      }
      /**
      Create a set of rectangles for the given selection range,
      assigning them theclass`className`. Will create a single
      rectangle for empty ranges, and a set of selection-style
      rectangles covering the range's content (in a bidi-aware
      way) for non-empty ones.
      */
      static forRange(view, className, range) {
          if (range.empty) {
              let pos = view.coordsAtPos(range.head, range.assoc || 1);
              if (!pos)
                  return [];
              let base = getBase(view);
              return [new RectangleMarker(className, pos.left - base.left, pos.top - base.top, null, pos.bottom - pos.top)];
          }
          else {
              return rectanglesForRange(view, className, range);
          }
      }
  }
  function getBase(view) {
      let rect = view.scrollDOM.getBoundingClientRect();
      let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth * view.scaleX;
      return { left: left - view.scrollDOM.scrollLeft * view.scaleX, top: rect.top - view.scrollDOM.scrollTop * view.scaleY };
  }
  function wrappedLine(view, pos, side, inside) {
      let coords = view.coordsAtPos(pos, side * 2);
      if (!coords)
          return inside;
      let editorRect = view.dom.getBoundingClientRect();
      let y = (coords.top + coords.bottom) / 2;
      let left = view.posAtCoords({ x: editorRect.left + 1, y });
      let right = view.posAtCoords({ x: editorRect.right - 1, y });
      if (left == null || right == null)
          return inside;
      return { from: Math.max(inside.from, Math.min(left, right)), to: Math.min(inside.to, Math.max(left, right)) };
  }
  function rectanglesForRange(view, className, range) {
      if (range.to <= view.viewport.from || range.from >= view.viewport.to)
          return [];
      let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
      let ltr = view.textDirection == Direction.LTR;
      let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);
      let lineElt = content.querySelector(".cm-line"), lineStyle = lineElt && window.getComputedStyle(lineElt);
      let leftSide = contentRect.left +
          (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
      let rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
      let startBlock = blockAt(view, from), endBlock = blockAt(view, to);
      let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
      let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
      if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks))
          visualStart = wrappedLine(view, from, 1, visualStart);
      if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks))
          visualEnd = wrappedLine(view, to, -1, visualEnd);
      if (visualStart && visualEnd && visualStart.from == visualEnd.from && visualStart.to == visualEnd.to) {
          return pieces(drawForLine(range.from, range.to, visualStart));
      }
      else {
          let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
          let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
          let between = [];
          if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) ||
              startBlock.widgetLineBreaks > 1 && top.bottom + view.defaultLineHeight / 2 < bottom.top)
              between.push(piece(leftSide, top.bottom, rightSide, bottom.top));
          else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == BlockType.Text)
              top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
          return pieces(top).concat(between).concat(pieces(bottom));
      }
      function piece(left, top, right, bottom) {
          return new RectangleMarker(className, left - base.left, top - base.top, right - left, bottom - top);
      }
      function pieces({ top, bottom, horizontal }) {
          let pieces = [];
          for (let i = 0; i < horizontal.length; i += 2)
              pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
          return pieces;
      }
      // Gets passed from/to in line-local positions
      function drawForLine(from, to, line) {
          let top = 1e9, bottom = -1e9, horizontal = [];
          function addSpan(from, fromOpen, to, toOpen, dir) {
              // Passing 2/-2 is a kludge to force the view to return
              // coordinates on the proper side of block widgets, since
              // normalizing the side there, though appropriate for most
              // coordsAtPos queries, would break selection drawing.
              let fromCoords = view.coordsAtPos(from, (from == line.to ? -2 : 2));
              let toCoords = view.coordsAtPos(to, (to == line.from ? 2 : -2));
              if (!fromCoords || !toCoords)
                  return;
              top = Math.min(fromCoords.top, toCoords.top, top);
              bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
              if (dir == Direction.LTR)
                  horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
              else
                  horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
          }
          let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;
          // Split the range by visible range and document line
          for (let r of view.visibleRanges)
              if (r.to > start && r.from < end) {
                  for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {
                      let docLine = view.state.doc.lineAt(pos);
                      for (let span of view.bidiSpans(docLine)) {
                          let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
                          if (spanFrom >= endPos)
                              break;
                          if (spanTo > pos)
                              addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
                      }
                      pos = docLine.to + 1;
                      if (pos >= endPos)
                          break;
                  }
              }
          if (horizontal.length == 0)
              addSpan(start, from == null, end, to == null, view.textDirection);
          return { top, bottom, horizontal };
      }
      function drawForWidget(block, top) {
          let y = contentRect.top + (top ? block.top : block.bottom);
          return { top: y, bottom: y, horizontal: [] };
      }
  }
  function sameMarker(a, b) {
      return a.constructor == b.constructor && a.eq(b);
  }
  class LayerView {
      constructor(view, layer) {
          this.view = view;
          this.layer = layer;
          this.drawn = [];
          this.scaleX = 1;
          this.scaleY = 1;
          this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };
          this.dom = view.scrollDOM.appendChild(document.createElement("div"));
          this.dom.classList.add("cm-layer");
          if (layer.above)
              this.dom.classList.add("cm-layer-above");
          if (layer.class)
              this.dom.classList.add(layer.class);
          this.scale();
          this.dom.setAttribute("aria-hidden", "true");
          this.setOrder(view.state);
          view.requestMeasure(this.measureReq);
          if (layer.mount)
              layer.mount(this.dom, view);
      }
      update(update) {
          if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))
              this.setOrder(update.state);
          if (this.layer.update(update, this.dom) || update.geometryChanged) {
              this.scale();
              update.view.requestMeasure(this.measureReq);
          }
      }
      docViewUpdate(view) {
          if (this.layer.updateOnDocViewUpdate !== false)
              view.requestMeasure(this.measureReq);
      }
      setOrder(state) {
          let pos = 0, order = state.facet(layerOrder);
          while (pos < order.length && order[pos] != this.layer)
              pos++;
          this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
      }
      measure() {
          return this.layer.markers(this.view);
      }
      scale() {
          let { scaleX, scaleY } = this.view;
          if (scaleX != this.scaleX || scaleY != this.scaleY) {
              this.scaleX = scaleX;
              this.scaleY = scaleY;
              this.dom.style.transform = `scale(${1 / scaleX}, ${1 / scaleY})`;
          }
      }
      draw(markers) {
          if (markers.length != this.drawn.length || markers.some((p, i) => !sameMarker(p, this.drawn[i]))) {
              let old = this.dom.firstChild, oldI = 0;
              for (let marker of markers) {
                  if (marker.update && old && marker.constructor && this.drawn[oldI].constructor &&
                      marker.update(old, this.drawn[oldI])) {
                      old = old.nextSibling;
                      oldI++;
                  }
                  else {
                      this.dom.insertBefore(marker.draw(), old);
                  }
              }
              while (old) {
                  let next = old.nextSibling;
                  old.remove();
                  old = next;
              }
              this.drawn = markers;
          }
      }
      destroy() {
          if (this.layer.destroy)
              this.layer.destroy(this.dom, this.view);
          this.dom.remove();
      }
  }
  const layerOrder = /*@__PURE__*/Facet.define();
  /**
  Define a layer.
  */
  function layer(config) {
      return [
          ViewPlugin.define(v => new LayerView(v, config)),
          layerOrder.of(config)
      ];
  }

  const CanHidePrimary = !(browser.ios && browser.webkit && browser.webkit_version < 534);
  const selectionConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          return combineConfig(configs, {
              cursorBlinkRate: 1200,
              drawRangeCursor: true
          }, {
              cursorBlinkRate: (a, b) => Math.min(a, b),
              drawRangeCursor: (a, b) => a || b
          });
      }
  });
  /**
  Returns an extension that hides the browser's native selection and
  cursor, replacing the selection with a background behind the text
  (with the `cm-selectionBackground` class), and the
  cursors with elements overlaid over the code (using
  `cm-cursor-primary` and `cm-cursor-secondary`).

  This allows the editor to display secondary selection ranges, and
  tends to produce a type of selection more in line with that users
  expect in a text editor (the native selection styling will often
  leave gaps between lines and won't fill the horizontal space after
  a line when the selection continues past it).

  It does have a performance cost, in that it requires an extra DOM
  layout cycle for many updates (the selection is drawn based on DOM
  layout information that's only available after laying out the
  content).
  */
  function drawSelection(config = {}) {
      return [
          selectionConfig.of(config),
          cursorLayer,
          selectionLayer,
          hideNativeSelection,
          nativeSelectionHidden.of(true)
      ];
  }
  function configChanged(update) {
      return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
  }
  const cursorLayer = /*@__PURE__*/layer({
      above: true,
      markers(view) {
          let { state } = view, conf = state.facet(selectionConfig);
          let cursors = [];
          for (let r of state.selection.ranges) {
              let prim = r == state.selection.main;
              if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
                  let className = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
                  let cursor = r.empty ? r : EditorSelection.cursor(r.head, r.head > r.anchor ? -1 : 1);
                  for (let piece of RectangleMarker.forRange(view, className, cursor))
                      cursors.push(piece);
              }
          }
          return cursors;
      },
      update(update, dom) {
          if (update.transactions.some(tr => tr.selection))
              dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
          let confChange = configChanged(update);
          if (confChange)
              setBlinkRate(update.state, dom);
          return update.docChanged || update.selectionSet || confChange;
      },
      mount(dom, view) {
          setBlinkRate(view.state, dom);
      },
      class: "cm-cursorLayer"
  });
  function setBlinkRate(state, dom) {
      dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
  }
  const selectionLayer = /*@__PURE__*/layer({
      above: false,
      markers(view) {
          return view.state.selection.ranges.map(r => r.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r))
              .reduce((a, b) => a.concat(b));
      },
      update(update, dom) {
          return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);
      },
      class: "cm-selectionLayer"
  });
  const themeSpec = {
      ".cm-line": {
          "& ::selection, &::selection": { backgroundColor: "transparent !important" },
      },
      ".cm-content": {
          "& :focus": {
              caretColor: "initial !important",
              "&::selection, & ::selection": {
                  backgroundColor: "Highlight !important"
              }
          }
      }
  };
  if (CanHidePrimary)
      themeSpec[".cm-line"].caretColor = themeSpec[".cm-content"].caretColor = "transparent !important";
  const hideNativeSelection = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.theme(themeSpec));

  /**
  A gutter marker represents a bit of information attached to a line
  in a specific gutter. Your own custom markers have to extend this
  class.
  */
  class GutterMarker extends RangeValue {
      /**
      @internal
      */
      compare(other) {
          return this == other || this.constructor == other.constructor && this.eq(other);
      }
      /**
      Compare this marker to another marker of the same type.
      */
      eq(other) { return false; }
      /**
      Called if the marker has a `toDOM` method and its representation
      was removed from a gutter.
      */
      destroy(dom) { }
  }
  GutterMarker.prototype.elementClass = "";
  GutterMarker.prototype.toDOM = undefined;
  GutterMarker.prototype.mapMode = MapMode.TrackBefore;
  GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
  GutterMarker.prototype.point = true;
  /**
  Facet used to add a class to all gutter elements for a given line.
  Markers given to this facet should _only_ define an
  [`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a
  [`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear
  in all gutters for the line).
  */
  const gutterLineClass = /*@__PURE__*/Facet.define();
  /**
  Facet used to add a class to all gutter elements next to a widget.
  Should not provide widgets with a `toDOM` method.
  */
  const gutterWidgetClass = /*@__PURE__*/Facet.define();
  const defaults = {
      class: "",
      renderEmptyElements: false,
      elementStyle: "",
      markers: () => RangeSet.empty,
      lineMarker: () => null,
      widgetMarker: () => null,
      lineMarkerChange: null,
      initialSpacer: null,
      updateSpacer: null,
      domEventHandlers: {}
  };
  const activeGutters = /*@__PURE__*/Facet.define();
  /**
  Define an editor gutter. The order in which the gutters appear is
  determined by their extension priority.
  */
  function gutter(config) {
      return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config))];
  }
  const unfixGutters = /*@__PURE__*/Facet.define({
      combine: values => values.some(x => x)
  });
  /**
  The gutter-drawing plugin is automatically enabled when you add a
  gutter, but you can use this function to explicitly configure it.

  Unless `fixed` is explicitly set to `false`, the gutters are
  fixed, meaning they don't scroll along with the content
  horizontally (except on Internet Explorer, which doesn't support
  CSS [`position:
  sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
  */
  function gutters(config) {
      let result = [
          gutterView,
      ];
      return result;
  }
  const gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.view = view;
          this.prevViewport = view.viewport;
          this.dom = document.createElement("div");
          this.dom.className = "cm-gutters";
          this.dom.setAttribute("aria-hidden", "true");
          this.dom.style.minHeight = (this.view.contentHeight / this.view.scaleY) + "px";
          this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));
          for (let gutter of this.gutters)
              this.dom.appendChild(gutter.dom);
          this.fixed = !view.state.facet(unfixGutters);
          if (this.fixed) {
              // FIXME IE11 fallback, which doesn't support position: sticky,
              // by using position: relative + event handlers that realign the
              // gutter (or just force fixed=false on IE11?)
              this.dom.style.position = "sticky";
          }
          this.syncGutters(false);
          view.scrollDOM.insertBefore(this.dom, view.contentDOM);
      }
      update(update) {
          if (this.updateGutters(update)) {
              // Detach during sync when the viewport changed significantly
              // (such as during scrolling), since for large updates that is
              // faster.
              let vpA = this.prevViewport, vpB = update.view.viewport;
              let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
              this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
          }
          if (update.geometryChanged) {
              this.dom.style.minHeight = (this.view.contentHeight / this.view.scaleY) + "px";
          }
          if (this.view.state.facet(unfixGutters) != !this.fixed) {
              this.fixed = !this.fixed;
              this.dom.style.position = this.fixed ? "sticky" : "";
          }
          this.prevViewport = update.view.viewport;
      }
      syncGutters(detach) {
          let after = this.dom.nextSibling;
          if (detach)
              this.dom.remove();
          let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
          let classSet = [];
          let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));
          for (let line of this.view.viewportLineBlocks) {
              if (classSet.length)
                  classSet = [];
              if (Array.isArray(line.type)) {
                  let first = true;
                  for (let b of line.type) {
                      if (b.type == BlockType.Text && first) {
                          advanceCursor(lineClasses, classSet, b.from);
                          for (let cx of contexts)
                              cx.line(this.view, b, classSet);
                          first = false;
                      }
                      else if (b.widget) {
                          for (let cx of contexts)
                              cx.widget(this.view, b);
                      }
                  }
              }
              else if (line.type == BlockType.Text) {
                  advanceCursor(lineClasses, classSet, line.from);
                  for (let cx of contexts)
                      cx.line(this.view, line, classSet);
              }
              else if (line.widget) {
                  for (let cx of contexts)
                      cx.widget(this.view, line);
              }
          }
          for (let cx of contexts)
              cx.finish();
          if (detach)
              this.view.scrollDOM.insertBefore(this.dom, after);
      }
      updateGutters(update) {
          let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);
          let change = update.docChanged || update.heightChanged || update.viewportChanged ||
              !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
          if (prev == cur) {
              for (let gutter of this.gutters)
                  if (gutter.update(update))
                      change = true;
          }
          else {
              change = true;
              let gutters = [];
              for (let conf of cur) {
                  let known = prev.indexOf(conf);
                  if (known < 0) {
                      gutters.push(new SingleGutterView(this.view, conf));
                  }
                  else {
                      this.gutters[known].update(update);
                      gutters.push(this.gutters[known]);
                  }
              }
              for (let g of this.gutters) {
                  g.dom.remove();
                  if (gutters.indexOf(g) < 0)
                      g.destroy();
              }
              for (let g of gutters)
                  this.dom.appendChild(g.dom);
              this.gutters = gutters;
          }
          return change;
      }
      destroy() {
          for (let view of this.gutters)
              view.destroy();
          this.dom.remove();
      }
  }, {
      provide: plugin => EditorView.scrollMargins.of(view => {
          let value = view.plugin(plugin);
          if (!value || value.gutters.length == 0 || !value.fixed)
              return null;
          return view.textDirection == Direction.LTR
              ? { left: value.dom.offsetWidth * view.scaleX }
              : { right: value.dom.offsetWidth * view.scaleX };
      })
  });
  function asArray(val) { return (Array.isArray(val) ? val : [val]); }
  function advanceCursor(cursor, collect, pos) {
      while (cursor.value && cursor.from <= pos) {
          if (cursor.from == pos)
              collect.push(cursor.value);
          cursor.next();
      }
  }
  class UpdateContext {
      constructor(gutter, viewport, height) {
          this.gutter = gutter;
          this.height = height;
          this.i = 0;
          this.cursor = RangeSet.iter(gutter.markers, viewport.from);
      }
      addElement(view, block, markers) {
          let { gutter } = this, above = (block.top - this.height) / view.scaleY, height = block.height / view.scaleY;
          if (this.i == gutter.elements.length) {
              let newElt = new GutterElement(view, height, above, markers);
              gutter.elements.push(newElt);
              gutter.dom.appendChild(newElt.dom);
          }
          else {
              gutter.elements[this.i].update(view, height, above, markers);
          }
          this.height = block.bottom;
          this.i++;
      }
      line(view, line, extraMarkers) {
          let localMarkers = [];
          advanceCursor(this.cursor, localMarkers, line.from);
          if (extraMarkers.length)
              localMarkers = localMarkers.concat(extraMarkers);
          let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
          if (forLine)
              localMarkers.unshift(forLine);
          let gutter = this.gutter;
          if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)
              return;
          this.addElement(view, line, localMarkers);
      }
      widget(view, block) {
          let marker = this.gutter.config.widgetMarker(view, block.widget, block), markers = marker ? [marker] : null;
          for (let cls of view.state.facet(gutterWidgetClass)) {
              let marker = cls(view, block.widget, block);
              if (marker)
                  (markers || (markers = [])).push(marker);
          }
          if (markers)
              this.addElement(view, block, markers);
      }
      finish() {
          let gutter = this.gutter;
          while (gutter.elements.length > this.i) {
              let last = gutter.elements.pop();
              gutter.dom.removeChild(last.dom);
              last.destroy();
          }
      }
  }
  class SingleGutterView {
      constructor(view, config) {
          this.view = view;
          this.config = config;
          this.elements = [];
          this.spacer = null;
          this.dom = document.createElement("div");
          this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
          for (let prop in config.domEventHandlers) {
              this.dom.addEventListener(prop, (event) => {
                  let target = event.target, y;
                  if (target != this.dom && this.dom.contains(target)) {
                      while (target.parentNode != this.dom)
                          target = target.parentNode;
                      let rect = target.getBoundingClientRect();
                      y = (rect.top + rect.bottom) / 2;
                  }
                  else {
                      y = event.clientY;
                  }
                  let line = view.lineBlockAtHeight(y - view.documentTop);
                  if (config.domEventHandlers[prop](view, line, event))
                      event.preventDefault();
              });
          }
          this.markers = asArray(config.markers(view));
          if (config.initialSpacer) {
              this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
              this.dom.appendChild(this.spacer.dom);
              this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
          }
      }
      update(update) {
          let prevMarkers = this.markers;
          this.markers = asArray(this.config.markers(update.view));
          if (this.spacer && this.config.updateSpacer) {
              let updated = this.config.updateSpacer(this.spacer.markers[0], update);
              if (updated != this.spacer.markers[0])
                  this.spacer.update(update.view, 0, 0, [updated]);
          }
          let vp = update.view.viewport;
          return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) ||
              (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
      }
      destroy() {
          for (let elt of this.elements)
              elt.destroy();
      }
  }
  class GutterElement {
      constructor(view, height, above, markers) {
          this.height = -1;
          this.above = 0;
          this.markers = [];
          this.dom = document.createElement("div");
          this.dom.className = "cm-gutterElement";
          this.update(view, height, above, markers);
      }
      update(view, height, above, markers) {
          if (this.height != height) {
              this.height = height;
              this.dom.style.height = height + "px";
          }
          if (this.above != above)
              this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
          if (!sameMarkers(this.markers, markers))
              this.setMarkers(view, markers);
      }
      setMarkers(view, markers) {
          let cls = "cm-gutterElement", domPos = this.dom.firstChild;
          for (let iNew = 0, iOld = 0;;) {
              let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
              if (marker) {
                  let c = marker.elementClass;
                  if (c)
                      cls += " " + c;
                  for (let i = iOld; i < this.markers.length; i++)
                      if (this.markers[i].compare(marker)) {
                          skipTo = i;
                          matched = true;
                          break;
                      }
              }
              else {
                  skipTo = this.markers.length;
              }
              while (iOld < skipTo) {
                  let next = this.markers[iOld++];
                  if (next.toDOM) {
                      next.destroy(domPos);
                      let after = domPos.nextSibling;
                      domPos.remove();
                      domPos = after;
                  }
              }
              if (!marker)
                  break;
              if (marker.toDOM) {
                  if (matched)
                      domPos = domPos.nextSibling;
                  else
                      this.dom.insertBefore(marker.toDOM(view), domPos);
              }
              if (matched)
                  iOld++;
          }
          this.dom.className = cls;
          this.markers = markers;
      }
      destroy() {
          this.setMarkers(null, []); // First argument not used unless creating markers
      }
  }
  function sameMarkers(a, b) {
      if (a.length != b.length)
          return false;
      for (let i = 0; i < a.length; i++)
          if (!a[i].compare(b[i]))
              return false;
      return true;
  }
  /**
  Facet used to provide markers to the line number gutter.
  */
  const lineNumberMarkers = /*@__PURE__*/Facet.define();
  /**
  Facet used to create markers in the line number gutter next to widgets.
  */
  const lineNumberWidgetMarker = /*@__PURE__*/Facet.define();
  const lineNumberConfig = /*@__PURE__*/Facet.define({
      combine(values) {
          return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
              domEventHandlers(a, b) {
                  let result = Object.assign({}, a);
                  for (let event in b) {
                      let exists = result[event], add = b[event];
                      result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
                  }
                  return result;
              }
          });
      }
  });
  class NumberMarker extends GutterMarker {
      constructor(number) {
          super();
          this.number = number;
      }
      eq(other) { return this.number == other.number; }
      toDOM() { return document.createTextNode(this.number); }
  }
  function formatNumber(view, number) {
      return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
  }
  const lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], state => ({
      class: "cm-lineNumbers",
      renderEmptyElements: false,
      markers(view) { return view.state.facet(lineNumberMarkers); },
      lineMarker(view, line, others) {
          if (others.some(m => m.toDOM))
              return null;
          return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
      },
      widgetMarker: (view, widget, block) => {
          for (let m of view.state.facet(lineNumberWidgetMarker)) {
              let result = m(view, widget, block);
              if (result)
                  return result;
          }
          return null;
      },
      lineMarkerChange: update => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
      initialSpacer(view) {
          return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
      },
      updateSpacer(spacer, update) {
          let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
          return max == spacer.number ? spacer : new NumberMarker(max);
      },
      domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
  }));
  /**
  Create a line number gutter extension.
  */
  function lineNumbers(config = {}) {
      return [
          lineNumberConfig.of(config),
          gutters(),
          lineNumberGutter
      ];
  }
  function maxLineNumber(lines) {
      let last = 9;
      while (last < lines)
          last = last * 10 + 9;
      return last;
  }

  let nextTagID = 0;
  /**
  Highlighting tags are markers that denote a highlighting category.
  They are [associated](#highlight.styleTags) with parts of a syntax
  tree by a language mode, and then mapped to an actual CSS style by
  a [highlighter](#highlight.Highlighter).

  Because syntax tree node types and highlight styles have to be
  able to talk the same language, CodeMirror uses a mostly _closed_
  [vocabulary](#highlight.tags) of syntax tags (as opposed to
  traditional open string-based systems, which make it hard for
  highlighting themes to cover all the tokens produced by the
  various languages).

  It _is_ possible to [define](#highlight.Tag^define) your own
  highlighting tags for system-internal use (where you control both
  the language package and the highlighter), but such tags will not
  be picked up by regular highlighters (though you can derive them
  from standard tags to allow highlighters to fall back to those).
  */
  class Tag {
      /**
      @internal
      */
      constructor(
      /**
      The optional name of the base tag @internal
      */
      name, 
      /**
      The set of this tag and all its parent tags, starting with
      this one itself and sorted in order of decreasing specificity.
      */
      set, 
      /**
      The base unmodified tag that this one is based on, if it's
      modified @internal
      */
      base, 
      /**
      The modifiers applied to this.base @internal
      */
      modified) {
          this.name = name;
          this.set = set;
          this.base = base;
          this.modified = modified;
          /**
          @internal
          */
          this.id = nextTagID++;
      }
      toString() {
          let { name } = this;
          for (let mod of this.modified)
              if (mod.name)
                  name = `${mod.name}(${name})`;
          return name;
      }
      static define(nameOrParent, parent) {
          let name = typeof nameOrParent == "string" ? nameOrParent : "?";
          if (nameOrParent instanceof Tag)
              parent = nameOrParent;
          if (parent === null || parent === void 0 ? void 0 : parent.base)
              throw new Error("Can not derive from a modified tag");
          let tag = new Tag(name, [], null, []);
          tag.set.push(tag);
          if (parent)
              for (let t of parent.set)
                  tag.set.push(t);
          return tag;
      }
      /**
      Define a tag _modifier_, which is a function that, given a tag,
      will return a tag that is a subtag of the original. Applying the
      same modifier to a twice tag will return the same value (`m1(t1)
      == m1(t1)`) and applying multiple modifiers will, regardless or
      order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
      
      When multiple modifiers are applied to a given base tag, each
      smaller set of modifiers is registered as a parent, so that for
      example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
      `m1(m3(t1)`, and so on.
      */
      static defineModifier(name) {
          let mod = new Modifier(name);
          return (tag) => {
              if (tag.modified.indexOf(mod) > -1)
                  return tag;
              return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
          };
      }
  }
  let nextModifierID = 0;
  class Modifier {
      constructor(name) {
          this.name = name;
          this.instances = [];
          this.id = nextModifierID++;
      }
      static get(base, mods) {
          if (!mods.length)
              return base;
          let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));
          if (exists)
              return exists;
          let set = [], tag = new Tag(base.name, set, base, mods);
          for (let m of mods)
              m.instances.push(tag);
          let configs = powerSet(mods);
          for (let parent of base.set)
              if (!parent.modified.length)
                  for (let config of configs)
                      set.push(Modifier.get(parent, config));
          return tag;
      }
  }
  function sameArray(a, b) {
      return a.length == b.length && a.every((x, i) => x == b[i]);
  }
  function powerSet(array) {
      let sets = [[]];
      for (let i = 0; i < array.length; i++) {
          for (let j = 0, e = sets.length; j < e; j++) {
              sets.push(sets[j].concat(array[i]));
          }
      }
      return sets.sort((a, b) => b.length - a.length);
  }
  /**
  This function is used to add a set of tags to a language syntax
  via [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.LRParser.configure).

  The argument object maps node selectors to [highlighting
  tags](#highlight.Tag) or arrays of tags.

  Node selectors may hold one or more (space-separated) node paths.
  Such a path can be a [node name](#common.NodeType.name), or
  multiple node names (or `*` wildcards) separated by slash
  characters, as in `"Block/Declaration/VariableName"`. Such a path
  matches the final node but only if its direct parent nodes are the
  other nodes mentioned. A `*` in such a path matches any parent,
  but only a single level—wildcards that match multiple parents
  aren't supported, both for efficiency reasons and because Lezer
  trees make it rather hard to reason about what they would match.)

  A path can be ended with `/...` to indicate that the tag assigned
  to the node should also apply to all child nodes, even if they
  match their own style (by default, only the innermost style is
  used).

  When a path ends in `!`, as in `Attribute!`, no further matching
  happens for the node's child nodes, and the entire node gets the
  given style.

  In this notation, node names that contain `/`, `!`, `*`, or `...`
  must be quoted as JSON strings.

  For example:

  ```javascript
  parser.withProps(
    styleTags({
      // Style Number and BigNumber nodes
      "Number BigNumber": tags.number,
      // Style Escape nodes whose parent is String
      "String/Escape": tags.escape,
      // Style anything inside Attributes nodes
      "Attributes!": tags.meta,
      // Add a style to all content inside Italic nodes
      "Italic/...": tags.emphasis,
      // Style InvalidString nodes as both `string` and `invalid`
      "InvalidString": [tags.string, tags.invalid],
      // Style the node named "/" as punctuation
      '"/"': tags.punctuation
    })
  )
  ```
  */
  function styleTags(spec) {
      let byName = Object.create(null);
      for (let prop in spec) {
          let tags = spec[prop];
          if (!Array.isArray(tags))
              tags = [tags];
          for (let part of prop.split(" "))
              if (part) {
                  let pieces = [], mode = 2 /* Mode.Normal */, rest = part;
                  for (let pos = 0;;) {
                      if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                          mode = 1 /* Mode.Inherit */;
                          break;
                      }
                      let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                      if (!m)
                          throw new RangeError("Invalid path: " + part);
                      pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                      pos += m[0].length;
                      if (pos == part.length)
                          break;
                      let next = part[pos++];
                      if (pos == part.length && next == "!") {
                          mode = 0 /* Mode.Opaque */;
                          break;
                      }
                      if (next != "/")
                          throw new RangeError("Invalid path: " + part);
                      rest = part.slice(pos);
                  }
                  let last = pieces.length - 1, inner = pieces[last];
                  if (!inner)
                      throw new RangeError("Invalid path: " + part);
                  let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
                  byName[inner] = rule.sort(byName[inner]);
              }
      }
      return ruleNodeProp.add(byName);
  }
  const ruleNodeProp = new NodeProp();
  class Rule {
      constructor(tags, mode, context, next) {
          this.tags = tags;
          this.mode = mode;
          this.context = context;
          this.next = next;
      }
      get opaque() { return this.mode == 0 /* Mode.Opaque */; }
      get inherit() { return this.mode == 1 /* Mode.Inherit */; }
      sort(other) {
          if (!other || other.depth < this.depth) {
              this.next = other;
              return this;
          }
          other.next = this.sort(other.next);
          return other;
      }
      get depth() { return this.context ? this.context.length : 0; }
  }
  Rule.empty = new Rule([], 2 /* Mode.Normal */, null);
  /**
  Define a [highlighter](#highlight.Highlighter) from an array of
  tag/class pairs. Classes associated with more specific tags will
  take precedence.
  */
  function tagHighlighter(tags, options) {
      let map = Object.create(null);
      for (let style of tags) {
          if (!Array.isArray(style.tag))
              map[style.tag.id] = style.class;
          else
              for (let tag of style.tag)
                  map[tag.id] = style.class;
      }
      let { scope, all = null } = options || {};
      return {
          style: (tags) => {
              let cls = all;
              for (let tag of tags) {
                  for (let sub of tag.set) {
                      let tagClass = map[sub.id];
                      if (tagClass) {
                          cls = cls ? cls + " " + tagClass : tagClass;
                          break;
                      }
                  }
              }
              return cls;
          },
          scope
      };
  }
  function highlightTags(highlighters, tags) {
      let result = null;
      for (let highlighter of highlighters) {
          let value = highlighter.style(tags);
          if (value)
              result = result ? result + " " + value : value;
      }
      return result;
  }
  /**
  Highlight the given [tree](#common.Tree) with the given
  [highlighter](#highlight.Highlighter). Often, the higher-level
  [`highlightCode`](#highlight.highlightCode) function is easier to
  use.
  */
  function highlightTree(tree, highlighter, 
  /**
  Assign styling to a region of the text. Will be called, in order
  of position, for any ranges where more than zero classes apply.
  `classes` is a space separated string of CSS classes.
  */
  putStyle, 
  /**
  The start of the range to highlight.
  */
  from = 0, 
  /**
  The end of the range.
  */
  to = tree.length) {
      let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
      builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
      builder.flush(to);
  }
  class HighlightBuilder {
      constructor(at, highlighters, span) {
          this.at = at;
          this.highlighters = highlighters;
          this.span = span;
          this.class = "";
      }
      startSpan(at, cls) {
          if (cls != this.class) {
              this.flush(at);
              if (at > this.at)
                  this.at = at;
              this.class = cls;
          }
      }
      flush(to) {
          if (to > this.at && this.class)
              this.span(this.at, to, this.class);
      }
      highlightRange(cursor, from, to, inheritedClass, highlighters) {
          let { type, from: start, to: end } = cursor;
          if (start >= to || end <= from)
              return;
          if (type.isTop)
              highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));
          let cls = inheritedClass;
          let rule = getStyleTags(cursor) || Rule.empty;
          let tagCls = highlightTags(highlighters, rule.tags);
          if (tagCls) {
              if (cls)
                  cls += " ";
              cls += tagCls;
              if (rule.mode == 1 /* Mode.Inherit */)
                  inheritedClass += (inheritedClass ? " " : "") + tagCls;
          }
          this.startSpan(Math.max(from, start), cls);
          if (rule.opaque)
              return;
          let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
          if (mounted && mounted.overlay) {
              let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
              let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));
              let hasChild = cursor.firstChild();
              for (let i = 0, pos = start;; i++) {
                  let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
                  let nextPos = next ? next.from + start : end;
                  let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
                  if (rangeFrom < rangeTo && hasChild) {
                      while (cursor.from < rangeTo) {
                          this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
                          this.startSpan(Math.min(rangeTo, cursor.to), cls);
                          if (cursor.to >= nextPos || !cursor.nextSibling())
                              break;
                      }
                  }
                  if (!next || nextPos > to)
                      break;
                  pos = next.to + start;
                  if (pos > from) {
                      this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), "", innerHighlighters);
                      this.startSpan(Math.min(to, pos), cls);
                  }
              }
              if (hasChild)
                  cursor.parent();
          }
          else if (cursor.firstChild()) {
              if (mounted)
                  inheritedClass = "";
              do {
                  if (cursor.to <= from)
                      continue;
                  if (cursor.from >= to)
                      break;
                  this.highlightRange(cursor, from, to, inheritedClass, highlighters);
                  this.startSpan(Math.min(to, cursor.to), cls);
              } while (cursor.nextSibling());
              cursor.parent();
          }
      }
  }
  /**
  Match a syntax node's [highlight rules](#highlight.styleTags). If
  there's a match, return its set of tags, and whether it is
  opaque (uses a `!`) or applies to all child nodes (`/...`).
  */
  function getStyleTags(node) {
      let rule = node.type.prop(ruleNodeProp);
      while (rule && rule.context && !node.matchContext(rule.context))
          rule = rule.next;
      return rule || null;
  }
  const t = Tag.define;
  const comment = t(), name$1 = t(), typeName = t(name$1), propertyName = t(name$1), literal = t(), string$1 = t(literal), number = t(literal), content = t(), heading$1 = t(content), keyword = t(), operator = t(), punctuation$1 = t(), bracket = t(punctuation$1), meta = t();
  /**
  The default set of highlighting [tags](#highlight.Tag).

  This collection is heavily biased towards programming languages,
  and necessarily incomplete. A full ontology of syntactic
  constructs would fill a stack of books, and be impractical to
  write themes for. So try to make do with this set. If all else
  fails, [open an
  issue](https://github.com/codemirror/codemirror.next) to propose a
  new tag, or [define](#highlight.Tag^define) a local custom tag for
  your use case.

  Note that it is not obligatory to always attach the most specific
  tag possible to an element—if your grammar can't easily
  distinguish a certain type of element (such as a local variable),
  it is okay to style it as its more general variant (a variable).

  For tags that extend some parent tag, the documentation links to
  the parent.
  */
  const tags = {
      /**
      A comment.
      */
      comment,
      /**
      A line [comment](#highlight.tags.comment).
      */
      lineComment: t(comment),
      /**
      A block [comment](#highlight.tags.comment).
      */
      blockComment: t(comment),
      /**
      A documentation [comment](#highlight.tags.comment).
      */
      docComment: t(comment),
      /**
      Any kind of identifier.
      */
      name: name$1,
      /**
      The [name](#highlight.tags.name) of a variable.
      */
      variableName: t(name$1),
      /**
      A type [name](#highlight.tags.name).
      */
      typeName: typeName,
      /**
      A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
      */
      tagName: t(typeName),
      /**
      A property or field [name](#highlight.tags.name).
      */
      propertyName: propertyName,
      /**
      An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
      */
      attributeName: t(propertyName),
      /**
      The [name](#highlight.tags.name) of a class.
      */
      className: t(name$1),
      /**
      A label [name](#highlight.tags.name).
      */
      labelName: t(name$1),
      /**
      A namespace [name](#highlight.tags.name).
      */
      namespace: t(name$1),
      /**
      The [name](#highlight.tags.name) of a macro.
      */
      macroName: t(name$1),
      /**
      A literal value.
      */
      literal,
      /**
      A string [literal](#highlight.tags.literal).
      */
      string: string$1,
      /**
      A documentation [string](#highlight.tags.string).
      */
      docString: t(string$1),
      /**
      A character literal (subtag of [string](#highlight.tags.string)).
      */
      character: t(string$1),
      /**
      An attribute value (subtag of [string](#highlight.tags.string)).
      */
      attributeValue: t(string$1),
      /**
      A number [literal](#highlight.tags.literal).
      */
      number,
      /**
      An integer [number](#highlight.tags.number) literal.
      */
      integer: t(number),
      /**
      A floating-point [number](#highlight.tags.number) literal.
      */
      float: t(number),
      /**
      A boolean [literal](#highlight.tags.literal).
      */
      bool: t(literal),
      /**
      Regular expression [literal](#highlight.tags.literal).
      */
      regexp: t(literal),
      /**
      An escape [literal](#highlight.tags.literal), for example a
      backslash escape in a string.
      */
      escape: t(literal),
      /**
      A color [literal](#highlight.tags.literal).
      */
      color: t(literal),
      /**
      A URL [literal](#highlight.tags.literal).
      */
      url: t(literal),
      /**
      A language keyword.
      */
      keyword,
      /**
      The [keyword](#highlight.tags.keyword) for the self or this
      object.
      */
      self: t(keyword),
      /**
      The [keyword](#highlight.tags.keyword) for null.
      */
      null: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) denoting some atomic value.
      */
      atom: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that represents a unit.
      */
      unit: t(keyword),
      /**
      A modifier [keyword](#highlight.tags.keyword).
      */
      modifier: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that acts as an operator.
      */
      operatorKeyword: t(keyword),
      /**
      A control-flow related [keyword](#highlight.tags.keyword).
      */
      controlKeyword: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that defines something.
      */
      definitionKeyword: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) related to defining or
      interfacing with modules.
      */
      moduleKeyword: t(keyword),
      /**
      An operator.
      */
      operator,
      /**
      An [operator](#highlight.tags.operator) that dereferences something.
      */
      derefOperator: t(operator),
      /**
      Arithmetic-related [operator](#highlight.tags.operator).
      */
      arithmeticOperator: t(operator),
      /**
      Logical [operator](#highlight.tags.operator).
      */
      logicOperator: t(operator),
      /**
      Bit [operator](#highlight.tags.operator).
      */
      bitwiseOperator: t(operator),
      /**
      Comparison [operator](#highlight.tags.operator).
      */
      compareOperator: t(operator),
      /**
      [Operator](#highlight.tags.operator) that updates its operand.
      */
      updateOperator: t(operator),
      /**
      [Operator](#highlight.tags.operator) that defines something.
      */
      definitionOperator: t(operator),
      /**
      Type-related [operator](#highlight.tags.operator).
      */
      typeOperator: t(operator),
      /**
      Control-flow [operator](#highlight.tags.operator).
      */
      controlOperator: t(operator),
      /**
      Program or markup punctuation.
      */
      punctuation: punctuation$1,
      /**
      [Punctuation](#highlight.tags.punctuation) that separates
      things.
      */
      separator: t(punctuation$1),
      /**
      Bracket-style [punctuation](#highlight.tags.punctuation).
      */
      bracket,
      /**
      Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
      tokens).
      */
      angleBracket: t(bracket),
      /**
      Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
      tokens).
      */
      squareBracket: t(bracket),
      /**
      Parentheses (usually `(` and `)` tokens). Subtag of
      [bracket](#highlight.tags.bracket).
      */
      paren: t(bracket),
      /**
      Braces (usually `{` and `}` tokens). Subtag of
      [bracket](#highlight.tags.bracket).
      */
      brace: t(bracket),
      /**
      Content, for example plain text in XML or markup documents.
      */
      content,
      /**
      [Content](#highlight.tags.content) that represents a heading.
      */
      heading: heading$1,
      /**
      A level 1 [heading](#highlight.tags.heading).
      */
      heading1: t(heading$1),
      /**
      A level 2 [heading](#highlight.tags.heading).
      */
      heading2: t(heading$1),
      /**
      A level 3 [heading](#highlight.tags.heading).
      */
      heading3: t(heading$1),
      /**
      A level 4 [heading](#highlight.tags.heading).
      */
      heading4: t(heading$1),
      /**
      A level 5 [heading](#highlight.tags.heading).
      */
      heading5: t(heading$1),
      /**
      A level 6 [heading](#highlight.tags.heading).
      */
      heading6: t(heading$1),
      /**
      A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
      */
      contentSeparator: t(content),
      /**
      [Content](#highlight.tags.content) that represents a list.
      */
      list: t(content),
      /**
      [Content](#highlight.tags.content) that represents a quote.
      */
      quote: t(content),
      /**
      [Content](#highlight.tags.content) that is emphasized.
      */
      emphasis: t(content),
      /**
      [Content](#highlight.tags.content) that is styled strong.
      */
      strong: t(content),
      /**
      [Content](#highlight.tags.content) that is part of a link.
      */
      link: t(content),
      /**
      [Content](#highlight.tags.content) that is styled as code or
      monospace.
      */
      monospace: t(content),
      /**
      [Content](#highlight.tags.content) that has a strike-through
      style.
      */
      strikethrough: t(content),
      /**
      Inserted text in a change-tracking format.
      */
      inserted: t(),
      /**
      Deleted text.
      */
      deleted: t(),
      /**
      Changed text.
      */
      changed: t(),
      /**
      An invalid or unsyntactic element.
      */
      invalid: t(),
      /**
      Metadata or meta-instruction.
      */
      meta,
      /**
      [Metadata](#highlight.tags.meta) that applies to the entire
      document.
      */
      documentMeta: t(meta),
      /**
      [Metadata](#highlight.tags.meta) that annotates or adds
      attributes to a given syntactic element.
      */
      annotation: t(meta),
      /**
      Processing instruction or preprocessor directive. Subtag of
      [meta](#highlight.tags.meta).
      */
      processingInstruction: t(meta),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates that a
      given element is being defined. Expected to be used with the
      various [name](#highlight.tags.name) tags.
      */
      definition: Tag.defineModifier("definition"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates that
      something is constant. Mostly expected to be used with
      [variable names](#highlight.tags.variableName).
      */
      constant: Tag.defineModifier("constant"),
      /**
      [Modifier](#highlight.Tag^defineModifier) used to indicate that
      a [variable](#highlight.tags.variableName) or [property
      name](#highlight.tags.propertyName) is being called or defined
      as a function.
      */
      function: Tag.defineModifier("function"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that can be applied to
      [names](#highlight.tags.name) to indicate that they belong to
      the language's standard environment.
      */
      standard: Tag.defineModifier("standard"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates a given
      [names](#highlight.tags.name) is local to some scope.
      */
      local: Tag.defineModifier("local"),
      /**
      A generic variant [modifier](#highlight.Tag^defineModifier) that
      can be used to tag language-specific alternative variants of
      some common tag. It is recommended for themes to define special
      forms of at least the [string](#highlight.tags.string) and
      [variable name](#highlight.tags.variableName) tags, since those
      come up a lot.
      */
      special: Tag.defineModifier("special")
  };
  for (let name in tags) {
      let val = tags[name];
      if (val instanceof Tag)
          val.name = name;
  }
  /**
  This is a highlighter that adds stable, predictable classes to
  tokens, for styling with external CSS.

  The following tags are mapped to their name prefixed with `"tok-"`
  (for example `"tok-comment"`):

  * [`link`](#highlight.tags.link)
  * [`heading`](#highlight.tags.heading)
  * [`emphasis`](#highlight.tags.emphasis)
  * [`strong`](#highlight.tags.strong)
  * [`keyword`](#highlight.tags.keyword)
  * [`atom`](#highlight.tags.atom)
  * [`bool`](#highlight.tags.bool)
  * [`url`](#highlight.tags.url)
  * [`labelName`](#highlight.tags.labelName)
  * [`inserted`](#highlight.tags.inserted)
  * [`deleted`](#highlight.tags.deleted)
  * [`literal`](#highlight.tags.literal)
  * [`string`](#highlight.tags.string)
  * [`number`](#highlight.tags.number)
  * [`variableName`](#highlight.tags.variableName)
  * [`typeName`](#highlight.tags.typeName)
  * [`namespace`](#highlight.tags.namespace)
  * [`className`](#highlight.tags.className)
  * [`macroName`](#highlight.tags.macroName)
  * [`propertyName`](#highlight.tags.propertyName)
  * [`operator`](#highlight.tags.operator)
  * [`comment`](#highlight.tags.comment)
  * [`meta`](#highlight.tags.meta)
  * [`punctuation`](#highlight.tags.punctuation)
  * [`invalid`](#highlight.tags.invalid)

  In addition, these mappings are provided:

  * [`regexp`](#highlight.tags.regexp),
    [`escape`](#highlight.tags.escape), and
    [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
    are mapped to `"tok-string2"`
  * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
    to `"tok-variableName2"`
  * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
    to `"tok-variableName tok-local"`
  * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
    to `"tok-variableName tok-definition"`
  * [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
    to `"tok-propertyName tok-definition"`
  */
  tagHighlighter([
      { tag: tags.link, class: "tok-link" },
      { tag: tags.heading, class: "tok-heading" },
      { tag: tags.emphasis, class: "tok-emphasis" },
      { tag: tags.strong, class: "tok-strong" },
      { tag: tags.keyword, class: "tok-keyword" },
      { tag: tags.atom, class: "tok-atom" },
      { tag: tags.bool, class: "tok-bool" },
      { tag: tags.url, class: "tok-url" },
      { tag: tags.labelName, class: "tok-labelName" },
      { tag: tags.inserted, class: "tok-inserted" },
      { tag: tags.deleted, class: "tok-deleted" },
      { tag: tags.literal, class: "tok-literal" },
      { tag: tags.string, class: "tok-string" },
      { tag: tags.number, class: "tok-number" },
      { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
      { tag: tags.variableName, class: "tok-variableName" },
      { tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
      { tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
      { tag: tags.special(tags.variableName), class: "tok-variableName2" },
      { tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
      { tag: tags.typeName, class: "tok-typeName" },
      { tag: tags.namespace, class: "tok-namespace" },
      { tag: tags.className, class: "tok-className" },
      { tag: tags.macroName, class: "tok-macroName" },
      { tag: tags.propertyName, class: "tok-propertyName" },
      { tag: tags.operator, class: "tok-operator" },
      { tag: tags.comment, class: "tok-comment" },
      { tag: tags.meta, class: "tok-meta" },
      { tag: tags.invalid, class: "tok-invalid" },
      { tag: tags.punctuation, class: "tok-punctuation" }
  ]);

  var _a;
  /**
  Node prop stored in a parser's top syntax node to provide the
  facet that stores language-specific data for that language.
  */
  const languageDataProp = /*@__PURE__*/new NodeProp();
  /**
  Helper function to define a facet (to be added to the top syntax
  node(s) for a language via
  [`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
  used to associate language data with the language. You
  probably only need this when subclassing
  [`Language`](https://codemirror.net/6/docs/ref/#language.Language).
  */
  function defineLanguageFacet(baseData) {
      return Facet.define({
          combine: baseData ? values => values.concat(baseData) : undefined
      });
  }
  /**
  Syntax node prop used to register sublanguages. Should be added to
  the top level node type for the language.
  */
  const sublanguageProp = /*@__PURE__*/new NodeProp();
  /**
  A language object manages parsing and per-language
  [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
  managed as a [Lezer](https://lezer.codemirror.net) tree. The class
  can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
  subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
  via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
  for stream parsers.
  */
  class Language {
      /**
      Construct a language object. If you need to invoke this
      directly, first define a data facet with
      [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
      configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
      to the language's outer syntax node.
      */
      constructor(
      /**
      The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
      used for this language.
      */
      data, parser, extraExtensions = [], 
      /**
      A language name.
      */
      name = "") {
          this.data = data;
          this.name = name;
          // Kludge to define EditorState.tree as a debugging helper,
          // without the EditorState package actually knowing about
          // languages and lezer trees.
          if (!EditorState.prototype.hasOwnProperty("tree"))
              Object.defineProperty(EditorState.prototype, "tree", { get() { return syntaxTree(this); } });
          this.parser = parser;
          this.extension = [
              language.of(this),
              EditorState.languageData.of((state, pos, side) => {
                  let top = topNodeAt(state, pos, side), data = top.type.prop(languageDataProp);
                  if (!data)
                      return [];
                  let base = state.facet(data), sub = top.type.prop(sublanguageProp);
                  if (sub) {
                      let innerNode = top.resolve(pos - top.from, side);
                      for (let sublang of sub)
                          if (sublang.test(innerNode, state)) {
                              let data = state.facet(sublang.facet);
                              return sublang.type == "replace" ? data : data.concat(base);
                          }
                  }
                  return base;
              })
          ].concat(extraExtensions);
      }
      /**
      Query whether this language is active at the given position.
      */
      isActiveAt(state, pos, side = -1) {
          return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
      }
      /**
      Find the document regions that were parsed using this language.
      The returned regions will _include_ any nested languages rooted
      in this language, when those exist.
      */
      findRegions(state) {
          let lang = state.facet(language);
          if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
              return [{ from: 0, to: state.doc.length }];
          if (!lang || !lang.allowsNesting)
              return [];
          let result = [];
          let explore = (tree, from) => {
              if (tree.prop(languageDataProp) == this.data) {
                  result.push({ from, to: from + tree.length });
                  return;
              }
              let mount = tree.prop(NodeProp.mounted);
              if (mount) {
                  if (mount.tree.prop(languageDataProp) == this.data) {
                      if (mount.overlay)
                          for (let r of mount.overlay)
                              result.push({ from: r.from + from, to: r.to + from });
                      else
                          result.push({ from: from, to: from + tree.length });
                      return;
                  }
                  else if (mount.overlay) {
                      let size = result.length;
                      explore(mount.tree, mount.overlay[0].from + from);
                      if (result.length > size)
                          return;
                  }
              }
              for (let i = 0; i < tree.children.length; i++) {
                  let ch = tree.children[i];
                  if (ch instanceof Tree)
                      explore(ch, tree.positions[i] + from);
              }
          };
          explore(syntaxTree(state), 0);
          return result;
      }
      /**
      Indicates whether this language allows nested languages. The
      default implementation returns true.
      */
      get allowsNesting() { return true; }
  }
  /**
  @internal
  */
  Language.setState = /*@__PURE__*/StateEffect.define();
  function topNodeAt(state, pos, side) {
      let topLang = state.facet(language), tree = syntaxTree(state).topNode;
      if (!topLang || topLang.allowsNesting) {
          for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
              if (node.type.isTop)
                  tree = node;
      }
      return tree;
  }
  /**
  A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
  [LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
  parsers.
  */
  class LRLanguage extends Language {
      constructor(data, parser, name) {
          super(data, parser, [], name);
          this.parser = parser;
      }
      /**
      Define a language from a parser.
      */
      static define(spec) {
          let data = defineLanguageFacet(spec.languageData);
          return new LRLanguage(data, spec.parser.configure({
              props: [languageDataProp.add(type => type.isTop ? data : undefined)]
          }), spec.name);
      }
      /**
      Create a new instance of this language with a reconfigured
      version of its parser and optionally a new name.
      */
      configure(options, name) {
          return new LRLanguage(this.data, this.parser.configure(options), name || this.name);
      }
      get allowsNesting() { return this.parser.hasWrappers(); }
  }
  /**
  Get the syntax tree for a state, which is the current (possibly
  incomplete) parse tree of the active
  [language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
  language available.
  */
  function syntaxTree(state) {
      let field = state.field(Language.state, false);
      return field ? field.tree : Tree.empty;
  }
  /**
  Lezer-style
  [`Input`](https://lezer.codemirror.net/docs/ref#common.Input)
  object for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.
  */
  class DocInput {
      /**
      Create an input object for the given document.
      */
      constructor(doc) {
          this.doc = doc;
          this.cursorPos = 0;
          this.string = "";
          this.cursor = doc.iter();
      }
      get length() { return this.doc.length; }
      syncTo(pos) {
          this.string = this.cursor.next(pos - this.cursorPos).value;
          this.cursorPos = pos + this.string.length;
          return this.cursorPos - this.string.length;
      }
      chunk(pos) {
          this.syncTo(pos);
          return this.string;
      }
      get lineChunks() { return true; }
      read(from, to) {
          let stringStart = this.cursorPos - this.string.length;
          if (from < stringStart || to >= this.cursorPos)
              return this.doc.sliceString(from, to);
          else
              return this.string.slice(from - stringStart, to - stringStart);
      }
  }
  let currentContext = null;
  /**
  A parse context provided to parsers working on the editor content.
  */
  class ParseContext {
      constructor(parser, 
      /**
      The current editor state.
      */
      state, 
      /**
      Tree fragments that can be reused by incremental re-parses.
      */
      fragments = [], 
      /**
      @internal
      */
      tree, 
      /**
      @internal
      */
      treeLen, 
      /**
      The current editor viewport (or some overapproximation
      thereof). Intended to be used for opportunistically avoiding
      work (in which case
      [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
      should be called to make sure the parser is restarted when the
      skipped region becomes visible).
      */
      viewport, 
      /**
      @internal
      */
      skipped, 
      /**
      This is where skipping parsers can register a promise that,
      when resolved, will schedule a new parse. It is cleared when
      the parse worker picks up the promise. @internal
      */
      scheduleOn) {
          this.parser = parser;
          this.state = state;
          this.fragments = fragments;
          this.tree = tree;
          this.treeLen = treeLen;
          this.viewport = viewport;
          this.skipped = skipped;
          this.scheduleOn = scheduleOn;
          this.parse = null;
          /**
          @internal
          */
          this.tempSkipped = [];
      }
      /**
      @internal
      */
      static create(parser, state, viewport) {
          return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
      }
      startParse() {
          return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
      }
      /**
      @internal
      */
      work(until, upto) {
          if (upto != null && upto >= this.state.doc.length)
              upto = undefined;
          if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
              this.takeTree();
              return true;
          }
          return this.withContext(() => {
              var _a;
              if (typeof until == "number") {
                  let endTime = Date.now() + until;
                  until = () => Date.now() > endTime;
              }
              if (!this.parse)
                  this.parse = this.startParse();
              if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&
                  upto < this.state.doc.length)
                  this.parse.stopAt(upto);
              for (;;) {
                  let done = this.parse.advance();
                  if (done) {
                      this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
                      this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
                      this.tree = done;
                      this.parse = null;
                      if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
                          this.parse = this.startParse();
                      else
                          return true;
                  }
                  if (until())
                      return false;
              }
          });
      }
      /**
      @internal
      */
      takeTree() {
          let pos, tree;
          if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
              if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
                  this.parse.stopAt(pos);
              this.withContext(() => { while (!(tree = this.parse.advance())) { } });
              this.treeLen = pos;
              this.tree = tree;
              this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
              this.parse = null;
          }
      }
      withContext(f) {
          let prev = currentContext;
          currentContext = this;
          try {
              return f();
          }
          finally {
              currentContext = prev;
          }
      }
      withoutTempSkipped(fragments) {
          for (let r; r = this.tempSkipped.pop();)
              fragments = cutFragments(fragments, r.from, r.to);
          return fragments;
      }
      /**
      @internal
      */
      changes(changes, newState) {
          let { fragments, tree, treeLen, viewport, skipped } = this;
          this.takeTree();
          if (!changes.empty) {
              let ranges = [];
              changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
              fragments = TreeFragment.applyChanges(fragments, ranges);
              tree = Tree.empty;
              treeLen = 0;
              viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
              if (this.skipped.length) {
                  skipped = [];
                  for (let r of this.skipped) {
                      let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
                      if (from < to)
                          skipped.push({ from, to });
                  }
              }
          }
          return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
      }
      /**
      @internal
      */
      updateViewport(viewport) {
          if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
              return false;
          this.viewport = viewport;
          let startLen = this.skipped.length;
          for (let i = 0; i < this.skipped.length; i++) {
              let { from, to } = this.skipped[i];
              if (from < viewport.to && to > viewport.from) {
                  this.fragments = cutFragments(this.fragments, from, to);
                  this.skipped.splice(i--, 1);
              }
          }
          if (this.skipped.length >= startLen)
              return false;
          this.reset();
          return true;
      }
      /**
      @internal
      */
      reset() {
          if (this.parse) {
              this.takeTree();
              this.parse = null;
          }
      }
      /**
      Notify the parse scheduler that the given region was skipped
      because it wasn't in view, and the parse should be restarted
      when it comes into view.
      */
      skipUntilInView(from, to) {
          this.skipped.push({ from, to });
      }
      /**
      Returns a parser intended to be used as placeholder when
      asynchronously loading a nested parser. It'll skip its input and
      mark it as not-really-parsed, so that the next update will parse
      it again.
      
      When `until` is given, a reparse will be scheduled when that
      promise resolves.
      */
      static getSkippingParser(until) {
          return new class extends Parser {
              createParse(input, fragments, ranges) {
                  let from = ranges[0].from, to = ranges[ranges.length - 1].to;
                  let parser = {
                      parsedPos: from,
                      advance() {
                          let cx = currentContext;
                          if (cx) {
                              for (let r of ranges)
                                  cx.tempSkipped.push(r);
                              if (until)
                                  cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                          }
                          this.parsedPos = to;
                          return new Tree(NodeType.none, [], [], to - from);
                      },
                      stoppedAt: null,
                      stopAt() { }
                  };
                  return parser;
              }
          };
      }
      /**
      @internal
      */
      isDone(upto) {
          upto = Math.min(upto, this.state.doc.length);
          let frags = this.fragments;
          return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
      }
      /**
      Get the context for the current parse, or `null` if no editor
      parse is in progress.
      */
      static get() { return currentContext; }
  }
  function cutFragments(fragments, from, to) {
      return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
  }
  class LanguageState {
      constructor(
      // A mutable parse state that is used to preserve work done during
      // the lifetime of a state when moving to the next state.
      context) {
          this.context = context;
          this.tree = context.tree;
      }
      apply(tr) {
          if (!tr.docChanged && this.tree == this.context.tree)
              return this;
          let newCx = this.context.changes(tr.changes, tr.state);
          // If the previous parse wasn't done, go forward only up to its
          // end position or the end of the viewport, to avoid slowing down
          // state updates with parse work beyond the viewport.
          let upto = this.context.treeLen == tr.startState.doc.length ? undefined
              : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
          if (!newCx.work(20 /* Work.Apply */, upto))
              newCx.takeTree();
          return new LanguageState(newCx);
      }
      static init(state) {
          let vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);
          let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
          if (!parseState.work(20 /* Work.Apply */, vpTo))
              parseState.takeTree();
          return new LanguageState(parseState);
      }
  }
  Language.state = /*@__PURE__*/StateField.define({
      create: LanguageState.init,
      update(value, tr) {
          for (let e of tr.effects)
              if (e.is(Language.setState))
                  return e.value;
          if (tr.startState.facet(language) != tr.state.facet(language))
              return LanguageState.init(tr.state);
          return value.apply(tr);
      }
  });
  let requestIdle = (callback) => {
      let timeout = setTimeout(() => callback(), 500 /* Work.MaxPause */);
      return () => clearTimeout(timeout);
  };
  if (typeof requestIdleCallback != "undefined")
      requestIdle = (callback) => {
          let idle = -1, timeout = setTimeout(() => {
              idle = requestIdleCallback(callback, { timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */ });
          }, 100 /* Work.MinPause */);
          return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
      };
  const isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)
      ? () => navigator.scheduling.isInputPending() : null;
  const parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {
      constructor(view) {
          this.view = view;
          this.working = null;
          this.workScheduled = 0;
          // End of the current time chunk
          this.chunkEnd = -1;
          // Milliseconds of budget left for this chunk
          this.chunkBudget = -1;
          this.work = this.work.bind(this);
          this.scheduleWork();
      }
      update(update) {
          let cx = this.view.state.field(Language.state).context;
          if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
              this.scheduleWork();
          if (update.docChanged || update.selectionSet) {
              if (this.view.hasFocus)
                  this.chunkBudget += 50 /* Work.ChangeBonus */;
              this.scheduleWork();
          }
          this.checkAsyncSchedule(cx);
      }
      scheduleWork() {
          if (this.working)
              return;
          let { state } = this.view, field = state.field(Language.state);
          if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
              this.working = requestIdle(this.work);
      }
      work(deadline) {
          this.working = null;
          let now = Date.now();
          if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk
              this.chunkEnd = now + 30000 /* Work.ChunkTime */;
              this.chunkBudget = 3000 /* Work.ChunkBudget */;
          }
          if (this.chunkBudget <= 0)
              return; // No more budget
          let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
          if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */))
              return;
          let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);
          let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
          let done = field.context.work(() => {
              return isInputPending && isInputPending() || Date.now() > endTime;
          }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));
          this.chunkBudget -= Date.now() - now;
          if (done || this.chunkBudget <= 0) {
              field.context.takeTree();
              this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
          }
          if (this.chunkBudget > 0 && !(done && !viewportFirst))
              this.scheduleWork();
          this.checkAsyncSchedule(field.context);
      }
      checkAsyncSchedule(cx) {
          if (cx.scheduleOn) {
              this.workScheduled++;
              cx.scheduleOn
                  .then(() => this.scheduleWork())
                  .catch(err => logException(this.view.state, err))
                  .then(() => this.workScheduled--);
              cx.scheduleOn = null;
          }
      }
      destroy() {
          if (this.working)
              this.working();
      }
      isWorking() {
          return !!(this.working || this.workScheduled > 0);
      }
  }, {
      eventHandlers: { focus() { this.scheduleWork(); } }
  });
  /**
  The facet used to associate a language with an editor state. Used
  by `Language` object's `extension` property (so you don't need to
  manually wrap your languages in this). Can be used to access the
  current language on a state.
  */
  const language = /*@__PURE__*/Facet.define({
      combine(languages) { return languages.length ? languages[0] : null; },
      enables: language => [
          Language.state,
          parseWorker,
          EditorView.contentAttributes.compute([language], state => {
              let lang = state.facet(language);
              return lang && lang.name ? { "data-language": lang.name } : {};
          })
      ]
  });
  /**
  This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
  optional set of supporting extensions. Language packages are
  encouraged to export a function that optionally takes a
  configuration object and returns a `LanguageSupport` instance, as
  the main way for client code to use the package.
  */
  class LanguageSupport {
      /**
      Create a language support object.
      */
      constructor(
      /**
      The language object.
      */
      language, 
      /**
      An optional set of supporting extensions. When nesting a
      language in another language, the outer language is encouraged
      to include the supporting extensions for its inner languages
      in its own set of support extensions.
      */
      support = []) {
          this.language = language;
          this.support = support;
          this.extension = [language, support];
      }
  }

  /**
  Facet that defines a way to provide a function that computes the
  appropriate indentation depth, as a column number (see
  [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given
  line. A return value of `null` indicates no indentation can be
  determined, and the line should inherit the indentation of the one
  above it. A return value of `undefined` defers to the next indent
  service.
  */
  const indentService = /*@__PURE__*/Facet.define();
  /**
  Facet for overriding the unit by which indentation happens. Should
  be a string consisting either entirely of the same whitespace
  character. When not set, this defaults to 2 spaces.
  */
  const indentUnit = /*@__PURE__*/Facet.define({
      combine: values => {
          if (!values.length)
              return "  ";
          let unit = values[0];
          if (!unit || /\S/.test(unit) || Array.from(unit).some(e => e != unit[0]))
              throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
          return unit;
      }
  });
  /**
  Return the _column width_ of an indent unit in the state.
  Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
  facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
  contains tabs.
  */
  function getIndentUnit(state) {
      let unit = state.facet(indentUnit);
      return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
  }
  /**
  Create an indentation string that covers columns 0 to `cols`.
  Will use tabs for as much of the columns as possible when the
  [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
  tabs.
  */
  function indentString(state, cols) {
      let result = "", ts = state.tabSize, ch = state.facet(indentUnit)[0];
      if (ch == "\t") {
          while (cols >= ts) {
              result += "\t";
              cols -= ts;
          }
          ch = " ";
      }
      for (let i = 0; i < cols; i++)
          result += ch;
      return result;
  }
  /**
  Get the indentation, as a column number, at the given position.
  Will first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)
  that are registered, and if none of those return an indentation,
  this will check the syntax tree for the [indent node
  prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a
  number when an indentation could be determined, and null
  otherwise.
  */
  function getIndentation(context, pos) {
      if (context instanceof EditorState)
          context = new IndentContext(context);
      for (let service of context.state.facet(indentService)) {
          let result = service(context, pos);
          if (result !== undefined)
              return result;
      }
      let tree = syntaxTree(context.state);
      return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;
  }
  /**
  Indentation contexts are used when calling [indentation
  services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
  useful in indentation logic, and can selectively override the
  indentation reported for some lines.
  */
  class IndentContext {
      /**
      Create an indent context.
      */
      constructor(
      /**
      The editor state.
      */
      state, 
      /**
      @internal
      */
      options = {}) {
          this.state = state;
          this.options = options;
          this.unit = getIndentUnit(state);
      }
      /**
      Get a description of the line at the given position, taking
      [simulated line
      breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
      into account. If there is such a break at `pos`, the `bias`
      argument determines whether the part of the line line before or
      after the break is used.
      */
      lineAt(pos, bias = 1) {
          let line = this.state.doc.lineAt(pos);
          let { simulateBreak, simulateDoubleBreak } = this.options;
          if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
              if (simulateDoubleBreak && simulateBreak == pos)
                  return { text: "", from: pos };
              else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
                  return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
              else
                  return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
          }
          return line;
      }
      /**
      Get the text directly after `pos`, either the entire line
      or the next 100 characters, whichever is shorter.
      */
      textAfterPos(pos, bias = 1) {
          if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
              return "";
          let { text, from } = this.lineAt(pos, bias);
          return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
      }
      /**
      Find the column for the given position.
      */
      column(pos, bias = 1) {
          let { text, from } = this.lineAt(pos, bias);
          let result = this.countColumn(text, pos - from);
          let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
          if (override > -1)
              result += override - this.countColumn(text, text.search(/\S|$/));
          return result;
      }
      /**
      Find the column position (taking tabs into account) of the given
      position in the given string.
      */
      countColumn(line, pos = line.length) {
          return countColumn(line, this.state.tabSize, pos);
      }
      /**
      Find the indentation column of the line at the given point.
      */
      lineIndent(pos, bias = 1) {
          let { text, from } = this.lineAt(pos, bias);
          let override = this.options.overrideIndentation;
          if (override) {
              let overriden = override(from);
              if (overriden > -1)
                  return overriden;
          }
          return this.countColumn(text, text.search(/\S|$/));
      }
      /**
      Returns the [simulated line
      break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
      for this context, if any.
      */
      get simulatedBreak() {
          return this.options.simulateBreak || null;
      }
  }
  /**
  A syntax tree node prop used to associate indentation strategies
  with node types. Such a strategy is a function from an indentation
  context to a column number (see also
  [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null
  indicates that no definitive indentation can be determined.
  */
  const indentNodeProp = /*@__PURE__*/new NodeProp();
  // Compute the indentation for a given position from the syntax tree.
  function syntaxIndentation(cx, ast, pos) {
      let stack = ast.resolveStack(pos);
      let inner = ast.resolveInner(pos, -1).resolve(pos, 0).enterUnfinishedNodesBefore(pos);
      if (inner != stack.node) {
          let add = [];
          for (let cur = inner; cur && !(cur.from == stack.node.from && cur.type == stack.node.type); cur = cur.parent)
              add.push(cur);
          for (let i = add.length - 1; i >= 0; i--)
              stack = { node: add[i], next: stack };
      }
      return indentFor(stack, cx, pos);
  }
  function indentFor(stack, cx, pos) {
      for (let cur = stack; cur; cur = cur.next) {
          let strategy = indentStrategy(cur.node);
          if (strategy)
              return strategy(TreeIndentContext.create(cx, pos, cur));
      }
      return 0;
  }
  function ignoreClosed(cx) {
      return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
  }
  function indentStrategy(tree) {
      let strategy = tree.type.prop(indentNodeProp);
      if (strategy)
          return strategy;
      let first = tree.firstChild, close;
      if (first && (close = first.type.prop(NodeProp.closedBy))) {
          let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
          return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
      }
      return tree.parent == null ? topIndent : null;
  }
  function topIndent() { return 0; }
  /**
  Objects of this type provide context information and helper
  methods to indentation functions registered on syntax nodes.
  */
  class TreeIndentContext extends IndentContext {
      constructor(base, 
      /**
      The position at which indentation is being computed.
      */
      pos, 
      /**
      @internal
      */
      context) {
          super(base.state, base.options);
          this.base = base;
          this.pos = pos;
          this.context = context;
      }
      /**
      The syntax tree node to which the indentation strategy
      applies.
      */
      get node() { return this.context.node; }
      /**
      @internal
      */
      static create(base, pos, context) {
          return new TreeIndentContext(base, pos, context);
      }
      /**
      Get the text directly after `this.pos`, either the entire line
      or the next 100 characters, whichever is shorter.
      */
      get textAfter() {
          return this.textAfterPos(this.pos);
      }
      /**
      Get the indentation at the reference line for `this.node`, which
      is the line on which it starts, unless there is a node that is
      _not_ a parent of this node covering the start of that line. If
      so, the line at the start of that node is tried, again skipping
      on if it is covered by another such node.
      */
      get baseIndent() {
          return this.baseIndentFor(this.node);
      }
      /**
      Get the indentation for the reference line of the given node
      (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
      */
      baseIndentFor(node) {
          let line = this.state.doc.lineAt(node.from);
          // Skip line starts that are covered by a sibling (or cousin, etc)
          for (;;) {
              let atBreak = node.resolve(line.from);
              while (atBreak.parent && atBreak.parent.from == atBreak.from)
                  atBreak = atBreak.parent;
              if (isParent(atBreak, node))
                  break;
              line = this.state.doc.lineAt(atBreak.from);
          }
          return this.lineIndent(line.from);
      }
      /**
      Continue looking for indentations in the node's parent nodes,
      and return the result of that.
      */
      continue() {
          return indentFor(this.context.next, this.base, this.pos);
      }
  }
  function isParent(parent, of) {
      for (let cur = of; cur; cur = cur.parent)
          if (parent == cur)
              return true;
      return false;
  }
  // Check whether a delimited node is aligned (meaning there are
  // non-skipped nodes on the same line as the opening delimiter). And
  // if so, return the opening token.
  function bracketedAligned(context) {
      let tree = context.node;
      let openToken = tree.childAfter(tree.from), last = tree.lastChild;
      if (!openToken)
          return null;
      let sim = context.options.simulateBreak;
      let openLine = context.state.doc.lineAt(openToken.from);
      let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
      for (let pos = openToken.to;;) {
          let next = tree.childAfter(pos);
          if (!next || next == last)
              return null;
          if (!next.type.isSkipped) {
              if (next.from >= lineEnd)
                  return null;
              let space = /^ */.exec(openLine.text.slice(openToken.to - openLine.from))[0].length;
              return { from: openToken.from, to: openToken.to + space };
          }
          pos = next.to;
      }
  }
  function delimitedStrategy(context, align, units, closing, closedAt) {
      let after = context.textAfter, space = after.match(/^\s*/)[0].length;
      let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
      let aligned = bracketedAligned(context) ;
      if (aligned)
          return closed ? context.column(aligned.from) : context.column(aligned.to);
      return context.baseIndent + (closed ? 0 : context.unit * units);
  }

  /**
  A facet that registers a code folding service. When called with
  the extent of a line, such a function should return a foldable
  range that starts on that line (but continues beyond it), if one
  can be found.
  */
  const foldService = /*@__PURE__*/Facet.define();
  /**
  This node prop is used to associate folding information with
  syntax node types. Given a syntax node, it should check whether
  that tree is foldable and return the range that can be collapsed
  when it is.
  */
  const foldNodeProp = /*@__PURE__*/new NodeProp();
  function syntaxFolding(state, start, end) {
      let tree = syntaxTree(state);
      if (tree.length < end)
          return null;
      let stack = tree.resolveStack(end, 1);
      let found = null;
      for (let iter = stack; iter; iter = iter.next) {
          let cur = iter.node;
          if (cur.to <= end || cur.from > end)
              continue;
          if (found && cur.from < start)
              break;
          let prop = cur.type.prop(foldNodeProp);
          if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {
              let value = prop(cur, state);
              if (value && value.from <= end && value.from >= start && value.to > end)
                  found = value;
          }
      }
      return found;
  }
  function isUnfinished(node) {
      let ch = node.lastChild;
      return ch && ch.to == node.to && ch.type.isError;
  }
  /**
  Check whether the given line is foldable. First asks any fold
  services registered through
  [`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
  a result, tries to query the [fold node
  prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
  of the line.
  */
  function foldable(state, lineStart, lineEnd) {
      for (let service of state.facet(foldService)) {
          let result = service(state, lineStart, lineEnd);
          if (result)
              return result;
      }
      return syntaxFolding(state, lineStart, lineEnd);
  }
  function mapRange(range, mapping) {
      let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
      return from >= to ? undefined : { from, to };
  }
  /**
  State effect that can be attached to a transaction to fold the
  given range. (You probably only need this in exceptional
  circumstances—usually you'll just want to let
  [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold
  gutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)
  */
  const foldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
  /**
  State effect that unfolds the given range (if it was folded).
  */
  const unfoldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
  /**
  The state field that stores the folded ranges (as a [decoration
  set](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to
  [`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and
  [`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold
  state.
  */
  const foldState = /*@__PURE__*/StateField.define({
      create() {
          return Decoration.none;
      },
      update(folded, tr) {
          folded = folded.map(tr.changes);
          for (let e of tr.effects) {
              if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {
                  let { preparePlaceholder } = tr.state.facet(foldConfig);
                  let widget = !preparePlaceholder ? foldWidget :
                      Decoration.replace({ widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e.value)) });
                  folded = folded.update({ add: [widget.range(e.value.from, e.value.to)] });
              }
              else if (e.is(unfoldEffect)) {
                  folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,
                      filterFrom: e.value.from, filterTo: e.value.to });
              }
          }
          // Clear folded ranges that cover the selection head
          if (tr.selection) {
              let onSelection = false, { head } = tr.selection.main;
              folded.between(head, head, (a, b) => { if (a < head && b > head)
                  onSelection = true; });
              if (onSelection)
                  folded = folded.update({
                      filterFrom: head,
                      filterTo: head,
                      filter: (a, b) => b <= head || a >= head
                  });
          }
          return folded;
      },
      provide: f => EditorView.decorations.from(f),
      toJSON(folded, state) {
          let ranges = [];
          folded.between(0, state.doc.length, (from, to) => { ranges.push(from, to); });
          return ranges;
      },
      fromJSON(value) {
          if (!Array.isArray(value) || value.length % 2)
              throw new RangeError("Invalid JSON for fold state");
          let ranges = [];
          for (let i = 0; i < value.length;) {
              let from = value[i++], to = value[i++];
              if (typeof from != "number" || typeof to != "number")
                  throw new RangeError("Invalid JSON for fold state");
              ranges.push(foldWidget.range(from, to));
          }
          return Decoration.set(ranges, true);
      }
  });
  function findFold(state, from, to) {
      var _a;
      let found = null;
      (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {
          if (!found || found.from > from)
              found = { from, to };
      });
      return found;
  }
  function foldExists(folded, from, to) {
      let found = false;
      folded.between(from, from, (a, b) => { if (a == from && b == to)
          found = true; });
      return found;
  }
  const defaultConfig = {
      placeholderDOM: null,
      preparePlaceholder: null,
      placeholderText: "…"
  };
  const foldConfig = /*@__PURE__*/Facet.define({
      combine(values) { return combineConfig(values, defaultConfig); }
  });
  /**
  Create an extension that configures code folding.
  */
  function codeFolding(config) {
      let result = [foldState, baseTheme$1];
      return result;
  }
  function widgetToDOM(view, prepared) {
      let { state } = view, conf = state.facet(foldConfig);
      let onclick = (event) => {
          let line = view.lineBlockAt(view.posAtDOM(event.target));
          let folded = findFold(view.state, line.from, line.to);
          if (folded)
              view.dispatch({ effects: unfoldEffect.of(folded) });
          event.preventDefault();
      };
      if (conf.placeholderDOM)
          return conf.placeholderDOM(view, onclick, prepared);
      let element = document.createElement("span");
      element.textContent = conf.placeholderText;
      element.setAttribute("aria-label", state.phrase("folded code"));
      element.title = state.phrase("unfold");
      element.className = "cm-foldPlaceholder";
      element.onclick = onclick;
      return element;
  }
  const foldWidget = /*@__PURE__*/Decoration.replace({ widget: /*@__PURE__*/new class extends WidgetType {
          toDOM(view) { return widgetToDOM(view, null); }
      } });
  class PreparedFoldWidget extends WidgetType {
      constructor(value) {
          super();
          this.value = value;
      }
      eq(other) { return this.value == other.value; }
      toDOM(view) { return widgetToDOM(view, this.value); }
  }
  const foldGutterDefaults = {
      openText: "⌄",
      closedText: "›",
      markerDOM: null,
      domEventHandlers: {},
      foldingChanged: () => false
  };
  class FoldMarker extends GutterMarker {
      constructor(config, open) {
          super();
          this.config = config;
          this.open = open;
      }
      eq(other) { return this.config == other.config && this.open == other.open; }
      toDOM(view) {
          if (this.config.markerDOM)
              return this.config.markerDOM(this.open);
          let span = document.createElement("span");
          span.textContent = this.open ? this.config.openText : this.config.closedText;
          span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
          return span;
      }
  }
  /**
  Create an extension that registers a fold gutter, which shows a
  fold status indicator before foldable lines (which can be clicked
  to fold or unfold the line).
  */
  function foldGutter(config = {}) {
      let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
      let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
      let markers = ViewPlugin.fromClass(class {
          constructor(view) {
              this.from = view.viewport.from;
              this.markers = this.buildMarkers(view);
          }
          update(update) {
              if (update.docChanged || update.viewportChanged ||
                  update.startState.facet(language) != update.state.facet(language) ||
                  update.startState.field(foldState, false) != update.state.field(foldState, false) ||
                  syntaxTree(update.startState) != syntaxTree(update.state) ||
                  fullConfig.foldingChanged(update))
                  this.markers = this.buildMarkers(update.view);
          }
          buildMarkers(view) {
              let builder = new RangeSetBuilder();
              for (let line of view.viewportLineBlocks) {
                  let mark = findFold(view.state, line.from, line.to) ? canUnfold
                      : foldable(view.state, line.from, line.to) ? canFold : null;
                  if (mark)
                      builder.add(line.from, line.from, mark);
              }
              return builder.finish();
          }
      });
      let { domEventHandlers } = fullConfig;
      return [
          markers,
          gutter({
              class: "cm-foldGutter",
              markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty; },
              initialSpacer() {
                  return new FoldMarker(fullConfig, false);
              },
              domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line, event) => {
                      if (domEventHandlers.click && domEventHandlers.click(view, line, event))
                          return true;
                      let folded = findFold(view.state, line.from, line.to);
                      if (folded) {
                          view.dispatch({ effects: unfoldEffect.of(folded) });
                          return true;
                      }
                      let range = foldable(view.state, line.from, line.to);
                      if (range) {
                          view.dispatch({ effects: foldEffect.of(range) });
                          return true;
                      }
                      return false;
                  } })
          }),
          codeFolding()
      ];
  }
  const baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({
      ".cm-foldPlaceholder": {
          backgroundColor: "#eee",
          border: "1px solid #ddd",
          color: "#888",
          borderRadius: ".2em",
          margin: "0 1px",
          padding: "0 1px",
          cursor: "pointer"
      },
      ".cm-foldGutter span": {
          padding: "0 1px",
          cursor: "pointer"
      }
  });

  /**
  A highlight style associates CSS styles with higlighting
  [tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
  */
  class HighlightStyle {
      constructor(
      /**
      The tag styles used to create this highlight style.
      */
      specs, options) {
          this.specs = specs;
          let modSpec;
          function def(spec) {
              let cls = StyleModule.newName();
              (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
              return cls;
          }
          const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
          const scopeOpt = options.scope;
          this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data
              : scopeOpt ? (type) => type == scopeOpt : undefined;
          this.style = tagHighlighter(specs.map(style => ({
              tag: style.tag,
              class: style.class || def(Object.assign({}, style, { tag: null }))
          })), {
              all,
          }).style;
          this.module = modSpec ? new StyleModule(modSpec) : null;
          this.themeType = options.themeType;
      }
      /**
      Create a highlighter style that associates the given styles to
      the given tags. The specs must be objects that hold a style tag
      or array of tags in their `tag` property, and either a single
      `class` property providing a static CSS class (for highlighter
      that rely on external styling), or a
      [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
      set of CSS properties (which define the styling for those tags).
      
      The CSS rules created for a highlighter will be emitted in the
      order of the spec's properties. That means that for elements that
      have multiple tags associated with them, styles defined further
      down in the list will have a higher CSS precedence than styles
      defined earlier.
      */
      static define(specs, options) {
          return new HighlightStyle(specs, options || {});
      }
  }
  const highlighterFacet = /*@__PURE__*/Facet.define();
  const fallbackHighlighter = /*@__PURE__*/Facet.define({
      combine(values) { return values.length ? [values[0]] : null; }
  });
  function getHighlighters(state) {
      let main = state.facet(highlighterFacet);
      return main.length ? main : state.facet(fallbackHighlighter);
  }
  /**
  Wrap a highlighter in an editor extension that uses it to apply
  syntax highlighting to the editor content.

  When multiple (non-fallback) styles are provided, the styling
  applied is the union of the classes they emit.
  */
  function syntaxHighlighting(highlighter, options) {
      let ext = [treeHighlighter], themeType;
      if (highlighter instanceof HighlightStyle) {
          if (highlighter.module)
              ext.push(EditorView.styleModule.of(highlighter.module));
          themeType = highlighter.themeType;
      }
      if (themeType)
          ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {
              return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
          }));
      else
          ext.push(highlighterFacet.of(highlighter));
      return ext;
  }
  class TreeHighlighter {
      constructor(view) {
          this.markCache = Object.create(null);
          this.tree = syntaxTree(view.state);
          this.decorations = this.buildDeco(view, getHighlighters(view.state));
          this.decoratedTo = view.viewport.to;
      }
      update(update) {
          let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
          let styleChange = highlighters != getHighlighters(update.startState);
          let { viewport } = update.view, decoratedToMapped = update.changes.mapPos(this.decoratedTo, 1);
          if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {
              this.decorations = this.decorations.map(update.changes);
              this.decoratedTo = decoratedToMapped;
          }
          else if (tree != this.tree || update.viewportChanged || styleChange) {
              this.tree = tree;
              this.decorations = this.buildDeco(update.view, highlighters);
              this.decoratedTo = viewport.to;
          }
      }
      buildDeco(view, highlighters) {
          if (!highlighters || !this.tree.length)
              return Decoration.none;
          let builder = new RangeSetBuilder();
          for (let { from, to } of view.visibleRanges) {
              highlightTree(this.tree, highlighters, (from, to, style) => {
                  builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
              }, from, to);
          }
          return builder.finish();
      }
  }
  const treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {
      decorations: v => v.decorations
  }));

  const baseTheme = /*@__PURE__*/EditorView.baseTheme({
      "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
      "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
  });
  const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
  const bracketMatchingConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          return combineConfig(configs, {
              afterCursor: true,
              brackets: DefaultBrackets,
              maxScanDistance: DefaultScanDist,
              renderMatch: defaultRenderMatch
          });
      }
  });
  const matchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-matchingBracket" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-nonmatchingBracket" });
  function defaultRenderMatch(match) {
      let decorations = [];
      let mark = match.matched ? matchingMark : nonmatchingMark;
      decorations.push(mark.range(match.start.from, match.start.to));
      if (match.end)
          decorations.push(mark.range(match.end.from, match.end.to));
      return decorations;
  }
  const bracketMatchingState = /*@__PURE__*/StateField.define({
      create() { return Decoration.none; },
      update(deco, tr) {
          if (!tr.docChanged && !tr.selection)
              return deco;
          let decorations = [];
          let config = tr.state.facet(bracketMatchingConfig);
          for (let range of tr.state.selection.ranges) {
              if (!range.empty)
                  continue;
              let match = matchBrackets(tr.state, range.head, -1, config)
                  || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))
                  || (config.afterCursor &&
                      (matchBrackets(tr.state, range.head, 1, config) ||
                          (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));
              if (match)
                  decorations = decorations.concat(config.renderMatch(match, tr.state));
          }
          return Decoration.set(decorations, true);
      },
      provide: f => EditorView.decorations.from(f)
  });
  const bracketMatchingUnique = [
      bracketMatchingState,
      baseTheme
  ];
  /**
  Create an extension that enables bracket matching. Whenever the
  cursor is next to a bracket, that bracket and the one it matches
  are highlighted. Or, when no matching bracket is found, another
  highlighting style is used to indicate this.
  */
  function bracketMatching(config = {}) {
      return [bracketMatchingConfig.of(config), bracketMatchingUnique];
  }
  /**
  When larger syntax nodes, such as HTML tags, are marked as
  opening/closing, it can be a bit messy to treat the whole node as
  a matchable bracket. This node prop allows you to define, for such
  a node, a ‘handle’—the part of the node that is highlighted, and
  that the cursor must be on to activate highlighting in the first
  place.
  */
  const bracketMatchingHandle = /*@__PURE__*/new NodeProp();
  function matchingNodes(node, dir, brackets) {
      let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
      if (byProp)
          return byProp;
      if (node.name.length == 1) {
          let index = brackets.indexOf(node.name);
          if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
              return [brackets[index + dir]];
      }
      return null;
  }
  function findHandle(node) {
      let hasHandle = node.type.prop(bracketMatchingHandle);
      return hasHandle ? hasHandle(node.node) : node;
  }
  /**
  Find the matching bracket for the token at `pos`, scanning
  direction `dir`. Only the `brackets` and `maxScanDistance`
  properties are used from `config`, if given. Returns null if no
  bracket was found at `pos`, or a match result otherwise.
  */
  function matchBrackets(state, pos, dir, config = {}) {
      let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
      let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
      for (let cur = node; cur; cur = cur.parent) {
          let matches = matchingNodes(cur.type, dir, brackets);
          if (matches && cur.from < cur.to) {
              let handle = findHandle(cur);
              if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))
                  return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);
          }
      }
      return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
  }
  function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {
      let parent = token.parent, firstToken = { from: handle.from, to: handle.to };
      let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
      if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
          do {
              if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
                  if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
                      let endHandle = findHandle(cursor);
                      return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : undefined, matched: true };
                  }
                  else if (matchingNodes(cursor.type, dir, brackets)) {
                      depth++;
                  }
                  else if (matchingNodes(cursor.type, -dir, brackets)) {
                      if (depth == 0) {
                          let endHandle = findHandle(cursor);
                          return {
                              start: firstToken,
                              end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : undefined,
                              matched: false
                          };
                      }
                      depth--;
                  }
              }
          } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
      return { start: firstToken, matched: false };
  }
  function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
      let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
      let bracket = brackets.indexOf(startCh);
      if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
          return null;
      let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
      let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
      for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
          let text = iter.value;
          if (dir < 0)
              distance += text.length;
          let basePos = pos + distance * dir;
          for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
              let found = brackets.indexOf(text[pos]);
              if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType)
                  continue;
              if ((found % 2 == 0) == (dir > 0)) {
                  depth++;
              }
              else if (depth == 1) { // Closing
                  return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
              }
              else {
                  depth--;
              }
          }
          if (dir > 0)
              distance += text.length;
      }
      return iter.done ? { start: startToken, matched: false } : null;
  }
  const noTokens = /*@__PURE__*/Object.create(null);
  const typeArray = [NodeType.none];
  const warned = [];
  // Cache of node types by name and tags
  const byTag = /*@__PURE__*/Object.create(null);
  const defaultTable = /*@__PURE__*/Object.create(null);
  for (let [legacyName, name] of [
      ["variable", "variableName"],
      ["variable-2", "variableName.special"],
      ["string-2", "string.special"],
      ["def", "variableName.definition"],
      ["tag", "tagName"],
      ["attribute", "attributeName"],
      ["type", "typeName"],
      ["builtin", "variableName.standard"],
      ["qualifier", "modifier"],
      ["error", "invalid"],
      ["header", "heading"],
      ["property", "propertyName"]
  ])
      defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);
  function warnForPart(part, msg) {
      if (warned.indexOf(part) > -1)
          return;
      warned.push(part);
      console.warn(msg);
  }
  function createTokenType(extra, tagStr) {
      let tags$1 = [];
      for (let name of tagStr.split(" ")) {
          let found = [];
          for (let part of name.split(".")) {
              let value = (extra[part] || tags[part]);
              if (!value) {
                  warnForPart(part, `Unknown highlighting tag ${part}`);
              }
              else if (typeof value == "function") {
                  if (!found.length)
                      warnForPart(part, `Modifier ${part} used at start of tag`);
                  else
                      found = found.map(value);
              }
              else {
                  if (found.length)
                      warnForPart(part, `Tag ${part} used as modifier`);
                  else
                      found = Array.isArray(value) ? value : [value];
              }
          }
          for (let tag of found)
              tags$1.push(tag);
      }
      if (!tags$1.length)
          return 0;
      let name = tagStr.replace(/ /g, "_"), key = name + " " + tags$1.map(t => t.id);
      let known = byTag[key];
      if (known)
          return known.id;
      let type = byTag[key] = NodeType.define({
          id: typeArray.length,
          name,
          props: [styleTags({ [name]: tags$1 })]
      });
      typeArray.push(type);
      return type.id;
  }
  ({
      rtl: /*@__PURE__*/Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "rtl" }, bidiIsolate: Direction.RTL }),
      ltr: /*@__PURE__*/Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "ltr" }, bidiIsolate: Direction.LTR })});

  var global$1 = (typeof global !== "undefined" ? global :
    typeof self !== "undefined" ? self :
    typeof window !== "undefined" ? window : {});

  var env = {};
  var versions = {};

  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
  var performance$1 = global$1.performance || {};
  performance$1.now        ||
    performance$1.mozNow     ||
    performance$1.msNow      ||
    performance$1.oNow       ||
    performance$1.webkitNow  ||
    function(){ return (new Date()).getTime() };

  var browser$1 = {
    env: env,
    versions: versions};

  /**
  A parse stack. These are used internally by the parser to track
  parsing progress. They also provide some properties and methods
  that external code such as a tokenizer can use to get information
  about the parse state.
  */
  class Stack {
      /**
      @internal
      */
      constructor(
      /**
      The parse that this stack is part of @internal
      */
      p, 
      /**
      Holds state, input pos, buffer index triplets for all but the
      top state @internal
      */
      stack, 
      /**
      The current parse state @internal
      */
      state, 
      // The position at which the next reduce should take place. This
      // can be less than `this.pos` when skipped expressions have been
      // added to the stack (which should be moved outside of the next
      // reduction)
      /**
      @internal
      */
      reducePos, 
      /**
      The input position up to which this stack has parsed.
      */
      pos, 
      /**
      The dynamic score of the stack, including dynamic precedence
      and error-recovery penalties
      @internal
      */
      score, 
      // The output buffer. Holds (type, start, end, size) quads
      // representing nodes created by the parser, where `size` is
      // amount of buffer array entries covered by this node.
      /**
      @internal
      */
      buffer, 
      // The base offset of the buffer. When stacks are split, the split
      // instance shared the buffer history with its parent up to
      // `bufferBase`, which is the absolute offset (including the
      // offset of previous splits) into the buffer at which this stack
      // starts writing.
      /**
      @internal
      */
      bufferBase, 
      /**
      @internal
      */
      curContext, 
      /**
      @internal
      */
      lookAhead = 0, 
      // A parent stack from which this was split off, if any. This is
      // set up so that it always points to a stack that has some
      // additional buffer content, never to a stack with an equal
      // `bufferBase`.
      /**
      @internal
      */
      parent) {
          this.p = p;
          this.stack = stack;
          this.state = state;
          this.reducePos = reducePos;
          this.pos = pos;
          this.score = score;
          this.buffer = buffer;
          this.bufferBase = bufferBase;
          this.curContext = curContext;
          this.lookAhead = lookAhead;
          this.parent = parent;
      }
      /**
      @internal
      */
      toString() {
          return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
      }
      // Start an empty stack
      /**
      @internal
      */
      static start(p, state, pos = 0) {
          let cx = p.parser.context;
          return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
      }
      /**
      The stack's current [context](#lr.ContextTracker) value, if
      any. Its type will depend on the context tracker's type
      parameter, or it will be `null` if there is no context
      tracker.
      */
      get context() { return this.curContext ? this.curContext.context : null; }
      // Push a state onto the stack, tracking its start position as well
      // as the buffer base at that point.
      /**
      @internal
      */
      pushState(state, start) {
          this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
          this.state = state;
      }
      // Apply a reduce action
      /**
      @internal
      */
      reduce(action) {
          var _a;
          let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;
          let { parser } = this.p;
          let lookaheadRecord = this.reducePos < this.pos - 25 /* Lookahead.Margin */;
          if (lookaheadRecord)
              this.setLookAhead(this.pos);
          let dPrec = parser.dynamicPrecedence(type);
          if (dPrec)
              this.score += dPrec;
          if (depth == 0) {
              this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
              // Zero-depth reductions are a special case—they add stuff to
              // the stack without popping anything off.
              if (type < parser.minRepeatTerm)
                  this.storeNode(type, this.reducePos, this.reducePos, lookaheadRecord ? 8 : 4, true);
              this.reduceContext(type, this.reducePos);
              return;
          }
          // Find the base index into `this.stack`, content after which will
          // be dropped. Note that with `StayFlag` reductions we need to
          // consume two extra frames (the dummy parent node for the skipped
          // expression and the state that we'll be staying in, which should
          // be moved to `this.state`).
          let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);
          let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;
          // This is a kludge to try and detect overly deep left-associative
          // trees, which will not increase the parse stack depth and thus
          // won't be caught by the regular stack-depth limit check.
          if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {
              if (start == this.p.lastBigReductionStart) {
                  this.p.bigReductionCount++;
                  this.p.lastBigReductionSize = size;
              }
              else if (this.p.lastBigReductionSize < size) {
                  this.p.bigReductionCount = 1;
                  this.p.lastBigReductionStart = start;
                  this.p.lastBigReductionSize = size;
              }
          }
          let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;
          // Store normal terms or `R -> R R` repeat reductions
          if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {
              let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;
              this.storeNode(type, start, pos, count + 4, true);
          }
          if (action & 262144 /* Action.StayFlag */) {
              this.state = this.stack[base];
          }
          else {
              let baseStateID = this.stack[base - 3];
              this.state = parser.getGoto(baseStateID, type, true);
          }
          while (this.stack.length > base)
              this.stack.pop();
          this.reduceContext(type, start);
      }
      // Shift a value into the buffer
      /**
      @internal
      */
      storeNode(term, start, end, size = 4, mustSink = false) {
          if (term == 0 /* Term.Err */ &&
              (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
              // Try to omit/merge adjacent error nodes
              let cur = this, top = this.buffer.length;
              if (top == 0 && cur.parent) {
                  top = cur.bufferBase - cur.parent.bufferBase;
                  cur = cur.parent;
              }
              if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {
                  if (start == end)
                      return;
                  if (cur.buffer[top - 2] >= start) {
                      cur.buffer[top - 2] = end;
                      return;
                  }
              }
          }
          if (!mustSink || this.pos == end) { // Simple case, just append
              this.buffer.push(term, start, end, size);
          }
          else { // There may be skipped nodes that have to be moved forward
              let index = this.buffer.length;
              if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */) {
                  let mustMove = false;
                  for (let scan = index; scan > 0 && this.buffer[scan - 2] > end; scan -= 4) {
                      if (this.buffer[scan - 1] >= 0) {
                          mustMove = true;
                          break;
                      }
                  }
                  if (mustMove)
                      while (index > 0 && this.buffer[index - 2] > end) {
                          // Move this record forward
                          this.buffer[index] = this.buffer[index - 4];
                          this.buffer[index + 1] = this.buffer[index - 3];
                          this.buffer[index + 2] = this.buffer[index - 2];
                          this.buffer[index + 3] = this.buffer[index - 1];
                          index -= 4;
                          if (size > 4)
                              size -= 4;
                      }
              }
              this.buffer[index] = term;
              this.buffer[index + 1] = start;
              this.buffer[index + 2] = end;
              this.buffer[index + 3] = size;
          }
      }
      // Apply a shift action
      /**
      @internal
      */
      shift(action, type, start, end) {
          if (action & 131072 /* Action.GotoFlag */) {
              this.pushState(action & 65535 /* Action.ValueMask */, this.pos);
          }
          else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift
              let nextState = action, { parser } = this.p;
              if (end > this.pos || type <= parser.maxNode) {
                  this.pos = end;
                  if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))
                      this.reducePos = end;
              }
              this.pushState(nextState, start);
              this.shiftContext(type, start);
              if (type <= parser.maxNode)
                  this.buffer.push(type, start, end, 4);
          }
          else { // Shift-and-stay, which means this is a skipped token
              this.pos = end;
              this.shiftContext(type, start);
              if (type <= this.p.parser.maxNode)
                  this.buffer.push(type, start, end, 4);
          }
      }
      // Apply an action
      /**
      @internal
      */
      apply(action, next, nextStart, nextEnd) {
          if (action & 65536 /* Action.ReduceFlag */)
              this.reduce(action);
          else
              this.shift(action, next, nextStart, nextEnd);
      }
      // Add a prebuilt (reused) node into the buffer.
      /**
      @internal
      */
      useNode(value, next) {
          let index = this.p.reused.length - 1;
          if (index < 0 || this.p.reused[index] != value) {
              this.p.reused.push(value);
              index++;
          }
          let start = this.pos;
          this.reducePos = this.pos = start + value.length;
          this.pushState(next, start);
          this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
          if (this.curContext)
              this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
      }
      // Split the stack. Due to the buffer sharing and the fact
      // that `this.stack` tends to stay quite shallow, this isn't very
      // expensive.
      /**
      @internal
      */
      split() {
          let parent = this;
          let off = parent.buffer.length;
          // Because the top of the buffer (after this.pos) may be mutated
          // to reorder reductions and skipped tokens, and shared buffers
          // should be immutable, this copies any outstanding skipped tokens
          // to the new buffer, and puts the base pointer before them.
          while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
              off -= 4;
          let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
          // Make sure parent points to an actual parent with content, if there is such a parent.
          while (parent && base == parent.bufferBase)
              parent = parent.parent;
          return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
      }
      // Try to recover from an error by 'deleting' (ignoring) one token.
      /**
      @internal
      */
      recoverByDelete(next, nextEnd) {
          let isNode = next <= this.p.parser.maxNode;
          if (isNode)
              this.storeNode(next, this.pos, nextEnd, 4);
          this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);
          this.pos = this.reducePos = nextEnd;
          this.score -= 190 /* Recover.Delete */;
      }
      /**
      Check if the given term would be able to be shifted (optionally
      after some reductions) on this stack. This can be useful for
      external tokenizers that want to make sure they only provide a
      given token when it applies.
      */
      canShift(term) {
          for (let sim = new SimulatedStack(this);;) {
              let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
              if (action == 0)
                  return false;
              if ((action & 65536 /* Action.ReduceFlag */) == 0)
                  return true;
              sim.reduce(action);
          }
      }
      // Apply up to Recover.MaxNext recovery actions that conceptually
      // inserts some missing token or rule.
      /**
      @internal
      */
      recoverByInsert(next) {
          if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)
              return [];
          let nextStates = this.p.parser.nextStates(this.state);
          if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {
              let best = [];
              for (let i = 0, s; i < nextStates.length; i += 2) {
                  if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
                      best.push(nextStates[i], s);
              }
              if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)
                  for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {
                      let s = nextStates[i + 1];
                      if (!best.some((v, i) => (i & 1) && v == s))
                          best.push(nextStates[i], s);
                  }
              nextStates = best;
          }
          let result = [];
          for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {
              let s = nextStates[i + 1];
              if (s == this.state)
                  continue;
              let stack = this.split();
              stack.pushState(s, this.pos);
              stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);
              stack.shiftContext(nextStates[i], this.pos);
              stack.reducePos = this.pos;
              stack.score -= 200 /* Recover.Insert */;
              result.push(stack);
          }
          return result;
      }
      // Force a reduce, if possible. Return false if that can't
      // be done.
      /**
      @internal
      */
      forceReduce() {
          let { parser } = this.p;
          let reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);
          if ((reduce & 65536 /* Action.ReduceFlag */) == 0)
              return false;
          if (!parser.validAction(this.state, reduce)) {
              let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;
              let target = this.stack.length - depth * 3;
              if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {
                  let backup = this.findForcedReduction();
                  if (backup == null)
                      return false;
                  reduce = backup;
              }
              this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
              this.score -= 100 /* Recover.Reduce */;
          }
          this.reducePos = this.pos;
          this.reduce(reduce);
          return true;
      }
      /**
      Try to scan through the automaton to find some kind of reduction
      that can be applied. Used when the regular ForcedReduce field
      isn't a valid action. @internal
      */
      findForcedReduction() {
          let { parser } = this.p, seen = [];
          let explore = (state, depth) => {
              if (seen.includes(state))
                  return;
              seen.push(state);
              return parser.allActions(state, (action) => {
                  if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;
                  else if (action & 65536 /* Action.ReduceFlag */) {
                      let rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;
                      if (rDepth > 1) {
                          let term = action & 65535 /* Action.ValueMask */, target = this.stack.length - rDepth * 3;
                          if (target >= 0 && parser.getGoto(this.stack[target], term, false) >= 0)
                              return (rDepth << 19 /* Action.ReduceDepthShift */) | 65536 /* Action.ReduceFlag */ | term;
                      }
                  }
                  else {
                      let found = explore(action, depth + 1);
                      if (found != null)
                          return found;
                  }
              });
          };
          return explore(this.state, 0);
      }
      /**
      @internal
      */
      forceAll() {
          while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {
              if (!this.forceReduce()) {
                  this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
                  break;
              }
          }
          return this;
      }
      /**
      Check whether this state has no further actions (assumed to be a direct descendant of the
      top state, since any other states must be able to continue
      somehow). @internal
      */
      get deadEnd() {
          if (this.stack.length != 3)
              return false;
          let { parser } = this.p;
          return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&
              !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);
      }
      /**
      Restart the stack (put it back in its start state). Only safe
      when this.stack.length == 3 (state is directly below the top
      state). @internal
      */
      restart() {
          this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
          this.state = this.stack[0];
          this.stack.length = 0;
      }
      /**
      @internal
      */
      sameState(other) {
          if (this.state != other.state || this.stack.length != other.stack.length)
              return false;
          for (let i = 0; i < this.stack.length; i += 3)
              if (this.stack[i] != other.stack[i])
                  return false;
          return true;
      }
      /**
      Get the parser used by this stack.
      */
      get parser() { return this.p.parser; }
      /**
      Test whether a given dialect (by numeric ID, as exported from
      the terms file) is enabled.
      */
      dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }
      shiftContext(term, start) {
          if (this.curContext)
              this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
      }
      reduceContext(term, start) {
          if (this.curContext)
              this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
      }
      /**
      @internal
      */
      emitContext() {
          let last = this.buffer.length - 1;
          if (last < 0 || this.buffer[last] != -3)
              this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
      }
      /**
      @internal
      */
      emitLookAhead() {
          let last = this.buffer.length - 1;
          if (last < 0 || this.buffer[last] != -4)
              this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
      }
      updateContext(context) {
          if (context != this.curContext.context) {
              let newCx = new StackContext(this.curContext.tracker, context);
              if (newCx.hash != this.curContext.hash)
                  this.emitContext();
              this.curContext = newCx;
          }
      }
      /**
      @internal
      */
      setLookAhead(lookAhead) {
          if (lookAhead > this.lookAhead) {
              this.emitLookAhead();
              this.lookAhead = lookAhead;
          }
      }
      /**
      @internal
      */
      close() {
          if (this.curContext && this.curContext.tracker.strict)
              this.emitContext();
          if (this.lookAhead > 0)
              this.emitLookAhead();
      }
  }
  class StackContext {
      constructor(tracker, context) {
          this.tracker = tracker;
          this.context = context;
          this.hash = tracker.strict ? tracker.hash(context) : 0;
      }
  }
  // Used to cheaply run some reductions to scan ahead without mutating
  // an entire stack
  class SimulatedStack {
      constructor(start) {
          this.start = start;
          this.state = start.state;
          this.stack = start.stack;
          this.base = this.stack.length;
      }
      reduce(action) {
          let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;
          if (depth == 0) {
              if (this.stack == this.start.stack)
                  this.stack = this.stack.slice();
              this.stack.push(this.state, 0, 0);
              this.base += 3;
          }
          else {
              this.base -= (depth - 1) * 3;
          }
          let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
          this.state = goto;
      }
  }
  // This is given to `Tree.build` to build a buffer, and encapsulates
  // the parent-stack-walking necessary to read the nodes.
  class StackBufferCursor {
      constructor(stack, pos, index) {
          this.stack = stack;
          this.pos = pos;
          this.index = index;
          this.buffer = stack.buffer;
          if (this.index == 0)
              this.maybeNext();
      }
      static create(stack, pos = stack.bufferBase + stack.buffer.length) {
          return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
      }
      maybeNext() {
          let next = this.stack.parent;
          if (next != null) {
              this.index = this.stack.bufferBase - next.bufferBase;
              this.stack = next;
              this.buffer = next.buffer;
          }
      }
      get id() { return this.buffer[this.index - 4]; }
      get start() { return this.buffer[this.index - 3]; }
      get end() { return this.buffer[this.index - 2]; }
      get size() { return this.buffer[this.index - 1]; }
      next() {
          this.index -= 4;
          this.pos -= 4;
          if (this.index == 0)
              this.maybeNext();
      }
      fork() {
          return new StackBufferCursor(this.stack, this.pos, this.index);
      }
  }

  // See lezer-generator/src/encode.ts for comments about the encoding
  // used here
  function decodeArray(input, Type = Uint16Array) {
      if (typeof input != "string")
          return input;
      let array = null;
      for (let pos = 0, out = 0; pos < input.length;) {
          let value = 0;
          for (;;) {
              let next = input.charCodeAt(pos++), stop = false;
              if (next == 126 /* Encode.BigValCode */) {
                  value = 65535 /* Encode.BigVal */;
                  break;
              }
              if (next >= 92 /* Encode.Gap2 */)
                  next--;
              if (next >= 34 /* Encode.Gap1 */)
                  next--;
              let digit = next - 32 /* Encode.Start */;
              if (digit >= 46 /* Encode.Base */) {
                  digit -= 46 /* Encode.Base */;
                  stop = true;
              }
              value += digit;
              if (stop)
                  break;
              value *= 46 /* Encode.Base */;
          }
          if (array)
              array[out++] = value;
          else
              array = new Type(value);
      }
      return array;
  }

  class CachedToken {
      constructor() {
          this.start = -1;
          this.value = -1;
          this.end = -1;
          this.extended = -1;
          this.lookAhead = 0;
          this.mask = 0;
          this.context = 0;
      }
  }
  const nullToken = new CachedToken;
  /**
  [Tokenizers](#lr.ExternalTokenizer) interact with the input
  through this interface. It presents the input as a stream of
  characters, tracking lookahead and hiding the complexity of
  [ranges](#common.Parser.parse^ranges) from tokenizer code.
  */
  class InputStream {
      /**
      @internal
      */
      constructor(
      /**
      @internal
      */
      input, 
      /**
      @internal
      */
      ranges) {
          this.input = input;
          this.ranges = ranges;
          /**
          @internal
          */
          this.chunk = "";
          /**
          @internal
          */
          this.chunkOff = 0;
          /**
          Backup chunk
          */
          this.chunk2 = "";
          this.chunk2Pos = 0;
          /**
          The character code of the next code unit in the input, or -1
          when the stream is at the end of the input.
          */
          this.next = -1;
          /**
          @internal
          */
          this.token = nullToken;
          this.rangeIndex = 0;
          this.pos = this.chunkPos = ranges[0].from;
          this.range = ranges[0];
          this.end = ranges[ranges.length - 1].to;
          this.readNext();
      }
      /**
      @internal
      */
      resolveOffset(offset, assoc) {
          let range = this.range, index = this.rangeIndex;
          let pos = this.pos + offset;
          while (pos < range.from) {
              if (!index)
                  return null;
              let next = this.ranges[--index];
              pos -= range.from - next.to;
              range = next;
          }
          while (assoc < 0 ? pos > range.to : pos >= range.to) {
              if (index == this.ranges.length - 1)
                  return null;
              let next = this.ranges[++index];
              pos += next.from - range.to;
              range = next;
          }
          return pos;
      }
      /**
      @internal
      */
      clipPos(pos) {
          if (pos >= this.range.from && pos < this.range.to)
              return pos;
          for (let range of this.ranges)
              if (range.to > pos)
                  return Math.max(pos, range.from);
          return this.end;
      }
      /**
      Look at a code unit near the stream position. `.peek(0)` equals
      `.next`, `.peek(-1)` gives you the previous character, and so
      on.
      
      Note that looking around during tokenizing creates dependencies
      on potentially far-away content, which may reduce the
      effectiveness incremental parsing—when looking forward—or even
      cause invalid reparses when looking backward more than 25 code
      units, since the library does not track lookbehind.
      */
      peek(offset) {
          let idx = this.chunkOff + offset, pos, result;
          if (idx >= 0 && idx < this.chunk.length) {
              pos = this.pos + offset;
              result = this.chunk.charCodeAt(idx);
          }
          else {
              let resolved = this.resolveOffset(offset, 1);
              if (resolved == null)
                  return -1;
              pos = resolved;
              if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
                  result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
              }
              else {
                  let i = this.rangeIndex, range = this.range;
                  while (range.to <= pos)
                      range = this.ranges[++i];
                  this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
                  if (pos + this.chunk2.length > range.to)
                      this.chunk2 = this.chunk2.slice(0, range.to - pos);
                  result = this.chunk2.charCodeAt(0);
              }
          }
          if (pos >= this.token.lookAhead)
              this.token.lookAhead = pos + 1;
          return result;
      }
      /**
      Accept a token. By default, the end of the token is set to the
      current stream position, but you can pass an offset (relative to
      the stream position) to change that.
      */
      acceptToken(token, endOffset = 0) {
          let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
          if (end == null || end < this.token.start)
              throw new RangeError("Token end out of bounds");
          this.token.value = token;
          this.token.end = end;
      }
      /**
      Accept a token ending at a specific given position.
      */
      acceptTokenTo(token, endPos) {
          this.token.value = token;
          this.token.end = endPos;
      }
      getChunk() {
          if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
              let { chunk, chunkPos } = this;
              this.chunk = this.chunk2;
              this.chunkPos = this.chunk2Pos;
              this.chunk2 = chunk;
              this.chunk2Pos = chunkPos;
              this.chunkOff = this.pos - this.chunkPos;
          }
          else {
              this.chunk2 = this.chunk;
              this.chunk2Pos = this.chunkPos;
              let nextChunk = this.input.chunk(this.pos);
              let end = this.pos + nextChunk.length;
              this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
              this.chunkPos = this.pos;
              this.chunkOff = 0;
          }
      }
      readNext() {
          if (this.chunkOff >= this.chunk.length) {
              this.getChunk();
              if (this.chunkOff == this.chunk.length)
                  return this.next = -1;
          }
          return this.next = this.chunk.charCodeAt(this.chunkOff);
      }
      /**
      Move the stream forward N (defaults to 1) code units. Returns
      the new value of [`next`](#lr.InputStream.next).
      */
      advance(n = 1) {
          this.chunkOff += n;
          while (this.pos + n >= this.range.to) {
              if (this.rangeIndex == this.ranges.length - 1)
                  return this.setDone();
              n -= this.range.to - this.pos;
              this.range = this.ranges[++this.rangeIndex];
              this.pos = this.range.from;
          }
          this.pos += n;
          if (this.pos >= this.token.lookAhead)
              this.token.lookAhead = this.pos + 1;
          return this.readNext();
      }
      setDone() {
          this.pos = this.chunkPos = this.end;
          this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
          this.chunk = "";
          return this.next = -1;
      }
      /**
      @internal
      */
      reset(pos, token) {
          if (token) {
              this.token = token;
              token.start = pos;
              token.lookAhead = pos + 1;
              token.value = token.extended = -1;
          }
          else {
              this.token = nullToken;
          }
          if (this.pos != pos) {
              this.pos = pos;
              if (pos == this.end) {
                  this.setDone();
                  return this;
              }
              while (pos < this.range.from)
                  this.range = this.ranges[--this.rangeIndex];
              while (pos >= this.range.to)
                  this.range = this.ranges[++this.rangeIndex];
              if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
                  this.chunkOff = pos - this.chunkPos;
              }
              else {
                  this.chunk = "";
                  this.chunkOff = 0;
              }
              this.readNext();
          }
          return this;
      }
      /**
      @internal
      */
      read(from, to) {
          if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
              return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
          if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
              return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
          if (from >= this.range.from && to <= this.range.to)
              return this.input.read(from, to);
          let result = "";
          for (let r of this.ranges) {
              if (r.from >= to)
                  break;
              if (r.to > from)
                  result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
          }
          return result;
      }
  }
  /**
  @internal
  */
  class TokenGroup {
      constructor(data, id) {
          this.data = data;
          this.id = id;
      }
      token(input, stack) {
          let { parser } = stack.p;
          readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);
      }
  }
  TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
  TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
  // Tokenizer data is stored a big uint16 array containing, for each
  // state:
  //
  //  - A group bitmask, indicating what token groups are reachable from
  //    this state, so that paths that can only lead to tokens not in
  //    any of the current groups can be cut off early.
  //
  //  - The position of the end of the state's sequence of accepting
  //    tokens
  //
  //  - The number of outgoing edges for the state
  //
  //  - The accepting tokens, as (token id, group mask) pairs
  //
  //  - The outgoing edges, as (start character, end character, state
  //    index) triples, with end character being exclusive
  //
  // This function interprets that data, running through a stream as
  // long as new states with the a matching group mask can be reached,
  // and updating `input.token` when it matches a token.
  function readToken(data, input, stack, group, precTable, precOffset) {
      let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;
      scan: for (;;) {
          if ((groupMask & data[state]) == 0)
              break;
          let accEnd = data[state + 1];
          // Check whether this state can lead to a token in the current group
          // Accept tokens in this state, possibly overwriting
          // lower-precedence / shorter tokens
          for (let i = state + 3; i < accEnd; i += 2)
              if ((data[i + 1] & groupMask) > 0) {
                  let term = data[i];
                  if (dialect.allows(term) &&
                      (input.token.value == -1 || input.token.value == term ||
                          overrides(term, input.token.value, precTable, precOffset))) {
                      input.acceptToken(term);
                      break;
                  }
              }
          let next = input.next, low = 0, high = data[state + 2];
          // Special case for EOF
          if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {
              state = data[accEnd + high * 3 - 1];
              continue scan;
          }
          // Do a binary search on the state's edges
          for (; low < high;) {
              let mid = (low + high) >> 1;
              let index = accEnd + mid + (mid << 1);
              let from = data[index], to = data[index + 1] || 0x10000;
              if (next < from)
                  high = mid;
              else if (next >= to)
                  low = mid + 1;
              else {
                  state = data[index + 2];
                  input.advance();
                  continue scan;
              }
          }
          break;
      }
  }
  function findOffset(data, start, term) {
      for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)
          if (next == term)
              return i - start;
      return -1;
  }
  function overrides(token, prev, tableData, tableOffset) {
      let iPrev = findOffset(tableData, tableOffset, prev);
      return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
  }

  // Environment variable used to control console output
  const verbose = typeof browser$1 != "undefined" && browser$1.env && /\bparse\b/.test(browser$1.env.LOG);
  let stackIDs = null;
  function cutAt(tree, pos, side) {
      let cursor = tree.cursor(IterMode.IncludeAnonymous);
      cursor.moveTo(pos);
      for (;;) {
          if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
              for (;;) {
                  if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
                      return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Lookahead.Margin */))
                          : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Lookahead.Margin */));
                  if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
                      break;
                  if (!cursor.parent())
                      return side < 0 ? 0 : tree.length;
              }
      }
  }
  let FragmentCursor$1 = class FragmentCursor {
      constructor(fragments, nodeSet) {
          this.fragments = fragments;
          this.nodeSet = nodeSet;
          this.i = 0;
          this.fragment = null;
          this.safeFrom = -1;
          this.safeTo = -1;
          this.trees = [];
          this.start = [];
          this.index = [];
          this.nextFragment();
      }
      nextFragment() {
          let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
          if (fr) {
              this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
              this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
              while (this.trees.length) {
                  this.trees.pop();
                  this.start.pop();
                  this.index.pop();
              }
              this.trees.push(fr.tree);
              this.start.push(-fr.offset);
              this.index.push(0);
              this.nextStart = this.safeFrom;
          }
          else {
              this.nextStart = 1e9;
          }
      }
      // `pos` must be >= any previously given `pos` for this cursor
      nodeAt(pos) {
          if (pos < this.nextStart)
              return null;
          while (this.fragment && this.safeTo <= pos)
              this.nextFragment();
          if (!this.fragment)
              return null;
          for (;;) {
              let last = this.trees.length - 1;
              if (last < 0) { // End of tree
                  this.nextFragment();
                  return null;
              }
              let top = this.trees[last], index = this.index[last];
              if (index == top.children.length) {
                  this.trees.pop();
                  this.start.pop();
                  this.index.pop();
                  continue;
              }
              let next = top.children[index];
              let start = this.start[last] + top.positions[index];
              if (start > pos) {
                  this.nextStart = start;
                  return null;
              }
              if (next instanceof Tree) {
                  if (start == pos) {
                      if (start < this.safeFrom)
                          return null;
                      let end = start + next.length;
                      if (end <= this.safeTo) {
                          let lookAhead = next.prop(NodeProp.lookAhead);
                          if (!lookAhead || end + lookAhead < this.fragment.to)
                              return next;
                      }
                  }
                  this.index[last]++;
                  if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node
                      this.trees.push(next);
                      this.start.push(start);
                      this.index.push(0);
                  }
              }
              else {
                  this.index[last]++;
                  this.nextStart = start + next.length;
              }
          }
      }
  };
  class TokenCache {
      constructor(parser, stream) {
          this.stream = stream;
          this.tokens = [];
          this.mainToken = null;
          this.actions = [];
          this.tokens = parser.tokenizers.map(_ => new CachedToken);
      }
      getActions(stack) {
          let actionIndex = 0;
          let main = null;
          let { parser } = stack.p, { tokenizers } = parser;
          let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);
          let context = stack.curContext ? stack.curContext.hash : 0;
          let lookAhead = 0;
          for (let i = 0; i < tokenizers.length; i++) {
              if (((1 << i) & mask) == 0)
                  continue;
              let tokenizer = tokenizers[i], token = this.tokens[i];
              if (main && !tokenizer.fallback)
                  continue;
              if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
                  this.updateCachedToken(token, tokenizer, stack);
                  token.mask = mask;
                  token.context = context;
              }
              if (token.lookAhead > token.end + 25 /* Lookahead.Margin */)
                  lookAhead = Math.max(token.lookAhead, lookAhead);
              if (token.value != 0 /* Term.Err */) {
                  let startIndex = actionIndex;
                  if (token.extended > -1)
                      actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                  actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
                  if (!tokenizer.extend) {
                      main = token;
                      if (actionIndex > startIndex)
                          break;
                  }
              }
          }
          while (this.actions.length > actionIndex)
              this.actions.pop();
          if (lookAhead)
              stack.setLookAhead(lookAhead);
          if (!main && stack.pos == this.stream.end) {
              main = new CachedToken;
              main.value = stack.p.parser.eofTerm;
              main.start = main.end = stack.pos;
              actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
          }
          this.mainToken = main;
          return this.actions;
      }
      getMainToken(stack) {
          if (this.mainToken)
              return this.mainToken;
          let main = new CachedToken, { pos, p } = stack;
          main.start = pos;
          main.end = Math.min(pos + 1, p.stream.end);
          main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;
          return main;
      }
      updateCachedToken(token, tokenizer, stack) {
          let start = this.stream.clipPos(stack.pos);
          tokenizer.token(this.stream.reset(start, token), stack);
          if (token.value > -1) {
              let { parser } = stack.p;
              for (let i = 0; i < parser.specialized.length; i++)
                  if (parser.specialized[i] == token.value) {
                      let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
                      if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                          if ((result & 1) == 0 /* Specialize.Specialize */)
                              token.value = result >> 1;
                          else
                              token.extended = result >> 1;
                          break;
                      }
                  }
          }
          else {
              token.value = 0 /* Term.Err */;
              token.end = this.stream.clipPos(start + 1);
          }
      }
      putAction(action, token, end, index) {
          // Don't add duplicate actions
          for (let i = 0; i < index; i += 3)
              if (this.actions[i] == action)
                  return index;
          this.actions[index++] = action;
          this.actions[index++] = token;
          this.actions[index++] = end;
          return index;
      }
      addActions(stack, token, end, index) {
          let { state } = stack, { parser } = stack.p, { data } = parser;
          for (let set = 0; set < 2; set++) {
              for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {
                  if (data[i] == 65535 /* Seq.End */) {
                      if (data[i + 1] == 1 /* Seq.Next */) {
                          i = pair(data, i + 2);
                      }
                      else {
                          if (index == 0 && data[i + 1] == 2 /* Seq.Other */)
                              index = this.putAction(pair(data, i + 2), token, end, index);
                          break;
                      }
                  }
                  if (data[i] == token)
                      index = this.putAction(pair(data, i + 1), token, end, index);
              }
          }
          return index;
      }
  }
  class Parse {
      constructor(parser, input, fragments, ranges) {
          this.parser = parser;
          this.input = input;
          this.ranges = ranges;
          this.recovering = 0;
          this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧
          this.minStackPos = 0;
          this.reused = [];
          this.stoppedAt = null;
          this.lastBigReductionStart = -1;
          this.lastBigReductionSize = 0;
          this.bigReductionCount = 0;
          this.stream = new InputStream(input, ranges);
          this.tokens = new TokenCache(parser, this.stream);
          this.topTerm = parser.top[1];
          let { from } = ranges[0];
          this.stacks = [Stack.start(this, parser.top[0], from)];
          this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4
              ? new FragmentCursor$1(fragments, parser.nodeSet) : null;
      }
      get parsedPos() {
          return this.minStackPos;
      }
      // Move the parser forward. This will process all parse stacks at
      // `this.pos` and try to advance them to a further position. If no
      // stack for such a position is found, it'll start error-recovery.
      //
      // When the parse is finished, this will return a syntax tree. When
      // not, it returns `null`.
      advance() {
          let stacks = this.stacks, pos = this.minStackPos;
          // This will hold stacks beyond `pos`.
          let newStacks = this.stacks = [];
          let stopped, stoppedTokens;
          // If a large amount of reductions happened with the same start
          // position, force the stack out of that production in order to
          // avoid creating a tree too deep to recurse through.
          // (This is an ugly kludge, because unfortunately there is no
          // straightforward, cheap way to check for this happening, due to
          // the history of reductions only being available in an
          // expensive-to-access format in the stack buffers.)
          if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {
              let [s] = stacks;
              while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }
              this.bigReductionCount = this.lastBigReductionSize = 0;
          }
          // Keep advancing any stacks at `pos` until they either move
          // forward or can't be advanced. Gather stacks that can't be
          // advanced further in `stopped`.
          for (let i = 0; i < stacks.length; i++) {
              let stack = stacks[i];
              for (;;) {
                  this.tokens.mainToken = null;
                  if (stack.pos > pos) {
                      newStacks.push(stack);
                  }
                  else if (this.advanceStack(stack, newStacks, stacks)) {
                      continue;
                  }
                  else {
                      if (!stopped) {
                          stopped = [];
                          stoppedTokens = [];
                      }
                      stopped.push(stack);
                      let tok = this.tokens.getMainToken(stack);
                      stoppedTokens.push(tok.value, tok.end);
                  }
                  break;
              }
          }
          if (!newStacks.length) {
              let finished = stopped && findFinished(stopped);
              if (finished) {
                  if (verbose)
                      console.log("Finish with " + this.stackID(finished));
                  return this.stackToTree(finished);
              }
              if (this.parser.strict) {
                  if (verbose && stopped)
                      console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
                  throw new SyntaxError("No parse at " + pos);
              }
              if (!this.recovering)
                  this.recovering = 5 /* Rec.Distance */;
          }
          if (this.recovering && stopped) {
              let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]
                  : this.runRecovery(stopped, stoppedTokens, newStacks);
              if (finished) {
                  if (verbose)
                      console.log("Force-finish " + this.stackID(finished));
                  return this.stackToTree(finished.forceAll());
              }
          }
          if (this.recovering) {
              let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;
              if (newStacks.length > maxRemaining) {
                  newStacks.sort((a, b) => b.score - a.score);
                  while (newStacks.length > maxRemaining)
                      newStacks.pop();
              }
              if (newStacks.some(s => s.reducePos > pos))
                  this.recovering--;
          }
          else if (newStacks.length > 1) {
              // Prune stacks that are in the same state, or that have been
              // running without splitting for a while, to avoid getting stuck
              // with multiple successful stacks running endlessly on.
              outer: for (let i = 0; i < newStacks.length - 1; i++) {
                  let stack = newStacks[i];
                  for (let j = i + 1; j < newStacks.length; j++) {
                      let other = newStacks[j];
                      if (stack.sameState(other) ||
                          stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {
                          if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
                              newStacks.splice(j--, 1);
                          }
                          else {
                              newStacks.splice(i--, 1);
                              continue outer;
                          }
                      }
                  }
              }
              if (newStacks.length > 12 /* Rec.MaxStackCount */)
                  newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);
          }
          this.minStackPos = newStacks[0].pos;
          for (let i = 1; i < newStacks.length; i++)
              if (newStacks[i].pos < this.minStackPos)
                  this.minStackPos = newStacks[i].pos;
          return null;
      }
      stopAt(pos) {
          if (this.stoppedAt != null && this.stoppedAt < pos)
              throw new RangeError("Can't move stoppedAt forward");
          this.stoppedAt = pos;
      }
      // Returns an updated version of the given stack, or null if the
      // stack can't advance normally. When `split` and `stacks` are
      // given, stacks split off by ambiguous operations will be pushed to
      // `split`, or added to `stacks` if they move `pos` forward.
      advanceStack(stack, stacks, split) {
          let start = stack.pos, { parser } = this;
          let base = verbose ? this.stackID(stack) + " -> " : "";
          if (this.stoppedAt != null && start > this.stoppedAt)
              return stack.forceReduce() ? stack : null;
          if (this.fragments) {
              let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
              for (let cached = this.fragments.nodeAt(start); cached;) {
                  let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
                  if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
                      stack.useNode(cached, match);
                      if (verbose)
                          console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
                      return true;
                  }
                  if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                      break;
                  let inner = cached.children[0];
                  if (inner instanceof Tree && cached.positions[0] == 0)
                      cached = inner;
                  else
                      break;
              }
          }
          let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);
          if (defaultReduce > 0) {
              stack.reduce(defaultReduce);
              if (verbose)
                  console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);
              return true;
          }
          if (stack.stack.length >= 8400 /* Rec.CutDepth */) {
              while (stack.stack.length > 6000 /* Rec.CutTo */ && stack.forceReduce()) { }
          }
          let actions = this.tokens.getActions(stack);
          for (let i = 0; i < actions.length;) {
              let action = actions[i++], term = actions[i++], end = actions[i++];
              let last = i == actions.length || !split;
              let localStack = last ? stack : stack.split();
              let main = this.tokens.mainToken;
              localStack.apply(action, term, main ? main.start : localStack.pos, end);
              if (verbose)
                  console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? "shift"
                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
              if (last)
                  return true;
              else if (localStack.pos > start)
                  stacks.push(localStack);
              else
                  split.push(localStack);
          }
          return false;
      }
      // Advance a given stack forward as far as it will go. Returns the
      // (possibly updated) stack if it got stuck, or null if it moved
      // forward and was given to `pushStackDedup`.
      advanceFully(stack, newStacks) {
          let pos = stack.pos;
          for (;;) {
              if (!this.advanceStack(stack, null, null))
                  return false;
              if (stack.pos > pos) {
                  pushStackDedup(stack, newStacks);
                  return true;
              }
          }
      }
      runRecovery(stacks, tokens, newStacks) {
          let finished = null, restarted = false;
          for (let i = 0; i < stacks.length; i++) {
              let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
              let base = verbose ? this.stackID(stack) + " -> " : "";
              if (stack.deadEnd) {
                  if (restarted)
                      continue;
                  restarted = true;
                  stack.restart();
                  if (verbose)
                      console.log(base + this.stackID(stack) + " (restarted)");
                  let done = this.advanceFully(stack, newStacks);
                  if (done)
                      continue;
              }
              let force = stack.split(), forceBase = base;
              for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {
                  if (verbose)
                      console.log(forceBase + this.stackID(force) + " (via force-reduce)");
                  let done = this.advanceFully(force, newStacks);
                  if (done)
                      break;
                  if (verbose)
                      forceBase = this.stackID(force) + " -> ";
              }
              for (let insert of stack.recoverByInsert(token)) {
                  if (verbose)
                      console.log(base + this.stackID(insert) + " (via recover-insert)");
                  this.advanceFully(insert, newStacks);
              }
              if (this.stream.end > stack.pos) {
                  if (tokenEnd == stack.pos) {
                      tokenEnd++;
                      token = 0 /* Term.Err */;
                  }
                  stack.recoverByDelete(token, tokenEnd);
                  if (verbose)
                      console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
                  pushStackDedup(stack, newStacks);
              }
              else if (!finished || finished.score < stack.score) {
                  finished = stack;
              }
          }
          return finished;
      }
      // Convert the stack's buffer to a syntax tree.
      stackToTree(stack) {
          stack.close();
          return Tree.build({ buffer: StackBufferCursor.create(stack),
              nodeSet: this.parser.nodeSet,
              topID: this.topTerm,
              maxBufferLength: this.parser.bufferLength,
              reused: this.reused,
              start: this.ranges[0].from,
              length: stack.pos - this.ranges[0].from,
              minRepeatType: this.parser.minRepeatTerm });
      }
      stackID(stack) {
          let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
          if (!id)
              stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
          return id + stack;
      }
  }
  function pushStackDedup(stack, newStacks) {
      for (let i = 0; i < newStacks.length; i++) {
          let other = newStacks[i];
          if (other.pos == stack.pos && other.sameState(stack)) {
              if (newStacks[i].score < stack.score)
                  newStacks[i] = stack;
              return;
          }
      }
      newStacks.push(stack);
  }
  class Dialect {
      constructor(source, flags, disabled) {
          this.source = source;
          this.flags = flags;
          this.disabled = disabled;
      }
      allows(term) { return !this.disabled || this.disabled[term] == 0; }
  }
  /**
  Holds the parse tables for a given grammar, as generated by
  `lezer-generator`, and provides [methods](#common.Parser) to parse
  content with.
  */
  class LRParser extends Parser {
      /**
      @internal
      */
      constructor(spec) {
          super();
          /**
          @internal
          */
          this.wrappers = [];
          if (spec.version != 14 /* File.Version */)
              throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);
          let nodeNames = spec.nodeNames.split(" ");
          this.minRepeatTerm = nodeNames.length;
          for (let i = 0; i < spec.repeatNodeCount; i++)
              nodeNames.push("");
          let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
          let nodeProps = [];
          for (let i = 0; i < nodeNames.length; i++)
              nodeProps.push([]);
          function setProp(nodeID, prop, value) {
              nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
          }
          if (spec.nodeProps)
              for (let propSpec of spec.nodeProps) {
                  let prop = propSpec[0];
                  if (typeof prop == "string")
                      prop = NodeProp[prop];
                  for (let i = 1; i < propSpec.length;) {
                      let next = propSpec[i++];
                      if (next >= 0) {
                          setProp(next, prop, propSpec[i++]);
                      }
                      else {
                          let value = propSpec[i + -next];
                          for (let j = -next; j > 0; j--)
                              setProp(propSpec[i++], prop, value);
                          i++;
                      }
                  }
              }
          this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({
              name: i >= this.minRepeatTerm ? undefined : name,
              id: i,
              props: nodeProps[i],
              top: topTerms.indexOf(i) > -1,
              error: i == 0,
              skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
          })));
          if (spec.propSources)
              this.nodeSet = this.nodeSet.extend(...spec.propSources);
          this.strict = false;
          this.bufferLength = DefaultBufferLength;
          let tokenArray = decodeArray(spec.tokenData);
          this.context = spec.context;
          this.specializerSpecs = spec.specialized || [];
          this.specialized = new Uint16Array(this.specializerSpecs.length);
          for (let i = 0; i < this.specializerSpecs.length; i++)
              this.specialized[i] = this.specializerSpecs[i].term;
          this.specializers = this.specializerSpecs.map(getSpecializer);
          this.states = decodeArray(spec.states, Uint32Array);
          this.data = decodeArray(spec.stateData);
          this.goto = decodeArray(spec.goto);
          this.maxTerm = spec.maxTerm;
          this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
          this.topRules = spec.topRules;
          this.dialects = spec.dialects || {};
          this.dynamicPrecedences = spec.dynamicPrecedences || null;
          this.tokenPrecTable = spec.tokenPrec;
          this.termNames = spec.termNames || null;
          this.maxNode = this.nodeSet.types.length - 1;
          this.dialect = this.parseDialect();
          this.top = this.topRules[Object.keys(this.topRules)[0]];
      }
      createParse(input, fragments, ranges) {
          let parse = new Parse(this, input, fragments, ranges);
          for (let w of this.wrappers)
              parse = w(parse, input, fragments, ranges);
          return parse;
      }
      /**
      Get a goto table entry @internal
      */
      getGoto(state, term, loose = false) {
          let table = this.goto;
          if (term >= table[0])
              return -1;
          for (let pos = table[term + 1];;) {
              let groupTag = table[pos++], last = groupTag & 1;
              let target = table[pos++];
              if (last && loose)
                  return target;
              for (let end = pos + (groupTag >> 1); pos < end; pos++)
                  if (table[pos] == state)
                      return target;
              if (last)
                  return -1;
          }
      }
      /**
      Check if this state has an action for a given terminal @internal
      */
      hasAction(state, terminal) {
          let data = this.data;
          for (let set = 0; set < 2; set++) {
              for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {
                  if ((next = data[i]) == 65535 /* Seq.End */) {
                      if (data[i + 1] == 1 /* Seq.Next */)
                          next = data[i = pair(data, i + 2)];
                      else if (data[i + 1] == 2 /* Seq.Other */)
                          return pair(data, i + 2);
                      else
                          break;
                  }
                  if (next == terminal || next == 0 /* Term.Err */)
                      return pair(data, i + 1);
              }
          }
          return 0;
      }
      /**
      @internal
      */
      stateSlot(state, slot) {
          return this.states[(state * 6 /* ParseState.Size */) + slot];
      }
      /**
      @internal
      */
      stateFlag(state, flag) {
          return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;
      }
      /**
      @internal
      */
      validAction(state, action) {
          return !!this.allActions(state, a => a == action ? true : null);
      }
      /**
      @internal
      */
      allActions(state, action) {
          let deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);
          let result = deflt ? action(deflt) : undefined;
          for (let i = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; i += 3) {
              if (this.data[i] == 65535 /* Seq.End */) {
                  if (this.data[i + 1] == 1 /* Seq.Next */)
                      i = pair(this.data, i + 2);
                  else
                      break;
              }
              result = action(pair(this.data, i + 1));
          }
          return result;
      }
      /**
      Get the states that can follow this one through shift actions or
      goto jumps. @internal
      */
      nextStates(state) {
          let result = [];
          for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {
              if (this.data[i] == 65535 /* Seq.End */) {
                  if (this.data[i + 1] == 1 /* Seq.Next */)
                      i = pair(this.data, i + 2);
                  else
                      break;
              }
              if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {
                  let value = this.data[i + 1];
                  if (!result.some((v, i) => (i & 1) && v == value))
                      result.push(this.data[i], value);
              }
          }
          return result;
      }
      /**
      Configure the parser. Returns a new parser instance that has the
      given settings modified. Settings not provided in `config` are
      kept from the original parser.
      */
      configure(config) {
          // Hideous reflection-based kludge to make it easy to create a
          // slightly modified copy of a parser.
          let copy = Object.assign(Object.create(LRParser.prototype), this);
          if (config.props)
              copy.nodeSet = this.nodeSet.extend(...config.props);
          if (config.top) {
              let info = this.topRules[config.top];
              if (!info)
                  throw new RangeError(`Invalid top rule name ${config.top}`);
              copy.top = info;
          }
          if (config.tokenizers)
              copy.tokenizers = this.tokenizers.map(t => {
                  let found = config.tokenizers.find(r => r.from == t);
                  return found ? found.to : t;
              });
          if (config.specializers) {
              copy.specializers = this.specializers.slice();
              copy.specializerSpecs = this.specializerSpecs.map((s, i) => {
                  let found = config.specializers.find(r => r.from == s.external);
                  if (!found)
                      return s;
                  let spec = Object.assign(Object.assign({}, s), { external: found.to });
                  copy.specializers[i] = getSpecializer(spec);
                  return spec;
              });
          }
          if (config.contextTracker)
              copy.context = config.contextTracker;
          if (config.dialect)
              copy.dialect = this.parseDialect(config.dialect);
          if (config.strict != null)
              copy.strict = config.strict;
          if (config.wrap)
              copy.wrappers = copy.wrappers.concat(config.wrap);
          if (config.bufferLength != null)
              copy.bufferLength = config.bufferLength;
          return copy;
      }
      /**
      Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
      are registered for this parser.
      */
      hasWrappers() {
          return this.wrappers.length > 0;
      }
      /**
      Returns the name associated with a given term. This will only
      work for all terms when the parser was generated with the
      `--names` option. By default, only the names of tagged terms are
      stored.
      */
      getName(term) {
          return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
      }
      /**
      The eof term id is always allocated directly after the node
      types. @internal
      */
      get eofTerm() { return this.maxNode + 1; }
      /**
      The type of top node produced by the parser.
      */
      get topNode() { return this.nodeSet.types[this.top[1]]; }
      /**
      @internal
      */
      dynamicPrecedence(term) {
          let prec = this.dynamicPrecedences;
          return prec == null ? 0 : prec[term] || 0;
      }
      /**
      @internal
      */
      parseDialect(dialect) {
          let values = Object.keys(this.dialects), flags = values.map(() => false);
          if (dialect)
              for (let part of dialect.split(" ")) {
                  let id = values.indexOf(part);
                  if (id >= 0)
                      flags[id] = true;
              }
          let disabled = null;
          for (let i = 0; i < values.length; i++)
              if (!flags[i]) {
                  for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)
                      (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
              }
          return new Dialect(dialect, flags, disabled);
      }
      /**
      Used by the output of the parser generator. Not available to
      user code. @hide
      */
      static deserialize(spec) {
          return new LRParser(spec);
      }
  }
  function pair(data, off) { return data[off] | (data[off + 1] << 16); }
  function findFinished(stacks) {
      let best = null;
      for (let stack of stacks) {
          let stopped = stack.p.stoppedAt;
          if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&
              stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&
              (!best || best.score < stack.score))
              best = stack;
      }
      return best;
  }
  function getSpecializer(spec) {
      if (spec.external) {
          let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;
          return (value, stack) => (spec.external(value, stack) << 1) | mask;
      }
      return spec.get;
  }

  // TODO: naïvely restored to previoius NodeProp.flag() behaviour. Can we do any better?
  let flag = () => new NodeProp({deserialize: str => true});

  const coll = flag();
  const prefixColl = flag();
  const prefixEdge = flag();
  const sameEdge = flag();
  const prefixContainer = flag();

  var props$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    coll: coll,
    prefixColl: prefixColl,
    prefixEdge: prefixEdge,
    sameEdge: sameEdge,
    prefixContainer: prefixContainer
  });

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const spec_Symbol = {__proto__:null,true:136, false:136, nil:138, def:147, defn:147, "defn-":147, defmacro:147, definline:147, defonce:147, deftest:147, defcard:147, ns:155};
  const parser$2 = LRParser.deserialize({
    version: 14,
    states: "-zQ]QPOOP!pOPOOOOQO'#C`'#C`OOQO'#Cb'#CbO]QPO'#CcO]QPO'#CeO]QPO'#CgO]QPO'#CiO]QPO'#CkO]OPO'#CtO]OPO'#CvO!uOQO'#C|OOQO'#Dm'#DmQ]QPOOO$hQPO'#CqO$oQPO'#DUO$vQPO'#DXO$}OSO'#DZO%cOPO'#D]O%hOPO'#D`O%mOPO'#DbO%uOWO'#DdO]QPO'#DgO]QPO'#DhO%zQPO'#DjOOQO'#Dq'#DqP&SQPO'#C^POOO)C?e)C?eOOQO,58},58}OOQO,59P,59POOQO,59R,59ROOQO,59T,59TOOQO,59V,59VOOQO,59`,59`OOQO,59b,59bOOQO,59h,59hO'gOPO,59hOOQO-E7k-E7kOOQO'#Cr'#CrO!}QPO'#CsOOQO'#Dv'#DvO'lQPO'#D|O'sQPO'#DuOOQO'#DO'#DOOOQO'#Dz'#DzO'sQPO'#DyOOQO'#DQ'#DQOOQO'#D}'#D}O'lQPO'#D|OOQO'#Dt'#DtO(OQPO,59]O(TQPO,59pOOQO,59p,59pO([QPO,59sOOQO,59s,59sOOQO,59u,59uOOOO,59x,59xOOQO,59y,59yOOQO,5:Q,5:QOOQO,5:T,5:TOOQO,5:V,5:VOOQO,59w,59wOOQO,59z,59zOOQO,59|,59|OOQO,5:O,5:OOOQO,5:R,5:ROOQO,5:S,5:SOOQO,5:U,5:UPOOO,58x,58xOOQO1G/S1G/SOOQO,59_,59_OOQO,59k,59kOOQO,59m,59mOOQO'#Cx'#CxO'sQPO'#CyOOQO'#Dx'#DxO(cQPO,5:aO(jQPO,5:eO(qQPO,5:hOOQO1G.w1G.wOOQO1G/[1G/[OOQO1G/_1G/_OOQO,59e,59eO(xQPO'#CzO*`QPO1G/{O]QPO1G/{OOQO'#Cz'#CzO*gQPO1G0PO*gQPO1G0PO*nQPO7+%gO*uQPO7+%kP&SQPO'#CcP&SQPO'#CeP&SQPO'#CgP&SQPO'#CiP&SQPO'#CkP*|OPO'#DbP&SQPO'#DgP&SQPO'#Dh",
    stateData: "+[~O!dOSPOSRPQ~OTiOWSOYTO[UO^VO`WOaiObiOd^OiXOkYOoZOw_Oz`O|iO!OaO!TcO!VdO!XeO!fQO!gRO~ORjO~OosOqtO~OT!OOWSOYTO[UO^VO`WOaiObiOd^OiXOkYOoZOw_Oz`O|iO!OaO!TcO!VdO!XeO!fQO!gRO!kvO!o{O~Oc!pP~P!}Ov!UO~P]Oy!WO~P]Od^OoZOz`O!r!YO!t!]O!u!^O~Oz`O~OT!`O~OWSOd^O~O!s!bO~Ow_Oz`O~OTiOW!}OY#OO[#PO^#QO`#ROaiObiOd^OiXOkYOoZOw_Oz`O|iO!OaO!TcO!V#SO!XeO!fQO!gRO~Oo!gO~Oc!pX~P]OT!kOiXOkYO~Oc!qO~Ov!rO~P]Oy!sO~P]Oc!ia~P]Oc!ma~P]Oc!pa~P]OTnXWnXYnX[nX^nX`nXanXbnXc!eXdnXinXknXonXwnXznX|nX!OnX!TnX!VnX!XnX!fnX!gnX~Oc!ii~P]Oc!mi~P]Oc!iq~P]Oc!mq~P]OW!}Od^O~Oa!u!tT!t~",
    goto: "/]!rPP!sP!vP!v#nP!vP!vP!vP!vPPPPP$j%i%i%mP%mP&n&n&sP&yP'x'x'|'|PP(QPP({P!vP!v)|!v!vP!vP!vP!v!v!v*t!v+nP,fPPP-^PP.j.m.pP.v.m/PP.m/VRkP!kiOSTUVWXY]^_`fgjwy!Q!T!V!n!o!p!v!w!y!z!{!|!}#O#P#Q#R#T#U!jiOSTUVWXY]^_`fgjwy!Q!T!V!n!o!p!v!w!y!z!{!|!}#O#P#Q#R#T#UT!ad#S!jiOSTUVWXY]^_`fgjwy!Q!T!V!n!o!p!v!w!y!z!{!|!}#O#P#Q#R#T#UQ![aT!ad#STx^w!UfOSTUVWXY]_`fgy!Q!T!V!n!o!p!v!w!y!z!{!|Sw^wU!lz}!la#Tj!}#O#P#Q#R#T#UV!mz}!lQ!w!nR!z!o!fiOSTUVWXY]^_`fgjwy!Q!T!V!p!v!w!y!z!{!|!}#O#P#Q#R#T#UQ!ZaQ!u!nR!x!oT|^wT!P^w!jiOSTUVWXY]^_`fgjwy!Q!T!V!n!o!p!v!w!y!z!{!|!}#O#P#Q#R#T#UR!eh!jiOSTUVWXY]^_`fgjwy!Q!T!V!n!o!p!v!w!y!z!{!|!}#O#P#Q#R#T#UQ!XaQ!_bR!eh!kbOSTUVWXY]^_`fgjwy!Q!T!V!n!o!p!v!w!y!z!{!|!}#O#P#Q#R#T#U!YgOSTUVWXY]^_`fgwy!Q!T!V!n!o!p!v!w!y!z!{!|a#Uj!}#O#P#Q#R#T#U!khOSTUVWXY]^_`fgjwy!Q!T!V!n!o!p!v!w!y!z!{!|!}#O#P#Q#R#T#UQ]Obu]y!T!V!p!v!y!{!|Qy^Q!T_Q!V`Q!p!QQ!v!nQ!y!oQ!{!wR!|!zt[O]^_`y!Q!T!V!n!o!p!v!w!y!z!{!|SlS!}SmT#OSnU#PSoV#QSpW#RQqXQrYU!cfw#TS!dg#UR!fjR!S^R!R^Qz^R!hwQ!nzQ!o}R!t!lQ}^R!iwQ!Q^R!jw",
    nodeNames: "⚠ LineComment Discard #_ Boolean Symbol Nil Deref @ Quote ' SyntaxQuote ` Unquote ~ UnquoteSplice ~@ Number Keyword ) ( List DefLike Meta Metadata ^ ReaderMetadata #^ VarName Meta DocString \" String StringContent NS Meta Operator Meta ] [ Vector } { Map Character Set # NamespacedMap KeywordPrefix RegExp Var #' ReaderConditional #? SymbolicValue ## AnonymousFunction Meta TaggedLiteral ReaderTag ConstructorCall ConstructorPrefix Program",
    maxTerm: 83,
    nodeProps: [
      [prefixEdge, -14,3,8,10,12,14,16,25,27,46,48,51,53,55,61,""],
      [prefixColl, -13,7,9,11,13,15,24,26,45,47,49,50,52,56,""],
      ["openedBy", 19,"(",31,"\"",38,"[",41,"{"],
      ["closedBy", 20,")",31,"\"",39,"]",42,"}"],
      [coll, -3,21,40,43,""],
      [prefixContainer, -7,23,29,35,37,57,58,60,""],
      [sameEdge, 31,""]
    ],
    skippedNodes: [0,1,2,3],
    repeatNodeCount: 1,
    tokenData: "#6x~R![OX$wX^%n^p$wpq%nqr'grs,Tst,Ytu/Yuv'gvw'gwx6Vxy6jyz6}z{'g{|7b|}%n}!O7b!O!P9t!P!Q)v!Q!R!8[!R![!>t![!]!Cp!]!^!J]!^!_'g!_!`'g!`!a'g!a!b'g!b!c!Kr!c!}/Y!}#O!LV#O#P!Lj#P#Q#3w#Q#R#4[#R#S/Y#S#T#4o#T#o/Y#o#p#5S#p#q$w#q#r#5g#r#s#5z#s#y$w#y#z%n#z$f$w$f$g%n$g##l/Y##l#BY$w#BY#BZ%n#BZ$IS$w$IS$I_%n$I_$I|$w$I|$JO%n$JO$JT$w$JT$JU%n$JU$KV$w$KV$KW%n$KW&FU$w&FU&FV%n&FV~$wQ$|SqQOr$ws#O$w#O#P%Y#P~$wQ%_TqQOr$wrs$ws#O$w#O#P%Y#P~$wR%ujqQ!dPOX$wX^%n^p$wpq%nqr$ws|$w|}%n}#O$w#O#P%Y#P#y$w#y#z%n#z$f$w$f$g%n$g#BY$w#BY#BZ%n#BZ$IS$w$IS$I_%n$I_$I|$w$I|$JO%n$JO$JT$w$JT$JU%n$JU$KV$w$KV$KW%n$KW&FU$w&FU&FV%n&FV~$w_'rpqQ!sW!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P)v!P!Q'g!Q!['g![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#o'g#o$g$w$g##l'g##l~$wZ*PpqQ!sWTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![)v![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#o)v#o$g$w$g##l)v##l~$w~,YOo~R,a[!OPqQOr$wst-Vtw$wwx-jx!a$w!a!b-}!b#O$w#O#P%Y#P#Q$w#Q#R.b#R#S.u#S~$wR-^S!XPqQOr$ws#O$w#O#P%Y#P~$wR-qS!TPqQOr$ws#O$w#O#P%Y#P~$wR.US!VPqQOr$ws#O$w#O#P%Y#P~$wR.iSkPqQOr$ws#O$w#O#P%Y#P~$wR.|SRPqQOr$ws#O$w#O#P%Y#P~$w_/epqQ!sW!tSTPOq$wqr'gst)vtu/Yuv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P1i!P!Q'g!Q![/Y![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!}/Y!}#O$w#O#P%Y#P#R$w#R#S/Y#S#T$w#T#o/Y#o$g$w$g##l/Y##l~$w_1rpqQ!sWTPOq$wqr)vst)vtu3vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![)v![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!}3v!}#O$w#O#P%Y#P#R$w#R#S3v#S#T$w#T#o3v#o$g$w$g##l3v##l~$w_4RpqQ!sW!uSTPOq$wqr)vst)vtu3vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P1i!P!Q)v!Q![3v![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!}3v!}#O$w#O#P%Y#P#R$w#R#S3v#S#T$w#T#o3v#o$g$w$g##l3v##l~$wR6^SYPqQOr$ws#O$w#O#P%Y#P~$wV6qSdTqQOr$ws#O$w#O#P%Y#P~$wR7UScPqQOr$ws#O$w#O#P%Y#P~$w_7mqqQ!sW!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P9t!P!Q'g!Q!RHO!R![!&|![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#o'g#o$g$w$g##l'g##l~$wZ9}pqQ!sWTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![<R![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#o)v#o$g$w$g##l)v##l~$wZ<^tqQ!sWaPTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![<R![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!g)v!g!h>n!h!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#X)v#X#Y>n#Y#o)v#o$g$w$g##l)v##l~$wZ>wpqQ!sWTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|@{|}$w}!O@{!O!P)v!P!Q)v!Q![CY![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#o)v#o$g$w$g##l)v##l~$wZAUpqQ!sWTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![CY![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#o)v#o$g$w$g##l)v##l~$wZCerqQ!sWaPTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![CY![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!o)v!o!pEo!p!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#o)v#o$g$w$g##l)v##l~$wZEzpqQ!sWaPTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![)v![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#o)v#o$g$w$g##l)v##l~$w_H]yqQ!sWaP!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!PJ|!P!Q!![!Q![!&|![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!g'g!g!h!)t!h!o'g!o!p!0{!p!q!0{!q!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#X'g#X#Y!)t#Y#l'g#l#m!3^#m#o'g#o$g$w$g##l'g##l~$wZKXvqQ!sWaPTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![J|![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!g)v!g!h>n!h!o)v!o!pMo!p!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#X)v#X#Y>n#Y#o)v#o$g$w$g##l)v##l~$wZMztqQ!sWaPTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![)v![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!g)v!g!h>n!h!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#X)v#X#Y>n#Y#o)v#o$g$w$g##l)v##l~$w_!!gpqQ!sW!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P)v!P!Q'g!Q![!$k![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#o'g#o$g$w$g##l'g##l~$w_!$xpqQ!sWaP!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P)v!P!Q'g!Q![!$k![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#o'g#o$g$w$g##l'g##l~$w_!'ZwqQ!sWaP!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!PJ|!P!Q!![!Q![!&|![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!g'g!g!h!)t!h!o'g!o!p!0{!p!q!0{!q!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#X'g#X#Y!)t#Y#o'g#o$g$w$g##l'g##l~$w_!*PpqQ!sW!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|!,T|}$w}!O!,T!O!P)v!P!Q'g!Q![!.d![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#o'g#o$g$w$g##l'g##l~$w_!,`pqQ!sW!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P)v!P!Q'g!Q![!.d![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#o'g#o$g$w$g##l'g##l~$w_!.qrqQ!sWaP!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P)v!P!Q'g!Q![!.d![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!o'g!o!p!0{!p!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#o'g#o$g$w$g##l'g##l~$w_!1YpqQ!sWaP!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P)v!P!Q'g!Q!['g![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#o'g#o$g$w$g##l'g##l~$w_!3irqQ!sW!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P)v!P!Q'g!Q![!5s![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!i!5s!i!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#Z!5s#Z#o'g#o$g$w$g##l'g##l~$w_!6QrqQ!sWaP!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P)v!P!Q'g!Q![!5s![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!i!5s!i!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#Z!5s#Z#o'g#o$g$w$g##l'g##l~$wR!8ceqQaPOr$ws!O$w!O!P!9t!P!Q!=r!Q![!>t![!g$w!g!h!:q!h!o$w!o!p!<n!p!q!<n!q#O$w#O#P%Y#P#U$w#U#V!?z#V#X$w#X#Y!:q#Y#c$w#c#d!AS#d#l$w#l#m!BU#m~$wR!9{[qQaPOr$ws!Q$w!Q![!9t![!g$w!g!h!:q!h!o$w!o!p!=R!p#O$w#O#P%Y#P#X$w#X#Y!:q#Y~$wR!:vYqQOr$ws{$w{|!;f|}$w}!O!;f!O!Q$w!Q![!;}![#O$w#O#P%Y#P~$wR!;kUqQOr$ws!Q$w!Q![!;}![#O$w#O#P%Y#P~$wR!<UWqQaPOr$ws!Q$w!Q![!;}![!o$w!o!p!<n!p#O$w#O#P%Y#P~$wR!<uSqQaPOr$ws#O$w#O#P%Y#P~$wR!=YWqQaPOr$ws!g$w!g!h!:q!h#O$w#O#P%Y#P#X$w#X#Y!:q#Y~$wR!=wUqQOr$ws!Q$w!Q![!>Z![#O$w#O#P%Y#P~$wR!>bUqQaPOr$ws!Q$w!Q![!>Z![#O$w#O#P%Y#P~$wR!>{_qQaPOr$ws!O$w!O!P!9t!P!Q!=r!Q![!>t![!g$w!g!h!:q!h!o$w!o!p!<n!p!q!<n!q#O$w#O#P%Y#P#X$w#X#Y!:q#Y~$wR!@PVqQOr$ws!Q$w!Q!R!@f!R!S!@f!S#O$w#O#P%Y#P~$wR!@mVqQaPOr$ws!Q$w!Q!R!@f!R!S!@f!S#O$w#O#P%Y#P~$wR!AXUqQOr$ws!Q$w!Q!Y!Ak!Y#O$w#O#P%Y#P~$wR!ArUqQaPOr$ws!Q$w!Q!Y!Ak!Y#O$w#O#P%Y#P~$wR!BZYqQOr$ws!Q$w!Q![!By![!c$w!c!i!By!i#O$w#O#P%Y#P#T$w#T#Z!By#Z~$wR!CQYqQaPOr$ws!Q$w!Q![!By![!c$w!c!i!By!i#O$w#O#P%Y#P#T$w#T#Z!By#Z~$wV!CyobPqQ!rSOq$wqr!Ezst$wtu!Ezuv!Ezvw!Ezwz$wz{!Ez{|!Ez|}$w}!O!Ez!O!P!Ez!P!Q!Ez!Q![$w![!]!HX!]!^$w!^!_!Ez!_!`!Ez!`!a!Ez!a!b!Ez!b!c$w!c!}!Ez!}#O$w#O#P%Y#P#R$w#R#S!Ez#S#T$w#T#o!Ez#o$g$w$g##l!Ez##l~$wV!FTpbPqQ!rSOq$wqr!Ezst!Eztu!Ezuv!Ezvw!Ezwx!Ezxz$wz{!Ez{|!Ez|}$w}!O!Ez!O!P!Ez!P!Q!Ez!Q![!Ez![!]!Ez!]!^$w!^!_!Ez!_!`!Ez!`!a!Ez!a!b!Ez!b!c$w!c!}!Ez!}#O$w#O#P%Y#P#R$w#R#S!Ez#S#T$w#T#o!Ez#o$g$w$g##l!Ez##l~$wV!HbmbPqQ!rSOq$wqr!Ezst$wtu!Ezuv!Ezvw!Ezwz$wz{!Ez{|!Ez|}$w}!O!Ez!O!P!Ez!P!Q!Ez!Q!^$w!^!_!Ez!_!`!Ez!`!a!Ez!a!b!Ez!b!c$w!c!}!Ez!}#O$w#O#P%Y#P#R$w#R#S!Ez#S#T$w#T#o!Ez#o$g$w$g##l!Ez##l~$wR!JdVPPqQOY!J]YZ$wZr!J]rs!Jys#O!J]#O#P!KU#P~!J]P!KOQPPOY!JyZ~!JyR!K]VPPqQOY!J]YZ$wZr!J]rs!J]s#O!J]#O#P!KU#P~!J]R!KySWPqQOr$ws#O$w#O#P%Y#P~$wR!L^SwPqQOr$ws#O$w#O#P%Y#P~$wR!LocqQOY!MzYZ$wZr!Mzrs!Mzs#O!Mz#O#P!N_#P#U!Mz#U#V!Nu#V#Y!Mz#Y#Z#$w#Z#b!Mz#b#c#(b#c#d#*{#d#f!Mz#f#g#,m#g#h#/W#h#i#/q#i#j#0s#j~!MzR!NRS|PqQOr$ws#O$w#O#P%Y#P~$wR!NfT|PqQOr$wrs$ws#O$w#O#P%Y#P~$wR!N|U|PqQOr$ws#O$w#O#P%Y#P#T$w#T#U# `#U~$wR# eUqQOr$ws#O$w#O#P%Y#P#V$w#V#W# w#W~$wR# |UqQOr$ws#O$w#O#P%Y#P#_$w#_#`#!`#`~$wR#!eUqQOr$ws#O$w#O#P%Y#P#g$w#g#h#!w#h~$wR#!|UqQOr$ws#O$w#O#P%Y#P#d$w#d#e##`#e~$wR##eUqQOr$ws#O$w#O#P%Y#P#T$w#T#U##w#U~$wR##|UqQOr$ws#O$w#O#P%Y#P#V$w#V#W#$`#W~$wR#$eUqQOr$ws#O$w#O#P%Y#P#X$w#X#Y!Mz#Y~$wR#%OU|PqQOr$ws#O$w#O#P%Y#P#c$w#c#d#%b#d~$wR#%gUqQOr$ws#O$w#O#P%Y#P#f$w#f#g#%y#g~$wR#&OUqQOr$ws#O$w#O#P%Y#P#a$w#a#b#&b#b~$wR#&gUqQOr$ws#O$w#O#P%Y#P#Y$w#Y#Z#&y#Z~$wR#'OUqQOr$ws#O$w#O#P%Y#P#X$w#X#Y#'b#Y~$wR#'gUqQOr$ws#O$w#O#P%Y#P#X$w#X#Y#'y#Y~$wR#(OUqQOr$ws#O$w#O#P%Y#P#W$w#W#X!Mz#X~$wR#(iU|PqQOr$ws#O$w#O#P%Y#P#X$w#X#Y#({#Y~$wR#)QUqQOr$ws#O$w#O#P%Y#P#k$w#k#l#)d#l~$wR#)iUqQOr$ws#O$w#O#P%Y#P#`$w#`#a#){#a~$wR#*QUqQOr$ws#O$w#O#P%Y#P#]$w#]#^#*d#^~$wR#*iUqQOr$ws#O$w#O#P%Y#P#b$w#b#c#$`#c~$wR#+SV|PqQOr$ws!Q$w!Q!U#+i!U!Y#,S!Y#O$w#O#P%Y#P~$wR#+pU|PqQOr$ws!Q$w!Q!Y#,S!Y#O$w#O#P%Y#P~$wR#,ZU|PqQOr$ws!Q$w!Q!Y!Mz!Y#O$w#O#P%Y#P~$wR#,tU|PqQOr$ws#O$w#O#P%Y#P#X$w#X#Y#-W#Y~$wR#-]UqQOr$ws#O$w#O#P%Y#P#h$w#h#i#-o#i~$wR#-tUqQOr$ws#O$w#O#P%Y#P#i$w#i#j#.W#j~$wR#.]UqQOr$ws#O$w#O#P%Y#P#f$w#f#g#.o#g~$wR#.tUqQOr$ws#O$w#O#P%Y#P#b$w#b#c!Mz#c~$wR#/_U|PqQOr$ws#O$w#O#P%Y#P#d$w#d#e##`#e~$wR#/xU|PqQOr$ws#O$w#O#P%Y#P#T$w#T#U#0[#U~$wR#0aUqQOr$ws#O$w#O#P%Y#P#U$w#U#V!Mz#V~$wR#0zY|PqQOr$ws!Q$w!Q![#1j![!c$w!c!i#1j!i#O$w#O#P%Y#P#T$w#T#Z#1j#Z~$wR#1oYqQOr$ws!Q$w!Q![#2_![!c$w!c!i#2_!i#O$w#O#P%Y#P#T$w#T#Z#2_#Z~$wR#2dYqQOr$ws!Q$w!Q![#3S![!c$w!c!i#3S!i#O$w#O#P%Y#P#T$w#T#Z#3S#Z~$wR#3XYqQOr$ws!Q$w!Q![!Mz![!c$w!c!i!Mz!i#O$w#O#P%Y#P#T$w#T#Z!Mz#Z~$wR#4OSvPqQOr$ws#O$w#O#P%Y#P~$wR#4cSiPqQOr$ws#O$w#O#P%Y#P~$wR#4vS[PqQOr$ws#O$w#O#P%Y#P~$wV#5ZSzTqQOr$ws#O$w#O#P%Y#P~$wR#5nSyPqQOr$ws#O$w#O#P%Y#P~$wR#6RU^PqQOr$ws!b$w!b!c#6e!c#O$w#O#P%Y#P~$wR#6lS`PqQOr$ws#O$w#O#P%Y#P~$w",
    tokenizers: [0, 1, 2, 3],
    topRules: {"Program":[0,62]},
    dynamicPrecedences: {"22":1,"34":2},
    specialized: [{term: 5, get: value => spec_Symbol[value] || -1}],
    tokenPrec: 466
  });

  /*eslint no-unused-vars: ["error", { "varsIgnorePattern": "^_", "argsIgnorePattern": "^_", "destructuredArrayIgnorePattern": "^_"}]*/


  function blank_QMARK_(s) {
    if (!s) return true;
    if (s.length === 0) return true;
    if (s.trimLeft().length === 0) return true;
    return false;
  }

  class CompositeBlock {
      static create(type, value, from, parentHash, end) {
          let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;
          return new CompositeBlock(type, value, from, hash, end, [], []);
      }
      constructor(type, 
      // Used for indentation in list items, markup character in lists
      value, from, hash, end, children, positions) {
          this.type = type;
          this.value = value;
          this.from = from;
          this.hash = hash;
          this.end = end;
          this.children = children;
          this.positions = positions;
          this.hashProp = [[NodeProp.contextHash, hash]];
      }
      addChild(child, pos) {
          if (child.prop(NodeProp.contextHash) != this.hash)
              child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);
          this.children.push(child);
          this.positions.push(pos);
      }
      toTree(nodeSet, end = this.end) {
          let last = this.children.length - 1;
          if (last >= 0)
              end = Math.max(end, this.positions[last] + this.children[last].length + this.from);
          return new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({
              makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)
          });
      }
  }
  var Type;
  (function (Type) {
      Type[Type["Document"] = 1] = "Document";
      Type[Type["CodeBlock"] = 2] = "CodeBlock";
      Type[Type["FencedCode"] = 3] = "FencedCode";
      Type[Type["Blockquote"] = 4] = "Blockquote";
      Type[Type["HorizontalRule"] = 5] = "HorizontalRule";
      Type[Type["BulletList"] = 6] = "BulletList";
      Type[Type["OrderedList"] = 7] = "OrderedList";
      Type[Type["ListItem"] = 8] = "ListItem";
      Type[Type["ATXHeading1"] = 9] = "ATXHeading1";
      Type[Type["ATXHeading2"] = 10] = "ATXHeading2";
      Type[Type["ATXHeading3"] = 11] = "ATXHeading3";
      Type[Type["ATXHeading4"] = 12] = "ATXHeading4";
      Type[Type["ATXHeading5"] = 13] = "ATXHeading5";
      Type[Type["ATXHeading6"] = 14] = "ATXHeading6";
      Type[Type["SetextHeading1"] = 15] = "SetextHeading1";
      Type[Type["SetextHeading2"] = 16] = "SetextHeading2";
      Type[Type["HTMLBlock"] = 17] = "HTMLBlock";
      Type[Type["LinkReference"] = 18] = "LinkReference";
      Type[Type["Paragraph"] = 19] = "Paragraph";
      Type[Type["CommentBlock"] = 20] = "CommentBlock";
      Type[Type["ProcessingInstructionBlock"] = 21] = "ProcessingInstructionBlock";
      // Inline
      Type[Type["Escape"] = 22] = "Escape";
      Type[Type["Entity"] = 23] = "Entity";
      Type[Type["HardBreak"] = 24] = "HardBreak";
      Type[Type["Emphasis"] = 25] = "Emphasis";
      Type[Type["StrongEmphasis"] = 26] = "StrongEmphasis";
      Type[Type["Link"] = 27] = "Link";
      Type[Type["Image"] = 28] = "Image";
      Type[Type["InlineCode"] = 29] = "InlineCode";
      Type[Type["HTMLTag"] = 30] = "HTMLTag";
      Type[Type["Comment"] = 31] = "Comment";
      Type[Type["ProcessingInstruction"] = 32] = "ProcessingInstruction";
      Type[Type["Autolink"] = 33] = "Autolink";
      // Smaller tokens
      Type[Type["HeaderMark"] = 34] = "HeaderMark";
      Type[Type["QuoteMark"] = 35] = "QuoteMark";
      Type[Type["ListMark"] = 36] = "ListMark";
      Type[Type["LinkMark"] = 37] = "LinkMark";
      Type[Type["EmphasisMark"] = 38] = "EmphasisMark";
      Type[Type["CodeMark"] = 39] = "CodeMark";
      Type[Type["CodeText"] = 40] = "CodeText";
      Type[Type["CodeInfo"] = 41] = "CodeInfo";
      Type[Type["LinkTitle"] = 42] = "LinkTitle";
      Type[Type["LinkLabel"] = 43] = "LinkLabel";
      Type[Type["URL"] = 44] = "URL";
  })(Type || (Type = {}));
  /**
  Data structure used to accumulate a block's content during [leaf
  block parsing](#BlockParser.leaf).
  */
  class LeafBlock {
      /**
      @internal
      */
      constructor(
      /**
      The start position of the block.
      */
      start, 
      /**
      The block's text content.
      */
      content) {
          this.start = start;
          this.content = content;
          /**
          @internal
          */
          this.marks = [];
          /**
          The block parsers active for this block.
          */
          this.parsers = [];
      }
  }
  /**
  Data structure used during block-level per-line parsing.
  */
  class Line {
      constructor() {
          /**
          The line's full text.
          */
          this.text = "";
          /**
          The base indent provided by the composite contexts (that have
          been handled so far).
          */
          this.baseIndent = 0;
          /**
          The string position corresponding to the base indent.
          */
          this.basePos = 0;
          /**
          The number of contexts handled @internal
          */
          this.depth = 0;
          /**
          Any markers (i.e. block quote markers) parsed for the contexts. @internal
          */
          this.markers = [];
          /**
          The position of the next non-whitespace character beyond any
          list, blockquote, or other composite block markers.
          */
          this.pos = 0;
          /**
          The column of the next non-whitespace character.
          */
          this.indent = 0;
          /**
          The character code of the character after `pos`.
          */
          this.next = -1;
      }
      /**
      @internal
      */
      forward() {
          if (this.basePos > this.pos)
              this.forwardInner();
      }
      /**
      @internal
      */
      forwardInner() {
          let newPos = this.skipSpace(this.basePos);
          this.indent = this.countIndent(newPos, this.pos, this.indent);
          this.pos = newPos;
          this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);
      }
      /**
      Skip whitespace after the given position, return the position of
      the next non-space character or the end of the line if there's
      only space after `from`.
      */
      skipSpace(from) { return skipSpace(this.text, from); }
      /**
      @internal
      */
      reset(text) {
          this.text = text;
          this.baseIndent = this.basePos = this.pos = this.indent = 0;
          this.forwardInner();
          this.depth = 1;
          while (this.markers.length)
              this.markers.pop();
      }
      /**
      Move the line's base position forward to the given position.
      This should only be called by composite [block
      parsers](#BlockParser.parse) or [markup skipping
      functions](#NodeSpec.composite).
      */
      moveBase(to) {
          this.basePos = to;
          this.baseIndent = this.countIndent(to, this.pos, this.indent);
      }
      /**
      Move the line's base position forward to the given _column_.
      */
      moveBaseColumn(indent) {
          this.baseIndent = indent;
          this.basePos = this.findColumn(indent);
      }
      /**
      Store a composite-block-level marker. Should be called from
      [markup skipping functions](#NodeSpec.composite) when they
      consume any non-whitespace characters.
      */
      addMarker(elt) {
          this.markers.push(elt);
      }
      /**
      Find the column position at `to`, optionally starting at a given
      position and column.
      */
      countIndent(to, from = 0, indent = 0) {
          for (let i = from; i < to; i++)
              indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
          return indent;
      }
      /**
      Find the position corresponding to the given column.
      */
      findColumn(goal) {
          let i = 0;
          for (let indent = 0; i < this.text.length && indent < goal; i++)
              indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
          return i;
      }
      /**
      @internal
      */
      scrub() {
          if (!this.baseIndent)
              return this.text;
          let result = "";
          for (let i = 0; i < this.basePos; i++)
              result += " ";
          return result + this.text.slice(this.basePos);
      }
  }
  function skipForList(bl, cx, line) {
      if (line.pos == line.text.length ||
          (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))
          return true;
      if (line.indent >= line.baseIndent + 4)
          return false;
      let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);
      return size > 0 &&
          (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&
          line.text.charCodeAt(line.pos + size - 1) == bl.value;
  }
  const DefaultSkipMarkup = {
      [Type.Blockquote](bl, cx, line) {
          if (line.next != 62 /* '>' */)
              return false;
          line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));
          line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));
          bl.end = cx.lineStart + line.text.length;
          return true;
      },
      [Type.ListItem](bl, _cx, line) {
          if (line.indent < line.baseIndent + bl.value && line.next > -1)
              return false;
          line.moveBaseColumn(line.baseIndent + bl.value);
          return true;
      },
      [Type.OrderedList]: skipForList,
      [Type.BulletList]: skipForList,
      [Type.Document]() { return true; }
  };
  function space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }
  function skipSpace(line, i = 0) {
      while (i < line.length && space(line.charCodeAt(i)))
          i++;
      return i;
  }
  function skipSpaceBack(line, i, to) {
      while (i > to && space(line.charCodeAt(i - 1)))
          i--;
      return i;
  }
  function isFencedCode(line) {
      if (line.next != 96 && line.next != 126 /* '`~' */)
          return -1;
      let pos = line.pos + 1;
      while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
          pos++;
      if (pos < line.pos + 3)
          return -1;
      if (line.next == 96)
          for (let i = pos; i < line.text.length; i++)
              if (line.text.charCodeAt(i) == 96)
                  return -1;
      return pos;
  }
  function isBlockquote(line) {
      return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;
  }
  function isHorizontalRule(line, cx, breaking) {
      if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)
          return -1;
      let count = 1;
      for (let pos = line.pos + 1; pos < line.text.length; pos++) {
          let ch = line.text.charCodeAt(pos);
          if (ch == line.next)
              count++;
          else if (!space(ch))
              return -1;
      }
      // Setext headers take precedence
      if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length &&
          cx.parser.leafBlockParsers.indexOf(DefaultLeafBlocks.SetextHeading) > -1)
          return -1;
      return count < 3 ? -1 : 1;
  }
  function inList(cx, type) {
      for (let i = cx.stack.length - 1; i >= 0; i--)
          if (cx.stack[i].type == type)
              return true;
      return false;
  }
  function isBulletList(line, cx, breaking) {
      return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&
          (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&
          (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;
  }
  function isOrderedList(line, cx, breaking) {
      let pos = line.pos, next = line.next;
      for (;;) {
          if (next >= 48 && next <= 57 /* '0-9' */)
              pos++;
          else
              break;
          if (pos == line.text.length)
              return -1;
          next = line.text.charCodeAt(pos);
      }
      if (pos == line.pos || pos > line.pos + 9 ||
          (next != 46 && next != 41 /* '.)' */) ||
          (pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||
          breaking && !inList(cx, Type.OrderedList) &&
              (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))
          return -1;
      return pos + 1 - line.pos;
  }
  function isAtxHeading(line) {
      if (line.next != 35 /* '#' */)
          return -1;
      let pos = line.pos + 1;
      while (pos < line.text.length && line.text.charCodeAt(pos) == 35)
          pos++;
      if (pos < line.text.length && line.text.charCodeAt(pos) != 32)
          return -1;
      let size = pos - line.pos;
      return size > 6 ? -1 : size;
  }
  function isSetextUnderline(line) {
      if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)
          return -1;
      let pos = line.pos + 1;
      while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
          pos++;
      let end = pos;
      while (pos < line.text.length && space(line.text.charCodeAt(pos)))
          pos++;
      return pos == line.text.length ? end : -1;
  }
  const EmptyLine = /^[ \t]*$/, CommentEnd = /-->/, ProcessingEnd = /\?>/;
  const HTMLBlockStyle = [
      [/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i],
      [/^\s*<!--/, CommentEnd],
      [/^\s*<\?/, ProcessingEnd],
      [/^\s*<![A-Z]/, />/],
      [/^\s*<!\[CDATA\[/, /\]\]>/],
      [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, EmptyLine],
      [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, EmptyLine]
  ];
  function isHTMLBlock(line, _cx, breaking) {
      if (line.next != 60 /* '<' */)
          return -1;
      let rest = line.text.slice(line.pos);
      for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)
          if (HTMLBlockStyle[i][0].test(rest))
              return i;
      return -1;
  }
  function getListIndent(line, pos) {
      let indentAfter = line.countIndent(pos, line.pos, line.indent);
      let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);
      return indented >= indentAfter + 5 ? indentAfter + 1 : indented;
  }
  function addCodeText(marks, from, to) {
      let last = marks.length - 1;
      if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)
          marks[last].to = to;
      else
          marks.push(elt(Type.CodeText, from, to));
  }
  // Rules for parsing blocks. A return value of false means the rule
  // doesn't apply here, true means it does. When true is returned and
  // `p.line` has been updated, the rule is assumed to have consumed a
  // leaf block. Otherwise, it is assumed to have opened a context.
  const DefaultBlockParsers = {
      LinkReference: undefined,
      IndentedCode(cx, line) {
          let base = line.baseIndent + 4;
          if (line.indent < base)
              return false;
          let start = line.findColumn(base);
          let from = cx.lineStart + start, to = cx.lineStart + line.text.length;
          let marks = [], pendingMarks = [];
          addCodeText(marks, from, to);
          while (cx.nextLine() && line.depth >= cx.stack.length) {
              if (line.pos == line.text.length) { // Empty
                  addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);
                  for (let m of line.markers)
                      pendingMarks.push(m);
              }
              else if (line.indent < base) {
                  break;
              }
              else {
                  if (pendingMarks.length) {
                      for (let m of pendingMarks) {
                          if (m.type == Type.CodeText)
                              addCodeText(marks, m.from, m.to);
                          else
                              marks.push(m);
                      }
                      pendingMarks = [];
                  }
                  addCodeText(marks, cx.lineStart - 1, cx.lineStart);
                  for (let m of line.markers)
                      marks.push(m);
                  to = cx.lineStart + line.text.length;
                  let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);
                  if (codeStart < to)
                      addCodeText(marks, codeStart, to);
              }
          }
          if (pendingMarks.length) {
              pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);
              if (pendingMarks.length)
                  line.markers = pendingMarks.concat(line.markers);
          }
          cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);
          return true;
      },
      FencedCode(cx, line) {
          let fenceEnd = isFencedCode(line);
          if (fenceEnd < 0)
              return false;
          let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;
          let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);
          let marks = [elt(Type.CodeMark, from, from + len)];
          if (infoFrom < infoTo)
              marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));
          for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {
              let i = line.pos;
              if (line.indent - line.baseIndent < 4)
                  while (i < line.text.length && line.text.charCodeAt(i) == ch)
                      i++;
              if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {
                  for (let m of line.markers)
                      marks.push(m);
                  marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));
                  cx.nextLine();
                  break;
              }
              else {
                  if (!first)
                      addCodeText(marks, cx.lineStart - 1, cx.lineStart);
                  for (let m of line.markers)
                      marks.push(m);
                  let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;
                  if (textStart < textEnd)
                      addCodeText(marks, textStart, textEnd);
              }
          }
          cx.addNode(cx.buffer.writeElements(marks, -from)
              .finish(Type.FencedCode, cx.prevLineEnd() - from), from);
          return true;
      },
      Blockquote(cx, line) {
          let size = isBlockquote(line);
          if (size < 0)
              return false;
          cx.startContext(Type.Blockquote, line.pos);
          cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);
          line.moveBase(line.pos + size);
          return null;
      },
      HorizontalRule(cx, line) {
          if (isHorizontalRule(line, cx, false) < 0)
              return false;
          let from = cx.lineStart + line.pos;
          cx.nextLine();
          cx.addNode(Type.HorizontalRule, from);
          return true;
      },
      BulletList(cx, line) {
          let size = isBulletList(line, cx, false);
          if (size < 0)
              return false;
          if (cx.block.type != Type.BulletList)
              cx.startContext(Type.BulletList, line.basePos, line.next);
          let newBase = getListIndent(line, line.pos + 1);
          cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
          cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
          line.moveBaseColumn(newBase);
          return null;
      },
      OrderedList(cx, line) {
          let size = isOrderedList(line, cx, false);
          if (size < 0)
              return false;
          if (cx.block.type != Type.OrderedList)
              cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));
          let newBase = getListIndent(line, line.pos + size);
          cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
          cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
          line.moveBaseColumn(newBase);
          return null;
      },
      ATXHeading(cx, line) {
          let size = isAtxHeading(line);
          if (size < 0)
              return false;
          let off = line.pos, from = cx.lineStart + off;
          let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;
          while (after > off && line.text.charCodeAt(after - 1) == line.next)
              after--;
          if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))
              after = line.text.length;
          let buf = cx.buffer
              .write(Type.HeaderMark, 0, size)
              .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);
          if (after < line.text.length)
              buf.write(Type.HeaderMark, after - off, endOfSpace - off);
          let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);
          cx.nextLine();
          cx.addNode(node, from);
          return true;
      },
      HTMLBlock(cx, line) {
          let type = isHTMLBlock(line, cx, false);
          if (type < 0)
              return false;
          let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];
          let marks = [], trailing = end != EmptyLine;
          while (!end.test(line.text) && cx.nextLine()) {
              if (line.depth < cx.stack.length) {
                  trailing = false;
                  break;
              }
              for (let m of line.markers)
                  marks.push(m);
          }
          if (trailing)
              cx.nextLine();
          let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;
          let to = cx.prevLineEnd();
          cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);
          return true;
      },
      SetextHeading: undefined // Specifies relative precedence for block-continue function
  };
  // This implements a state machine that incrementally parses link references. At each
  // next line, it looks ahead to see if the line continues the reference or not. If it
  // doesn't and a valid link is available ending before that line, it finishes that.
  // Similarly, on `finish` (when the leaf is terminated by external circumstances), it
  // creates a link reference if there's a valid reference up to the current point.
  class LinkReferenceParser {
      constructor(leaf) {
          this.stage = 0 /* RefStage.Start */;
          this.elts = [];
          this.pos = 0;
          this.start = leaf.start;
          this.advance(leaf.content);
      }
      nextLine(cx, line, leaf) {
          if (this.stage == -1 /* RefStage.Failed */)
              return false;
          let content = leaf.content + "\n" + line.scrub();
          let finish = this.advance(content);
          if (finish > -1 && finish < content.length)
              return this.complete(cx, leaf, finish);
          return false;
      }
      finish(cx, leaf) {
          if ((this.stage == 2 /* RefStage.Link */ || this.stage == 3 /* RefStage.Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)
              return this.complete(cx, leaf, leaf.content.length);
          return false;
      }
      complete(cx, leaf, len) {
          cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));
          return true;
      }
      nextStage(elt) {
          if (elt) {
              this.pos = elt.to - this.start;
              this.elts.push(elt);
              this.stage++;
              return true;
          }
          if (elt === false)
              this.stage = -1 /* RefStage.Failed */;
          return false;
      }
      advance(content) {
          for (;;) {
              if (this.stage == -1 /* RefStage.Failed */) {
                  return -1;
              }
              else if (this.stage == 0 /* RefStage.Start */) {
                  if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))
                      return -1;
                  if (content.charCodeAt(this.pos) != 58 /* ':' */)
                      return this.stage = -1 /* RefStage.Failed */;
                  this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));
                  this.pos++;
              }
              else if (this.stage == 1 /* RefStage.Label */) {
                  if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))
                      return -1;
              }
              else if (this.stage == 2 /* RefStage.Link */) {
                  let skip = skipSpace(content, this.pos), end = 0;
                  if (skip > this.pos) {
                      let title = parseLinkTitle(content, skip, this.start);
                      if (title) {
                          let titleEnd = lineEnd(content, title.to - this.start);
                          if (titleEnd > 0) {
                              this.nextStage(title);
                              end = titleEnd;
                          }
                      }
                  }
                  if (!end)
                      end = lineEnd(content, this.pos);
                  return end > 0 && end < content.length ? end : -1;
              }
              else { // RefStage.Title
                  return lineEnd(content, this.pos);
              }
          }
      }
  }
  function lineEnd(text, pos) {
      for (; pos < text.length; pos++) {
          let next = text.charCodeAt(pos);
          if (next == 10)
              break;
          if (!space(next))
              return -1;
      }
      return pos;
  }
  class SetextHeadingParser {
      nextLine(cx, line, leaf) {
          let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);
          let next = line.next;
          if (underline < 0)
              return false;
          let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);
          cx.nextLine();
          cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [
              ...cx.parser.parseInline(leaf.content, leaf.start),
              underlineMark
          ]));
          return true;
      }
      finish() {
          return false;
      }
  }
  const DefaultLeafBlocks = {
      LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },
      SetextHeading() { return new SetextHeadingParser; }
  };
  const DefaultEndLeaf = [
      (_, line) => isAtxHeading(line) >= 0,
      (_, line) => isFencedCode(line) >= 0,
      (_, line) => isBlockquote(line) >= 0,
      (p, line) => isBulletList(line, p, true) >= 0,
      (p, line) => isOrderedList(line, p, true) >= 0,
      (p, line) => isHorizontalRule(line, p, true) >= 0,
      (p, line) => isHTMLBlock(line, p, true) >= 0
  ];
  const scanLineResult = { text: "", end: 0 };
  /**
  Block-level parsing functions get access to this context object.
  */
  class BlockContext {
      /**
      @internal
      */
      constructor(
      /**
      The parser configuration used.
      */
      parser, 
      /**
      @internal
      */
      input, fragments, 
      /**
      @internal
      */
      ranges) {
          this.parser = parser;
          this.input = input;
          this.ranges = ranges;
          this.line = new Line();
          this.atEnd = false;
          /**
          For reused nodes on gaps, we can't directly put the original
          node into the tree, since that may be bigger than its parent.
          When this happens, we create a dummy tree that is replaced by
          the proper node in `injectGaps` @internal
          */
          this.reusePlaceholders = new Map;
          this.stoppedAt = null;
          /**
          The range index that absoluteLineStart points into @internal
          */
          this.rangeI = 0;
          this.to = ranges[ranges.length - 1].to;
          this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;
          this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);
          this.stack = [this.block];
          this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;
          this.readLine();
      }
      get parsedPos() {
          return this.absoluteLineStart;
      }
      advance() {
          if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)
              return this.finish();
          let { line } = this;
          for (;;) {
              for (let markI = 0;;) {
                  let next = line.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;
                  while (markI < line.markers.length && (!next || line.markers[markI].from < next.end)) {
                      let mark = line.markers[markI++];
                      this.addNode(mark.type, mark.from, mark.to);
                  }
                  if (!next)
                      break;
                  this.finishContext();
              }
              if (line.pos < line.text.length)
                  break;
              // Empty line
              if (!this.nextLine())
                  return this.finish();
          }
          if (this.fragments && this.reuseFragment(line.basePos))
              return null;
          start: for (;;) {
              for (let type of this.parser.blockParsers)
                  if (type) {
                      let result = type(this, line);
                      if (result != false) {
                          if (result == true)
                              return null;
                          line.forward();
                          continue start;
                      }
                  }
              break;
          }
          let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));
          for (let parse of this.parser.leafBlockParsers)
              if (parse) {
                  let parser = parse(this, leaf);
                  if (parser)
                      leaf.parsers.push(parser);
              }
          lines: while (this.nextLine()) {
              if (line.pos == line.text.length)
                  break;
              if (line.indent < line.baseIndent + 4) {
                  for (let stop of this.parser.endLeafBlock)
                      if (stop(this, line, leaf))
                          break lines;
              }
              for (let parser of leaf.parsers)
                  if (parser.nextLine(this, line, leaf))
                      return null;
              leaf.content += "\n" + line.scrub();
              for (let m of line.markers)
                  leaf.marks.push(m);
          }
          this.finishLeaf(leaf);
          return null;
      }
      stopAt(pos) {
          if (this.stoppedAt != null && this.stoppedAt < pos)
              throw new RangeError("Can't move stoppedAt forward");
          this.stoppedAt = pos;
      }
      reuseFragment(start) {
          if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||
              !this.fragments.matches(this.block.hash))
              return false;
          let taken = this.fragments.takeNodes(this);
          if (!taken)
              return false;
          this.absoluteLineStart += taken;
          this.lineStart = toRelative(this.absoluteLineStart, this.ranges);
          this.moveRangeI();
          if (this.absoluteLineStart < this.to) {
              this.lineStart++;
              this.absoluteLineStart++;
              this.readLine();
          }
          else {
              this.atEnd = true;
              this.readLine();
          }
          return true;
      }
      /**
      The number of parent blocks surrounding the current block.
      */
      get depth() {
          return this.stack.length;
      }
      /**
      Get the type of the parent block at the given depth. When no
      depth is passed, return the type of the innermost parent.
      */
      parentType(depth = this.depth - 1) {
          return this.parser.nodeSet.types[this.stack[depth].type];
      }
      /**
      Move to the next input line. This should only be called by
      (non-composite) [block parsers](#BlockParser.parse) that consume
      the line directly, or leaf block parser
      [`nextLine`](#LeafBlockParser.nextLine) methods when they
      consume the current line (and return true).
      */
      nextLine() {
          this.lineStart += this.line.text.length;
          if (this.absoluteLineEnd >= this.to) {
              this.absoluteLineStart = this.absoluteLineEnd;
              this.atEnd = true;
              this.readLine();
              return false;
          }
          else {
              this.lineStart++;
              this.absoluteLineStart = this.absoluteLineEnd + 1;
              this.moveRangeI();
              this.readLine();
              return true;
          }
      }
      /**
      Retrieve the text of the line after the current one, without
      actually moving the context's current line forward.
      */
      peekLine() {
          return this.scanLine(this.absoluteLineEnd + 1).text;
      }
      moveRangeI() {
          while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {
              this.rangeI++;
              this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);
          }
      }
      /**
      @internal
      Collect the text for the next line.
      */
      scanLine(start) {
          let r = scanLineResult;
          r.end = start;
          if (start >= this.to) {
              r.text = "";
          }
          else {
              r.text = this.lineChunkAt(start);
              r.end += r.text.length;
              if (this.ranges.length > 1) {
                  let textOffset = this.absoluteLineStart, rangeI = this.rangeI;
                  while (this.ranges[rangeI].to < r.end) {
                      rangeI++;
                      let nextFrom = this.ranges[rangeI].from;
                      let after = this.lineChunkAt(nextFrom);
                      r.end = nextFrom + after.length;
                      r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;
                      textOffset = r.end - r.text.length;
                  }
              }
          }
          return r;
      }
      /**
      @internal
      Populate this.line with the content of the next line. Skip
      leading characters covered by composite blocks.
      */
      readLine() {
          let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);
          this.absoluteLineEnd = end;
          line.reset(text);
          for (; line.depth < this.stack.length; line.depth++) {
              let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];
              if (!handler)
                  throw new Error("Unhandled block context " + Type[cx.type]);
              if (!handler(cx, this, line))
                  break;
              line.forward();
          }
      }
      lineChunkAt(pos) {
          let next = this.input.chunk(pos), text;
          if (!this.input.lineChunks) {
              let eol = next.indexOf("\n");
              text = eol < 0 ? next : next.slice(0, eol);
          }
          else {
              text = next == "\n" ? "" : next;
          }
          return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;
      }
      /**
      The end position of the previous line.
      */
      prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }
      /**
      @internal
      */
      startContext(type, start, value = 0) {
          this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);
          this.stack.push(this.block);
      }
      /**
      Start a composite block. Should only be called from [block
      parser functions](#BlockParser.parse) that return null.
      */
      startComposite(type, start, value = 0) {
          this.startContext(this.parser.getNodeType(type), start, value);
      }
      /**
      @internal
      */
      addNode(block, from, to) {
          if (typeof block == "number")
              block = new Tree(this.parser.nodeSet.types[block], none$1, none$1, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);
          this.block.addChild(block, from - this.block.from);
      }
      /**
      Add a block element. Can be called by [block
      parsers](#BlockParser.parse).
      */
      addElement(elt) {
          this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);
      }
      /**
      Add a block element from a [leaf parser](#LeafBlockParser). This
      makes sure any extra composite block markup (such as blockquote
      markers) inside the block are also added to the syntax tree.
      */
      addLeafElement(leaf, elt) {
          this.addNode(this.buffer
              .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)
              .finish(elt.type, elt.to - elt.from), elt.from);
      }
      /**
      @internal
      */
      finishContext() {
          let cx = this.stack.pop();
          let top = this.stack[this.stack.length - 1];
          top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);
          this.block = top;
      }
      finish() {
          while (this.stack.length > 1)
              this.finishContext();
          return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
      }
      addGaps(tree) {
          return this.ranges.length > 1 ?
              injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.reusePlaceholders) : tree;
      }
      /**
      @internal
      */
      finishLeaf(leaf) {
          for (let parser of leaf.parsers)
              if (parser.finish(this, leaf))
                  return;
          let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);
          this.addNode(this.buffer
              .writeElements(inline, -leaf.start)
              .finish(Type.Paragraph, leaf.content.length), leaf.start);
      }
      elt(type, from, to, children) {
          if (typeof type == "string")
              return elt(this.parser.getNodeType(type), from, to, children);
          return new TreeElement(type, from);
      }
      /**
      @internal
      */
      get buffer() { return new Buffer$1(this.parser.nodeSet); }
  }
  function injectGaps(ranges, rangeI, tree, offset, dummies) {
      let rangeEnd = ranges[rangeI].to;
      let children = [], positions = [], start = tree.from + offset;
      function movePastNext(upto, inclusive) {
          while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {
              let size = ranges[rangeI + 1].from - rangeEnd;
              offset += size;
              upto += size;
              rangeI++;
              rangeEnd = ranges[rangeI].to;
          }
      }
      for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {
          movePastNext(ch.from + offset, true);
          let from = ch.from + offset, node, reuse = dummies.get(ch.tree);
          if (reuse) {
              node = reuse;
          }
          else if (ch.to + offset > rangeEnd) {
              node = injectGaps(ranges, rangeI, ch, offset, dummies);
              movePastNext(ch.to + offset, false);
          }
          else {
              node = ch.toTree();
          }
          children.push(node);
          positions.push(from - start);
      }
      movePastNext(tree.to + offset, false);
      return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);
  }
  /**
  A Markdown parser configuration.
  */
  class MarkdownParser extends Parser {
      /**
      @internal
      */
      constructor(
      /**
      The parser's syntax [node
      types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).
      */
      nodeSet, 
      /**
      @internal
      */
      blockParsers, 
      /**
      @internal
      */
      leafBlockParsers, 
      /**
      @internal
      */
      blockNames, 
      /**
      @internal
      */
      endLeafBlock, 
      /**
      @internal
      */
      skipContextMarkup, 
      /**
      @internal
      */
      inlineParsers, 
      /**
      @internal
      */
      inlineNames, 
      /**
      @internal
      */
      wrappers) {
          super();
          this.nodeSet = nodeSet;
          this.blockParsers = blockParsers;
          this.leafBlockParsers = leafBlockParsers;
          this.blockNames = blockNames;
          this.endLeafBlock = endLeafBlock;
          this.skipContextMarkup = skipContextMarkup;
          this.inlineParsers = inlineParsers;
          this.inlineNames = inlineNames;
          this.wrappers = wrappers;
          /**
          @internal
          */
          this.nodeTypes = Object.create(null);
          for (let t of nodeSet.types)
              this.nodeTypes[t.name] = t.id;
      }
      createParse(input, fragments, ranges) {
          let parse = new BlockContext(this, input, fragments, ranges);
          for (let w of this.wrappers)
              parse = w(parse, input, fragments, ranges);
          return parse;
      }
      /**
      Reconfigure the parser.
      */
      configure(spec) {
          let config = resolveConfig(spec);
          if (!config)
              return this;
          let { nodeSet, skipContextMarkup } = this;
          let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;
          if (nonEmpty(config.defineNodes)) {
              skipContextMarkup = Object.assign({}, skipContextMarkup);
              let nodeTypes = nodeSet.types.slice(), styles;
              for (let s of config.defineNodes) {
                  let { name, block, composite, style } = typeof s == "string" ? { name: s } : s;
                  if (nodeTypes.some(t => t.name == name))
                      continue;
                  if (composite)
                      skipContextMarkup[nodeTypes.length] =
                          (bl, cx, line) => composite(cx, line, bl.value);
                  let id = nodeTypes.length;
                  let group = composite ? ["Block", "BlockContext"] : !block ? undefined
                      : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"];
                  nodeTypes.push(NodeType.define({
                      id,
                      name,
                      props: group && [[NodeProp.group, group]]
                  }));
                  if (style) {
                      if (!styles)
                          styles = {};
                      if (Array.isArray(style) || style instanceof Tag)
                          styles[name] = style;
                      else
                          Object.assign(styles, style);
                  }
              }
              nodeSet = new NodeSet(nodeTypes);
              if (styles)
                  nodeSet = nodeSet.extend(styleTags(styles));
          }
          if (nonEmpty(config.props))
              nodeSet = nodeSet.extend(...config.props);
          if (nonEmpty(config.remove)) {
              for (let rm of config.remove) {
                  let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);
                  if (block > -1)
                      blockParsers[block] = leafBlockParsers[block] = undefined;
                  if (inline > -1)
                      inlineParsers[inline] = undefined;
              }
          }
          if (nonEmpty(config.parseBlock)) {
              for (let spec of config.parseBlock) {
                  let found = blockNames.indexOf(spec.name);
                  if (found > -1) {
                      blockParsers[found] = spec.parse;
                      leafBlockParsers[found] = spec.leaf;
                  }
                  else {
                      let pos = spec.before ? findName(blockNames, spec.before)
                          : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;
                      blockParsers.splice(pos, 0, spec.parse);
                      leafBlockParsers.splice(pos, 0, spec.leaf);
                      blockNames.splice(pos, 0, spec.name);
                  }
                  if (spec.endLeaf)
                      endLeafBlock.push(spec.endLeaf);
              }
          }
          if (nonEmpty(config.parseInline)) {
              for (let spec of config.parseInline) {
                  let found = inlineNames.indexOf(spec.name);
                  if (found > -1) {
                      inlineParsers[found] = spec.parse;
                  }
                  else {
                      let pos = spec.before ? findName(inlineNames, spec.before)
                          : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;
                      inlineParsers.splice(pos, 0, spec.parse);
                      inlineNames.splice(pos, 0, spec.name);
                  }
              }
          }
          if (config.wrap)
              wrappers = wrappers.concat(config.wrap);
          return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);
      }
      /**
      @internal
      */
      getNodeType(name) {
          let found = this.nodeTypes[name];
          if (found == null)
              throw new RangeError(`Unknown node type '${name}'`);
          return found;
      }
      /**
      Parse the given piece of inline text at the given offset,
      returning an array of [`Element`](#Element) objects representing
      the inline content.
      */
      parseInline(text, offset) {
          let cx = new InlineContext(this, text, offset);
          outer: for (let pos = offset; pos < cx.end;) {
              let next = cx.char(pos);
              for (let token of this.inlineParsers)
                  if (token) {
                      let result = token(cx, next, pos);
                      if (result >= 0) {
                          pos = result;
                          continue outer;
                      }
                  }
              pos++;
          }
          return cx.resolveMarkers(0);
      }
  }
  function nonEmpty(a) {
      return a != null && a.length > 0;
  }
  function resolveConfig(spec) {
      if (!Array.isArray(spec))
          return spec;
      if (spec.length == 0)
          return null;
      let conf = resolveConfig(spec[0]);
      if (spec.length == 1)
          return conf;
      let rest = resolveConfig(spec.slice(1));
      if (!rest || !conf)
          return conf || rest;
      let conc = (a, b) => (a || none$1).concat(b || none$1);
      let wrapA = conf.wrap, wrapB = rest.wrap;
      return {
          props: conc(conf.props, rest.props),
          defineNodes: conc(conf.defineNodes, rest.defineNodes),
          parseBlock: conc(conf.parseBlock, rest.parseBlock),
          parseInline: conc(conf.parseInline, rest.parseInline),
          remove: conc(conf.remove, rest.remove),
          wrap: !wrapA ? wrapB : !wrapB ? wrapA :
              (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)
      };
  }
  function findName(names, name) {
      let found = names.indexOf(name);
      if (found < 0)
          throw new RangeError(`Position specified relative to unknown parser ${name}`);
      return found;
  }
  let nodeTypes = [NodeType.none];
  for (let i = 1, name; name = Type[i]; i++) {
      nodeTypes[i] = NodeType.define({
          id: i,
          name,
          props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]],
          top: name == "Document"
      });
  }
  const none$1 = [];
  let Buffer$1 = class Buffer {
      constructor(nodeSet) {
          this.nodeSet = nodeSet;
          this.content = [];
          this.nodes = [];
      }
      write(type, from, to, children = 0) {
          this.content.push(type, from, to, 4 + children * 4);
          return this;
      }
      writeElements(elts, offset = 0) {
          for (let e of elts)
              e.writeTo(this, offset);
          return this;
      }
      finish(type, length) {
          return Tree.build({
              buffer: this.content,
              nodeSet: this.nodeSet,
              reused: this.nodes,
              topID: type,
              length
          });
      }
  };
  /**
  Elements are used to compose syntax nodes during parsing.
  */
  class Element {
      /**
      @internal
      */
      constructor(
      /**
      The node's
      [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).
      */
      type, 
      /**
      The start of the node, as an offset from the start of the document.
      */
      from, 
      /**
      The end of the node.
      */
      to, 
      /**
      The node's child nodes @internal
      */
      children = none$1) {
          this.type = type;
          this.from = from;
          this.to = to;
          this.children = children;
      }
      /**
      @internal
      */
      writeTo(buf, offset) {
          let startOff = buf.content.length;
          buf.writeElements(this.children, offset);
          buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);
      }
      /**
      @internal
      */
      toTree(nodeSet) {
          return new Buffer$1(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
      }
  }
  class TreeElement {
      constructor(tree, from) {
          this.tree = tree;
          this.from = from;
      }
      get to() { return this.from + this.tree.length; }
      get type() { return this.tree.type.id; }
      get children() { return none$1; }
      writeTo(buf, offset) {
          buf.nodes.push(this.tree);
          buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);
      }
      toTree() { return this.tree; }
  }
  function elt(type, from, to, children) {
      return new Element(type, from, to, children);
  }
  const EmphasisUnderscore = { resolve: "Emphasis", mark: "EmphasisMark" };
  const EmphasisAsterisk = { resolve: "Emphasis", mark: "EmphasisMark" };
  const LinkStart = {}, ImageStart = {};
  class InlineDelimiter {
      constructor(type, from, to, side) {
          this.type = type;
          this.from = from;
          this.to = to;
          this.side = side;
      }
  }
  const Escapable = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
  let Punctuation = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
  try {
      Punctuation = new RegExp("[\\p{S}|\\p{P}]", "u");
  }
  catch (_) { }
  const DefaultInline = {
      Escape(cx, next, start) {
          if (next != 92 /* '\\' */ || start == cx.end - 1)
              return -1;
          let escaped = cx.char(start + 1);
          for (let i = 0; i < Escapable.length; i++)
              if (Escapable.charCodeAt(i) == escaped)
                  return cx.append(elt(Type.Escape, start, start + 2));
          return -1;
      },
      Entity(cx, next, start) {
          if (next != 38 /* '&' */)
              return -1;
          let m = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(cx.slice(start + 1, start + 31));
          return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;
      },
      InlineCode(cx, next, start) {
          if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)
              return -1;
          let pos = start + 1;
          while (pos < cx.end && cx.char(pos) == 96)
              pos++;
          let size = pos - start, curSize = 0;
          for (; pos < cx.end; pos++) {
              if (cx.char(pos) == 96) {
                  curSize++;
                  if (curSize == size && cx.char(pos + 1) != 96)
                      return cx.append(elt(Type.InlineCode, start, pos + 1, [
                          elt(Type.CodeMark, start, start + size),
                          elt(Type.CodeMark, pos + 1 - size, pos + 1)
                      ]));
              }
              else {
                  curSize = 0;
              }
          }
          return -1;
      },
      HTMLTag(cx, next, start) {
          if (next != 60 /* '<' */ || start == cx.end - 1)
              return -1;
          let after = cx.slice(start + 1, cx.end);
          let url = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(after);
          if (url) {
              return cx.append(elt(Type.Autolink, start, start + 1 + url[0].length, [
                  elt(Type.LinkMark, start, start + 1),
                  // url[0] includes the closing bracket, so exclude it from this slice
                  elt(Type.URL, start + 1, start + url[0].length),
                  elt(Type.LinkMark, start + url[0].length, start + 1 + url[0].length)
              ]));
          }
          let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);
          if (comment)
              return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));
          let procInst = /^\?[^]*?\?>/.exec(after);
          if (procInst)
              return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));
          let m = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(after);
          if (!m)
              return -1;
          return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));
      },
      Emphasis(cx, next, start) {
          if (next != 95 && next != 42)
              return -1;
          let pos = start + 1;
          while (cx.char(pos) == next)
              pos++;
          let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);
          let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);
          let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
          let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);
          let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);
          let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);
          let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);
          return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (canClose ? 2 /* Mark.Close */ : 0 /* Mark.None */)));
      },
      HardBreak(cx, next, start) {
          if (next == 92 /* '\\' */ && cx.char(start + 1) == 10 /* '\n' */)
              return cx.append(elt(Type.HardBreak, start, start + 2));
          if (next == 32) {
              let pos = start + 1;
              while (cx.char(pos) == 32)
                  pos++;
              if (cx.char(pos) == 10 && pos >= start + 2)
                  return cx.append(elt(Type.HardBreak, start, pos + 1));
          }
          return -1;
      },
      Link(cx, next, start) {
          return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Mark.Open */)) : -1;
      },
      Image(cx, next, start) {
          return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */
              ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Mark.Open */)) : -1;
      },
      LinkEnd(cx, next, start) {
          if (next != 93 /* ']' */)
              return -1;
          // Scanning back to the next link/image start marker
          for (let i = cx.parts.length - 1; i >= 0; i--) {
              let part = cx.parts[i];
              if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {
                  // If this one has been set invalid (because it would produce
                  // a nested link) or there's no valid link here ignore both.
                  if (!part.side || cx.skipSpace(part.to) == start && !/[(\[]/.test(cx.slice(start + 1, start + 2))) {
                      cx.parts[i] = null;
                      return -1;
                  }
                  // Finish the content and replace the entire range in
                  // this.parts with the link/image node.
                  let content = cx.takeContent(i);
                  let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);
                  // Set any open-link markers before this link to invalid.
                  if (part.type == LinkStart)
                      for (let j = 0; j < i; j++) {
                          let p = cx.parts[j];
                          if (p instanceof InlineDelimiter && p.type == LinkStart)
                              p.side = 0 /* Mark.None */;
                      }
                  return link.to;
              }
          }
          return -1;
      }
  };
  function finishLink(cx, content, type, start, startPos) {
      let { text } = cx, next = cx.char(startPos), endPos = startPos;
      content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));
      content.push(elt(Type.LinkMark, startPos - 1, startPos));
      if (next == 40 /* '(' */) {
          let pos = cx.skipSpace(startPos + 1);
          let dest = parseURL(text, pos - cx.offset, cx.offset), title;
          if (dest) {
              pos = cx.skipSpace(dest.to);
              // The destination and title must be separated by whitespace
              if (pos != dest.to) {
                  title = parseLinkTitle(text, pos - cx.offset, cx.offset);
                  if (title)
                      pos = cx.skipSpace(title.to);
              }
          }
          if (cx.char(pos) == 41 /* ')' */) {
              content.push(elt(Type.LinkMark, startPos, startPos + 1));
              endPos = pos + 1;
              if (dest)
                  content.push(dest);
              if (title)
                  content.push(title);
              content.push(elt(Type.LinkMark, pos, endPos));
          }
      }
      else if (next == 91 /* '[' */) {
          let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);
          if (label) {
              content.push(label);
              endPos = label.to;
          }
      }
      return elt(type, start, endPos, content);
  }
  // These return `null` when falling off the end of the input, `false`
  // when parsing fails otherwise (for use in the incremental link
  // reference parser).
  function parseURL(text, start, offset) {
      let next = text.charCodeAt(start);
      if (next == 60 /* '<' */) {
          for (let pos = start + 1; pos < text.length; pos++) {
              let ch = text.charCodeAt(pos);
              if (ch == 62 /* '>' */)
                  return elt(Type.URL, start + offset, pos + 1 + offset);
              if (ch == 60 || ch == 10 /* '<\n' */)
                  return false;
          }
          return null;
      }
      else {
          let depth = 0, pos = start;
          for (let escaped = false; pos < text.length; pos++) {
              let ch = text.charCodeAt(pos);
              if (space(ch)) {
                  break;
              }
              else if (escaped) {
                  escaped = false;
              }
              else if (ch == 40 /* '(' */) {
                  depth++;
              }
              else if (ch == 41 /* ')' */) {
                  if (!depth)
                      break;
                  depth--;
              }
              else if (ch == 92 /* '\\' */) {
                  escaped = true;
              }
          }
          return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;
      }
  }
  function parseLinkTitle(text, start, offset) {
      let next = text.charCodeAt(start);
      if (next != 39 && next != 34 && next != 40 /* '"\'(' */)
          return false;
      let end = next == 40 ? 41 : next;
      for (let pos = start + 1, escaped = false; pos < text.length; pos++) {
          let ch = text.charCodeAt(pos);
          if (escaped)
              escaped = false;
          else if (ch == end)
              return elt(Type.LinkTitle, start + offset, pos + 1 + offset);
          else if (ch == 92 /* '\\' */)
              escaped = true;
      }
      return null;
  }
  function parseLinkLabel(text, start, offset, requireNonWS) {
      for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {
          let ch = text.charCodeAt(pos);
          if (escaped)
              escaped = false;
          else if (ch == 93 /* ']' */)
              return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);
          else {
              if (requireNonWS && !space(ch))
                  requireNonWS = false;
              if (ch == 91 /* '[' */)
                  return false;
              else if (ch == 92 /* '\\' */)
                  escaped = true;
          }
      }
      return null;
  }
  /**
  Inline parsing functions get access to this context, and use it to
  read the content and emit syntax nodes.
  */
  class InlineContext {
      /**
      @internal
      */
      constructor(
      /**
      The parser that is being used.
      */
      parser, 
      /**
      The text of this inline section.
      */
      text, 
      /**
      The starting offset of the section in the document.
      */
      offset) {
          this.parser = parser;
          this.text = text;
          this.offset = offset;
          /**
          @internal
          */
          this.parts = [];
      }
      /**
      Get the character code at the given (document-relative)
      position.
      */
      char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }
      /**
      The position of the end of this inline section.
      */
      get end() { return this.offset + this.text.length; }
      /**
      Get a substring of this inline section. Again uses
      document-relative positions.
      */
      slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }
      /**
      @internal
      */
      append(elt) {
          this.parts.push(elt);
          return elt.to;
      }
      /**
      Add a [delimiter](#DelimiterType) at this given position. `open`
      and `close` indicate whether this delimiter is opening, closing,
      or both. Returns the end of the delimiter, for convenient
      returning from [parse functions](#InlineParser.parse).
      */
      addDelimiter(type, from, to, open, close) {
          return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (close ? 2 /* Mark.Close */ : 0 /* Mark.None */)));
      }
      /**
      Returns true when there is an unmatched link or image opening
      token before the current position.
      */
      get hasOpenLink() {
          for (let i = this.parts.length - 1; i >= 0; i--) {
              let part = this.parts[i];
              if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart))
                  return true;
          }
          return false;
      }
      /**
      Add an inline element. Returns the end of the element.
      */
      addElement(elt) {
          return this.append(elt);
      }
      /**
      Resolve markers between this.parts.length and from, wrapping matched markers in the
      appropriate node and updating the content of this.parts. @internal
      */
      resolveMarkers(from) {
          // Scan forward, looking for closing tokens
          for (let i = from; i < this.parts.length; i++) {
              let close = this.parts[i];
              if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Mark.Close */)))
                  continue;
              let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;
              let closeSize = close.to - close.from;
              let open, j = i - 1;
              // Continue scanning for a matching opening token
              for (; j >= from; j--) {
                  let part = this.parts[j];
                  if (part instanceof InlineDelimiter && (part.side & 1 /* Mark.Open */) && part.type == close.type &&
                      // Ignore emphasis delimiters where the character count doesn't match
                      !(emp && ((close.side & 1 /* Mark.Open */) || (part.side & 2 /* Mark.Close */)) &&
                          (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {
                      open = part;
                      break;
                  }
              }
              if (!open)
                  continue;
              let type = close.type.resolve, content = [];
              let start = open.from, end = close.to;
              // Emphasis marker effect depends on the character count. Size consumed is minimum of the two
              // markers.
              if (emp) {
                  let size = Math.min(2, open.to - open.from, closeSize);
                  start = open.to - size;
                  end = close.from + size;
                  type = size == 1 ? "Emphasis" : "StrongEmphasis";
              }
              // Move the covered region into content, optionally adding marker nodes
              if (open.type.mark)
                  content.push(this.elt(open.type.mark, start, open.to));
              for (let k = j + 1; k < i; k++) {
                  if (this.parts[k] instanceof Element)
                      content.push(this.parts[k]);
                  this.parts[k] = null;
              }
              if (close.type.mark)
                  content.push(this.elt(close.type.mark, close.from, end));
              let element = this.elt(type, start, end, content);
              // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.
              this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;
              let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;
              // Insert the new element in this.parts
              if (keep)
                  this.parts.splice(i, 0, element);
              else
                  this.parts[i] = element;
          }
          // Collect the elements remaining in this.parts into an array.
          let result = [];
          for (let i = from; i < this.parts.length; i++) {
              let part = this.parts[i];
              if (part instanceof Element)
                  result.push(part);
          }
          return result;
      }
      /**
      Find an opening delimiter of the given type. Returns `null` if
      no delimiter is found, or an index that can be passed to
      [`takeContent`](#InlineContext.takeContent) otherwise.
      */
      findOpeningDelimiter(type) {
          for (let i = this.parts.length - 1; i >= 0; i--) {
              let part = this.parts[i];
              if (part instanceof InlineDelimiter && part.type == type)
                  return i;
          }
          return null;
      }
      /**
      Remove all inline elements and delimiters starting from the
      given index (which you should get from
      [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),
      resolve delimiters inside of them, and return them as an array
      of elements.
      */
      takeContent(startIndex) {
          let content = this.resolveMarkers(startIndex);
          this.parts.length = startIndex;
          return content;
      }
      /**
      Skip space after the given (document) position, returning either
      the position of the next non-space character or the end of the
      section.
      */
      skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }
      elt(type, from, to, children) {
          if (typeof type == "string")
              return elt(this.parser.getNodeType(type), from, to, children);
          return new TreeElement(type, from);
      }
  }
  function injectMarks(elements, marks) {
      if (!marks.length)
          return elements;
      if (!elements.length)
          return marks;
      let elts = elements.slice(), eI = 0;
      for (let mark of marks) {
          while (eI < elts.length && elts[eI].to < mark.to)
              eI++;
          if (eI < elts.length && elts[eI].from < mark.from) {
              let e = elts[eI];
              if (e instanceof Element)
                  elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));
          }
          else {
              elts.splice(eI++, 0, mark);
          }
      }
      return elts;
  }
  // These are blocks that can span blank lines, and should thus only be
  // reused if their next sibling is also being reused.
  const NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];
  class FragmentCursor {
      constructor(fragments, input) {
          this.fragments = fragments;
          this.input = input;
          // Index into fragment array
          this.i = 0;
          // Active fragment
          this.fragment = null;
          this.fragmentEnd = -1;
          // Cursor into the current fragment, if any. When `moveTo` returns
          // true, this points at the first block after `pos`.
          this.cursor = null;
          if (fragments.length)
              this.fragment = fragments[this.i++];
      }
      nextFragment() {
          this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;
          this.cursor = null;
          this.fragmentEnd = -1;
      }
      moveTo(pos, lineStart) {
          while (this.fragment && this.fragment.to <= pos)
              this.nextFragment();
          if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))
              return false;
          if (this.fragmentEnd < 0) {
              let end = this.fragment.to;
              while (end > 0 && this.input.read(end - 1, end) != "\n")
                  end--;
              this.fragmentEnd = end ? end - 1 : 0;
          }
          let c = this.cursor;
          if (!c) {
              c = this.cursor = this.fragment.tree.cursor();
              c.firstChild();
          }
          let rPos = pos + this.fragment.offset;
          while (c.to <= rPos)
              if (!c.parent())
                  return false;
          for (;;) {
              if (c.from >= rPos)
                  return this.fragment.from <= lineStart;
              if (!c.childAfter(rPos))
                  return false;
          }
      }
      matches(hash) {
          let tree = this.cursor.tree;
          return tree && tree.prop(NodeProp.contextHash) == hash;
      }
      takeNodes(cx) {
          let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);
          let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;
          let prevEnd = end, prevI = blockI;
          for (;;) {
              if (cur.to - off > fragEnd) {
                  if (cur.type.isAnonymous && cur.firstChild())
                      continue;
                  break;
              }
              let pos = toRelative(cur.from - off, cx.ranges);
              if (cur.to - off <= cx.ranges[cx.rangeI].to) { // Fits in current range
                  cx.addNode(cur.tree, pos);
              }
              else {
                  let dummy = new Tree(cx.parser.nodeSet.types[Type.Paragraph], [], [], 0, cx.block.hashProp);
                  cx.reusePlaceholders.set(dummy, cur.tree);
                  cx.addNode(dummy, pos);
              }
              // Taken content must always end in a block, because incremental
              // parsing happens on block boundaries. Never stop directly
              // after an indented code block, since those can continue after
              // any number of blank lines.
              if (cur.type.is("Block")) {
                  if (NotLast.indexOf(cur.type.id) < 0) {
                      end = cur.to - off;
                      blockI = cx.block.children.length;
                  }
                  else {
                      end = prevEnd;
                      blockI = prevI;
                      prevEnd = cur.to - off;
                      prevI = cx.block.children.length;
                  }
              }
              if (!cur.nextSibling())
                  break;
          }
          while (cx.block.children.length > blockI) {
              cx.block.children.pop();
              cx.block.positions.pop();
          }
          return end - start;
      }
  }
  // Convert an input-stream-relative position to a
  // Markdown-doc-relative position by subtracting the size of all input
  // gaps before `abs`.
  function toRelative(abs, ranges) {
      let pos = abs;
      for (let i = 1; i < ranges.length; i++) {
          let gapFrom = ranges[i - 1].to, gapTo = ranges[i].from;
          if (gapFrom < abs)
              pos -= gapTo - gapFrom;
      }
      return pos;
  }
  const markdownHighlighting = styleTags({
      "Blockquote/...": tags.quote,
      HorizontalRule: tags.contentSeparator,
      "ATXHeading1/... SetextHeading1/...": tags.heading1,
      "ATXHeading2/... SetextHeading2/...": tags.heading2,
      "ATXHeading3/...": tags.heading3,
      "ATXHeading4/...": tags.heading4,
      "ATXHeading5/...": tags.heading5,
      "ATXHeading6/...": tags.heading6,
      "Comment CommentBlock": tags.comment,
      Escape: tags.escape,
      Entity: tags.character,
      "Emphasis/...": tags.emphasis,
      "StrongEmphasis/...": tags.strong,
      "Link/... Image/...": tags.link,
      "OrderedList/... BulletList/...": tags.list,
      "BlockQuote/...": tags.quote,
      "InlineCode CodeText": tags.monospace,
      "URL Autolink": tags.url,
      "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": tags.processingInstruction,
      "CodeInfo LinkLabel": tags.labelName,
      LinkTitle: tags.string,
      Paragraph: tags.content
  });
  /**
  The default CommonMark parser.
  */
  const parser$1 = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);
  /**
  Extension providing
  [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
  superscript using `^` markers.
  */
  ({
      defineNodes: [
          { name: "Superscript", style: tags.special(tags.content) },
          { name: "SuperscriptMark", style: tags.processingInstruction }
      ]});
  /**
  Extension providing
  [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
  subscript using `~` markers.
  */
  ({
      defineNodes: [
          { name: "Subscript", style: tags.special(tags.content) },
          { name: "SubscriptMark", style: tags.processingInstruction }
      ]});

  var range$1 = (() => {
  const f263 = (function (var_args) {
  const G__2661 = arguments.length;
  switch (G__2661) {case 2:
  return f263.cljs$core$IFn$_invoke$arity$2((arguments[0]), (arguments[1]));
  case 1:
  return f263.cljs$core$IFn$_invoke$arity$1((arguments[0]));
  default:
  throw new Error(str("Invalid arity: ", alength(arguments)))}
  });
  f263.cljs$core$IFn$_invoke$arity$2 = (function (from, to) {
  return EditorSelection.range(from, to);
  });
  f263.cljs$core$IFn$_invoke$arity$1 = (function (range) {
  return EditorSelection.range(range.from, range.to);
  });
  f263.cljs$lang$maxFixedArity = 2;
  return f263;
  })();
  var cursor$1 = function (from) {
  return EditorSelection.cursor(from);
  };
  var constrain = function (state, from) {
  return min(max(from, 0), state.doc.length);
  };
  var eq_QMARK_$1 = function (sel1, sel2) {
  return sel1.eq(sel2);
  };

  var node_js_QMARK_ = some_QMARK_(globalThis.process);
  var user_event_annotation = function (event_name) {
  return Transaction.userEvent.of(event_name);
  };
  var get_user_event_annotation = function (tr) {
  return tr.annotation(Transaction.userEvent);
  };
  var guard = function (x, f) {
  if (truth_(f(x))) {
  return x;}
  };
  var from_to$1 = function (p1, p2) {
  if ((p1) > (p2)) {
  return ({ "from": p2, "to": p1 });} else {
  return ({ "from": p1, "to": p2 });}
  };
  var dispatch_some = function (view, tr) {
  if (truth_(tr)) {
  view.dispatch(tr);
  return true;} else {
  return false;}
  };
  var insertion = (() => {
  const f278 = (function (var_args) {
  const G__2811 = arguments.length;
  switch (G__2811) {case 2:
  return f278.cljs$core$IFn$_invoke$arity$2((arguments[0]), (arguments[1]));
  case 3:
  return f278.cljs$core$IFn$_invoke$arity$3((arguments[0]), (arguments[1]), (arguments[2]));
  default:
  throw new Error(str("Invalid arity: ", alength(arguments)))}
  });
  f278.cljs$core$IFn$_invoke$arity$2 = (function (from, s) {
  return insertion(from, from, s);
  });
  f278.cljs$core$IFn$_invoke$arity$3 = (function (from, to, s) {
  return ({ "changes": ({ "insert": s, "from": from, "to": to }), "cursor": (from) + (count(s)) });
  });
  f278.cljs$lang$maxFixedArity = 3;
  return f278;
  })();
  var deletion = (() => {
  const f282 = (function (var_args) {
  const G__2851 = arguments.length;
  switch (G__2851) {case 1:
  return f282.cljs$core$IFn$_invoke$arity$1((arguments[0]));
  case 2:
  return f282.cljs$core$IFn$_invoke$arity$2((arguments[0]), (arguments[1]));
  default:
  throw new Error(str("Invalid arity: ", alength(arguments)))}
  });
  f282.cljs$core$IFn$_invoke$arity$1 = (function (from) {
  return deletion(max(0, (from - 1)), from);
  });
  f282.cljs$core$IFn$_invoke$arity$2 = (function (from, to) {
  const from3 = ((from) === (to)) ? (max(0, (from - 1))) : (from);
  return ({ "cursor": from3, "changes": ({ "from": from3, "to": to }) });
  });
  f282.cljs$lang$maxFixedArity = 2;
  return f282;
  })();
  var line_content_at = function (state, from) {
  return get((() => {
  const parent__39__auto__1 = get_in(state, ["doc"]);
  const f__40__auto__2 = get(parent__39__auto__1, "lineAt");
  return f__40__auto__2.call(parent__39__auto__1, from);
  })(), "text");
  };
  var map_cursor = function (original_range, state, update_map) {
  if (truth_(map_QMARK_(update_map))) ; else {
  throw new Error("Assert failed: (map? update-map)")}const map__12 = guard(update_map, map_QMARK_);
  const mapped3 = get(map__12, "cursor/mapped");
  const cursor4 = get(map__12, "cursor");
  const from_to5 = get(map__12, "from-to");
  const range6 = get(map__12, "range");
  const changes7 = get(map__12, "changes");
  const change_desc8 = (truth_(changes7)) ? (state.changes(changes7)) : (null);
  const G__2869 = ({ "range": (() => {
  const or__24281__auto__10 = range6;
  if (truth_(or__24281__auto__10)) {
  return or__24281__auto__10;} else {
  const or__24281__auto__11 = (truth_(mapped3)) ? (cursor$1(change_desc8.mapPos(mapped3))) : ((truth_(cursor4)) ? (cursor$1(cursor4)) : ((truth_(from_to5)) ? (range$1(from_to5(0), from_to5(1))) : (null)));
  if (truth_(or__24281__auto__11)) {
  return or__24281__auto__11;} else {
  return original_range;}}
  })() });
  if (truth_(change_desc8)) {
  G__2869.changes = change_desc8;
  return G__2869;} else {
  return G__2869;}
  };
  var update_ranges = (() => {
  const f287 = (function (var_args) {
  const G__2901 = arguments.length;
  switch (G__2901) {case 2:
  return f287.cljs$core$IFn$_invoke$arity$2((arguments[0]), (arguments[1]));
  case 3:
  return f287.cljs$core$IFn$_invoke$arity$3((arguments[0]), (arguments[1]), (arguments[2]));
  default:
  throw new Error(str("Invalid arity: ", alength(arguments)))}
  });
  f287.cljs$core$IFn$_invoke$arity$2 = (function (state, f) {
  return update_ranges(state, null, f);
  });
  f287.cljs$core$IFn$_invoke$arity$3 = (function (state, tr_specs, f) {
  return state.update((function (_PERCENT_1) {
  return Object.assign(_PERCENT_1, tr_specs);
  })(state.changeByRange((function (range) {
  const or__24281__auto__3 = (() => {
  const temp__24003__auto__4 = f(range);
  if ((temp__24003__auto__4 == null)) {
  return null;} else {
  const result5 = temp__24003__auto__4;
  return map_cursor(range, state, result5);}
  })();
  if (truth_(or__24281__auto__3)) {
  return or__24281__auto__3;} else {
  return ({ "range": range });}
  }))));
  });
  f287.cljs$lang$maxFixedArity = 3;
  return f287;
  })();
  var update_lines = (() => {
  const f291 = (function (var_args) {
  const args2921 = [];
  const len__25081__auto__2 = arguments.length;
  let i2933 = 0;
  while(true){
  if ((i2933) < (len__25081__auto__2)) {
  args2921.push((arguments[i2933]));
  let G__4 = (i2933 + 1);
  i2933 = G__4;
  continue;
  }break;
  }
  const argseq__25399__auto__5 = ((2) < (args2921.length)) ? (args2921.slice(2)) : (null);
  return f291.cljs$core$IFn$_invoke$arity$variadic((arguments[0]), (arguments[1]), argseq__25399__auto__5);
  });
  f291.cljs$core$IFn$_invoke$arity$variadic = (function (state, f, p__297) {
  const vec__610 = p__297;
  const map__911 = nth(vec__610, 0, null);
  const from12 = get(map__911, "from", 0);
  const to13 = get(map__911, "to");
  const spec14 = get(map__911, "spec");
  const iterator15 = state.doc.iter();
  let result16 = iterator15.next();
  let changes17 = [];
  let from_pos18 = from12;
  let line_num19 = 1;
  while(true){
  const map__2021 = result16;
  const done22 = get(map__2021, "done");
  const lineBreak23 = get(map__2021, "lineBreak");
  const value24 = get(map__2021, "value");
  if (truth_((() => {
  const or__24281__auto__25 = done22;
  if (truth_(or__24281__auto__25)) {
  return or__24281__auto__25;} else {
  return (from12) > (to13);}
  })())) {
  return state.update(Object.assign(({ "changes": state.changes(changes17) }), spec14));} else {
  let G__26 = iterator15.next();
  let G__27 = (() => {
  const temp__23901__auto__28 = (() => {
  const and__24299__auto__29 = not(lineBreak23);
  if (and__24299__auto__29) {
  return f(from_pos18, value24, line_num19);} else {
  return and__24299__auto__29;}
  })();
  if (truth_(temp__23901__auto__28)) {
  const change30 = temp__23901__auto__28;
  const G__29831 = changes17;
  G__29831.push(change30);
  return G__29831;} else {
  return changes17;}
  })();
  let G__32 = (from_pos18) + (count(value24));
  let G__33 = (() => {
  const G__29934 = line_num19;
  if (truth_(lineBreak23)) {
  return (G__29934 + 1);} else {
  return G__29934;}
  })();
  result16 = G__26;
  changes17 = G__27;
  from_pos18 = G__32;
  line_num19 = G__33;
  continue;
  }}

  });
  f291.cljs$lang$maxFixedArity = 2;
  f291.cljs$lang$applyTo = (function (seq294) {
  const G__29535 = first(seq294);
  const seq29436 = next(seq294);
  const G__29637 = first(seq29436);
  const seq29438 = next(seq29436);
  const self__25117__auto__39 = this;
  return self__25117__auto__39.cljs$core$IFn$_invoke$arity$variadic(G__29535, G__29637, seq29438);
  });
  return f291;
  })();
  var update_selected_lines = function (state, f) {
  const at_line1 = atom(-1);
  const doc2 = state.doc;
  return state.changeByRange((function (p__300) {
  const map__34 = p__300;
  const range5 = map__34;
  const from6 = get(map__34, "from");
  const to7 = get(map__34, "to");
  const anchor8 = get(map__34, "anchor");
  const head9 = get(map__34, "head");
  const changes10 = [];
  let line11 = doc2.lineAt(from6);
  while(true){
  const map__1213 = line11;
  const line_number14 = get(map__1213, "number");
  const line_to15 = get(map__1213, "to");
  if ((line11.number) > (deref(at_line1))) {
  reset_BANG_(at_line1, line_number14);
  f(line11, changes10, range5);}const temp__23901__auto__16 = (() => {
  const and__24299__auto__17 = (to7) > (line_to15);
  if (and__24299__auto__17) {
  return guard(doc2.lineAt((line_to15 + 1)), (function (_PERCENT_1) {
  return (_PERCENT_1.number) > (line_number14);
  }));} else {
  return and__24299__auto__17;}
  })();
  if (truth_(temp__23901__auto__16)) {
  const next_line18 = temp__23901__auto__16;
  let G__19 = next_line18;
  line11 = G__19;
  continue;
  } else {
  const change_set20 = state.changes(changes10);
  return ({ "changes": changes10, "range": EditorSelection.range(change_set20.mapPos(anchor8, 1), change_set20.mapPos(head9, 1)) });}}

  }));
  };
  var iter_changed_lines = function (p__301, f) {
  const map__13 = p__301;
  const tr4 = map__13;
  const map__25 = get(map__13, "state");
  const state6 = map__25;
  const doc7 = get(map__25, "doc");
  const changes8 = get(map__13, "changes");
  const effects9 = get(map__13, "effects");
  const selection10 = get(map__13, "selection");
  const at_line11 = atom(-1);
  const next_changes12 = [];
  changes8.iterChanges((function (_from_a, _to_a, from_b, to_b, _inserted) {
  const map__1415 = doc7.lineAt(from_b);
  const line16 = map__1415;
  const line_number17 = get(map__1415, "number");
  const line_to18 = get(map__1415, "to");
  let line19 = line16;
  while(true){
  if ((line_number17) > (deref(at_line11))) {
  reset_BANG_(at_line11, line_number17);
  f(line19, next_changes12);}if ((to_b) <= (line_to18)) {
  return null;} else {
  const next_line20 = doc7.lineAt((line_to18 + 1));
  if (truth_((() => {
  const and__24299__auto__21 = next_line20;
  if (truth_(and__24299__auto__21)) {
  return (next_line20.number) > (line19.number);} else {
  return and__24299__auto__21;}
  })())) {
  let G__22 = next_line20;
  line19 = G__22;
  continue;
  }}break;
  }

  }));
  const next_changeset23 = state6.changes(next_changes12);
  if (truth_(seq(next_changes12))) {
  const G__30224 = assoc_BANG_(select_keys(tr4, ["annotations", "scrollIntoView", "reconfigure"]), "changes", changes8.compose(next_changeset23));
  const G__30225 = (truth_(selection10)) ? (assoc_BANG_(G__30224, "selection", state6.selection.map(next_changeset23))) : (G__30224);
  if (truth_(effects9)) {
  return assoc_BANG_(G__30225, "effects", StateEffect.mapEffects(effects9, next_changeset23));} else {
  return G__30225;}} else {
  return tr4;}
  };
  var something_selected_QMARK_$1 = function (p__303) {
  const map__13 = p__303;
  const map__24 = get(map__13, "selection");
  const ranges5 = get(map__24, "ranges");
  return not(every_QMARK_((function (_PERCENT_1) {
  return _PERCENT_1.empty;
  }), ranges5));
  };
  var range_str = function (state, p__304) {
  const map__12 = p__304;
  const from4 = get(map__12, "from");
  const to5 = get(map__12, "to");
  return str((() => {
  const parent__39__auto__6 = get_in(state, ["doc"]);
  const f__40__auto__7 = get(parent__39__auto__6, "slice");
  return f__40__auto__7.call(parent__39__auto__6, from4, to5);
  })());
  };

  var coll_prop = props$1.coll;
  var prefix_coll_prop = props$1.prefixColl;
  var prefix_edge_prop = props$1.prefixEdge;
  var prefix_container_prop = props$1.prefixContainer;
  var start_edge_prop = NodeProp.closedBy;
  var end_edge_prop = NodeProp.openedBy;
  var same_edge_prop = props$1.sameEdge;
  var type = function (node) {
  return node.type;
  };
  var start = function (node) {
  if (truth_(node.from)) ; else {
  throw new Error("Assert failed: (.-from node)")}return node.from;
  };
  var end = function (node) {
  if (truth_(node.to)) ; else {
  throw new Error("Assert failed: (.-to node)")}return node.to;
  };
  var up$1 = function (node) {
  return node.parent;
  };
  var down = function (node) {
  if (not(fn_QMARK_(node.lastChild))) ; else {
  throw new Error("Assert failed: (not (fn? (.-lastChild node)))")}return node.firstChild;
  };
  var down_last = function (node) {
  if (not(fn_QMARK_(node.lastChild))) ; else {
  throw new Error("Assert failed: (not (fn? (.-lastChild node)))")}return node.lastChild;
  };
  var depth = function (node) {
  let node1 = node;
  let i2 = 0;
  while(true){
  const temp__23951__auto__3 = up$1(node1);
  if ((temp__23951__auto__3 == null)) {
  return i2;} else {
  const parent4 = temp__23951__auto__3;
  let G__5 = parent4;
  let G__6 = (i2 + 1);
  node1 = G__5;
  i2 = G__6;
  continue;
  }}

  };
  var left = function (node) {
  return up$1(node).childBefore(start(node));
  };
  var lefts = function (node) {
  return take_while(identity, iterate(left, left(node)));
  };
  var right = function (node) {
  return up$1(node).childAfter(end(node));
  };
  var rights = function (node) {
  return take_while(identity, iterate(right, right(node)));
  };
  var coll_type_QMARK_ = function (node_type) {
  return node_type.prop(coll_prop);
  };
  var prefix_type_QMARK_ = function (node_type) {
  return node_type.prop(prefix_coll_prop);
  };
  var prefix_edge_type_QMARK_ = function (node_type) {
  return node_type.prop(prefix_edge_prop);
  };
  var prefix_container_type_QMARK_ = function (node_type) {
  return node_type.prop(prefix_container_prop);
  };
  var same_edge_type_QMARK_ = function (node_type) {
  return node_type.prop(same_edge_prop);
  };
  var start_edge_type_QMARK_ = function (node_type) {
  return node_type.prop(start_edge_prop);
  };
  var end_edge_type_QMARK_ = function (node_type) {
  return node_type.prop(end_edge_prop);
  };
  var top_type_QMARK_ = function (node_type) {
  return node_type.isTop;
  };
  var error_type_QMARK_ = function (node_type) {
  return node_type.isError;
  };
  var prefix_edge_QMARK_ = function (n) {
  return prefix_edge_type_QMARK_(type(n));
  };
  var prefix_container_QMARK_ = function (n) {
  return prefix_container_type_QMARK_(type(n));
  };
  var same_edge_QMARK_ = function (n) {
  return same_edge_type_QMARK_(type(n));
  };
  var start_edge_QMARK_ = function (n) {
  return start_edge_type_QMARK_(type(n));
  };
  var end_edge_QMARK_ = function (n) {
  return end_edge_type_QMARK_(type(n));
  };
  var left_edge_type_QMARK_ = function (t) {
  const or__24281__auto__1 = start_edge_type_QMARK_(t);
  if (truth_(or__24281__auto__1)) {
  return or__24281__auto__1;} else {
  const or__24281__auto__2 = same_edge_type_QMARK_(t);
  if (truth_(or__24281__auto__2)) {
  return or__24281__auto__2;} else {
  return prefix_edge_type_QMARK_(t);}}
  };
  var left_edge_QMARK_ = function (n) {
  return left_edge_type_QMARK_(type(n));
  };
  var right_edge_type_QMARK_ = function (t) {
  const or__24281__auto__1 = end_edge_type_QMARK_(t);
  if (truth_(or__24281__auto__1)) {
  return or__24281__auto__1;} else {
  return same_edge_type_QMARK_(t);}
  };
  var right_edge_QMARK_ = function (n) {
  return right_edge_type_QMARK_(type(n));
  };
  var edge_QMARK_ = function (n) {
  const t1 = type(n);
  const or__24281__auto__2 = start_edge_type_QMARK_(t1);
  if (truth_(or__24281__auto__2)) {
  return or__24281__auto__2;} else {
  const or__24281__auto__3 = end_edge_type_QMARK_(t1);
  if (truth_(or__24281__auto__3)) {
  return or__24281__auto__3;} else {
  const or__24281__auto__4 = same_edge_type_QMARK_(t1);
  if (truth_(or__24281__auto__4)) {
  return or__24281__auto__4;} else {
  return prefix_type_QMARK_(t1);}}}
  };
  var closed_by = function (n) {
  const G__2151 = type(n).prop(NodeProp.closedBy);
  if ((G__2151 == null)) {
  return null;} else {
  return G__2151[0];}
  };
  var opened_by = function (n) {
  const G__2161 = type(n).prop(NodeProp.openedBy);
  if ((G__2161 == null)) {
  return null;} else {
  return G__2161[0];}
  };
  var name = function (node) {
  return node.name;
  };
  var error_QMARK_ = function (node) {
  return error_type_QMARK_(node);
  };
  var top_QMARK_ = function (node) {
  return top_type_QMARK_(type(node));
  };
  var program_QMARK_ = function (node) {
  return identical_QMARK_("Program", name(node));
  };
  var string_QMARK_ = function (node) {
  return identical_QMARK_("String", name(node));
  };
  var regexp_QMARK_ = function (node) {
  return identical_QMARK_("RegExp", name(node));
  };
  var line_comment_QMARK_ = function (node) {
  return identical_QMARK_("LineComment", name(node));
  };
  var coll_QMARK_ = function (node) {
  return coll_type_QMARK_(type(node));
  };
  var terminal_type_QMARK_ = function (node_type) {
  if (truth_(top_type_QMARK_(node_type))) {
  return false;} else {
  if (truth_(node_type.prop(prefix_coll_prop))) {
  return false;} else {
  if (truth_(node_type.prop(coll_prop))) {
  return false;} else {
  if (truth_(identical_QMARK_("Meta", name(node_type)))) {
  return false;} else {
  if (truth_(identical_QMARK_("TaggedLiteral", name(node_type)))) {
  return false;} else {
  if (truth_(identical_QMARK_("ConstructorCall", name(node_type)))) {
  return false;} else {
  {
  return true;}}}}}}}
  };
  var balanced_QMARK_ = function (p__217) {
  const map__12 = p__217;
  const firstChild4 = get(map__12, "firstChild");
  const lastChild5 = get(map__12, "lastChild");
  const temp__23901__auto__6 = closed_by(firstChild4);
  if (truth_(temp__23901__auto__6)) {
  const closing7 = temp__23901__auto__6;
  const and__24299__auto__8 = (closing7) === (name(lastChild5));
  if (and__24299__auto__8) {
  return (end(firstChild4)) !== (end(lastChild5));} else {
  return and__24299__auto__8;}} else {
  return true;}
  };
  var ancestors = function (node) {
  const temp__24003__auto__1 = up$1(node);
  if ((temp__24003__auto__1 == null)) {
  return null;} else {
  const parent2 = temp__24003__auto__1;
  return cons(parent2, new LazySeq((function () {
  return ancestors(parent2);
  })));}
  };
  var closest = function (node, pred) {
  if (truth_(pred(node))) {
  return node;} else {
  return reduce((function (_, x) {
  if (truth_(pred(x))) {
  return reduced(x);}
  }), null, ancestors(node));}
  };
  var highest = function (node, pred) {
  return reduce((function (found, x) {
  if (truth_(pred(x))) {
  return x;} else {
  return reduced(found);}
  }), null, cons(node, ancestors(node)));
  };
  var children = (() => {
  const f218 = (function (var_args) {
  const G__2211 = arguments.length;
  switch (G__2211) {case 3:
  return f218.cljs$core$IFn$_invoke$arity$3((arguments[0]), (arguments[1]), (arguments[2]));
  case 1:
  return f218.cljs$core$IFn$_invoke$arity$1((arguments[0]));
  default:
  throw new Error(str("Invalid arity: ", alength(arguments)))}
  });
  f218.cljs$core$IFn$_invoke$arity$3 = (function (parent, from, dir) {
  const temp__24003__auto__3 = (() => {
  const G__2224 = dir;
  switch (G__2224) {case 1:
  return parent.childAfter(from);
  case -1:
  return parent.childBefore(from);
  default:
  throw new Error(str("No matching clause: ", G__2224))}
  })();
  if ((temp__24003__auto__3 == null)) {
  return null;} else {
  const child6 = temp__24003__auto__3;
  return cons(child6, new LazySeq((function () {
  return children(parent, (() => {
  const G__2237 = dir;
  switch (G__2237) {case 1:
  return end(child6);
  case -1:
  return start(child6);
  default:
  throw new Error(str("No matching clause: ", G__2237))}
  })(), dir);
  })));}
  });
  f218.cljs$core$IFn$_invoke$arity$1 = (function (subtree) {
  return children(subtree, start(subtree), 1);
  });
  f218.cljs$lang$maxFixedArity = 3;
  return f218;
  })();
  var eq_QMARK_ = function (x, y) {
  const and__24299__auto__1 = (start(x)) == (start(y));
  if (and__24299__auto__1) {
  const and__24299__auto__2 = (end(x)) == (end(y));
  if (and__24299__auto__2) {
  return (depth(x)) == (depth(y));} else {
  return and__24299__auto__2;}} else {
  return and__24299__auto__1;}
  };
  var empty_QMARK_ = function (node) {
  const type_name1 = name(node);
  if (truth_(coll_QMARK_(node))) {
  return eq_QMARK_(right(down(node)), down_last(node));} else {
  if (("String") === (type_name1)) {
  return (end(down(node))) == (start(down_last(node)));} else {
  {
  return false;}}}
  };
  var from_to = (() => {
  const f224 = (function (var_args) {
  const G__2271 = arguments.length;
  switch (G__2271) {case 2:
  return f224.cljs$core$IFn$_invoke$arity$2((arguments[0]), (arguments[1]));
  case 1:
  return f224.cljs$core$IFn$_invoke$arity$1((arguments[0]));
  default:
  throw new Error(str("Invalid arity: ", alength(arguments)))}
  });
  f224.cljs$core$IFn$_invoke$arity$2 = (function (from, to) {
  return ({ "from": from, "to": to });
  });
  f224.cljs$core$IFn$_invoke$arity$1 = (function (node) {
  return from_to(start(node), end(node));
  });
  f224.cljs$lang$maxFixedArity = 2;
  return f224;
  })();
  var range = function (node) {
  return range$1(start(node), end(node));
  };
  var string = (() => {
  const f228 = (function (var_args) {
  const G__2311 = arguments.length;
  switch (G__2311) {case 2:
  return f228.cljs$core$IFn$_invoke$arity$2((arguments[0]), (arguments[1]));
  case 3:
  return f228.cljs$core$IFn$_invoke$arity$3((arguments[0]), (arguments[1]), (arguments[2]));
  default:
  throw new Error(str("Invalid arity: ", alength(arguments)))}
  });
  f228.cljs$core$IFn$_invoke$arity$2 = (function (state, node) {
  return string(state, start(node), end(node));
  });
  f228.cljs$core$IFn$_invoke$arity$3 = (function (state, from, to) {
  return state.doc.sliceString(from, to, "\n");
  });
  f228.cljs$lang$maxFixedArity = 3;
  return f228;
  })();
  var ancestor_QMARK_ = function (parent, child) {
  return boolean$((() => {
  const and__24299__auto__1 = (start(parent)) <= (start(child));
  if (and__24299__auto__1) {
  const and__24299__auto__2 = (end(parent)) >= (end(child));
  if (and__24299__auto__2) {
  return (depth(parent)) < (depth(child));} else {
  return and__24299__auto__2;}} else {
  return and__24299__auto__1;}
  })());
  };
  var move_toward = function (node, to_node) {
  if (truth_(eq_QMARK_(node, to_node))) {
  return null;} else {
  const G__2321 = compare$1(start(to_node), start(node));
  switch (G__2321) {case 0:
  if (truth_(ancestor_QMARK_(to_node, node))) {
  return up$1(node);} else {
  if (truth_(ancestor_QMARK_(node, to_node))) {
  return down(node);} else {
  return null;}}
  case -1:
  if (truth_(ancestor_QMARK_(node, to_node))) {
  return down_last(node);} else {
  const or__24281__auto__3 = left(node);
  if (truth_(or__24281__auto__3)) {
  return or__24281__auto__3;} else {
  return up$1(node);}}
  case 1:
  if (truth_(ancestor_QMARK_(node, to_node))) {
  return down(node);} else {
  const or__24281__auto__4 = right(node);
  if (truth_(or__24281__auto__4)) {
  return or__24281__auto__4;} else {
  return up$1(node);}}
  default:
  throw new Error(str("No matching clause: ", G__2321))}}
  };
  var nodes_between = function (node, to_node) {
  return take_while(identity, iterate((function (_PERCENT_1) {
  return move_toward(_PERCENT_1, to_node);
  }), node));
  };
  var require_balance_QMARK_ = function (node) {
  const or__24281__auto__1 = coll_QMARK_(node);
  if (truth_(or__24281__auto__1)) {
  return or__24281__auto__1;} else {
  const or__24281__auto__2 = string_QMARK_(node);
  if (truth_(or__24281__auto__2)) {
  return or__24281__auto__2;} else {
  return regexp_QMARK_(node);}}
  };
  var tree = (() => {
  const f233 = (function (var_args) {
  const G__2361 = arguments.length;
  switch (G__2361) {case 1:
  return f233.cljs$core$IFn$_invoke$arity$1((arguments[0]));
  case 2:
  return f233.cljs$core$IFn$_invoke$arity$2((arguments[0]), (arguments[1]));
  case 3:
  return f233.cljs$core$IFn$_invoke$arity$3((arguments[0]), (arguments[1]), (arguments[2]));
  default:
  throw new Error(str("Invalid arity: ", alength(arguments)))}
  });
  f233.cljs$core$IFn$_invoke$arity$1 = (function (state) {
  return syntaxTree(state);
  });
  f233.cljs$core$IFn$_invoke$arity$2 = (function (state, pos) {
  return syntaxTree(state).resolveInner(pos);
  });
  f233.cljs$core$IFn$_invoke$arity$3 = (function (state, pos, dir) {
  return syntaxTree(state).resolveInner(pos, dir);
  });
  f233.cljs$lang$maxFixedArity = 3;
  return f233;
  })();
  var cursor = (() => {
  const f237 = (function (var_args) {
  const G__2401 = arguments.length;
  switch (G__2401) {case 1:
  return f237.cljs$core$IFn$_invoke$arity$1((arguments[0]));
  case 2:
  return f237.cljs$core$IFn$_invoke$arity$2((arguments[0]), (arguments[1]));
  case 3:
  return f237.cljs$core$IFn$_invoke$arity$3((arguments[0]), (arguments[1]), (arguments[2]));
  default:
  throw new Error(str("Invalid arity: ", alength(arguments)))}
  });
  f237.cljs$core$IFn$_invoke$arity$1 = (function (tree) {
  return tree.cursor();
  });
  f237.cljs$core$IFn$_invoke$arity$2 = (function (tree, pos) {
  return tree.cursorAt(pos);
  });
  f237.cljs$core$IFn$_invoke$arity$3 = (function (tree, pos, dir) {
  return tree.cursorAt(pos, dir);
  });
  f237.cljs$lang$maxFixedArity = 3;
  return f237;
  })();
  var terminal_cursor = function (tree, pos, dir) {
  let i1 = pos;
  while(true){
  const c2 = cursor(tree, i1, dir);
  const type3 = c2.type;
  if (truth_(top_type_QMARK_(type3))) {
  return null;} else {
  if (truth_(terminal_type_QMARK_(c2.type))) {
  return c2;} else {
  {
  let G__4 = (dir) + (i1);
  i1 = G__4;
  continue;
  }}}}

  };
  var up_here = function (node) {
  const from1 = start(node);
  const or__24281__auto__2 = highest(node, (function (_PERCENT_1) {
  return (from1) === (start(_PERCENT_1));
  }));
  if (truth_(or__24281__auto__2)) {
  return or__24281__auto__2;} else {
  return node;}
  };
  var topmost_cursor = function (state, from) {
  return up_here(tree(state, from, 1).node).cursor();
  };
  var terminal_nodes = function (state, from, to) {
  const cursor1 = topmost_cursor(state, from);
  let found2 = [];
  while(true){
  const node_type3 = type(cursor1);
  if ((start(cursor1)) > (to)) {
  return found2;} else {
  if (truth_((() => {
  const or__24281__auto__4 = terminal_type_QMARK_(node_type3);
  if (truth_(or__24281__auto__4)) {
  return or__24281__auto__4;} else {
  return error_QMARK_(node_type3);}
  })())) {
  const found5 = conj(found2, ({ "type": node_type3, "from": start(cursor1), "to": end(cursor1) }));
  cursor1.lastChild();
  if (truth_(cursor1.next())) {
  let G__6 = found5;
  found2 = G__6;
  continue;
  } else {
  return found5;}} else {
  {
  if (truth_(cursor1.next())) {
  let G__7 = found2;
  found2 = G__7;
  continue;
  } else {
  return found2;}}}}}

  };
  var balanced_range = (() => {
  const f241 = (function (var_args) {
  const G__2441 = arguments.length;
  switch (G__2441) {case 2:
  return f241.cljs$core$IFn$_invoke$arity$2((arguments[0]), (arguments[1]));
  case 3:
  return f241.cljs$core$IFn$_invoke$arity$3((arguments[0]), (arguments[1]), (arguments[2]));
  default:
  throw new Error(str("Invalid arity: ", alength(arguments)))}
  });
  f241.cljs$core$IFn$_invoke$arity$2 = (function (state, node) {
  return balanced_range(state, start(node), end(node));
  });
  f241.cljs$core$IFn$_invoke$arity$3 = (function (state, from, to) {
  const vec__39 = sort([from, to]);
  const from10 = nth(vec__39, 0, null);
  const to11 = nth(vec__39, 1, null);
  const from_node12 = tree(state, from10, 1);
  const to_node13 = tree(state, to11, -1);
  const from14 = (truth_(require_balance_QMARK_(from_node12))) ? (start(from_node12)) : (from10);
  const to15 = (truth_(require_balance_QMARK_(to_node13))) ? (end(to_node13)) : (to11);
  const vec__616 = reduce((function (p__245, node_between) {
  const vec__1720 = p__245;
  const left21 = nth(vec__1720, 0, null);
  const right22 = nth(vec__1720, 1, null);
  return [(truth_(ancestor_QMARK_(node_between, from_node12))) ? (start(node_between)) : (left21), (truth_(ancestor_QMARK_(node_between, to_node13))) ? (end(node_between)) : (right22)];
  }), [from14, to15], map((function (_PERCENT_1) {
  const G__24623 = _PERCENT_1;
  if (truth_(edge_QMARK_(_PERCENT_1))) {
  return up$1(G__24623);} else {
  return G__24623;}
  }), nodes_between(from_node12, to_node13)));
  const left24 = nth(vec__616, 0, null);
  const right25 = nth(vec__616, 1, null);
  return range$1(left24, right25);
  });
  f241.cljs$lang$maxFixedArity = 3;
  return f241;
  })();
  var inner_span = function (p__247) {
  const map__12 = p__247;
  const node3 = map__12;
  const firstChild4 = get(map__12, "firstChild");
  const lastChild5 = get(map__12, "lastChild");
  return ({ "from": (truth_(left_edge_QMARK_(firstChild4))) ? (end(firstChild4)) : (start(node3)), "to": (truth_(right_edge_QMARK_(lastChild5))) ? (start(lastChild5)) : (end(node3)) });
  };
  var prefix = function (node) {
  const temp__24003__auto__1 = up$1(node);
  if ((temp__24003__auto__1 == null)) {
  return null;} else {
  const parent2 = temp__24003__auto__1;
  const or__24281__auto__3 = guard(parent2, prefix_container_QMARK_);
  if (truth_(or__24281__auto__3)) {
  return or__24281__auto__3;} else {
  return guard(down(parent2), prefix_edge_QMARK_);}}
  };
  var left_edge_with_prefix = function (state, node) {
  return str((() => {
  const G__2481 = prefix(node);
  if ((G__2481 == null)) {
  return null;} else {
  return string(state, G__2481);}
  })(), name(down(node)));
  };
  var with_prefix = function (node) {
  const G__2491 = node;
  if (truth_(prefix(node))) {
  return up$1(G__2491);} else {
  return G__2491;}
  };
  var node_BAR_ = function (state, pos) {
  const G__2501 = tree(state, pos, -1);
  if ((G__2501 == null)) {
  return null;} else {
  return guard(G__2501, (function (_PERCENT_1) {
  return (pos) === (end(_PERCENT_1));
  }));}
  };
  var _BAR_node = function (state, pos) {
  const G__2511 = tree(state, pos, 1);
  if ((G__2511 == null)) {
  return null;} else {
  return guard(G__2511, (function (_PERCENT_1) {
  return (pos) === (start(_PERCENT_1));
  }));}
  };
  var nearest_touching = function (state, pos, dir) {
  const L1 = (() => {
  const G__2522 = tree(state, pos, -1);
  if ((G__2522 == null)) {
  return null;} else {
  return guard(G__2522, (function ({to}) {
  return (pos) === (to);
  }));}
  })();
  const R3 = (() => {
  const G__2534 = tree(state, pos, 1);
  if ((G__2534 == null)) {
  return null;} else {
  return guard(G__2534, (function ({from}) {
  return (pos) === (from);
  }));}
  })();
  const mid5 = tree(state, pos);
  const G__2546 = dir;
  switch (G__2546) {case 1:
  const or__24281__auto__8 = guard(R3, every_pred(some_QMARK_, (function (_PERCENT_1) {
  const or__24281__auto__9 = same_edge_QMARK_(_PERCENT_1);
  if (truth_(or__24281__auto__9)) {
  return or__24281__auto__9;} else {
  return not(right_edge_QMARK_(_PERCENT_1));}
  })));
  if (truth_(or__24281__auto__8)) {
  return or__24281__auto__8;} else {
  const or__24281__auto__10 = L1;
  if (truth_(or__24281__auto__10)) {
  return or__24281__auto__10;} else {
  const or__24281__auto__11 = R3;
  if (truth_(or__24281__auto__11)) {
  return or__24281__auto__11;} else {
  return mid5;}}}
  case -1:
  const or__24281__auto__12 = guard(L1, every_pred(some_QMARK_, (function (_PERCENT_1) {
  const or__24281__auto__13 = same_edge_QMARK_(_PERCENT_1);
  if (truth_(or__24281__auto__13)) {
  return or__24281__auto__13;} else {
  return not(left_edge_QMARK_(_PERCENT_1));}
  })));
  if (truth_(or__24281__auto__12)) {
  return or__24281__auto__12;} else {
  const or__24281__auto__14 = R3;
  if (truth_(or__24281__auto__14)) {
  return or__24281__auto__14;} else {
  const or__24281__auto__15 = L1;
  if (truth_(or__24281__auto__15)) {
  return or__24281__auto__15;} else {
  return mid5;}}}
  default:
  throw new Error(str("No matching clause: ", G__2546))}
  };
  var embedded_QMARK_ = (() => {
  const f255 = (function (var_args) {
  const G__2581 = arguments.length;
  switch (G__2581) {case 1:
  return f255.cljs$core$IFn$_invoke$arity$1((arguments[0]));
  case 2:
  return f255.cljs$core$IFn$_invoke$arity$2((arguments[0]), (arguments[1]));
  default:
  throw new Error(str("Invalid arity: ", alength(arguments)))}
  });
  f255.cljs$core$IFn$_invoke$arity$1 = (function (state) {
  return embedded_QMARK_(state, state.selection.main.head);
  });
  f255.cljs$core$IFn$_invoke$arity$2 = (function (state, pos) {
  return identical_QMARK_(parser$1.nodeTypes.FencedCode, state.tree.resolve(pos).type.id);
  });
  f255.cljs$lang$maxFixedArity = 2;
  return f255;
  })();
  var within_program_QMARK_ = (() => {
  const f259 = (function (var_args) {
  const G__2621 = arguments.length;
  switch (G__2621) {case 1:
  return f259.cljs$core$IFn$_invoke$arity$1((arguments[0]));
  case 2:
  return f259.cljs$core$IFn$_invoke$arity$2((arguments[0]), (arguments[1]));
  default:
  throw new Error(str("Invalid arity: ", alength(arguments)))}
  });
  f259.cljs$core$IFn$_invoke$arity$1 = (function (state) {
  return within_program_QMARK_(state, state.selection.main.head);
  });
  f259.cljs$core$IFn$_invoke$arity$2 = (function (state, pos) {
  const n3 = tree(state, pos);
  const or__24281__auto__4 = program_QMARK_(n3);
  if (truth_(or__24281__auto__4)) {
  return or__24281__auto__4;} else {
  return some(program_QMARK_, ancestors(n3));}
  });
  f259.cljs$lang$maxFixedArity = 2;
  return f259;
  })();

  var in_string_QMARK_ = function (state, pos) {
  return contains_QMARK_(new Set(["StringContent", "String"]), name(tree(state, pos)));
  };
  var escaped_QMARK_ = function (state, pos) {
  return ("\\") === (state.doc.slice(max(0, (pos - 1)), pos).toString());
  };
  var backspace_backoff = function (state, from, to) {
  if (truth_((() => {
  const and__24299__auto__1 = (() => {
  const G__1422 = node_BAR_(state, (from - 1));
  if ((G__1422 == null)) {
  return null;} else {
  return guard(G__1422, line_comment_QMARK_);}
  })();
  if (truth_(and__24299__auto__1)) {
  return not((() => {
  const or__24281__auto__3 = blank_QMARK_(line_content_at(state, from));
  if (truth_(or__24281__auto__3)) {
  return or__24281__auto__3;} else {
  const G__1434 = _BAR_node(state, from);
  if ((G__1434 == null)) {
  return null;} else {
  return guard(G__1434, line_comment_QMARK_);}}
  })());} else {
  return and__24299__auto__1;}
  })())) {
  return ({ "cursor": (from - 1) });} else {
  return deletion(from, to);}
  };
  var handle_backspace = function (p__144) {
  const map__12 = p__144;
  const state3 = map__12;
  if (truth_((() => {
  const and__24299__auto__4 = (1) === (state3.selection.ranges.length);
  if (and__24299__auto__4) {
  const range5 = get_in(state3, ["selection", "ranges", 0]);
  const and__24299__auto__6 = range5.empty;
  if (truth_(and__24299__auto__6)) {
  return (0) === (range5.from);} else {
  return and__24299__auto__6;}} else {
  return and__24299__auto__4;}
  })())) {
  return null;} else {
  return update_ranges(state3, ({ "annotations": user_event_annotation("delete") }), (function (p__145) {
  const map__78 = p__145;
  const head10 = get(map__78, "head");
  const empty11 = get(map__78, "empty");
  const anchor12 = get(map__78, "anchor");
  const map__1314 = from_to$1(head10, anchor12);
  const from16 = get(map__1314, "from");
  const to17 = get(map__1314, "to");
  const node_BAR_18 = tree(state3).resolveInner(from16, -1);
  const parent19 = node_BAR_18.parent;
  if (truth_((() => {
  const or__24281__auto__20 = not(empty11);
  if (or__24281__auto__20) {
  return or__24281__auto__20;} else {
  const or__24281__auto__21 = ("StringContent") === (name(tree(state3, from16, -1)));
  if (or__24281__auto__21) {
  return or__24281__auto__21;} else {
  const and__24299__auto__22 = parent19;
  if (truth_(and__24299__auto__22)) {
  const and__24299__auto__23 = not(balanced_QMARK_(parent19));
  if (and__24299__auto__23) {
  return left_edge_QMARK_(node_BAR_18);} else {
  return and__24299__auto__23;}} else {
  return and__24299__auto__22;}}}
  })())) {
  return deletion(from16, to17);} else {
  if (truth_((() => {
  const and__24299__auto__24 = right_edge_QMARK_(node_BAR_18);
  if (truth_(and__24299__auto__24)) {
  return (from16) == (end(parent19));} else {
  return and__24299__auto__24;}
  })())) {
  return ({ "cursor": (from16 - 1) });} else {
  if (truth_((() => {
  const and__24299__auto__25 = (() => {
  const or__24281__auto__26 = start_edge_QMARK_(node_BAR_18);
  if (truth_(or__24281__auto__26)) {
  return or__24281__auto__26;} else {
  return same_edge_QMARK_(node_BAR_18);}
  })();
  if (truth_(and__24299__auto__25)) {
  return (start(node_BAR_18)) == (start(parent19));} else {
  return and__24299__auto__25;}
  })())) {
  if (truth_(empty_QMARK_(up$1(node_BAR_18)))) {
  return ({ "cursor": start(parent19), "changes": [from_to$1(start(parent19), end(parent19))] });} else {
  return ({ "cursor": from16 });}} else {
  {
  return backspace_backoff(state3, from16, to17);}}}}
  }));}
  };
  var coll_pairs = (function (x) {
  return get(({ "(": ")", "[": "]", "{": "}", "\"": "\"" }), x);
  });
  var handle_open = function (state, open) {
  const close1 = coll_pairs(open);
  return update_ranges(state, ({ "annotations": user_event_annotation("input") }), (function ({from,to,head,anchor,empty}) {
  if (truth_(in_string_QMARK_(state, from))) {
  if (("\"") === (open)) {
  return insertion(head, "\\\"");} else {
  return insertion(from, to, open);}} else {
  if (truth_(escaped_QMARK_(state, from))) {
  return insertion(from, to, open);} else {
  {
  if (truth_(empty)) {
  return ({ "changes": ({ "insert": str(open, close1), "from": head }), "cursor": (head) + (count(open)) });} else {
  return ({ "changes": [({ "insert": open, "from": from }), ({ "insert": close1, "from": to })], "from-to": [(anchor) + (count(open)), (head) + (count(open))] });}}}}
  }));
  };
  var handle_close = function (state, key_name) {
  return update_ranges(state, ({ "annotations": user_event_annotation("input") }), (function (p__146) {
  const map__12 = p__146;
  const empty4 = get(map__12, "empty");
  const head5 = get(map__12, "head");
  const from6 = get(map__12, "from");
  const to7 = get(map__12, "to");
  if (truth_((() => {
  const or__24281__auto__8 = in_string_QMARK_(state, from6);
  if (truth_(or__24281__auto__8)) {
  return or__24281__auto__8;} else {
  return escaped_QMARK_(state, from6);}
  })())) {
  return insertion(from6, to7, key_name);} else {
  if (truth_(empty4)) {
  const or__24281__auto__9 = (() => {
  const unbalanced10 = (() => {
  const G__14711 = tree(state, head5, -1);
  const G__14712 = ((G__14711 == null)) ? (null) : (ancestors(G__14711));
  const G__14713 = ((G__14712 == null)) ? (null) : (filter(every_pred(coll_QMARK_, complement(balanced_QMARK_)), G__14712));
  if ((G__14713 == null)) {
  return null;} else {
  return first(G__14713);}
  })();
  const closing14 = (() => {
  const G__14815 = unbalanced10;
  const G__14816 = ((G__14815 == null)) ? (null) : (down(G__14815));
  if ((G__14816 == null)) {
  return null;} else {
  return closed_by(G__14816);}
  })();
  const pos17 = (() => {
  const G__14918 = unbalanced10;
  if ((G__14918 == null)) {
  return null;} else {
  return end(G__14918);}
  })();
  if (truth_((() => {
  const and__24299__auto__19 = closing14;
  if (truth_(and__24299__auto__19)) {
  return (closing14) === (key_name);} else {
  return and__24299__auto__19;}
  })())) {
  return ({ "changes": ({ "from": pos17, "insert": closing14 }), "cursor": (pos17 + 1) });}
  })();
  if (truth_(or__24281__auto__9)) {
  return or__24281__auto__9;} else {
  const or__24281__auto__20 = (() => {
  const temp__23976__auto__21 = (() => {
  const temp__23976__auto__22 = terminal_cursor(tree(state), head5, 1);
  if (truth_(temp__23976__auto__22)) {
  const cursor23 = temp__23976__auto__22;
  while(true){
  if (truth_(right_edge_type_QMARK_(cursor23.type))) {
  return end(cursor23);} else {
  if (truth_(cursor23.next())) {
  continue;
  }}break;
  }
  }
  })();
  if (truth_(temp__23976__auto__21)) {
  const close_node_end24 = temp__23976__auto__21;
  return ({ "cursor": close_node_end24 });}
  })();
  if (truth_(or__24281__auto__20)) {
  return or__24281__auto__20;} else {
  return ({ "cursor": head5 });}}}}
  }));
  };
  var handle_open_cmd = function (key_name) {
  return function (p__151) {
  const map__12 = p__151;
  const view3 = map__12;
  const state4 = get(map__12, "state");
  return dispatch_some(view3, handle_open(state4, key_name));
  };
  };
  var handle_close_cmd = function (key_name) {
  return function (p__152) {
  const map__12 = p__152;
  const view3 = map__12;
  const state4 = get(map__12, "state");
  return dispatch_some(view3, handle_close(state4, key_name));
  };
  };
  var guard_scope = function (cmd) {
  return function (p__153) {
  const map__12 = p__153;
  const view3 = map__12;
  const state4 = get(map__12, "state");
  if (truth_((() => {
  const or__24281__auto__5 = embedded_QMARK_(state4);
  if (truth_(or__24281__auto__5)) {
  return or__24281__auto__5;} else {
  return within_program_QMARK_(state4);}
  })())) {
  return cmd(view3);} else {
  return false;}
  };
  };
  var extension$2 = function () {
  return Prec.high(keymap.of([({ "key": "Backspace", "run": guard_scope((function (p__154) {
  const map__12 = p__154;
  const view3 = map__12;
  const state4 = get(map__12, "state");
  return dispatch_some(view3, handle_backspace(state4));
  })) }), ({ "key": "(", "run": guard_scope(handle_open_cmd("(")) }), ({ "key": "[", "run": guard_scope(handle_open_cmd("[")) }), ({ "key": "{", "run": guard_scope(handle_open_cmd("{")) }), ({ "key": "\"", "run": guard_scope(handle_open_cmd("\"")) }), ({ "key": ")", "run": guard_scope(handle_close_cmd(")")) }), ({ "key": "]", "run": guard_scope(handle_close_cmd("]")) }), ({ "key": "}", "run": guard_scope(handle_close_cmd("}")) })]));
  };

  var spaces = function (state, n) {
  return indentString(state, n);
  };
  var indent_node_props = function (p__180) {
  const map__12 = p__180;
  const type3 = map__12;
  const type_name4 = get(map__12, "name");
  return function (p__181) {
  const map__56 = p__181;
  const context7 = map__56;
  const node8 = get(map__56, "node");
  if (("Program") === (type_name4)) {
  return 0;} else {
  if (truth_(coll_type_QMARK_(type3))) {
  const G__1829 = context7.column(end(down(node8)));
  if (truth_((() => {
  const and__24299__auto__10 = ("List") === (type_name4);
  if (and__24299__auto__10) {
  return contains_QMARK_(new Set(["Operator", "DefLike", "NS"]), (() => {
  const G__18311 = node8;
  const G__18312 = ((G__18311 == null)) ? (null) : (down(G__18311));
  const G__18313 = ((G__18312 == null)) ? (null) : (right(G__18312));
  if ((G__18313 == null)) {
  return null;} else {
  return name(G__18313);}
  })());} else {
  return and__24299__auto__10;}
  })())) {
  return (G__1829) + (1);} else {
  return G__1829;}} else {
  {
  return -1;}}}
  };
  };
  var props = indentNodeProp.add(indent_node_props);
  var get_indentation = function (context, pos) {
  return getIndentation(context.state, pos);
  };
  var make_indent_context = function (state) {
  return new IndentContext(state);
  };
  var expected_space = function (n1, n2) {
  if (truth_((() => {
  const or__24281__auto__1 = start_edge_type_QMARK_(n1);
  if (truth_(or__24281__auto__1)) {
  return or__24281__auto__1;} else {
  const or__24281__auto__2 = prefix_edge_type_QMARK_(n1);
  if (truth_(or__24281__auto__2)) {
  return or__24281__auto__2;} else {
  const or__24281__auto__3 = end_edge_type_QMARK_(n2);
  if (truth_(or__24281__auto__3)) {
  return or__24281__auto__3;} else {
  return same_edge_type_QMARK_(n2);}}}
  })())) {
  return 0;} else {
  return 1;}
  };
  var space_changes = function (state, from, to) {
  const nodes1 = reverse(filter((function (_PERCENT_1) {
  const or__24281__auto__2 = ((from) <= (start(_PERCENT_1))) && ((start(_PERCENT_1)) <= (to));
  if (truth_(or__24281__auto__2)) {
  return or__24281__auto__2;} else {
  return ((from) <= (end(_PERCENT_1))) && ((end(_PERCENT_1)) <= (to));}
  }), terminal_nodes(state, from, to)));
  const trim_QMARK_3 = (() => {
  const G__1854 = first(nodes1);
  const G__1855 = ((G__1854 == null)) ? (null) : (end(G__1854));
  if ((G__1855 == null)) {
  return null;} else {
  return (G__1855) < (to);}
  })();
  return reduce((function (out, p__186) {
  const vec__611 = p__186;
  const map__912 = nth(vec__611, 0, null);
  const n213 = get(map__912, "type");
  const start214 = get(map__912, "from");
  const map__1015 = nth(vec__611, 1, null);
  const n116 = get(map__1015, "type");
  const end117 = get(map__1015, "to");
  const expected18 = expected_space(n116, n213);
  const actual19 = (start214) - (end117);
  const G__18720 = compare$1(actual19, expected18);
  switch (G__18720) {case 0:
  return out;
  case 1:
  const G__18822 = out;
  G__18822.push(({ "from": ((expected18 == 0)) ? (end117) : ((end117 + 1)), "to": start214 }));
  return G__18822;
  case -1:
  const G__18923 = out;
  G__18923.push(({ "from": end117, "insert": " " }));
  return G__18923;
  default:
  return out;}
  }), (truth_(trim_QMARK_3)) ? ([({ "from": end(first(nodes1)), "to": to })]) : ([]), partition(2, 1, nodes1));
  };
  var into_arr = function (arr, items) {
  for (let G__1 of iterable(items)) {
  const i2 = G__1;
  arr.push(i2);
  }return arr;
  };
  var format_line = function (state, indent_context, from, text, _line_num, changes, format_spaces_QMARK_) {
  if (truth_(some_QMARK_(text))) ; else {
  throw new Error("Assert failed: (some? text)")}const current_indent1 = /^\s*/.exec(text)[0].length;
  const indent2 = guard(get_indentation(indent_context, from), complement(neg_QMARK_));
  const indentation_change3 = (truth_(indent2)) ? ((() => {
  const G__1904 = compare$1(indent2, current_indent1);
  switch (G__1904) {case 0:
  return null;
  case 1:
  return ({ "from": (from) + (current_indent1), "insert": spaces(state, (indent2) - (current_indent1)) });
  case -1:
  return ({ "from": (from) + (indent2), "to": (from) + (current_indent1) });
  default:
  throw new Error(str("No matching clause: ", G__1904))}
  })()) : (null);
  const space_changes6 = (truth_((() => {
  const and__24299__auto__7 = format_spaces_QMARK_;
  if (truth_(and__24299__auto__7)) {
  const or__24281__auto__8 = embedded_QMARK_(state, from);
  if (truth_(or__24281__auto__8)) {
  return or__24281__auto__8;} else {
  return within_program_QMARK_(state, from);}} else {
  return and__24299__auto__7;}
  })())) ? (space_changes(state, (from) + (current_indent1), (from) + (count(text)))) : (null);
  const G__1919 = changes;
  const G__19110 = (truth_(space_changes6)) ? (into_arr(G__1919, space_changes6)) : (G__1919);
  if (truth_(indentation_change3)) {
  const G__19211 = G__19110;
  G__19211.push(indentation_change3);
  return G__19211;} else {
  return G__19110;}
  };
  var format_selection = function (state) {
  const context1 = make_indent_context(state);
  return update_selected_lines(state, (function (p__193, changes) {
  const map__23 = p__193;
  const from5 = get(map__23, "from");
  const text6 = get(map__23, "text");
  const number7 = get(map__23, "number");
  return format_line(state, context1, from5, text6, number7, changes, true);
  }));
  };
  var format_all = function (state) {
  const context1 = make_indent_context(state);
  return update_lines(state, (function (from, text, line_num) {
  return format_line(state, context1, from, text, line_num, [], true);
  }));
  };
  var format_transaction = function (tr) {
  const origin1 = get_user_event_annotation(tr);
  const temp__23951__auto__2 = (truth_(within_program_QMARK_(tr.startState))) ? ((() => {
  const G__1943 = origin1;
  switch (G__1943) {case "input":
  return null;
  case "input.type":
  return null;
  case "delete":
  return null;
  case "keyboardselection":
  return null;
  case "pointerselection":
  return null;
  case "select.pointer":
  return null;
  case "cut":
  return null;
  case "noformat":
  return null;
  case "evalregion":
  return null;
  case "format-selections":
  return format_selection(tr.state);
  default:
  if (truth_(tr.changes.empty)) {
  return null;} else {
  const state5 = tr.state;
  const context6 = make_indent_context(state5);
  return iter_changed_lines(tr, (function (line, changes) {
  return format_line(state5, context6, line.from, line.text, line.number, changes, true);
  }));}}
  })()) : (null);
  if ((temp__23951__auto__2 == null)) {
  return tr;} else {
  const changes7 = temp__23951__auto__2;
  return tr.startState.update(assoc_BANG_(changes7, "filter", false));}
  };
  var format = function (state) {
  if (truth_(something_selected_QMARK_$1(state))) {
  return state.update(format_selection(state));} else {
  return format_all(state);}
  };
  var ext_format_changed_lines = function () {
  return EditorState.transactionFilter.of(format_transaction);
  };

  var base_theme = EditorView.baseTheme(({ "$matchingBracket": ({ "color": "#0b0" }), "$nonmatchingBracket": ({ "color": "#a22" }) }));
  var matching_mark = Decoration.mark(js_obj("class", "cm-matchingBracket"));
  var nonmatching_mark = Decoration.mark(js_obj("class", "cm-nonmatchingBracket"));
  var mark_node = function (node, mark) {
  return mark.range(start(node), end(node));
  };
  var state$1 = StateField.define(({ "create": constantly(Decoration.none), "update": (function (deco, p__199) {
  const map__12 = p__199;
  const tr3 = map__12;
  const state4 = get(map__12, "state");
  const docChanged5 = get(map__12, "docChanged");
  const selection6 = get(map__12, "selection");
  if (truth_((() => {
  const or__24281__auto__7 = docChanged5;
  if (truth_(or__24281__auto__7)) {
  return or__24281__auto__7;} else {
  return selection6;}
  })())) {
  const decos8 = reduce((function (out, {head,empty}) {
  const or__24281__auto__9 = (() => {
  const temp__23976__auto__10 = (() => {
  const and__24299__auto__11 = empty;
  if (truth_(and__24299__auto__11)) {
  return first(filter(some_fn(start_edge_QMARK_, end_edge_QMARK_), [tree(state4, head, -1), tree(state4, head, 1)]));} else {
  return and__24299__auto__11;}
  })();
  if (truth_(temp__23976__auto__10)) {
  const bracket12 = temp__23976__auto__10;
  const temp__23901__auto__13 = (truth_((() => {
  const and__24299__auto__14 = start_edge_QMARK_(bracket12);
  if (truth_(and__24299__auto__14)) {
  return (start(bracket12)) === (start(up$1(bracket12)));} else {
  return and__24299__auto__14;}
  })())) ? (guard(down_last(up$1(bracket12)), (function (_PERCENT_1) {
  return (name(_PERCENT_1)) === (closed_by(bracket12));
  }))) : ((truth_((() => {
  const and__24299__auto__15 = end_edge_QMARK_(bracket12);
  if (truth_(and__24299__auto__15)) {
  return (end(bracket12)) === (end(up$1(bracket12)));} else {
  return and__24299__auto__15;}
  })())) ? (guard(down(up$1(bracket12)), (function (_PERCENT_1) {
  return (name(_PERCENT_1)) === (opened_by(bracket12));
  }))) : (null));
  if (truth_(temp__23901__auto__13)) {
  const other_bracket16 = temp__23901__auto__13;
  return conj(out, mark_node(bracket12, matching_mark), mark_node(other_bracket16, matching_mark));} else {
  return conj(out, mark_node(bracket12, nonmatching_mark));}}
  })();
  if (truth_(or__24281__auto__9)) {
  return or__24281__auto__9;} else {
  const or__24281__auto__17 = (() => {
  const temp__23976__auto__18 = (() => {
  const and__24299__auto__19 = not(closest(tree(state4, head), string_QMARK_));
  if (and__24299__auto__19) {
  return contains_QMARK_(new Set(["]", ")", "}"]), tr3.state.doc.slice(head, (head + 1)).toString());} else {
  return and__24299__auto__19;}
  })();
  if (truth_(temp__23976__auto__18)) {
  return conj(out, mark_node(from_to(head, (head + 1)), nonmatching_mark));}
  })();
  if (truth_(or__24281__auto__17)) {
  return or__24281__auto__17;} else {
  return out;}}
  }), [], tr3.state.selection.ranges);
  return Decoration.set(into_array(decos8), true);} else {
  return deco;}
  }) }));
  var extension$1 = function () {
  return [base_theme, state$1, EditorView.decorations.from(state$1)];
  };

  var event_annotation = user_event_annotation("selectionhistory");
  var something_selected_QMARK_ = function (selection) {
  return some((function (_PERCENT_1) {
  return not(_PERCENT_1.empty);
  }), selection.ranges);
  };
  var selection_history_field = StateField.define(({ "create": (function (state) {
  return list$1(({ "selection": state.selection }));
  }), "update": (function (stack, p__204) {
  const map__13 = p__204;
  const tr4 = map__13;
  const map__25 = get(map__13, "state");
  const selection6 = get(map__25, "selection");
  const docChanged7 = get(map__13, "docChanged");
  const previous_position8 = first(keep_indexed((function (i, x) {
  if (truth_(eq_QMARK_$1(get(x, "selection"), selection6))) {
  return i;}
  }), stack));
  if (truth_(docChanged7)) {
  return list$1(({ "selection": selection6, "event": get_user_event_annotation(tr4) }));} else {
  if (not(something_selected_QMARK_(selection6))) {
  return list$1(({ "selection": selection6, "event": get_user_event_annotation(tr4) }));} else {
  if (truth_(previous_position8)) {
  const vec__912 = drop(previous_position8, stack);
  const seq__1013 = seq(vec__912);
  const first__1114 = first(seq__1013);
  const seq__1015 = next(seq__1013);
  const f16 = first__1114;
  const more17 = seq__1015;
  return cons(assoc(f16, "prev-event", get(first(stack), "event")), more17);} else {
  {
  return cons(({ "selection": selection6, "event": get_user_event_annotation(tr4) }), stack);}}}}
  }) }));
  var extension = function () {
  return selection_history_field;
  };
  var stack = function (state) {
  return state.field(selection_history_field);
  };
  var grow_1 = function (state, start, end) {
  const node1 = nearest_touching(state, end, -1);
  return first(filter((function (p__205) {
  const map__23 = p__205;
  const a_start4 = get(map__23, "from");
  const a_end5 = get(map__23, "to");
  const and__24299__auto__6 = (a_start4) <= (start);
  if (and__24299__auto__6) {
  const and__24299__auto__7 = (a_end5) >= (end);
  if (and__24299__auto__7) {
  return not((() => {
  const and__24299__auto__8 = (a_start4) == (start);
  if (and__24299__auto__8) {
  return (a_end5) == (end);} else {
  return and__24299__auto__8;}
  })());} else {
  return and__24299__auto__7;}} else {
  return and__24299__auto__6;}
  }), cons(node1, mapcat(juxt(inner_span, identity), ancestors(node1)))));
  };
  var selection_grow_STAR_ = function (state) {
  return update_ranges(state, ({ "annotations": event_annotation }), (function (p__206) {
  const map__12 = p__206;
  const range3 = map__12;
  const from4 = get(map__12, "from");
  const to5 = get(map__12, "to");
  const empty6 = get(map__12, "empty");
  if (truth_(empty6)) {
  return ({ "range": (() => {
  const or__24281__auto__7 = (() => {
  const G__2078 = nearest_touching(state, from4, -1);
  if ((G__2078 == null)) {
  return null;} else {
  return balanced_range(state, G__2078);}
  })();
  if (truth_(or__24281__auto__7)) {
  return or__24281__auto__7;} else {
  return range3;}
  })() });} else {
  return ({ "range": (() => {
  const or__24281__auto__9 = (() => {
  const G__20810 = grow_1(state, from4, to5);
  if ((G__20810 == null)) {
  return null;} else {
  return range(G__20810);}
  })();
  if (truth_(or__24281__auto__9)) {
  return or__24281__auto__9;} else {
  return range3;}
  })() });}
  }));
  };
  var selection_return_STAR_ = function (state) {
  const temp__23901__auto__1 = get(second(stack(state)), "selection");
  if (truth_(temp__23901__auto__1)) {
  const selection2 = temp__23901__auto__1;
  return state.update(({ "selection": selection2, "annotations": event_annotation }));} else {
  return update_ranges(state, ({ "annotations": event_annotation }), (function (range) {
  return ({ "cursor": range.from });
  }));}
  };

  const fromHistory = /*@__PURE__*/Annotation.define();
  /**
  Transaction annotation that will prevent that transaction from
  being combined with other transactions in the undo history. Given
  `"before"`, it'll prevent merging with previous transactions. With
  `"after"`, subsequent transactions won't be combined with this
  one. With `"full"`, the transaction is isolated on both sides.
  */
  const isolateHistory = /*@__PURE__*/Annotation.define();
  /**
  This facet provides a way to register functions that, given a
  transaction, provide a set of effects that the history should
  store when inverting the transaction. This can be used to
  integrate some kinds of effects in the history, so that they can
  be undone (and redone again).
  */
  const invertedEffects = /*@__PURE__*/Facet.define();
  const historyConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          return combineConfig(configs, {
              minDepth: 100,
              newGroupDelay: 500,
              joinToEvent: (_t, isAdjacent) => isAdjacent,
          }, {
              minDepth: Math.max,
              newGroupDelay: Math.min,
              joinToEvent: (a, b) => (tr, adj) => a(tr, adj) || b(tr, adj)
          });
      }
  });
  const historyField_ = /*@__PURE__*/StateField.define({
      create() {
          return HistoryState.empty;
      },
      update(state, tr) {
          let config = tr.state.facet(historyConfig);
          let fromHist = tr.annotation(fromHistory);
          if (fromHist) {
              let item = HistEvent.fromTransaction(tr, fromHist.selection), from = fromHist.side;
              let other = from == 0 /* BranchName.Done */ ? state.undone : state.done;
              if (item)
                  other = updateBranch(other, other.length, config.minDepth, item);
              else
                  other = addSelection(other, tr.startState.selection);
              return new HistoryState(from == 0 /* BranchName.Done */ ? fromHist.rest : other, from == 0 /* BranchName.Done */ ? other : fromHist.rest);
          }
          let isolate = tr.annotation(isolateHistory);
          if (isolate == "full" || isolate == "before")
              state = state.isolate();
          if (tr.annotation(Transaction.addToHistory) === false)
              return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
          let event = HistEvent.fromTransaction(tr);
          let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
          if (event)
              state = state.addChanges(event, time, userEvent, config, tr);
          else if (tr.selection)
              state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
          if (isolate == "full" || isolate == "after")
              state = state.isolate();
          return state;
      },
      toJSON(value) {
          return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };
      },
      fromJSON(json) {
          return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
      }
  });
  /**
  Create a history extension with the given configuration.
  */
  function history(config = {}) {
      return [
          historyField_,
          historyConfig.of(config),
          EditorView.domEventHandlers({
              beforeinput(e, view) {
                  let command = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
                  if (!command)
                      return false;
                  e.preventDefault();
                  return command(view);
              }
          })
      ];
  }
  function cmd(side, selection) {
      return function ({ state, dispatch }) {
          if (!selection && state.readOnly)
              return false;
          let historyState = state.field(historyField_, false);
          if (!historyState)
              return false;
          let tr = historyState.pop(side, state, selection);
          if (!tr)
              return false;
          dispatch(tr);
          return true;
      };
  }
  /**
  Undo a single group of history events. Returns false if no group
  was available.
  */
  const undo = /*@__PURE__*/cmd(0 /* BranchName.Done */, false);
  /**
  Redo a group of history events. Returns false if no group was
  available.
  */
  const redo = /*@__PURE__*/cmd(1 /* BranchName.Undone */, false);
  /**
  Undo a change or selection change.
  */
  const undoSelection = /*@__PURE__*/cmd(0 /* BranchName.Done */, true);
  /**
  Redo a change or selection change.
  */
  const redoSelection = /*@__PURE__*/cmd(1 /* BranchName.Undone */, true);
  // History events store groups of changes or effects that need to be
  // undone/redone together.
  class HistEvent {
      constructor(
      // The changes in this event. Normal events hold at least one
      // change or effect. But it may be necessary to store selection
      // events before the first change, in which case a special type of
      // instance is created which doesn't hold any changes, with
      // changes == startSelection == undefined
      changes, 
      // The effects associated with this event
      effects, 
      // Accumulated mapping (from addToHistory==false) that should be
      // applied to events below this one.
      mapped, 
      // The selection before this event
      startSelection, 
      // Stores selection changes after this event, to be used for
      // selection undo/redo.
      selectionsAfter) {
          this.changes = changes;
          this.effects = effects;
          this.mapped = mapped;
          this.startSelection = startSelection;
          this.selectionsAfter = selectionsAfter;
      }
      setSelAfter(after) {
          return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
      }
      toJSON() {
          var _a, _b, _c;
          return {
              changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
              mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
              startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
              selectionsAfter: this.selectionsAfter.map(s => s.toJSON())
          };
      }
      static fromJSON(json) {
          return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
      }
      // This does not check `addToHistory` and such, it assumes the
      // transaction needs to be converted to an item. Returns null when
      // there are no changes or effects in the transaction.
      static fromTransaction(tr, selection) {
          let effects = none;
          for (let invert of tr.startState.facet(invertedEffects)) {
              let result = invert(tr);
              if (result.length)
                  effects = effects.concat(result);
          }
          if (!effects.length && tr.changes.empty)
              return null;
          return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none);
      }
      static selection(selections) {
          return new HistEvent(undefined, none, undefined, undefined, selections);
      }
  }
  function updateBranch(branch, to, maxLen, newEvent) {
      let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
      let newBranch = branch.slice(start, to);
      newBranch.push(newEvent);
      return newBranch;
  }
  function isAdjacent(a, b) {
      let ranges = [], isAdjacent = false;
      a.iterChangedRanges((f, t) => ranges.push(f, t));
      b.iterChangedRanges((_f, _t, f, t) => {
          for (let i = 0; i < ranges.length;) {
              let from = ranges[i++], to = ranges[i++];
              if (t >= from && f <= to)
                  isAdjacent = true;
          }
      });
      return isAdjacent;
  }
  function eqSelectionShape(a, b) {
      return a.ranges.length == b.ranges.length &&
          a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
  }
  function conc(a, b) {
      return !a.length ? b : !b.length ? a : a.concat(b);
  }
  const none = [];
  const MaxSelectionsPerEvent = 200;
  function addSelection(branch, selection) {
      if (!branch.length) {
          return [HistEvent.selection([selection])];
      }
      else {
          let lastEvent = branch[branch.length - 1];
          let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
          if (sels.length && sels[sels.length - 1].eq(selection))
              return branch;
          sels.push(selection);
          return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
      }
  }
  // Assumes the top item has one or more selectionAfter values
  function popSelection(branch) {
      let last = branch[branch.length - 1];
      let newBranch = branch.slice();
      newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
      return newBranch;
  }
  // Add a mapping to the top event in the given branch. If this maps
  // away all the changes and effects in that item, drop it and
  // propagate the mapping to the next item.
  function addMappingToBranch(branch, mapping) {
      if (!branch.length)
          return branch;
      let length = branch.length, selections = none;
      while (length) {
          let event = mapEvent(branch[length - 1], mapping, selections);
          if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping
              let result = branch.slice(0, length);
              result[length - 1] = event;
              return result;
          }
          else { // Drop this event, since there's no changes or effects left
              mapping = event.mapped;
              length--;
              selections = event.selectionsAfter;
          }
      }
      return selections.length ? [HistEvent.selection(selections)] : none;
  }
  function mapEvent(event, mapping, extraSelections) {
      let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none, extraSelections);
      // Change-less events don't store mappings (they are always the last event in a branch)
      if (!event.changes)
          return HistEvent.selection(selections);
      let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
      let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
      return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
  }
  const joinableUserEvent = /^(input\.type|delete)($|\.)/;
  class HistoryState {
      constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {
          this.done = done;
          this.undone = undone;
          this.prevTime = prevTime;
          this.prevUserEvent = prevUserEvent;
      }
      isolate() {
          return this.prevTime ? new HistoryState(this.done, this.undone) : this;
      }
      addChanges(event, time, userEvent, config, tr) {
          let done = this.done, lastEvent = done[done.length - 1];
          if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&
              (!userEvent || joinableUserEvent.test(userEvent)) &&
              ((!lastEvent.selectionsAfter.length &&
                  time - this.prevTime < config.newGroupDelay &&
                  config.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes))) ||
                  // For compose (but not compose.start) events, always join with previous event
                  userEvent == "input.type.compose")) {
              done = updateBranch(done, done.length - 1, config.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(StateEffect.mapEffects(event.effects, lastEvent.changes), lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));
          }
          else {
              done = updateBranch(done, done.length, config.minDepth, event);
          }
          return new HistoryState(done, none, time, userEvent);
      }
      addSelection(selection, time, userEvent, newGroupDelay) {
          let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;
          if (last.length > 0 &&
              time - this.prevTime < newGroupDelay &&
              userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) &&
              eqSelectionShape(last[last.length - 1], selection))
              return this;
          return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
      }
      addMapping(mapping) {
          return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
      }
      pop(side, state, onlySelection) {
          let branch = side == 0 /* BranchName.Done */ ? this.done : this.undone;
          if (branch.length == 0)
              return null;
          let event = branch[branch.length - 1], selection = event.selectionsAfter[0] || state.selection;
          if (onlySelection && event.selectionsAfter.length) {
              return state.update({
                  selection: event.selectionsAfter[event.selectionsAfter.length - 1],
                  annotations: fromHistory.of({ side, rest: popSelection(branch), selection }),
                  userEvent: side == 0 /* BranchName.Done */ ? "select.undo" : "select.redo",
                  scrollIntoView: true
              });
          }
          else if (!event.changes) {
              return null;
          }
          else {
              let rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);
              if (event.mapped)
                  rest = addMappingToBranch(rest, event.mapped);
              return state.update({
                  changes: event.changes,
                  selection: event.startSelection,
                  effects: event.effects,
                  annotations: fromHistory.of({ side, rest, selection }),
                  filter: false,
                  userEvent: side == 0 /* BranchName.Done */ ? "undo" : "redo",
                  scrollIntoView: true
              });
          }
      }
  }
  HistoryState.empty = /*@__PURE__*/new HistoryState(none, none);
  /**
  Default key bindings for the undo history.

  - Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).
  - Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).
  - Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).
  - Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).
  */
  const historyKeymap = [
      { key: "Mod-z", run: undo, preventDefault: true },
      { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
      { linux: "Ctrl-Shift-z", run: redo, preventDefault: true },
      { key: "Mod-u", run: undoSelection, preventDefault: true },
      { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
  ];

  function updateSel(sel, by) {
      return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
  }
  function setSel(state, selection) {
      return state.update({ selection, scrollIntoView: true, userEvent: "select" });
  }
  function moveSel({ state, dispatch }, how) {
      let selection = updateSel(state.selection, how);
      if (selection.eq(state.selection, true))
          return false;
      dispatch(setSel(state, selection));
      return true;
  }
  function rangeEnd(range, forward) {
      return EditorSelection.cursor(forward ? range.to : range.from);
  }
  function cursorByChar(view, forward) {
      return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
  }
  function ltrAtCursor(view) {
      return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
  }
  /**
  Move the selection one character to the left (which is backward in
  left-to-right text, forward in right-to-left text).
  */
  const cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));
  /**
  Move the selection one character to the right.
  */
  const cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));
  function cursorByGroup(view, forward) {
      return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
  }
  /**
  Move the selection one group forward.
  */
  const cursorGroupForward = view => cursorByGroup(view, true);
  /**
  Move the selection one group backward.
  */
  const cursorGroupBackward = view => cursorByGroup(view, false);
  function cursorByLine(view, forward) {
      return moveSel(view, range => {
          if (!range.empty)
              return rangeEnd(range, forward);
          let moved = view.moveVertically(range, forward);
          return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
      });
  }
  /**
  Move the selection one line up.
  */
  const cursorLineUp = view => cursorByLine(view, false);
  /**
  Move the selection one line down.
  */
  const cursorLineDown = view => cursorByLine(view, true);
  function pageInfo(view) {
      let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
      let marginTop = 0, marginBottom = 0, height;
      if (selfScroll) {
          for (let source of view.state.facet(EditorView.scrollMargins)) {
              let margins = source(view);
              if (margins === null || margins === void 0 ? void 0 : margins.top)
                  marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
              if (margins === null || margins === void 0 ? void 0 : margins.bottom)
                  marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
          }
          height = view.scrollDOM.clientHeight - marginTop - marginBottom;
      }
      else {
          height = (view.dom.ownerDocument.defaultView || window).innerHeight;
      }
      return { marginTop, marginBottom, selfScroll,
          height: Math.max(view.defaultLineHeight, height - 5) };
  }
  function cursorByPage(view, forward) {
      let page = pageInfo(view);
      let { state } = view, selection = updateSel(state.selection, range => {
          return range.empty ? view.moveVertically(range, forward, page.height)
              : rangeEnd(range, forward);
      });
      if (selection.eq(state.selection))
          return false;
      let effect;
      if (page.selfScroll) {
          let startPos = view.coordsAtPos(state.selection.main.head);
          let scrollRect = view.scrollDOM.getBoundingClientRect();
          let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
          if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
              effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollTop });
      }
      view.dispatch(setSel(state, selection), { effects: effect });
      return true;
  }
  /**
  Move the selection one page up.
  */
  const cursorPageUp = view => cursorByPage(view, false);
  /**
  Move the selection one page down.
  */
  const cursorPageDown = view => cursorByPage(view, true);
  function moveByLineBoundary(view, start, forward) {
      let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
      if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
          moved = view.moveToLineBoundary(start, forward, false);
      if (!forward && moved.head == line.from && line.length) {
          let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
          if (space && start.head != line.from + space)
              moved = EditorSelection.cursor(line.from + space);
      }
      return moved;
  }
  /**
  Move the selection to the next line wrap point, or to the end of
  the line if there isn't one left on this line.
  */
  const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
  /**
  Move the selection to previous line wrap point, or failing that to
  the start of the line. If the line is indented, and the cursor
  isn't already at the end of the indentation, this will move to the
  end of the indentation instead of the start of the line.
  */
  const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
  /**
  Move the selection to the start of the line.
  */
  const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
  /**
  Move the selection to the end of the line.
  */
  const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
  function extendSel(target, how) {
      let selection = updateSel(target.state.selection, range => {
          let head = how(range);
          return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);
      });
      if (selection.eq(target.state.selection))
          return false;
      target.dispatch(setSel(target.state, selection));
      return true;
  }
  function selectByChar(view, forward) {
      return extendSel(view, range => view.moveByChar(range, forward));
  }
  /**
  Move the selection head one character to the left, while leaving
  the anchor in place.
  */
  const selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));
  /**
  Move the selection head one character to the right.
  */
  const selectCharRight = view => selectByChar(view, ltrAtCursor(view));
  function selectByGroup(view, forward) {
      return extendSel(view, range => view.moveByGroup(range, forward));
  }
  /**
  Move the selection head one group forward.
  */
  const selectGroupForward = view => selectByGroup(view, true);
  /**
  Move the selection head one group backward.
  */
  const selectGroupBackward = view => selectByGroup(view, false);
  function selectByLine(view, forward) {
      return extendSel(view, range => view.moveVertically(range, forward));
  }
  /**
  Move the selection head one line up.
  */
  const selectLineUp = view => selectByLine(view, false);
  /**
  Move the selection head one line down.
  */
  const selectLineDown = view => selectByLine(view, true);
  function selectByPage(view, forward) {
      return extendSel(view, range => view.moveVertically(range, forward, pageInfo(view).height));
  }
  /**
  Move the selection head one page up.
  */
  const selectPageUp = view => selectByPage(view, false);
  /**
  Move the selection head one page down.
  */
  const selectPageDown = view => selectByPage(view, true);
  /**
  Move the selection head to the next line boundary.
  */
  const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
  /**
  Move the selection head to the previous line boundary.
  */
  const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
  /**
  Move the selection head to the start of the line.
  */
  const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from));
  /**
  Move the selection head to the end of the line.
  */
  const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to));
  /**
  Move the selection to the start of the document.
  */
  const cursorDocStart = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: 0 }));
      return true;
  };
  /**
  Move the selection to the end of the document.
  */
  const cursorDocEnd = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: state.doc.length }));
      return true;
  };
  /**
  Move the selection head to the start of the document.
  */
  const selectDocStart = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
      return true;
  };
  /**
  Move the selection head to the end of the document.
  */
  const selectDocEnd = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
      return true;
  };
  /**
  Select the entire document.
  */
  const selectAll = ({ state, dispatch }) => {
      dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
      return true;
  };
  function deleteBy(target, by) {
      if (target.state.readOnly)
          return false;
      let event = "delete.selection", { state } = target;
      let changes = state.changeByRange(range => {
          let { from, to } = range;
          if (from == to) {
              let towards = by(range);
              if (towards < from) {
                  event = "delete.backward";
                  towards = skipAtomic(target, towards, false);
              }
              else if (towards > from) {
                  event = "delete.forward";
                  towards = skipAtomic(target, towards, true);
              }
              from = Math.min(from, towards);
              to = Math.max(to, towards);
          }
          else {
              from = skipAtomic(target, from, false);
              to = skipAtomic(target, to, true);
          }
          return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from, from < range.head ? -1 : 1) };
      });
      if (changes.changes.empty)
          return false;
      target.dispatch(state.update(changes, {
          scrollIntoView: true,
          userEvent: event,
          effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : undefined
      }));
      return true;
  }
  function skipAtomic(target, pos, forward) {
      if (target instanceof EditorView)
          for (let ranges of target.state.facet(EditorView.atomicRanges).map(f => f(target)))
              ranges.between(pos, pos, (from, to) => {
                  if (from < pos && to > pos)
                      pos = forward ? to : from;
              });
      return pos;
  }
  const deleteByChar = (target, forward, byIndentUnit) => deleteBy(target, range => {
      let pos = range.from, { state } = target, line = state.doc.lineAt(pos), before, targetPos;
      if (byIndentUnit && !forward && pos > line.from && pos < line.from + 200 &&
          !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
          if (before[before.length - 1] == "\t")
              return pos - 1;
          let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
          for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
              pos--;
          targetPos = pos;
      }
      else {
          targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
          if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
              targetPos += forward ? 1 : -1;
          else if (!forward && /[\ufe00-\ufe0f]/.test(line.text.slice(targetPos - line.from, pos - line.from)))
              targetPos = findClusterBreak(line.text, targetPos - line.from, false, false) + line.from;
      }
      return targetPos;
  });
  /**
  Delete the selection, or, for cursor selections, the character or
  indentation unit before the cursor.
  */
  const deleteCharBackward = view => deleteByChar(view, false, true);
  /**
  Delete the selection or the character after the cursor.
  */
  const deleteCharForward = view => deleteByChar(view, true, false);
  const deleteByGroup = (target, forward) => deleteBy(target, range => {
      let pos = range.head, { state } = target, line = state.doc.lineAt(pos);
      let categorize = state.charCategorizer(pos);
      for (let cat = null;;) {
          if (pos == (forward ? line.to : line.from)) {
              if (pos == range.head && line.number != (forward ? state.doc.lines : 1))
                  pos += forward ? 1 : -1;
              break;
          }
          let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
          let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
          let nextCat = categorize(nextChar);
          if (cat != null && nextCat != cat)
              break;
          if (nextChar != " " || pos != range.head)
              cat = nextCat;
          pos = next;
      }
      return pos;
  });
  /**
  Delete the selection or backward until the end of the next
  [group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
  whitespace when they consist of a single space.
  */
  const deleteGroupBackward = target => deleteByGroup(target, false);
  /**
  Delete the selection or forward until the end of the next group.
  */
  const deleteGroupForward = target => deleteByGroup(target, true);
  /**
  Replace each selection range with a line break, leaving the cursor
  on the line before the break.
  */
  const splitLine = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      let changes = state.changeByRange(range => {
          return { changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
              range: EditorSelection.cursor(range.from) };
      });
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
      return true;
  };
  /**
  Flip the characters before and after the cursor(s).
  */
  const transposeChars = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      let changes = state.changeByRange(range => {
          if (!range.empty || range.from == 0 || range.from == state.doc.length)
              return { range };
          let pos = range.from, line = state.doc.lineAt(pos);
          let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
          let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
          return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
              range: EditorSelection.cursor(to) };
      });
      if (changes.changes.empty)
          return false;
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
      return true;
  };
  function isBetweenBrackets(state, pos) {
      if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
          return { from: pos, to: pos };
      let context = syntaxTree(state).resolveInner(pos);
      let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
      if (before && after && before.to <= pos && after.from >= pos &&
          (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&
          state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from &&
          !/\S/.test(state.sliceDoc(before.to, after.from)))
          return { from: before.to, to: after.from };
      return null;
  }
  /**
  Replace the selection with a newline and indent the newly created
  line(s). If the current line consists only of whitespace, this
  will also delete that whitespace. When the cursor is between
  matching brackets, an additional newline will be inserted after
  the cursor.
  */
  const insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
  function newlineAndIndent(atEof) {
      return ({ state, dispatch }) => {
          if (state.readOnly)
              return false;
          let changes = state.changeByRange(range => {
              let { from, to } = range, line = state.doc.lineAt(from);
              let explode = !atEof && from == to && isBetweenBrackets(state, from);
              if (atEof)
                  from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
              let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
              let indent = getIndentation(cx, from);
              if (indent == null)
                  indent = countColumn(/^\s*/.exec(state.doc.lineAt(from).text)[0], state.tabSize);
              while (to < line.to && /\s/.test(line.text[to - line.from]))
                  to++;
              if (explode)
                  ({ from, to } = explode);
              else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
                  from = line.from;
              let insert = ["", indentString(state, indent)];
              if (explode)
                  insert.push(indentString(state, cx.lineIndent(line.from, -1)));
              return { changes: { from, to, insert: Text.of(insert) },
                  range: EditorSelection.cursor(from + 1 + insert[1].length) };
          });
          dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
          return true;
      };
  }

  var view_command = function (f) {
  return function ({state,dispatch}) {
  const G__1151 = f(state);
  if ((G__1151 == null)) ; else {
  dispatch(G__1151);}return true;
  };
  };
  var scoped_view_command = function (f) {
  return function ({state,dispatch}) {
  if (truth_(within_program_QMARK_(state))) {
  const G__1161 = f(state);
  if ((G__1161 == null)) ; else {
  dispatch(G__1161);}return true;} else {
  return false;}
  };
  };
  var unwrap_STAR_ = function (state) {
  return update_ranges(state, (function (p__117) {
  const map__12 = p__117;
  const from4 = get(map__12, "from");
  get(map__12, "to");
  const empty6 = get(map__12, "empty");
  if (truth_(empty6)) {
  const temp__23976__auto__7 = (() => {
  const G__1188 = tree(state, from4, -1);
  const G__1189 = ((G__1188 == null)) ? (null) : (closest(G__1188, coll_QMARK_));
  if ((G__1189 == null)) {
  return null;} else {
  return guard(G__1189, balanced_QMARK_);}
  })();
  if (truth_(temp__23976__auto__7)) {
  const nearest_balanced_coll10 = temp__23976__auto__7;
  return ({ "cursor": (from4 - 1), "changes": [from_to(down(nearest_balanced_coll10)), from_to(down_last(nearest_balanced_coll10))] });}}
  }));
  };
  var copy_to_clipboard_BANG_ = function (text) {
  const focus_el1 = get(document, "activeElement");
  const input_el2 = document.createElement("textarea");
  input_el2.setAttribute("class", "clipboard-input");
  assoc_BANG_(input_el2, "innerHTML", text);
  document.body.appendChild(input_el2);
  input_el2.focus(({ "preventScroll": true }));
  input_el2.select();
  document.execCommand("copy");
  focus_el1.focus(({ "preventScroll": true }));
  return document.body.removeChild(input_el2);
  };
  var kill_STAR_ = function (state) {
  return update_ranges(state, (function (p__119) {
  const map__12 = p__119;
  const from4 = get(map__12, "from");
  const to5 = get(map__12, "to");
  const empty6 = get(map__12, "empty");
  if (truth_(empty6)) {
  const node7 = tree(state, from4);
  const parent8 = closest(node7, (function (_PERCENT_1) {
  const or__24281__auto__9 = coll_QMARK_(_PERCENT_1);
  if (truth_(or__24281__auto__9)) {
  return or__24281__auto__9;} else {
  const or__24281__auto__10 = string_QMARK_(_PERCENT_1);
  if (truth_(or__24281__auto__10)) {
  return or__24281__auto__10;} else {
  return top_QMARK_(_PERCENT_1);}}
  }));
  const line_end11 = state.doc.lineAt(from4).to;
  const next_children12 = (truth_(parent8)) ? (children(parent8, from4, 1)) : (null);
  const last_child_on_line13 = (truth_(parent8)) ? ((() => {
  const G__12014 = next_children12;
  const G__12015 = ((G__12014 == null)) ? (null) : (take_while(every_pred((function (_PERCENT_1) {
  return (start(_PERCENT_1)) <= (line_end11);
  })), G__12014));
  if ((G__12015 == null)) {
  return null;} else {
  return last(G__12015);}
  })()) : (null);
  const to16 = (truth_(string_QMARK_(parent8))) ? ((() => {
  const content17 = str(string(state, parent8));
  const content_from18 = subs(content17, (from4) - (start(parent8)));
  const next_newline19 = content_from18.indexOf("\n");
  if ((next_newline19 < 0)) {
  return (end(parent8) - 1);} else {
  return (from4) + (next_newline19) + (1);}
  })()) : ((truth_(last_child_on_line13)) ? ((truth_(end_edge_QMARK_(last_child_on_line13))) ? (start(last_child_on_line13)) : (end(last_child_on_line13))) : ((truth_((() => {
  const G__12120 = first(next_children12);
  const G__12121 = ((G__12120 == null)) ? (null) : (start(G__12120));
  if ((G__12121 == null)) {
  return null;} else {
  return (G__12121) > (line_end11);}
  })())) ? (start(first(next_children12))) : (null)));
  if (truth_(node_js_QMARK_)) ; else {
  copy_to_clipboard_BANG_(string(state, from4, to16));}if (truth_(to16)) {
  return ({ "cursor": from4, "changes": ({ "from": from4, "to": to16 }) });}} else {
  copy_to_clipboard_BANG_(string(state, from4, to5));
  return ({ "cursor": from4, "changes": from_to$1(from4, to5) });}
  }));
  };
  var enter_and_indent_STAR_ = function (state) {
  const ctx1 = make_indent_context(state);
  return update_ranges(state, (function (p__122) {
  const map__23 = p__122;
  const from5 = get(map__23, "from");
  const to6 = get(map__23, "to");
  get(map__23, "empty");
  const indent_at8 = (() => {
  const G__1239 = closest(tree(state, from5), some_fn(coll_QMARK_, top_QMARK_));
  const G__12310 = ((G__1239 == null)) ? (null) : (inner_span(G__1239));
  if ((G__12310 == null)) {
  return null;} else {
  return start(G__12310);}
  })();
  const indent11 = (truth_(indent_at8)) ? (get_indentation(ctx1, indent_at8)) : (null);
  const insertion12 = str("\n", (truth_(indent11)) ? (spaces(state, indent11)) : (null));
  return ({ "cursor": (from5) + (count(insertion12)), "changes": [({ "from": from5, "to": to6, "insert": insertion12 })] });
  }));
  };
  var nav_position = function (state, from, dir) {
  const or__24281__auto__1 = (() => {
  const G__1242 = closest(tree(state, from), (function (_PERCENT_1) {
  const or__24281__auto__3 = coll_QMARK_(_PERCENT_1);
  if (truth_(or__24281__auto__3)) {
  return or__24281__auto__3;} else {
  const or__24281__auto__4 = string_QMARK_(_PERCENT_1);
  if (truth_(or__24281__auto__4)) {
  return or__24281__auto__4;} else {
  return top_QMARK_(_PERCENT_1);}}
  }));
  const G__1245 = ((G__1242 == null)) ? (null) : (children(G__1242, from, dir));
  const G__1246 = ((G__1245 == null)) ? (null) : (first(G__1245));
  if ((G__1246 == null)) {
  return null;} else {
  return get(G__1246, (() => {
  const G__1257 = dir;
  switch (G__1257) {case -1:
  return "from";
  case 1:
  return "to";
  default:
  throw new Error(str("No matching clause: ", G__1257))}
  })());}
  })();
  if (truth_(or__24281__auto__1)) {
  return or__24281__auto__1;} else {
  return constrain(state, (from) + (dir));}
  };
  var nav = function (dir) {
  return function (state) {
  return update_ranges(state, (function ({from,to,empty}) {
  if (truth_(empty)) {
  return ({ "cursor": nav_position(state, from, dir) });} else {
  return ({ "cursor": get(from_to$1(from, to), (() => {
  const G__1261 = dir;
  switch (G__1261) {case -1:
  return "from";
  case 1:
  return "to";
  default:
  throw new Error(str("No matching clause: ", G__1261))}
  })()) });}
  }));
  };
  };
  var nav_select = function (dir) {
  return function (state) {
  return update_ranges(state, (function ({from,to,empty}) {
  if (truth_(empty)) {
  return ({ "range": balanced_range(state, from, nav_position(state, from, dir)) });} else {
  return ({ "range": (() => {
  const map__12 = from_to$1(from, to);
  const from3 = get(map__12, "from");
  const to4 = get(map__12, "to");
  const G__1275 = dir;
  switch (G__1275) {case 1:
  return balanced_range(state, from3, nav_position(state, to4, dir));
  case -1:
  return balanced_range(state, nav_position(state, from3, dir), to4);
  default:
  throw new Error(str("No matching clause: ", G__1275))}
  })() });}
  }));
  };
  };
  var slurp = function (direction) {
  return function (state) {
  return update_ranges(state, (function ({from,empty}) {
  if (truth_(empty)) {
  const temp__23976__auto__1 = closest(tree(state, from), every_pred(some_fn(coll_QMARK_, string_QMARK_), (function (_PERCENT_1) {
  return not((() => {
  const G__1282 = direction;
  switch (G__1282) {case 1:
  const G__1294 = _PERCENT_1;
  const G__1295 = ((G__1294 == null)) ? (null) : (with_prefix(G__1294));
  const G__1296 = ((G__1295 == null)) ? (null) : (right(G__1295));
  if ((G__1296 == null)) {
  return null;} else {
  return end_edge_QMARK_(G__1296);}
  case -1:
  const G__1307 = _PERCENT_1;
  const G__1308 = ((G__1307 == null)) ? (null) : (with_prefix(G__1307));
  const G__1309 = ((G__1308 == null)) ? (null) : (left(G__1308));
  if ((G__1309 == null)) {
  return null;} else {
  return start_edge_QMARK_(G__1309);}
  default:
  throw new Error(str("No matching clause: ", G__1282))}
  })());
  })));
  if (truth_(temp__23976__auto__1)) {
  const parent10 = temp__23976__auto__1;
  const str_QMARK_11 = string_QMARK_(parent10);
  const temp__23976__auto__12 = (() => {
  const G__13113 = direction;
  switch (G__13113) {case 1:
  return first(remove$1(line_comment_QMARK_, rights(with_prefix(parent10))));
  case -1:
  return first(remove$1(line_comment_QMARK_, lefts(with_prefix(parent10))));
  default:
  throw new Error(str("No matching clause: ", G__13113))}
  })();
  if (truth_(temp__23976__auto__12)) {
  const target15 = temp__23976__auto__12;
  return ({ "cursor/mapped": from, "changes": (() => {
  const G__13216 = direction;
  switch (G__13216) {case 1:
  const edge18 = down_last(parent10);
  return [({ "from": end(target15), "insert": name(edge18) }), (() => {
  const G__13319 = from_to(edge18);
  if (not(str_QMARK_11)) {
  return assoc_BANG_(G__13319, "insert", " ");} else {
  return G__13319;}
  })()];
  case -1:
  const edge20 = left_edge_with_prefix(state, parent10);
  const start21 = start(with_prefix(parent10));
  return [(() => {
  const G__13422 = ({ "from": start21, "to": (start21) + (count(edge20)) });
  if (not(str_QMARK_11)) {
  return assoc_BANG_(G__13422, "insert", " ");} else {
  return G__13422;}
  })(), ({ "from": start(target15), "insert": edge20 })];
  default:
  throw new Error(str("No matching clause: ", G__13216))}
  })() });}}}
  }));
  };
  };
  var barf$1 = function (direction) {
  return function (state) {
  return update_ranges(state, (function ({from,empty}) {
  if (truth_(empty)) {
  const temp__23976__auto__1 = closest(tree(state, from), coll_QMARK_);
  if (truth_(temp__23976__auto__1)) {
  const parent2 = temp__23976__auto__1;
  const G__1353 = direction;
  switch (G__1353) {case 1:
  const temp__23976__auto__5 = (() => {
  const G__1366 = down_last(parent2);
  const G__1367 = ((G__1366 == null)) ? (null) : (lefts(G__1366));
  const G__1368 = ((G__1367 == null)) ? (null) : (remove$1(line_comment_QMARK_, G__1367));
  const G__1369 = ((G__1368 == null)) ? (null) : (drop(1, G__1368));
  if ((G__1369 == null)) {
  return null;} else {
  return first(G__1369);}
  })();
  if (truth_(temp__23976__auto__5)) {
  const target10 = temp__23976__auto__5;
  return ({ "cursor": min(end(target10), from), "changes": [({ "from": end(target10), "insert": name(down_last(parent2)) }), assoc_BANG_(from_to(down_last(parent2)), "insert", " ")] });}
  break;
  case -1:
  const temp__23976__auto__11 = (() => {
  const G__13712 = down(parent2);
  const G__13713 = ((G__13712 == null)) ? (null) : (rights(G__13712));
  const G__13714 = ((G__13713 == null)) ? (null) : (remove$1(line_comment_QMARK_, G__13713));
  const G__13715 = ((G__13714 == null)) ? (null) : (drop(1, G__13714));
  if ((G__13715 == null)) {
  return null;} else {
  return first(G__13715);}
  })();
  if (truth_(temp__23976__auto__11)) {
  const next_first_child16 = temp__23976__auto__11;
  const left_edge17 = left_edge_with_prefix(state, parent2);
  const left_start18 = start(with_prefix(parent2));
  return ({ "cursor": max(from, (start(next_first_child16)) + ((count(left_edge17) + 1))), "changes": [({ "from": start(next_first_child16), "insert": str(" ", left_edge17) }), ({ "from": left_start18, "to": (left_start18) + (count(left_edge17)), "insert": spaces(state, count(left_edge17)) })] });}
  break;
  default:
  throw new Error(str("No matching clause: ", G__1353))}}}
  }));
  };
  };
  var builtin_index = ({ "cursorLineStart": cursorLineStart, "cursorLineDown": cursorLineDown, "selectAll": selectAll, "selectLineUp": selectLineUp, "cursorLineBoundaryForward": cursorLineBoundaryForward, "selectLineBoundaryBackward": selectLineBoundaryBackward, "deleteCharBackward": deleteCharBackward, "insertNewlineAndIndent": insertNewlineAndIndent, "cursorLineBoundaryBackward": cursorLineBoundaryBackward, "selectCharRight": selectCharRight, "selectPageUp": selectPageUp, "deleteCharForward": deleteCharForward, "cursorCharLeft": cursorCharLeft, "cursorGroupBackward": cursorGroupBackward, "selectDocStart": selectDocStart, "selectGroupBackward": selectGroupBackward, "cursorDocEnd": cursorDocEnd, "deleteGroupBackward": deleteGroupBackward, "selectLineStart": selectLineStart, "deleteGroupForward": deleteGroupForward, "selectDocEnd": selectDocEnd, "selectPageDown": selectPageDown, "cursorPageDown": cursorPageDown, "cursorPageUp": cursorPageUp, "selectLineBoundaryForward": selectLineBoundaryForward, "cursorLineEnd": cursorLineEnd, "cursorGroupForward": cursorGroupForward, "cursorCharRight": cursorCharRight, "selectGroupForward": selectGroupForward, "selectLineEnd": selectLineEnd, "selectCharLeft": selectCharLeft, "splitLine": splitLine, "selectLineDown": selectLineDown, "transposeChars": transposeChars, "cursorLineUp": cursorLineUp, "cursorDocStart": cursorDocStart });
  var indent = view_command(format);
  var unwrap = view_command(unwrap_STAR_);
  var kill = scoped_view_command(kill_STAR_);
  var nav_right = view_command(nav(1));
  var nav_left = view_command(nav(-1));
  var nav_select_right = view_command(nav_select(1));
  var nav_select_left = view_command(nav_select(-1));
  var slurp_forward = view_command(slurp(1));
  var slurp_backward = view_command(slurp(-1));
  var barf_forward = view_command(barf$1(1));
  var barf_backward = view_command(barf$1(-1));
  var selection_grow = view_command(selection_grow_STAR_);
  var selection_return = view_command(selection_return_STAR_);
  var enter_and_indent = view_command(enter_and_indent_STAR_);
  var paredit_index = ({ "indent": indent, "nav-left": nav_left, "enter-and-indent": enter_and_indent, "selection-grow": selection_grow, "kill": kill, "slurp-forward": slurp_forward, "nav-select-right": nav_select_right, "nav-select-left": nav_select_left, "barf-forward": barf_forward, "barf-backward": barf_backward, "nav-right": nav_right, "slurp-backward": slurp_backward, "unwrap": unwrap, "selection-return": selection_return });
  var index = merge(builtin_index, paredit_index);
  reduce_kv((function (_PERCENT_1, _PERCENT_2, _PERCENT_3) {
  return assoc(_PERCENT_1, _PERCENT_3, _PERCENT_2);
  }), ({  }), index);

  var update_some = function (m, updates) {
  return reduce_kv((function (m, k, f) {
  const temp__23951__auto__1 = get(m, k);
  if ((temp__23951__auto__1 == null)) {
  return dissoc(m, k);} else {
  const existing2 = temp__23951__auto__1;
  return assoc(m, k, get(f, existing2));}
  }), m, updates);
  };
  var deserialize = function (command) {
  return update_some(command, ({ "run": index, "shift": index }));
  };
  var ungroup = function (commands) {
  return reduce_kv((function (out, k, bindings) {
  return into(out, map((function (_PERCENT_1) {
  return deserialize(assoc(_PERCENT_1, "run", k));
  }), bindings));
  }), [], commands);
  };
  var builtin_keymap_STAR_ = ({ "cursorLineDown": [({ "key": "ArrowDown", "shift": "selectLineDown" }), ({ "mac": "Ctrl-n", "shift": "selectLineDown" })], "selectAll": [({ "key": "Mod-a" })], "cursorLineBoundaryForward": [({ "key": "End", "shift": "selectLineBoundaryForward" })], "deleteCharBackward": [({ "key": "Backspace" }), ({ "mac": "Ctrl-h" })], "cursorLineBoundaryBackward": [({ "key": "Home", "shift": "selectLineBoundaryBackward", "mac": "Ctrl-a" }), ({ "mac": "Cmd-ArrowLeft", "shift": "selectLineBoundaryBackward" })], "deleteCharForward": [({ "key": "Delete" }), ({ "mac": "Ctrl-d" })], "cursorCharLeft": [({ "key": "ArrowLeft", "shift": "selectCharLeft" }), ({ "mac": "Ctrl-b", "shift": "selectCharLeft" })], "cursorGroupBackward": [({ "mac": "Alt-b", "shift": "selectGroupBackward" })], "cursorDocEnd": [({ "mac": "Cmd-ArrowDown", "shift": "selectDocEnd" }), ({ "key": "Mod-End", "shift": "selectDocEnd" }), ({ "mac": "Alt->" })], "deleteGroupBackward": [({ "key": "Mod-Backspace", "mac": "Alt-Backspace" }), ({ "mac": "Ctrl-Alt-h" })], "deleteGroupForward": [({ "key": "Mod-Delete", "mac": "Ctrl-Alt-Backspace" }), ({ "mac": "Alt-Delete" }), ({ "mac": "Alt-d" })], "cursorPageDown": [({ "mac": "Ctrl-ArrowDown", "shift": "selectPageDown" }), ({ "key": "PageDown", "shift": "selectPageDown" }), ({ "mac": "Ctrl-v" })], "cursorPageUp": [({ "mac": "Ctrl-ArrowUp", "shift": "selectPageUp" }), ({ "key": "PageUp", "shift": "selectPageUp" }), ({ "mac": "Alt-v" })], "cursorLineEnd": [({ "mac": "Cmd-ArrowRight" }), ({ "mac": "Ctrl-e", "shift": "selectLineEnd" })], "cursorGroupForward": [({ "mac": "Alt-f", "shift": "selectGroupForward" })], "undoSelection": [({ "key": "Mod-u", "preventDefault": true })], "cursorCharRight": [({ "key": "ArrowRight", "shift": "selectCharRight" }), ({ "mac": "Ctrl-f", "shift": "selectCharRight" })], "splitLine": [({ "mac": "Ctrl-o" })], "transposeChars": [({ "mac": "Ctrl-t" })], "cursorLineUp": [({ "key": "ArrowUp", "shift": "selectLineUp" }), ({ "mac": "Ctrl-p", "shift": "selectLineUp" })], "cursorDocStart": [({ "mac": "Cmd-ArrowUp", "shift": "selectDocStart" }), ({ "key": "Mod-Home", "shift": "selectDocStart" }), ({ "mac": "Alt-<" })] });
  var paredit_keymap_STAR_ = ({ "indent": [({ "key": "Tab", "doc": "Indent document (or selection)" })], "nav-left": [({ "key": "Alt-ArrowLeft", "shift": "nav-select-left", "doc": "Move cursor one unit to the left (shift: selects this region)", "preventDefault": true })], "enter-and-indent": [({ "key": "Enter", "doc": "Insert newline and indent" })], "selection-grow": [({ "doc": "Grow selections", "key": "Alt-ArrowUp" }), ({ "key": "Mod-1" })], "kill": [({ "key": "Ctrl-k", "doc": "Remove all forms from cursor to end of line" })], "slurp-forward": [({ "key": "Ctrl-ArrowRight", "doc": "Expand collection to include form to the right", "preventDefault": true }), ({ "key": "Mod-Shift-k", "preventDefault": true })], "barf-forward": [({ "key": "Ctrl-ArrowLeft", "doc": "Shrink collection forwards by one form", "preventDefault": true }), ({ "key": "Mod-Shift-j", "preventDefault": true })], "barf-backward": [({ "doc": "Shrink collection backwards by one form", "key": "Ctrl-Alt-ArrowRight" })], "nav-right": [({ "key": "Alt-ArrowRight", "shift": "nav-select-right", "doc": "Move cursor one unit to the right (shift: selects this region)", "preventDefault": true })], "slurp-backward": [({ "doc": "Grow collection backwards by one form", "key": "Ctrl-Alt-ArrowLeft", "preventDefault": true })], "unwrap": [({ "key": "Alt-s", "doc": "Lift contents of collection into parent", "preventDefault": true })], "selection-return": [({ "doc": "Shrink selections", "key": "Alt-ArrowDown" }), ({ "key": "Mod-2" })] });
  var builtin = ungroup(builtin_keymap_STAR_);
  var paredit = ungroup(paredit_keymap_STAR_);
  var complete = paredit.concat(builtin);

  var fold_node_props = (() => {
  const coll_span1 = (function (tree) {
  return ({ "from": (start(tree) + 1), "to": (end(tree) - 1) });
  });
  return ({ "Vector": coll_span1, "Map": coll_span1, "List": coll_span1 });
  })();
  var style_tags = ({ "LineComment": tags.lineComment, "NS": tags.keyword, "\"\\\"\"": tags.string, "VarName/Symbol": tags.definition(tags.variableName), "DocString/...": tags.emphasis, "Boolean": tags.atom, "Keyword": tags.atom, "Number": tags.number, "RegExp": tags.regexp, "StringContent": tags.string, "Operator/Symbol": tags.keyword, "Discard!": tags.comment, "DefLike": tags.keyword, "Nil": tags.null });
  var parser = parser$2;
  var syntax = (() => {
  const f309 = (function (var_args) {
  const G__3121 = arguments.length;
  switch (G__3121) {case 0:
  return f309.cljs$core$IFn$_invoke$arity$0();
  case 1:
  return f309.cljs$core$IFn$_invoke$arity$1((arguments[0]));
  default:
  throw new Error(str("Invalid arity: ", alength(arguments)))}
  });
  f309.cljs$core$IFn$_invoke$arity$0 = (function () {
  return syntax(parser);
  });
  f309.cljs$core$IFn$_invoke$arity$1 = (function (parser) {
  return LRLanguage.define(({ "parser": parser.configure(({ "props": [props, foldNodeProp.add(fold_node_props), styleTags(style_tags)] })) }));
  });
  f309.cljs$lang$maxFixedArity = 1;
  return f309;
  })();
  var complete_keymap = complete;
  var default_extensions = [syntax(parser$2), extension$2(), extension$1(), extension(), ext_format_changed_lines()];
  new LanguageSupport(syntax(), default_extensions.slice(1));

  var uppermost_edge_here = function (pos, node) {
  const node1 = (() => {
  const or__24281__auto__2 = last(take_while(every_pred(complement(top_QMARK_), (function (_PERCENT_1) {
  const or__24281__auto__3 = ((pos) === (end(_PERCENT_1))) && ((end(_PERCENT_1)) === (end(node)));
  if (truth_(or__24281__auto__3)) {
  return or__24281__auto__3;} else {
  return ((pos) === (start(_PERCENT_1))) && ((start(_PERCENT_1)) === (start(node)));}
  })), iterate(up$1, node)));
  if (truth_(or__24281__auto__2)) {
  return or__24281__auto__2;} else {
  return node;}
  })();
  if (("Discard") === (name(node1))) {
  return last(children(node1));} else {
  return node1;}
  };
  var main_selection = function (state) {
  return get_in((() => {
  const parent__39__auto__1 = get_in(state, ["selection"]);
  const f__40__auto__2 = get(parent__39__auto__1, "asSingle");
  return f__40__auto__2.call(parent__39__auto__1);
  })(), ["ranges", 0]);
  };
  var node_at_cursor = (() => {
  const f159 = (function (var_args) {
  const G__1621 = arguments.length;
  switch (G__1621) {case 1:
  return f159.cljs$core$IFn$_invoke$arity$1((arguments[0]));
  case 2:
  return f159.cljs$core$IFn$_invoke$arity$2((arguments[0]), (arguments[1]));
  default:
  throw new Error(str("Invalid arity: ", alength(arguments)))}
  });
  f159.cljs$core$IFn$_invoke$arity$1 = (function (state) {
  return node_at_cursor(state, get(main_selection(state), "from"));
  });
  f159.cljs$core$IFn$_invoke$arity$2 = (function (state, from) {
  const G__1633 = nearest_touching(state, from, -1);
  const G__1634 = ((G__1633 == null)) ? (null) : ((function (_PERCENT_1) {
  if (truth_((() => {
  const or__24281__auto__5 = terminal_type_QMARK_(type(_PERCENT_1));
  if (truth_(or__24281__auto__5)) {
  return or__24281__auto__5;} else {
  const or__24281__auto__6 = (start(_PERCENT_1)) <= (from);
  if (or__24281__auto__6) {
  return or__24281__auto__6;} else {
  return (end(_PERCENT_1)) <= (from);}}
  })())) {
  const G__1647 = _PERCENT_1;
  if (truth_((() => {
  const or__24281__auto__8 = top_QMARK_(_PERCENT_1);
  if (truth_(or__24281__auto__8)) {
  return or__24281__auto__8;} else {
  const and__24299__auto__9 = not(terminal_type_QMARK_(type(_PERCENT_1)));
  if (and__24299__auto__9) {
  return ((start(_PERCENT_1)) < (from)) && ((from) < (end(_PERCENT_1)));} else {
  return and__24299__auto__9;}}
  })())) {
  return first(children(G__1647, from, -1));} else {
  return G__1647;}}
  })(G__1633));
  const G__16310 = ((G__1634 == null)) ? (null) : (uppermost_edge_here(from, G__1634));
  if ((G__16310 == null)) {
  return null;} else {
  return balanced_range(state, G__16310);}
  });
  f159.cljs$lang$maxFixedArity = 2;
  return f159;
  })();
  var top_level_node = function (state) {
  return last(take_while(every_pred(identity, complement(top_QMARK_)), iterate(up$1, nearest_touching(state, get(main_selection(state), "from"), -1))));
  };
  var modifier_effect = StateEffect.define();
  var modifier_field = StateField.define(({ "create": constantly(({  })), "update": (function (value, tr) {
  const or__24281__auto__1 = (() => {
  const G__1652 = first(filter((function (_PERCENT_1) {
  return _PERCENT_1.is(modifier_effect);
  }), tr.effects));
  if ((G__1652 == null)) {
  return null;} else {
  return get(G__1652, "value");}
  })();
  if (truth_(or__24281__auto__1)) {
  return or__24281__auto__1;} else {
  return value;}
  }) }));
  var get_modifier_field = function (state) {
  return state.field(modifier_field);
  };
  var mark = function (spec, {from,to}) {
  return Decoration.mark(spec).range(from, to);
  };
  var single_mark = function (spec, range) {
  return Decoration.set([mark(spec, range)]);
  };
  var mark_spec = ({ "attributes": ({ "style": "background-color: rgba(0, 243, 255, 0.14);" }) });
  var mark_spec_highlight = ({ "attributes": ({ "style": "background-color: rgba(0, 243, 255, 0.35);" }) });
  var cursor_range = function (state) {
  if (truth_(state.selection.main.empty)) {
  return node_at_cursor(state);} else {
  return state.selection.main;}
  };
  StateField.define(({ "create": constantly(Decoration.none), "update": (function (_value, {state}) {
  const map__12 = get_modifier_field(state);
  const field3 = map__12;
  const Shift4 = get(map__12, "Shift");
  const Enter5 = get(map__12, "Enter");
  const modifier6 = get(map__12, "modifier");
  const modifier_pressed_QMARK_7 = get(field3, modifier6);
  const spec8 = (truth_(Enter5)) ? (mark_spec_highlight) : (mark_spec);
  const temp__23951__auto__9 = (truth_((() => {
  const or__24281__auto__10 = embedded_QMARK_(state);
  if (truth_(or__24281__auto__10)) {
  return or__24281__auto__10;} else {
  return within_program_QMARK_(state);}
  })())) ? ((truth_((() => {
  const and__24299__auto__11 = modifier_pressed_QMARK_7;
  if (truth_(and__24299__auto__11)) {
  return Shift4;} else {
  return and__24299__auto__11;}
  })())) ? (top_level_node(state)) : ((truth_(modifier_pressed_QMARK_7)) ? ((() => {
  const or__24281__auto__12 = guard(main_selection(state), (function (_PERCENT_1) {
  return not(get(_PERCENT_1, "empty"));
  }));
  if (truth_(or__24281__auto__12)) {
  return or__24281__auto__12;} else {
  return cursor_range(state);}
  })()) : (null))) : (null);
  if ((temp__23951__auto__9 == null)) {
  return Decoration.none;} else {
  const range13 = temp__23951__auto__9;
  return single_mark(spec8, range13);}
  }) }));
  var top_level_string = function (state) {
  return guard((() => {
  const G__1751 = top_level_node(state);
  if ((G__1751 == null)) {
  return null;} else {
  return range_str(state, G__1751);}
  })(), complement(blank_QMARK_));
  };

  /**
   * WEBMIDI.js v3.1.12
   * A JavaScript library to kickstart your MIDI projects
   * https://webmidijs.org
   * Build generated on November 22nd, 2024.
   *
   * © Copyright 2015-2024, Jean-Philippe Côté.
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
   * in compliance with the License. You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under the License
   * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
   * or implied. See the License for the specific language governing permissions and limitations under
   * the License.
   */

  /* Version: 3.1.12 - November 22, 2024 18:55:09 */
  /**
   * The `EventEmitter` class provides methods to implement the _observable_ design pattern. This
   * pattern allows one to _register_ a function to execute when a specific event is _emitted_ by the
   * emitter.
   *
   * It is intended to be an abstract class meant to be extended by (or mixed into) other objects.
   */
  class EventEmitter {

    /**
     * Creates a new `EventEmitter`object.
     *
     * @param {boolean} [eventsSuspended=false] Whether the `EventEmitter` is initially in a suspended
     * state (i.e. not executing callbacks).
     */
    constructor(eventsSuspended = false) {

      /**
       * An object containing a property for each event with at least one registered listener. Each
       * event property contains an array of all the [`Listener`]{@link Listener} objects registered
       * for the event.
       *
       * @type {Object}
       * @readonly
       */
      this.eventMap = {};

      /**
       * Whether or not the execution of callbacks is currently suspended for this emitter.
       *
       * @type {boolean}
       */
      this.eventsSuspended = eventsSuspended == true ? true : false;

    }

    /**
     * The callback function is executed when the associated event is triggered via [`emit()`](#emit).
     * The [`emit()`](#emit) method relays all additional arguments it received to the callback
     * functions. Since [`emit()`](#emit) can be passed a variable number of arguments, it is up to
     * the developer to make sure the arguments match those of the associated callback. In addition,
     * the callback also separately receives all the arguments present in the listener's
     * [`arguments`](Listener#arguments) property. This makes it easy to pass data from where the
     * listener is added to where the listener is executed.
     *
     * @callback EventEmitter~callback
     * @param {...*} [args] A variable number of arguments matching the ones (if any) that were passed
     * to the [`emit()`](#emit) method (except, the first one) followed by the arguments found in the
     * listener's [`arguments`](Listener#arguments) array.
     */

    /**
     * Adds a listener for the specified event. It returns the [`Listener`]{@link Listener} object
     * that was created and attached to the event.
     *
     * To attach a global listener that will be triggered for any events, use
     * [`EventEmitter.ANY_EVENT`]{@link #ANY_EVENT} as the first parameter. Note that a global
     * listener will also be triggered by non-registered events.
     *
     * @param {string|Symbol} event The event to listen to.
     * @param {EventEmitter~callback} callback The callback function to execute when the event occurs.
     * @param {Object} [options={}]
     * @param {Object} [options.context=this] The value of `this` in the callback function.
     * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning
     * of the listeners array and thus executed first.
     * @param {number} [options.duration=Infinity] The number of milliseconds before the listener
     * automatically expires.
     * @param {number} [options.remaining=Infinity] The number of times after which the callback
     * should automatically be removed.
     * @param {array} [options.arguments] An array of arguments which will be passed separately to the
     * callback function. This array is stored in the [`arguments`]{@link Listener#arguments}
     * property of the [`Listener`]{@link Listener} object and can be retrieved or modified as
     * desired.
     *
     * @returns {Listener} The newly created [`Listener`]{@link Listener} object.
     *
     * @throws {TypeError} The `event` parameter must be a string or
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.
     * @throws {TypeError} The `callback` parameter must be a function.
     */
    addListener(event, callback, options = {}) {

      if (
        (typeof event === "string" && event.length < 1) ||
        (event instanceof String && event.length < 1) ||
        (typeof event !== "string" && !(event instanceof String) && event !== EventEmitter.ANY_EVENT)
      ) {
        throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");
      }

      if (typeof callback !== "function") throw new TypeError("The callback must be a function.");

      const listener = new Listener(event, this, callback, options);

      if (!this.eventMap[event]) this.eventMap[event] = [];

      if (options.prepend) {
        this.eventMap[event].unshift(listener);
      } else {
        this.eventMap[event].push(listener);
      }

      return listener;

    }

    /**
     * Adds a one-time listener for the specified event. The listener will be executed once and then
     * destroyed. It returns the [`Listener`]{@link Listener} object that was created and attached
     * to the event.
     *
     * To attach a global listener that will be triggered for any events, use
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the first parameter. Note that a
     * global listener will also be triggered by non-registered events.
     *
     * @param {string|Symbol} event The event to listen to
     * @param {EventEmitter~callback} callback The callback function to execute when the event occurs
     * @param {Object} [options={}]
     * @param {Object} [options.context=this] The context to invoke the callback function in.
     * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning
     * of the listeners array and thus executed first.
     * @param {number} [options.duration=Infinity] The number of milliseconds before the listener
     * automatically expires.
     * @param {array} [options.arguments] An array of arguments which will be passed separately to the
     * callback function. This array is stored in the [`arguments`]{@link Listener#arguments}
     * property of the [`Listener`]{@link Listener} object and can be retrieved or modified as
     * desired.
     *
     * @returns {Listener} The newly created [`Listener`]{@link Listener} object.
     *
     * @throws {TypeError} The `event` parameter must be a string or
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.
     * @throws {TypeError} The `callback` parameter must be a function.
     */
    addOneTimeListener(event, callback, options = {}) {
      options.remaining = 1;
      this.addListener(event, callback, options);
    }

    /**
     * Identifier to use when adding or removing a listener that should be triggered when any events
     * occur.
     *
     * @type {Symbol}
     */
    static get ANY_EVENT() {
      return Symbol.for("Any event");
    }

    /**
     * Returns `true` if the specified event has at least one registered listener. If no event is
     * specified, the method returns `true` if any event has at least one listener registered (this
     * includes global listeners registered to
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}).
     *
     * Note: to specifically check for global listeners added with
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}, use
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.
     *
     * @param {string|Symbol} [event=(any event)] The event to check
     * @param {function|Listener} [callback=(any callback)] The actual function that was added to the
     * event or the {@link Listener} object returned by `addListener()`.
     * @returns {boolean}
     */
    hasListener(event, callback) {

      if (event === undefined) {

        // Check for ANY_EVENT
        if (
          this.eventMap[EventEmitter.ANY_EVENT] && this.eventMap[EventEmitter.ANY_EVENT].length > 0
        ) {
          return true;
        }

        // Check for any regular events
        return Object.entries(this.eventMap).some(([, value]) => {
          return value.length > 0;
        });

      } else {

        if (this.eventMap[event] && this.eventMap[event].length > 0) {

          if (callback instanceof Listener) {
            let result = this.eventMap[event].filter(listener => listener === callback);
            return result.length > 0;
          } else if (typeof callback === "function") {
            let result = this.eventMap[event].filter(listener => listener.callback === callback);
            return result.length > 0;
          } else if (callback != undefined) {
            return false;
          }

          return true;

        } else {
          return false;
        }


      }

    }

    /**
     * An array of all the unique event names for which the emitter has at least one registered
     * listener.
     *
     * Note: this excludes global events registered with
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} because they are not tied to a
     * specific event.
     *
     * @type {string[]}
     * @readonly
     */
    get eventNames() {
      return Object.keys(this.eventMap);
    }

    /**
     * Returns an array of all the [`Listener`]{@link Listener} objects that have been registered for
     * a specific event.
     *
     * Please note that global events (those added with
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}) are not returned for "regular"
     * events. To get the list of global listeners, specifically use
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.
     *
     * @param {string|Symbol} event The event to get listeners for.
     * @returns {Listener[]} An array of [`Listener`]{@link Listener} objects.
     */
    getListeners(event) {
      return this.eventMap[event] || [];
    }

    /**
     * Suspends execution of all callbacks functions registered for the specified event type.
     *
     * You can suspend execution of callbacks registered with
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} by passing
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} to `suspendEvent()`. Beware that this
     * will not suspend all callbacks but only those registered with
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}. While this may seem counter-intuitive
     * at first glance, it allows the selective suspension of global listeners while leaving other
     * listeners alone. If you truly want to suspends all callbacks for a specific
     * [`EventEmitter`]{@link EventEmitter}, simply set its `eventsSuspended` property to `true`.
     *
     * @param {string|Symbol} event The event name (or `EventEmitter.ANY_EVENT`) for which to suspend
     * execution of all callback functions.
     */
    suspendEvent(event) {
      this.getListeners(event).forEach(listener => {
        listener.suspended = true;
      });
    }

    /**
     * Resumes execution of all suspended callback functions registered for the specified event type.
     *
     * You can resume execution of callbacks registered with
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} by passing
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} to `unsuspendEvent()`. Beware that
     * this will not resume all callbacks but only those registered with
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}. While this may seem
     * counter-intuitive, it allows the selective unsuspension of global listeners while leaving other
     * callbacks alone.
     *
     * @param {string|Symbol} event The event name (or `EventEmitter.ANY_EVENT`) for which to resume
     * execution of all callback functions.
     */
    unsuspendEvent(event) {
      this.getListeners(event).forEach(listener => {
        listener.suspended = false;
      });
    }

    /**
     * Returns the number of listeners registered for a specific event.
     *
     * Please note that global events (those added with
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}) do not count towards the remaining
     * number for a "regular" event. To get the number of global listeners, specifically use
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.
     *
     * @param {string|Symbol} event The event which is usually a string but can also be the special
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} symbol.
     * @returns {number} An integer representing the number of listeners registered for the specified
     * event.
     */
    getListenerCount(event) {
      return this.getListeners(event).length;
    }

    /**
     * Executes the callback function of all the [`Listener`]{@link Listener} objects registered for
     * a given event. The callback functions are passed the additional arguments passed to `emit()`
     * (if any) followed by the arguments present in the [`arguments`](Listener#arguments) property of
     * the [`Listener`](Listener) object (if any).
     *
     * If the [`eventsSuspended`]{@link #eventsSuspended} property is `true` or the
     * [`Listener.suspended`]{@link Listener#suspended} property is `true`, the callback functions
     * will not be executed.
     *
     * This function returns an array containing the return values of each of the callbacks.
     *
     * It should be noted that the regular listeners are triggered first followed by the global
     * listeners (those added with [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}).
     *
     * @param {string} event The event
     * @param {...*} args Arbitrary number of arguments to pass along to the callback functions
     *
     * @returns {Array} An array containing the return value of each of the executed listener
     * functions.
     *
     * @throws {TypeError} The `event` parameter must be a string.
     */
    emit(event, ...args) {

      if (typeof event !== "string" && !(event instanceof String)) {
        throw new TypeError("The 'event' parameter must be a string.");
      }

      if (this.eventsSuspended) return;

      // We collect return values from all listeners here
      let results = [];

      // We must make sure that we do not have undefined otherwise concat() will add an undefined
      // entry in the array.
      let listeners = this.eventMap[EventEmitter.ANY_EVENT] || [];
      if (this.eventMap[event]) listeners = listeners.concat(this.eventMap[event]);

      listeners.forEach(listener => {

        // This is the per-listener suspension check
        if (listener.suspended) return;

        let params = [...args];
        if (Array.isArray(listener.arguments)) params = params.concat(listener.arguments);

        if (listener.remaining > 0) {
          results.push(listener.callback.apply(listener.context, params));
          listener.count++;
        }

        if (--listener.remaining < 1) listener.remove();

      });

      return results;

    }

    /**
     * Removes all the listeners that were added to the object upon which the method is called and
     * that match the specified criterias. If no parameters are passed, all listeners added to this
     * object will be removed. If only the `event` parameter is passed, all listeners for that event
     * will be removed from that object. You can remove global listeners by using
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the first parameter.
     *
     * To use more granular options, you must at least define the `event`. Then, you can specify the
     * callback to match or one or more of the additional options.
     *
     * @param {string} [event] The event name.
     * @param {EventEmitter~callback} [callback] Only remove the listeners that match this exact
     * callback function.
     * @param {Object} [options]
     * @param {*} [options.context] Only remove the listeners that have this exact context.
     * @param {number} [options.remaining] Only remove the listener if it has exactly that many
     * remaining times to be executed.
     */
    removeListener(event, callback, options = {}) {

      if (event === undefined) {
        this.eventMap = {};
        return;
      } else if (!this.eventMap[event]) {
        return;
      }

      // Find listeners that do not match the criterias (those are the ones we will keep)
      let listeners = this.eventMap[event].filter(listener => {

        return (callback && listener.callback !== callback) ||
          (options.remaining && options.remaining !== listener.remaining) ||
          (options.context && options.context !== listener.context);

      });

      if (listeners.length) {
        this.eventMap[event] = listeners;
      } else {
        delete this.eventMap[event];
      }

    }

    /**
     * The `waitFor()` method is an async function which returns a promise. The promise is fulfilled
     * when the specified event occurs. The event can be a regular event or
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} (if you want to resolve as soon as any
     * event is emitted).
     *
     * If the `duration` option is set, the promise will only be fulfilled if the event is emitted
     * within the specified duration. If the event has not been fulfilled after the specified
     * duration, the promise is rejected. This makes it super easy to wait for an event and timeout
     * after a certain time if the event is not triggered.
     *
     * @param {string|Symbol} event The event to wait for
     * @param {Object} [options={}]
     * @param {number} [options.duration=Infinity] The number of milliseconds to wait before the
     * promise is automatically rejected.
     */
    async waitFor(event, options = {}) {

      options.duration = parseInt(options.duration);
      if (isNaN(options.duration) || options.duration <= 0) options.duration = Infinity;

      return new Promise((resolve, reject) => {

        let timeout;

        let listener = this.addListener(event, () => {
          clearTimeout(timeout);
          resolve();
        }, {remaining: 1});

        if (options.duration !== Infinity) {
          timeout = setTimeout(() => {
            listener.remove();
            reject("The duration expired before the event was emitted.");
          }, options.duration);
        }

      });

    }

    /**
     * The number of unique events that have registered listeners.
     *
     * Note: this excludes global events registered with
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} because they are not tied to a
     * specific event.
     *
     * @type {number}
     * @readonly
     */
    get eventCount() {
      return Object.keys(this.eventMap).length;
    }

  }

  /**
   * The `Listener` class represents a single event listener object. Such objects keep all relevant
   * contextual information such as the event being listened to, the object the listener was attached
   * to, the callback function and so on.
   *
   */
  class Listener {

    /**
     * Creates a new `Listener` object
     *
     * @param {string|Symbol} event The event being listened to
     * @param {EventEmitter} target The [`EventEmitter`]{@link EventEmitter} object that the listener
     * is attached to.
     * @param {EventEmitter~callback} callback The function to call when the listener is triggered
     * @param {Object} [options={}]
     * @param {Object} [options.context=target] The context to invoke the listener in (a.k.a. the
     * value of `this` inside the callback function).
     * @param {number} [options.remaining=Infinity] The remaining number of times after which the
     * callback should automatically be removed.
     * @param {array} [options.arguments] An array of arguments that will be passed separately to the
     * callback function upon execution. The array is stored in the [`arguments`]{@link #arguments}
     * property and can be retrieved or modified as desired.
     *
     * @throws {TypeError} The `event` parameter must be a string or
     * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.
     * @throws {ReferenceError} The `target` parameter is mandatory.
     * @throws {TypeError} The `callback` must be a function.
     */
    constructor(event, target, callback, options = {}) {

      if (
        typeof event !== "string" &&
        !(event instanceof String) &&
        event !== EventEmitter.ANY_EVENT
      ) {
        throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");
      }

      if (!target) {
        throw new ReferenceError("The 'target' parameter is mandatory.");
      }

      if (typeof callback !== "function") {
        throw new TypeError("The 'callback' must be a function.");
      }

      // Convert single value argument to array
      if (options.arguments !== undefined && !Array.isArray(options.arguments)) {
        options.arguments = [options.arguments];
      }

      // Define default options and merge declared options into them,
      options = Object.assign({
        context: target,
        remaining: Infinity,
        arguments: undefined,
        duration: Infinity,
      }, options);

      // Make sure it is eventually deleted if a duration is supplied
      if (options.duration !== Infinity) {
        setTimeout(() => this.remove(), options.duration);
      }

      /**
       * An array of arguments to pass to the callback function upon execution.
       * @type {array}
       */
      this.arguments = options.arguments;

      /**
       * The callback function to execute.
       * @type {Function}
       */
      this.callback = callback;

      /**
       * The context to execute the callback function in (a.k.a. the value of `this` inside the
       * callback function)
       * @type {Object}
       */
      this.context = options.context;

      /**
       * The number of times the listener function was executed.
       * @type {number}
       */
      this.count = 0;

      /**
       * The event name.
       * @type {string}
       */
      this.event = event;

      /**
       * The remaining number of times after which the callback should automatically be removed.
       * @type {number}
       */
      this.remaining = parseInt(options.remaining) >= 1 ? parseInt(options.remaining) : Infinity;

      /**
       * Whether this listener is currently suspended or not.
       * @type {boolean}
       */
      this.suspended = false;

      /**
       * The object that the event is attached to (or that emitted the event).
       * @type {EventEmitter}
       */
      this.target = target;

    }

    /**
     * Removes the listener from its target.
     */
    remove() {
      this.target.removeListener(
        this.event,
        this.callback,
        {context: this.context, remaining: this.remaining}
      );
    }

  }

  /**
   * The `Enumerations` class contains enumerations and arrays of elements used throughout the
   * library. All its properties are static and should be referenced using the class name. For
   * example: `Enumerations.CHANNEL_MESSAGES`.
   *
   * @license Apache-2.0
   * @since 3.0.0
   */
  class Enumerations {

    /**
     * @enum {Object.<string, number>}
     * @readonly
     * @deprecated since 3.1 (use Enumerations.CHANNEL_MESSAGES instead)
     * @private
     * @static
     */
    static get MIDI_CHANNEL_MESSAGES() {

      if (this.validation) {
        console.warn(
          "The MIDI_CHANNEL_MESSAGES enum has been deprecated. Use the " +
          "Enumerations.CHANNEL_MESSAGES enum instead."
        );
      }

      return Enumerations.CHANNEL_MESSAGES;

    }

    /**
     * Enumeration of all MIDI channel message names and their associated 4-bit numerical value:
     *
     * | Message Name        | Hexadecimal | Decimal |
     * |---------------------|-------------|---------|
     * | `noteoff`           | 0x8         | 8       |
     * | `noteon`            | 0x9         | 9       |
     * | `keyaftertouch`     | 0xA         | 10      |
     * | `controlchange`     | 0xB         | 11      |
     * | `programchange`     | 0xC         | 12      |
     * | `channelaftertouch` | 0xD         | 13      |
     * | `pitchbend`         | 0xE         | 14      |
     *
     * @enum {Object.<string, number>}
     * @readonly
     * @since 3.1
     * @static
     */
    static get CHANNEL_MESSAGES() {

      return {
        noteoff: 0x8,           // 8
        noteon: 0x9,            // 9
        keyaftertouch: 0xA,     // 10
        controlchange: 0xB,     // 11
        programchange: 0xC,     // 12
        channelaftertouch: 0xD, // 13
        pitchbend: 0xE          // 14
      };

    }

    /**
     * A simple array of the 16 valid MIDI channel numbers (`1` to `16`):
     *
     * @type {number[]}
     * @readonly
     * @since 3.1
     * @static
     */
    static get CHANNEL_NUMBERS() {
      return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];
    }

    /**
     * @type {number[]}
     * @readonly
     * @deprecated since 3.1 (use Enumerations.CHANNEL_NUMBERS instead)
     * @private
     * @static
     */
    static get MIDI_CHANNEL_NUMBERS() {

      if (this.validation) {
        console.warn(
          "The MIDI_CHANNEL_NUMBERS array has been deprecated. Use the " +
          "Enumerations.CHANNEL_NUMBERS array instead."
        );
      }

      return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];

    }

    /**
     * Enumeration of all MIDI channel mode message names and their associated numerical value:
     *
     *
     * | Message Name          | Hexadecimal | Decimal |
     * |-----------------------|-------------|---------|
     * | `allsoundoff`         | 0x78        | 120     |
     * | `resetallcontrollers` | 0x79        | 121     |
     * | `localcontrol`        | 0x7A        | 122     |
     * | `allnotesoff`         | 0x7B        | 123     |
     * | `omnimodeoff`         | 0x7C        | 124     |
     * | `omnimodeon`          | 0x7D        | 125     |
     * | `monomodeon`          | 0x7E        | 126     |
     * | `polymodeon`          | 0x7F        | 127     |
     *
     * @enum {Object.<string, number>}
     * @readonly
     * @since 3.1
     * @static
     */
    static get CHANNEL_MODE_MESSAGES() {

      return {
        allsoundoff: 120,
        resetallcontrollers: 121,
        localcontrol: 122,
        allnotesoff: 123,
        omnimodeoff: 124,
        omnimodeon: 125,
        monomodeon: 126,
        polymodeon: 127
      };

    }

    /**
     * @enum {Object.<string, number>}
     * @deprecated since 3.1 (use Enumerations.CHANNEL_MODE_MESSAGES instead)
     * @private
     * @readonly
     * @static
     */
    static get MIDI_CHANNEL_MODE_MESSAGES() {

      if (this.validation) {
        console.warn(
          "The MIDI_CHANNEL_MODE_MESSAGES enum has been deprecated. Use the " +
          "Enumerations.CHANNEL_MODE_MESSAGES enum instead."
        );
      }

      return Enumerations.CHANNEL_MODE_MESSAGES;

    }

    /**
     * @enum {Object.<string, number>}
     * @readonly
     * @static
     * @private
     * @deprecated since version 3.0.26 (use `CONTROL_CHANGE_MESSAGES` instead)
     */
    static get MIDI_CONTROL_CHANGE_MESSAGES() {

      if (this.validation) {
        console.warn(
          "The MIDI_CONTROL_CHANGE_MESSAGES enum has been deprecated. Use the " +
          "Enumerations.CONTROL_CHANGE_MESSAGES array instead."
        );
      }

      return {

        bankselectcoarse: 0,
        modulationwheelcoarse: 1,
        breathcontrollercoarse: 2,
        controller3: 3,
        footcontrollercoarse: 4,
        portamentotimecoarse: 5,
        dataentrycoarse: 6,
        volumecoarse: 7,
        balancecoarse: 8,
        controller9: 9,
        pancoarse: 10,
        expressioncoarse: 11,
        effectcontrol1coarse: 12,
        effectcontrol2coarse: 13,
        controller14: 14,
        controller15: 15,
        generalpurposeslider1: 16,
        generalpurposeslider2: 17,
        generalpurposeslider3: 18,
        generalpurposeslider4: 19,
        controller20: 20,
        controller21: 21,
        controller22: 22,
        controller23: 23,
        controller24: 24,
        controller25: 25,
        controller26: 26,
        controller27: 27,
        controller28: 28,
        controller29: 29,
        controller30: 30,
        controller31: 31,
        bankselectfine: 32,
        modulationwheelfine: 33,
        breathcontrollerfine: 34,
        controller35: 35,
        footcontrollerfine: 36,
        portamentotimefine: 37,
        dataentryfine: 38,
        volumefine: 39,
        balancefine: 40,
        controller41: 41,
        panfine: 42,
        expressionfine: 43,
        effectcontrol1fine: 44,
        effectcontrol2fine: 45,
        controller46: 46,
        controller47: 47,
        controller48: 48,
        controller49: 49,
        controller50: 50,
        controller51: 51,
        controller52: 52,
        controller53: 53,
        controller54: 54,
        controller55: 55,
        controller56: 56,
        controller57: 57,
        controller58: 58,
        controller59: 59,
        controller60: 60,
        controller61: 61,
        controller62: 62,
        controller63: 63,
        holdpedal: 64,
        portamento: 65,
        sustenutopedal: 66,
        softpedal: 67,
        legatopedal: 68,
        hold2pedal: 69,
        soundvariation: 70,
        resonance: 71,
        soundreleasetime: 72,
        soundattacktime: 73,
        brightness: 74,
        soundcontrol6: 75,
        soundcontrol7: 76,
        soundcontrol8: 77,
        soundcontrol9: 78,
        soundcontrol10: 79,
        generalpurposebutton1: 80,
        generalpurposebutton2: 81,
        generalpurposebutton3: 82,
        generalpurposebutton4: 83,
        controller84: 84,
        controller85: 85,
        controller86: 86,
        controller87: 87,
        controller88: 88,
        controller89: 89,
        controller90: 90,
        reverblevel: 91,
        tremololevel: 92,
        choruslevel: 93,
        celestelevel: 94,
        phaserlevel: 95,
        databuttonincrement: 96,
        databuttondecrement: 97,
        nonregisteredparametercoarse: 98,
        nonregisteredparameterfine: 99,
        registeredparametercoarse: 100,
        registeredparameterfine: 101,
        controller102: 102,
        controller103: 103,
        controller104: 104,
        controller105: 105,
        controller106: 106,
        controller107: 107,
        controller108: 108,
        controller109: 109,
        controller110: 110,
        controller111: 111,
        controller112: 112,
        controller113: 113,
        controller114: 114,
        controller115: 115,
        controller116: 116,
        controller117: 117,
        controller118: 118,
        controller119: 119,
        allsoundoff: 120,
        resetallcontrollers: 121,
        localcontrol: 122,
        allnotesoff: 123,
        omnimodeoff: 124,
        omnimodeon: 125,
        monomodeon: 126,
        polymodeon: 127

      };

    }

    /**
     * An array of objects, ordered by control number, describing control change messages. Each object
     * in the array has 3 properties with some objects having a fourth one (`position`) :
     *
     *  * `number`: MIDI control number (0-127);
     *  * `name`: name of emitted event (eg: `bankselectcoarse`, `choruslevel`, etc) that can be
     *  listened to;
     *  * `description`: user-friendly description of the controller's purpose;
     *  * `position` (optional): whether this controller's value should be considered an `msb` or
     *  `lsb`
     *
     * Not all controllers have a predefined function. For those that don't, `name` is the word
     * "controller" followed by the number (e.g. `controller112`).
     *
     * | Event name                     | Control Number |
     * |--------------------------------|----------------|
     * | `bankselectcoarse`             | 0              |
     * | `modulationwheelcoarse`        | 1              |
     * | `breathcontrollercoarse`       | 2              |
     * | `controller3`                  | 3              |
     * | `footcontrollercoarse`         | 4              |
     * | `portamentotimecoarse`         | 5              |
     * | `dataentrycoarse`              | 6              |
     * | `volumecoarse`                 | 7              |
     * | `balancecoarse`                | 8              |
     * | `controller9`                  | 9              |
     * | `pancoarse`                    | 10             |
     * | `expressioncoarse`             | 11             |
     * | `effectcontrol1coarse`         | 12             |
     * | `effectcontrol2coarse`         | 13             |
     * | `controller14`                 | 14             |
     * | `controller15`                 | 15             |
     * | `generalpurposecontroller1`    | 16             |
     * | `generalpurposecontroller2`    | 17             |
     * | `generalpurposecontroller3`    | 18             |
     * | `generalpurposecontroller4`    | 19             |
     * | `controller20`                 | 20             |
     * | `controller21`                 | 21             |
     * | `controller22`                 | 22             |
     * | `controller23`                 | 23             |
     * | `controller24`                 | 24             |
     * | `controller25`                 | 25             |
     * | `controller26`                 | 26             |
     * | `controller27`                 | 27             |
     * | `controller28`                 | 28             |
     * | `controller29`                 | 29             |
     * | `controller30`                 | 30             |
     * | `controller31`                 | 31             |
     * | `bankselectfine`               | 32             |
     * | `modulationwheelfine`          | 33             |
     * | `breathcontrollerfine`         | 34             |
     * | `controller35`                 | 35             |
     * | `footcontrollerfine`           | 36             |
     * | `portamentotimefine`           | 37             |
     * | `dataentryfine`                | 38             |
     * | `channelvolumefine`            | 39             |
     * | `balancefine`                  | 40             |
     * | `controller41`                 | 41             |
     * | `panfine`                      | 42             |
     * | `expressionfine`               | 43             |
     * | `effectcontrol1fine`           | 44             |
     * | `effectcontrol2fine`           | 45             |
     * | `controller46`                 | 46             |
     * | `controller47`                 | 47             |
     * | `controller48`                 | 48             |
     * | `controller49`                 | 49             |
     * | `controller50`                 | 50             |
     * | `controller51`                 | 51             |
     * | `controller52`                 | 52             |
     * | `controller53`                 | 53             |
     * | `controller54`                 | 54             |
     * | `controller55`                 | 55             |
     * | `controller56`                 | 56             |
     * | `controller57`                 | 57             |
     * | `controller58`                 | 58             |
     * | `controller59`                 | 59             |
     * | `controller60`                 | 60             |
     * | `controller61`                 | 61             |
     * | `controller62`                 | 62             |
     * | `controller63`                 | 63             |
     * | `damperpedal`                  | 64             |
     * | `portamento`                   | 65             |
     * | `sostenuto`                    | 66             |
     * | `softpedal`                    | 67             |
     * | `legatopedal`                  | 68             |
     * | `hold2`                        | 69             |
     * | `soundvariation`               | 70             |
     * | `resonance`                    | 71             |
     * | `releasetime`                  | 72             |
     * | `attacktime`                   | 73             |
     * | `brightness`                   | 74             |
     * | `decaytime`                    | 75             |
     * | `vibratorate`                  | 76             |
     * | `vibratodepth`                 | 77             |
     * | `vibratodelay`                 | 78             |
     * | `controller79`                 | 79             |
     * | `generalpurposecontroller5`    | 80             |
     * | `generalpurposecontroller6`    | 81             |
     * | `generalpurposecontroller7`    | 82             |
     * | `generalpurposecontroller8`    | 83             |
     * | `portamentocontrol`            | 84             |
     * | `controller85`                 | 85             |
     * | `controller86`                 | 86             |
     * | `controller87`                 | 87             |
     * | `highresolutionvelocityprefix` | 88             |
     * | `controller89`                 | 89             |
     * | `controller90`                 | 90             |
     * | `effect1depth`                 | 91             |
     * | `effect2depth`                 | 92             |
     * | `effect3depth`                 | 93             |
     * | `effect4depth`                 | 94             |
     * | `effect5depth`                 | 95             |
     * | `dataincrement`                | 96             |
     * | `datadecrement`                | 97             |
     * | `nonregisteredparameterfine`   | 98             |
     * | `nonregisteredparametercoarse` | 99             |
     * | `nonregisteredparameterfine`   | 100            |
     * | `registeredparametercoarse`    | 101            |
     * | `controller102`                | 102            |
     * | `controller103`                | 103            |
     * | `controller104`                | 104            |
     * | `controller105`                | 105            |
     * | `controller106`                | 106            |
     * | `controller107`                | 107            |
     * | `controller108`                | 108            |
     * | `controller109`                | 109            |
     * | `controller110`                | 110            |
     * | `controller111`                | 111            |
     * | `controller112`                | 112            |
     * | `controller113`                | 113            |
     * | `controller114`                | 114            |
     * | `controller115`                | 115            |
     * | `controller116`                | 116            |
     * | `controller117`                | 117            |
     * | `controller118`                | 118            |
     * | `controller119`                | 119            |
     * | `allsoundoff`                  | 120            |
     * | `resetallcontrollers`          | 121            |
     * | `localcontrol`                 | 122            |
     * | `allnotesoff`                  | 123            |
     * | `omnimodeoff`                  | 124            |
     * | `omnimodeon`                   | 125            |
     * | `monomodeon`                   | 126            |
     * | `polymodeon`                   | 127            |
     *
     * @type {object[]}
     * @readonly
     * @static
     * @since 3.1
     */
    static get CONTROL_CHANGE_MESSAGES() {

      return [
        {
          number: 0,
          name: "bankselectcoarse",
          description: "Bank Select (Coarse)",
          position: "msb"
        },
        {
          number: 1,
          name: "modulationwheelcoarse",
          description: "Modulation Wheel (Coarse)",
          position: "msb"
        },
        {
          number: 2,
          name: "breathcontrollercoarse",
          description: "Breath Controller (Coarse)",
          position: "msb"
        },
        {
          number: 3,
          name: "controller3",
          description: "Undefined",
          position: "msb"
        },
        {
          number: 4,
          name: "footcontrollercoarse",
          description: "Foot Controller (Coarse)",
          position: "msb"
        },
        {
          number: 5,
          name: "portamentotimecoarse",
          description: "Portamento Time (Coarse)",
          position: "msb"
        },
        {
          number: 6,
          name: "dataentrycoarse",
          description: "Data Entry (Coarse)",
          position: "msb"
        },
        {
          number: 7,
          name: "volumecoarse",
          description: "Channel Volume (Coarse)",
          position: "msb"
        },
        {
          number: 8,
          name: "balancecoarse",
          description: "Balance (Coarse)",
          position: "msb"
        },
        {
          number: 9,
          name: "controller9",
          description: "Controller 9 (Coarse)",
          position: "msb"
        },
        {
          number: 10,
          name: "pancoarse",
          description: "Pan (Coarse)",
          position: "msb"
        },
        {
          number: 11,
          name: "expressioncoarse",
          description: "Expression Controller (Coarse)",
          position: "msb"
        },
        {
          number: 12,
          name: "effectcontrol1coarse",
          description: "Effect Control 1 (Coarse)",
          position: "msb"
        },
        {
          number: 13,
          name: "effectcontrol2coarse",
          description: "Effect Control 2 (Coarse)",
          position: "msb"
        },
        {
          number: 14,
          name: "controller14",
          description: "Undefined",
          position: "msb"
        },
        {
          number: 15,
          name: "controller15",
          description: "Undefined",
          position: "msb"
        },
        {
          number: 16,
          name: "generalpurposecontroller1",
          description: "General Purpose Controller 1 (Coarse)",
          position: "msb"
        },
        {
          number: 17,
          name: "generalpurposecontroller2",
          description: "General Purpose Controller 2 (Coarse)",
          position: "msb"
        },
        {
          number: 18,
          name: "generalpurposecontroller3",
          description: "General Purpose Controller 3 (Coarse)",
          position: "msb"
        },
        {
          number: 19,
          name: "generalpurposecontroller4",
          description: "General Purpose Controller 4 (Coarse)",
          position: "msb"
        },
        {
          number: 20,
          name: "controller20",
          description: "Undefined",
          position: "msb"
        },
        {
          number: 21,
          name: "controller21",
          description: "Undefined",
          position: "msb"
        },
        {
          number: 22,
          name: "controller22",
          description: "Undefined",
          position: "msb"
        },
        {
          number: 23,
          name: "controller23",
          description: "Undefined",
          position: "msb"
        },
        {
          number: 24,
          name: "controller24",
          description: "Undefined",
          position: "msb"
        },
        {
          number: 25,
          name: "controller25",
          description: "Undefined",
          position: "msb"
        },
        {
          number: 26,
          name: "controller26",
          description: "Undefined",
          position: "msb"
        },
        {
          number: 27,
          name: "controller27",
          description: "Undefined",
          position: "msb"
        },
        {
          number: 28,
          name: "controller28",
          description: "Undefined",
          position: "msb"
        },
        {
          number: 29,
          name: "controller29",
          description: "Undefined",
          position: "msb"
        },
        {
          number: 30,
          name: "controller30",
          description: "Undefined",
          position: "msb"
        },
        {
          number: 31,
          name: "controller31",
          description: "Undefined",
          position: "msb"
        },
        {
          number: 32,
          name: "bankselectfine",
          description: "Bank Select (Fine)",
          position: "lsb"
        },
        {
          number: 33,
          name: "modulationwheelfine",
          description: "Modulation Wheel (Fine)",
          position: "lsb"
        },
        {
          number: 34,
          name: "breathcontrollerfine",
          description: "Breath Controller (Fine)",
          position: "lsb"
        },
        {
          number: 35,
          name: "controller35",
          description: "Undefined",
          position: "lsb"
        },
        {
          number: 36,
          name: "footcontrollerfine",
          description: "Foot Controller (Fine)",
          position: "lsb"
        },
        {
          number: 37,
          name: "portamentotimefine",
          description: "Portamento Time (Fine)",
          position: "lsb"
        },
        {
          number: 38,
          name: "dataentryfine",
          description: "Data Entry (Fine)",
          position: "lsb"
        },
        {
          number: 39,
          name: "channelvolumefine",
          description: "Channel Volume (Fine)",
          position: "lsb"
        },
        {
          number: 40,
          name: "balancefine",
          description: "Balance (Fine)",
          position: "lsb"
        },
        {
          number: 41,
          name: "controller41",
          description: "Undefined",
          position: "lsb"
        },
        {
          number: 42,
          name: "panfine",
          description: "Pan (Fine)",
          position: "lsb"
        },
        {
          number: 43,
          name: "expressionfine",
          description: "Expression Controller (Fine)",
          position: "lsb"
        },
        {
          number: 44,
          name: "effectcontrol1fine",
          description: "Effect control 1 (Fine)",
          position: "lsb"
        },
        {
          number: 45,
          name: "effectcontrol2fine",
          description: "Effect control 2 (Fine)",
          position: "lsb"
        },
        {
          number: 46,
          name: "controller46",
          description: "Undefined",
          position: "lsb"
        },
        {
          number: 47,
          name: "controller47",
          description: "Undefined",
          position: "lsb"
        },
        {
          number: 48,
          name: "controller48",
          description: "General Purpose Controller 1 (Fine)",
          position: "lsb"
        },
        {
          number: 49,
          name: "controller49",
          description: "General Purpose Controller 2 (Fine)",
          position: "lsb"
        },
        {
          number: 50,
          name: "controller50",
          description: "General Purpose Controller 3 (Fine)",
          position: "lsb"
        },
        {
          number: 51,
          name: "controller51",
          description: "General Purpose Controller 4 (Fine)",
          position: "lsb"
        },
        {
          number: 52,
          name: "controller52",
          description: "Undefined",
          position: "lsb"
        },
        {
          number: 53,
          name: "controller53",
          description: "Undefined",
          position: "lsb"
        },
        {
          number: 54,
          name: "controller54",
          description: "Undefined",
          position: "lsb"
        },
        {
          number: 55,
          name: "controller55",
          description: "Undefined",
          position: "lsb"
        },
        {
          number: 56,
          name: "controller56",
          description: "Undefined",
          position: "lsb"
        },
        {
          number: 57,
          name: "controller57",
          description: "Undefined",
          position: "lsb"
        },
        {
          number: 58,
          name: "controller58",
          description: "Undefined",
          position: "lsb"
        },
        {
          number: 59,
          name: "controller59",
          description: "Undefined",
          position: "lsb"
        },
        {
          number: 60,
          name: "controller60",
          description: "Undefined",
          position: "lsb"
        },
        {
          number: 61,
          name: "controller61",
          description: "Undefined",
          position: "lsb"
        },
        {
          number: 62,
          name: "controller62",
          description: "Undefined",
          position: "lsb"
        },
        {
          number: 63,
          name: "controller63",
          description: "Undefined",
          position: "lsb"
        },
        {
          number: 64,
          name: "damperpedal",
          description: "Damper Pedal On/Off"
        },
        {
          number: 65,
          name: "portamento",
          description: "Portamento On/Off"
        },
        {
          number: 66,
          name: "sostenuto",
          description: "Sostenuto On/Off"
        },
        {
          number: 67,
          name: "softpedal",
          description: "Soft Pedal On/Off"
        },
        {
          number: 68,
          name: "legatopedal",
          description: "Legato Pedal On/Off"
        },
        {
          number: 69,
          name: "hold2",
          description: "Hold 2 On/Off"
        },
        {
          number: 70,
          name: "soundvariation",
          description: "Sound Variation",
          position: "lsb"
        },
        {
          number: 71,
          name: "resonance",
          description: "Resonance",
          position: "lsb"
        },
        {
          number: 72,
          name: "releasetime",
          description: "Release Time",
          position: "lsb"
        },
        {
          number: 73,
          name: "attacktime",
          description: "Attack Time",
          position: "lsb"
        },
        {
          number: 74,
          name: "brightness",
          description: "Brightness",
          position: "lsb"
        },
        {
          number: 75,
          name: "decaytime",
          description: "Decay Time",
          position: "lsb"
        },
        {
          number: 76,
          name: "vibratorate",
          description: "Vibrato Rate",
          position: "lsb"
        },
        {
          number: 77,
          name: "vibratodepth",
          description: "Vibrato Depth",
          position: "lsb"
        },
        {
          number: 78,
          name: "vibratodelay",
          description: "Vibrato Delay",
          position: "lsb"
        },
        {
          number: 79,
          name: "controller79",
          description: "Undefined",
          position: "lsb"
        },
        {
          number: 80,
          name: "generalpurposecontroller5",
          description: "General Purpose Controller 5",
          position: "lsb"
        },
        {
          number: 81,
          name: "generalpurposecontroller6",
          description: "General Purpose Controller 6",
          position: "lsb"
        },
        {
          number: 82,
          name: "generalpurposecontroller7",
          description: "General Purpose Controller 7",
          position: "lsb"
        },
        {
          number: 83,
          name: "generalpurposecontroller8",
          description: "General Purpose Controller 8",
          position: "lsb"
        },
        {
          number: 84,
          name: "portamentocontrol",
          description: "Portamento Control",
          position: "lsb"
        },
        {
          number: 85,
          name: "controller85",
          description: "Undefined"
        },
        {
          number: 86,
          name: "controller86",
          description: "Undefined"
        },
        {
          number: 87,
          name: "controller87",
          description: "Undefined"
        },
        {
          number: 88,
          name: "highresolutionvelocityprefix",
          description: "High Resolution Velocity Prefix",
          position: "lsb"
        },
        {
          number: 89,
          name: "controller89",
          description: "Undefined"
        },
        {
          number: 90,
          name: "controller90",
          description: "Undefined"
        },
        {
          number: 91,
          name: "effect1depth",
          description: "Effects 1 Depth (Reverb Send Level)"
        },
        {
          number: 92,
          name: "effect2depth",
          description: "Effects 2 Depth"
        },
        {
          number: 93,
          name: "effect3depth",
          description: "Effects 3 Depth (Chorus Send Level)"
        },
        {
          number: 94,
          name: "effect4depth",
          description: "Effects 4 Depth"
        },
        {
          number: 95,
          name: "effect5depth",
          description: "Effects 5 Depth"
        },
        {
          number: 96,
          name: "dataincrement",
          description: "Data Increment"
        },
        {
          number: 97,
          name: "datadecrement",
          description: "Data Decrement"
        },
        {
          number: 98,
          name: "nonregisteredparameterfine",
          description: "Non-Registered Parameter Number (Fine)",
          position: "lsb"
        },
        {
          number: 99,
          name: "nonregisteredparametercoarse",
          description: "Non-Registered Parameter Number (Coarse)",
          position: "msb"
        },
        {
          number: 100,
          name: "registeredparameterfine",
          description: "Registered Parameter Number (Fine)",
          position: "lsb"
        },
        {
          number: 101,
          name: "registeredparametercoarse",
          description: "Registered Parameter Number (Coarse)",
          position: "msb"
        },
        {
          number: 102,
          name: "controller102",
          description: "Undefined"
        },
        {
          number: 103,
          name: "controller103",
          description: "Undefined"
        },
        {
          number: 104,
          name: "controller104",
          description: "Undefined"
        },
        {
          number: 105,
          name: "controller105",
          description: "Undefined"
        },
        {
          number: 106,
          name: "controller106",
          description: "Undefined"
        },
        {
          number: 107,
          name: "controller107",
          description: "Undefined"
        },
        {
          number: 108,
          name: "controller108",
          description: "Undefined"
        },
        {
          number: 109,
          name: "controller109",
          description: "Undefined"
        },
        {
          number: 110,
          name: "controller110",
          description: "Undefined"
        },
        {
          number: 111,
          name: "controller111",
          description: "Undefined"
        },
        {
          number: 112,
          name: "controller112",
          description: "Undefined"
        },
        {
          number: 113,
          name: "controller113",
          description: "Undefined"
        },
        {
          number: 114,
          name: "controller114",
          description: "Undefined"
        },
        {
          number: 115,
          name: "controller115",
          description: "Undefined"
        },
        {
          number: 116,
          name: "controller116",
          description: "Undefined"
        },
        {
          number: 117,
          name: "controller117",
          description: "Undefined"
        },
        {
          number: 118,
          name: "controller118",
          description: "Undefined"
        },
        {
          number: 119,
          name: "controller119",
          description: "Undefined"
        },
        {
          number: 120,
          name: "allsoundoff",
          description: "All Sound Off"
        },
        {
          number: 121,
          name: "resetallcontrollers",
          description: "Reset All Controllers"
        },
        {
          number: 122,
          name: "localcontrol",
          description: "Local Control On/Off"
        },
        {
          number: 123,
          name: "allnotesoff",
          description: "All Notes Off"
        },
        {
          number: 124,
          name: "omnimodeoff",
          description: "Omni Mode Off"
        },
        {
          number: 125,
          name: "omnimodeon",
          description: "Omni Mode On"
        },
        {
          number: 126,
          name: "monomodeon",
          description: "Mono Mode On"
        },
        {
          number: 127,
          name: "polymodeon",
          description: "Poly Mode On"
        },
      ];

    }

    /**
     * Enumeration of all MIDI registered parameters and their associated pair of numerical values.
     * MIDI registered parameters extend the original list of control change messages. Currently,
     * there are only a limited number of them:
     *
     *
     * | Control Function             | [LSB, MSB]   |
     * |------------------------------|--------------|
     * | `pitchbendrange`             | [0x00, 0x00] |
     * | `channelfinetuning`          | [0x00, 0x01] |
     * | `channelcoarsetuning`        | [0x00, 0x02] |
     * | `tuningprogram`              | [0x00, 0x03] |
     * | `tuningbank`                 | [0x00, 0x04] |
     * | `modulationrange`            | [0x00, 0x05] |
     * | `azimuthangle`               | [0x3D, 0x00] |
     * | `elevationangle`             | [0x3D, 0x01] |
     * | `gain`                       | [0x3D, 0x02] |
     * | `distanceratio`              | [0x3D, 0x03] |
     * | `maximumdistance`            | [0x3D, 0x04] |
     * | `maximumdistancegain`        | [0x3D, 0x05] |
     * | `referencedistanceratio`     | [0x3D, 0x06] |
     * | `panspreadangle`             | [0x3D, 0x07] |
     * | `rollangle`                  | [0x3D, 0x08] |
     *
     * @enum {Object.<string, number[]>}
     * @readonly
     * @since 3.1
     * @static
     */
    static get REGISTERED_PARAMETERS() {

      return {
        pitchbendrange: [0x00, 0x00],
        channelfinetuning: [0x00, 0x01],
        channelcoarsetuning: [0x00, 0x02],
        tuningprogram: [0x00, 0x03],
        tuningbank: [0x00, 0x04],

        modulationrange: [0x00, 0x05],
        azimuthangle: [0x3D, 0x00],
        elevationangle: [0x3D, 0x01],
        gain: [0x3D, 0x02],
        distanceratio: [0x3D, 0x03],
        maximumdistance: [0x3D, 0x04],
        maximumdistancegain: [0x3D, 0x05],
        referencedistanceratio: [0x3D, 0x06],
        panspreadangle: [0x3D, 0x07],
        rollangle: [0x3D, 0x08]
      };

    }

    /**
     * @enum {Object.<string, number[]>}
     * @readonly
     * @deprecated since 3.1 (use Enumerations.REGISTERED_PARAMETERS instead)
     * @private
     * @static
     */
    static get MIDI_REGISTERED_PARAMETERS() {

      if (this.validation) {
        console.warn(
          "The MIDI_REGISTERED_PARAMETERS enum has been deprecated. Use the " +
          "Enumerations.REGISTERED_PARAMETERS enum instead."
        );
      }

      return Enumerations.MIDI_REGISTERED_PARAMETERS;

    }

    /**
     * Enumeration of all valid MIDI system messages and matching numerical values. This library also
     * uses two additional custom messages.
     *
     * **System Common Messages**
     *
     * | Function               | Hexadecimal | Decimal |
     * |------------------------|-------------|---------|
     * | `sysex`                | 0xF0        |  240    |
     * | `timecode`             | 0xF1        |  241    |
     * | `songposition`         | 0xF2        |  242    |
     * | `songselect`           | 0xF3        |  243    |
     * | `tunerequest`          | 0xF6        |  246    |
     * | `sysexend`             | 0xF7        |  247    |
     *
     * The `sysexend` message is never actually received. It simply ends a sysex stream.
     *
     * **System Real-Time Messages**
     *
     * | Function               | Hexadecimal | Decimal |
     * |------------------------|-------------|---------|
     * | `clock`                | 0xF8        |  248    |
     * | `start`                | 0xFA        |  250    |
     * | `continue`             | 0xFB        |  251    |
     * | `stop`                 | 0xFC        |  252    |
     * | `activesensing`        | 0xFE        |  254    |
     * | `reset`                | 0xFF        |  255    |
     *
     * Values 249 and 253 are relayed by the
     * [Web MIDI API](https://developer.mozilla.org/en-US/docs/Web/API/Web_MIDI_API) but they do not
     * serve any specific purpose. The
     * [MIDI 1.0 spec](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)
     * simply states that they are undefined/reserved.
     *
     * **Custom Messages**
     *
     * These two messages are mostly for internal use. They are not MIDI messages and cannot be sent
     * or forwarded.
     *
     * | Function               | Hexadecimal | Decimal |
     * |------------------------|-------------|---------|
     * | `midimessage`          |             |  0      |
     * | `unknownsystemmessage` |             |  -1     |
     *
     * @enum {Object.<string, number>}
     * @readonly
     * @since 3.1
     * @static
     */
    static get SYSTEM_MESSAGES() {

      return {

        // System common messages
        sysex: 0xF0,            // 240
        timecode: 0xF1,         // 241
        songposition: 0xF2,     // 242
        songselect: 0xF3,       // 243
        tunerequest: 0xF6,      // 246
        tuningrequest: 0xF6,    // for backwards-compatibility (deprecated in version 3.0)
        sysexend: 0xF7,         // 247 (never actually received - simply ends a sysex)

        // System real-time messages
        clock: 0xF8,            // 248
        start: 0xFA,            // 250
        continue: 0xFB,         // 251
        stop: 0xFC,             // 252
        activesensing: 0xFE,    // 254
        reset: 0xFF,            // 255

        // Custom WebMidi.js messages
        midimessage: 0,
        unknownsystemmessage: -1

      };

    }

    /**
     * @enum {Object.<string, number>}
     * @readonly
     * @deprecated since 3.1 (use Enumerations.SYSTEM_MESSAGES instead)
     * @private
     * @static
     */
    static get MIDI_SYSTEM_MESSAGES() {

      if (this.validation) {
        console.warn(
          "The MIDI_SYSTEM_MESSAGES enum has been deprecated. Use the " +
          "Enumerations.SYSTEM_MESSAGES enum instead."
        );
      }

      return Enumerations.SYSTEM_MESSAGES;

    }

    /**
     * Array of channel-specific event names that can be listened for. This includes channel mode
     * events and RPN/NRPN events.
     *
     * @type {string[]}
     * @readonly
     */
    static get CHANNEL_EVENTS() {

      return [

        // MIDI channel message events
        "noteoff",
        "controlchange",
        "noteon",
        "keyaftertouch",
        "programchange",
        "channelaftertouch",
        "pitchbend",

        // MIDI channel mode events
        "allnotesoff",
        "allsoundoff",
        "localcontrol",
        "monomode",
        "omnimode",
        "resetallcontrollers",

        // RPN/NRPN events
        "nrpn",
        "nrpn-dataentrycoarse",
        "nrpn-dataentryfine",
        "nrpn-dataincrement",
        "nrpn-datadecrement",
        "rpn",
        "rpn-dataentrycoarse",
        "rpn-dataentryfine",
        "rpn-dataincrement",
        "rpn-datadecrement",

        // Legacy (remove in v4)
        "nrpn-databuttonincrement",
        "nrpn-databuttondecrement",
        "rpn-databuttonincrement",
        "rpn-databuttondecrement",

      ];
    }

  }

  /**
   * The `Note` class represents a single musical note such as `"D3"`, `"G#4"`, `"F-1"`, `"Gb7"`, etc.
   *
   * `Note` objects can be played back on a single channel by calling
   * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same
   * output, by calling [`Output.playNote()`]{@link Output#playNote}.
   *
   * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.
   * These can be changed by passing in the appropriate option. It is also possible to set a
   * system-wide default for attack and release velocities by using the
   * [`WebMidi.defaults`](WebMidi#defaults) property.
   *
   * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and
   * [`rawRelease`](#rawRelease) to both get and set the values.
   *
   * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped
   * when the duration has elapsed by sending a `"noteoff"` event. By default, the duration is set to
   * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a
   * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},
   * [`Output.stopNote()`]{@link Output#stopNote} or similar.
   *
   * @license Apache-2.0
   * @since 3.0.0
   */
  class Note {

    /**
     * Creates a `Note` object.
     *
     * @param value {string|number} The value used to create the note. If an identifier string is used,
     * it must start with the note letter, optionally followed by an accidental and followed by the
     * octave number (`"C3"`, `"G#4"`, `"F-1"`, `"Db7"`, etc.). If a number is used, it must be an
     * integer between 0 and 127. In this case, middle C is considered to be C4 (note number 60).
     *
     * @param {object} [options={}]
     *
     * @param {number} [options.duration=Infinity] The number of milliseconds before the note should be
     * explicitly stopped.
     *
     * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If
     * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both
     * `attack` and `rawAttack` are specified, the latter has precedence.
     *
     * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If
     * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both
     * `release` and `rawRelease` are specified, the latter has precedence.
     *
     * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and
     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both
     * `attack` and `rawAttack` are specified, the latter has precedence.
     *
     * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and
     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both
     * `release` and `rawRelease` are specified, the latter has precedence.
     *
     * @throws {Error} Invalid note identifier
     * @throws {RangeError} Invalid name value
     * @throws {RangeError} Invalid accidental value
     * @throws {RangeError} Invalid octave value
     * @throws {RangeError} Invalid duration value
     * @throws {RangeError} Invalid attack value
     * @throws {RangeError} Invalid release value
     */
    constructor(value, options = {}) {

      // Assign property defaults
      this.duration = wm$1.defaults.note.duration;
      this.attack = wm$1.defaults.note.attack;
      this.release = wm$1.defaults.note.release;

      // Assign property values from options (validation occurs in setter)
      if (options.duration != undefined) this.duration = options.duration;
      if (options.attack != undefined) this.attack = options.attack;
      if (options.rawAttack != undefined) this.attack = Utilities.from7bitToFloat(options.rawAttack);
      if (options.release != undefined) this.release = options.release;
      if (options.rawRelease != undefined) {
        this.release = Utilities.from7bitToFloat(options.rawRelease);
      }

      // Assign note depending on the way it was specified (name or number)
      if (Number.isInteger(value)) {
        this.identifier = Utilities.toNoteIdentifier(value);
      } else {
        this.identifier = value;
      }

    }

    /**
     * The name, optional accidental and octave of the note, as a string.
     * @type {string}
     * @since 3.0.0
     */
    get identifier() {
      return this._name + (this._accidental || "") + this._octave;
    }
    set identifier(value) {

      const fragments = Utilities.getNoteDetails(value);

      if (wm$1.validation) {
        if (!value) throw new Error("Invalid note identifier");
      }

      this._name = fragments.name;
      this._accidental = fragments.accidental;
      this._octave = fragments.octave;

    }

    /**
     * The name (letter) of the note. If you need the full name with octave and accidental, you can
     * use the [`identifier`]{@link Note#identifier} property instead.
     * @type {string}
     * @since 3.0.0
     */
    get name() {
      return this._name;
    }
    set name(value) {

      if (wm$1.validation) {
        value = value.toUpperCase();
        if (!["C", "D", "E", "F", "G", "A", "B"].includes(value)) {
          throw new Error("Invalid name value");
        }
      }

      this._name = value;

    }

    /**
     * The accidental (#, ##, b or bb) of the note.
     * @type {string}
     * @since 3.0.0
     */
    get accidental() {
      return this._accidental;
    }
    set accidental(value) {

      if (wm$1.validation) {
        value = value.toLowerCase();
        if (!["#", "##", "b", "bb"].includes(value)) throw new Error("Invalid accidental value");
      }

      this._accidental = value;

    }

    /**
     * The octave of the note.
     * @type {number}
     * @since 3.0.0
     */
    get octave() {
      return this._octave;
    }
    set octave(value) {

      if (wm$1.validation) {
        value = parseInt(value);
        if (isNaN(value)) throw new Error("Invalid octave value");
      }

      this._octave = value;

    }

    /**
     * The duration of the note as a positive decimal number representing the number of milliseconds
     * that the note should play for.
     *
     * @type {number}
     * @since 3.0.0
     */
    get duration() {
      return this._duration;
    }
    set duration(value) {

      if (wm$1.validation) {
        value = parseFloat(value);
        if (isNaN(value) || value === null || value < 0) {
          throw new RangeError("Invalid duration value.");
        }
      }

      this._duration = value;

    }

    /**
     * The attack velocity of the note as an integer between 0 and 1.
     * @type {number}
     * @since 3.0.0
     */
    get attack() {
      return this._attack;
    }
    set attack(value) {

      if (wm$1.validation) {
        value = parseFloat(value);
        if (isNaN(value) || !(value >= 0 && value <= 1)) {
          throw new RangeError("Invalid attack value.");
        }
      }

      this._attack = value;

    }

    /**
     * The release velocity of the note as an integer between 0 and 1.
     * @type {number}
     * @since 3.0.0
     */
    get release() {
      return this._release;
    }
    set release(value) {

      if (wm$1.validation) {
        value = parseFloat(value);
        if (isNaN(value) || !(value >= 0 && value <= 1)) {
          throw new RangeError("Invalid release value.");
        }
      }

      this._release = value;

    }

    /**
     * The attack velocity of the note as a positive integer between 0 and 127.
     * @type {number}
     * @since 3.0.0
     */
    get rawAttack() {
      return Utilities.fromFloatTo7Bit(this._attack);
    }
    set rawAttack(value) {
      this._attack = Utilities.from7bitToFloat(value);
    }

    /**
     * The release velocity of the note as a positive integer between 0 and 127.
     * @type {number}
     * @since 3.0.0
     */
    get rawRelease() {
      return Utilities.fromFloatTo7Bit(this._release);
    }
    set rawRelease(value) {
      this._release = Utilities.from7bitToFloat(value);
    }

    /**
     * The MIDI number of the note (`0` - `127`). This number is derived from the note identifier
     * using C4 as a reference for middle C.
     *
     * @type {number}
     * @readonly
     * @since 3.0.0
     */
    get number() {
      return Utilities.toNoteNumber(this.identifier);
    }

    /**
     * Returns a MIDI note number offset by octave and/or semitone. If the calculated value is less
     * than 0, 0 will be returned. If the calculated value is more than 127, 127 will be returned. If
     * an invalid value is supplied, 0 will be used.
     *
     * @param [octaveOffset] {number} An integer to offset the note number by octave.
     * @param [semitoneOffset] {number} An integer to offset the note number by semitone.
     * @returns {number} An integer between 0 and 127
     */
    getOffsetNumber(octaveOffset = 0, semitoneOffset = 0) {

      if (wm$1.validation) {
        octaveOffset = parseInt(octaveOffset) || 0;
        semitoneOffset = parseInt(semitoneOffset) || 0;
      }

      return Math.min(Math.max(this.number + (octaveOffset * 12) + semitoneOffset, 0), 127);

    }

  }

  /**
   * The `Utilities` class contains general-purpose utility methods. All methods are static and
   * should be called using the class name. For example: `Utilities.getNoteDetails("C4")`.
   *
   * @license Apache-2.0
   * @since 3.0.0
   */
  class Utilities {

    /**
     * Returns a MIDI note number matching the identifier passed in the form of a string. The
     * identifier must include the octave number. The identifier also optionally include a sharp (#),
     * a double sharp (##), a flat (b) or a double flat (bb) symbol. For example, these are all valid
     * identifiers: C5, G4, D#-1, F0, Gb7, Eb-1, Abb4, B##6, etc.
     *
     * When converting note identifiers to numbers, C4 is considered to be middle C (MIDI note number
     * 60) as per the scientific pitch notation standard.
     *
     * The resulting note number can be offset by using the `octaveOffset` parameter.
     *
     * @param identifier {string} The identifier in the form of a letter, followed by an optional "#",
     * "##", "b" or "bb" followed by the octave number. For exemple: C5, G4, D#-1, F0, Gb7, Eb-1,
     * Abb4, B##6, etc.
     *
     * @param {number} [octaveOffset=0] A integer to offset the octave by.
     *
     * @returns {number} The MIDI note number (an integer between 0 and 127).
     *
     * @throws RangeError Invalid 'octaveOffset' value
     *
     * @throws TypeError Invalid note identifier
     *
     * @license Apache-2.0
     * @since 3.0.0
     * @static
     */
    static toNoteNumber(identifier, octaveOffset = 0) {

      // Validation
      octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);
      if (isNaN(octaveOffset)) throw new RangeError("Invalid 'octaveOffset' value");
      if (typeof identifier !== "string") identifier = "";

      const fragments = this.getNoteDetails(identifier);
      if (!fragments) throw new TypeError("Invalid note identifier");

      const notes = { C: 0, D: 2, E: 4, F: 5, G: 7, A: 9, B: 11 };
      let result = (fragments.octave + 1 + octaveOffset) * 12;
      result += notes[fragments.name];

      if (fragments.accidental) {
        if (fragments.accidental.startsWith("b")) {
          result -= fragments.accidental.length;
        } else {
          result += fragments.accidental.length;
        }
      }

      if (result < 0 || result > 127) throw new RangeError("Invalid octaveOffset value");

      return result;

    }

    /**
     * Given a proper note identifier (`C#4`, `Gb-1`, etc.) or a valid MIDI note number (0-127), this
     * method returns an object containing broken down details about the specified note (uppercase
     * letter, accidental and octave).
     *
     * When a number is specified, the translation to note is done using a value of 60 for middle C
     * (C4 = middle C).
     *
     * @param value {string|number} A note identifier A  atring ("C#4", "Gb-1", etc.) or a MIDI note
     * number (0-127).
     *
     * @returns {{accidental: string, identifier: string, name: string, octave: number }}
     *
     * @throws TypeError Invalid note identifier
     *
     * @since 3.0.0
     * @static
     */
    static getNoteDetails(value) {

      if (Number.isInteger(value)) value = this.toNoteIdentifier(value);

      const matches = value.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\d+)$/i);
      if (!matches) throw new TypeError("Invalid note identifier");

      const name = matches[1].toUpperCase();
      const octave = parseInt(matches[3]);
      let accidental = matches[2].toLowerCase();
      accidental = accidental === "" ? undefined : accidental;

      const fragments = {
        accidental: accidental,
        identifier: name + (accidental || "") + octave,
        name: name,
        octave: octave
      };

      return fragments;

    }

    /**
     * Returns a sanitized array of valid MIDI channel numbers (1-16). The parameter should be a
     * single integer or an array of integers.
     *
     * For backwards-compatibility, passing `undefined` as a parameter to this method results in all
     * channels being returned (1-16). Otherwise, parameters that cannot successfully be parsed to
     * integers between 1 and 16 are silently ignored.
     *
     * @param [channel] {number|number[]} An integer or an array of integers to parse as channel
     * numbers.
     *
     * @returns {number[]} An array of 0 or more valid MIDI channel numbers.
     *
     * @since 3.0.0
     * @static
     */
    static sanitizeChannels(channel) {

      let channels;

      if (wm$1.validation) {

        if (channel === "all") { // backwards-compatibility
          channels = ["all"];
        } else if (channel === "none") { // backwards-compatibility
          return [];
        }

      }

      if (!Array.isArray(channel)) {
        channels = [channel];
      } else {
        channels = channel;
      }

      // In order to preserve backwards-compatibility, we let this assignment as it is.
      if (channels.indexOf("all") > -1) {
        channels = Enumerations.MIDI_CHANNEL_NUMBERS;
      }

      return channels
        .map(function(ch) {
          return parseInt(ch);
        })
        .filter(function(ch) {
          return (ch >= 1 && ch <= 16);
        });

    }

    /**
     * Returns a valid timestamp, relative to the navigation start of the document, derived from the
     * `time` parameter. If the parameter is a string starting with the "+" sign and followed by a
     * number, the resulting timestamp will be the sum of the current timestamp plus that number. If
     * the parameter is a positive number, it will be returned as is. Otherwise, false will be
     * returned.
     *
     * @param [time] {number|string} The time string (e.g. `"+2000"`) or number to parse
     * @return {number|false} A positive number or `false` (if the time cannot be converted)
     *
     * @since 3.0.0
     * @static
     */
    static toTimestamp(time) {

      let value = false;

      const parsed = parseFloat(time);
      if (isNaN(parsed)) return false;

      if (typeof time === "string" && time.substring(0, 1) === "+") {
        if (parsed >= 0) value = wm$1.time + parsed;
      } else {
        if (parsed >= 0) value = parsed;
      }

      return value;

    }

    /**
     * Returns a valid MIDI note number (0-127) given the specified input. The input usually is a
     * string containing a note identifier (`"C3"`, `"F#4"`, `"D-2"`, `"G8"`, etc.). If an integer
     * between 0 and 127 is passed, it will simply be returned as is (for convenience). Other strings
     * will be parsed for integer value, if possible.
     *
     * If the input is an identifier, the resulting note number is offset by the `octaveOffset`
     * parameter. For example, if you pass in "C4" (note number 60) and the `octaveOffset` value is
     * -2, the resulting MIDI note number will be 36.
     *
     * @param input {string|number} A string or number to extract the MIDI note number from.
     * @param octaveOffset {number} An integer to offset the octave by
     *
     * @returns {number|false} A valid MIDI note number (0-127) or `false` if the input could not
     * successfully be parsed to a note number.
     *
     * @since 3.0.0
     * @static
     */
    static guessNoteNumber(input, octaveOffset) {

      // Validate and, if necessary, assign default
      octaveOffset = parseInt(octaveOffset) || 0;

      let output = false;

      // Check input type
      if (Number.isInteger(input) && input >= 0 && input <= 127) {        // uint
        output = parseInt(input);
      } else if (parseInt(input) >= 0 && parseInt(input) <= 127) {        // float or uint as string
        output = parseInt(input);
      } else if (typeof input === "string" || input instanceof String) {  // string
        try {
          output = this.toNoteNumber(input.trim(), octaveOffset);
        } catch (e) {
          return false;
        }
      }

      return output;

    }

    /**
     * Returns an identifier string representing a note name (with optional accidental) followed by an
     * octave number. The octave can be offset by using the `octaveOffset` parameter.
     *
     * @param {number} number The MIDI note number to convert to a note identifier
     * @param {number} octaveOffset An offset to apply to the resulting octave
     *
     * @returns {string}
     *
     * @throws RangeError Invalid note number
     * @throws RangeError Invalid octaveOffset value
     *
     * @since 3.0.0
     * @static
     */
    static toNoteIdentifier(number, octaveOffset) {

      number = parseInt(number);
      if (isNaN(number) || number < 0 || number > 127) throw new RangeError("Invalid note number");

      octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);
      if (isNaN(octaveOffset)) throw new RangeError("Invalid octaveOffset value");

      const notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];
      const octave = Math.floor(number / 12 - 1) + octaveOffset;
      return notes[number % 12] + octave.toString();

    }

    /**
     * Converts the `input` parameter to a valid [`Note`]{@link Note} object. The input usually is an
     * unsigned integer (0-127) or a note identifier (`"C4"`, `"G#5"`, etc.). If the input is a
     * [`Note`]{@link Note} object, it will be returned as is.
     *
     * If the input is a note number or identifier, it is possible to specify options by providing the
     * `options` parameter.
     *
     * @param [input] {number|string|Note}
     *
     * @param {object} [options={}]
     *
     * @param {number} [options.duration=Infinity] The number of milliseconds before the note should
     * be explicitly stopped.
     *
     * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If
     * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both
     * `attack` and `rawAttack` are specified, the latter has precedence.
     *
     * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If
     * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both
     * `release` and `rawRelease` are specified, the latter has precedence.
     *
     * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and
     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both
     * `attack` and `rawAttack` are specified, the latter has precedence.
     *
     * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and
     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both
     * `release` and `rawRelease` are specified, the latter has precedence.
     *
     * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only
     * used when the input value is a note identifier.**
     *
     * @returns {Note}
     *
     * @throws TypeError The input could not be parsed to a note
     *
     * @since version 3.0.0
     * @static
     */
    static buildNote(input, options= {}) {

      options.octaveOffset = parseInt(options.octaveOffset) || 0;

      // If it's already a Note, we're done
      if (input instanceof Note) return input;

      let number = this.guessNoteNumber(input, options.octaveOffset);

      if (number === false) { // We use a comparison b/c the note can be 0 (which equates to false)
        throw new TypeError(`The input could not be parsed as a note (${input})`);
      }

      // If we got here, we have a proper note number. Before creating the new note, we strip out
      // 'octaveOffset' because it has already been factored in when calling guessNoteNumber().
      options.octaveOffset = undefined;
      return new Note(number, options);

    }

    /**
     * Converts an input value, which can be an unsigned integer (0-127), a note identifier, a
     * [`Note`]{@link Note}  object or an array of the previous types, to an array of
     * [`Note`]{@link Note}  objects.
     *
     * [`Note`]{@link Note}  objects are returned as is. For note numbers and identifiers, a
     * [`Note`]{@link Note} object is created with the options specified. An error will be thrown when
     * encountering invalid input.
     *
     * Note: if both the `attack` and `rawAttack` options are specified, the later has priority. The
     * same goes for `release` and `rawRelease`.
     *
     * @param [notes] {number|string|Note|number[]|string[]|Note[]}
     *
     * @param {object} [options={}]
     *
     * @param {number} [options.duration=Infinity] The number of milliseconds before the note should
     * be explicitly stopped.
     *
     * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If
     * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both
     * `attack` and `rawAttack` are specified, the latter has precedence.
     *
     * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If
     * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both
     * `release` and `rawRelease` are specified, the latter has precedence.
     *
     * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and
     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both
     * `attack` and `rawAttack` are specified, the latter has precedence.
     *
     * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and
     * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both
     * `release` and `rawRelease` are specified, the latter has precedence.
     *
     * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only
     * used when the input value is a note identifier.**
     *
     * @returns {Note[]}
     *
     * @throws TypeError An element could not be parsed as a note.
     *
     * @since 3.0.0
     * @static
     */
    static buildNoteArray(notes, options = {}) {

      let result = [];
      if (!Array.isArray(notes)) notes = [notes];

      notes.forEach(note => {
        result.push(this.buildNote(note, options));
      });

      return result;

    }

    /**
     * Returns a number between 0 and 1 representing the ratio of the input value divided by 127 (7
     * bit). The returned value is restricted between 0 and 1 even if the input is greater than 127 or
     * smaller than 0.
     *
     * Passing `Infinity` will return `1` and passing `-Infinity` will return `0`. Otherwise, when the
     * input value cannot be converted to an integer, the method returns 0.
     *
     * @param value {number} A positive integer between 0 and 127 (inclusive)
     * @returns {number} A number between 0 and 1 (inclusive)
     * @static
     */
    static from7bitToFloat(value) {
      if (value === Infinity) value = 127;
      value = parseInt(value) || 0;
      return Math.min(Math.max(value / 127, 0), 1);
    }

    /**
     * Returns an integer between 0 and 127 which is the result of multiplying the input value by
     * 127. The input value should be a number between 0 and 1 (inclusively). The returned value is
     * restricted between 0 and 127 even if the input is greater than 1 or smaller than 0.
     *
     * Passing `Infinity` will return `127` and passing `-Infinity` will return `0`. Otherwise, when
     * the input value cannot be converted to a number, the method returns 0.
     *
     * @param value {number} A positive float between 0 and 1 (inclusive)
     * @returns {number} A number between 0 and 127 (inclusive)
     * @static
     */
    static fromFloatTo7Bit(value) {
      if (value === Infinity) value = 1;
      value = parseFloat(value) || 0;
      return Math.min(Math.max(Math.round(value * 127), 0), 127);
    }

    /**
     * Combines and converts MSB and LSB values (0-127) to a float between 0 and 1. The returned value
     * is within between 0 and 1 even if the result is greater than 1 or smaller than 0.
     *
     * @param msb {number} The most significant byte as a integer between 0 and 127.
     * @param [lsb=0] {number} The least significant byte as a integer between 0 and 127.
     * @returns {number} A float between 0 and 1.
     */
    static fromMsbLsbToFloat(msb, lsb = 0) {

      if (wm$1.validation) {
        msb = Math.min(Math.max(parseInt(msb) || 0, 0), 127);
        lsb = Math.min(Math.max(parseInt(lsb) || 0, 0), 127);
      }

      const value = ((msb << 7) + lsb) / 16383;
      return Math.min(Math.max(value, 0), 1);

    }

    /**
     * Extracts 7bit MSB and LSB values from the supplied float.
     *
     * @param value {number} A float between 0 and 1
     * @returns {{lsb: number, msb: number}}
     */
    static fromFloatToMsbLsb(value) {

      if (wm$1.validation) {
        value = Math.min(Math.max(parseFloat(value) || 0, 0), 1);
      }

      const multiplied = Math.round(value * 16383);

      return {
        msb: multiplied >> 7,
        lsb: multiplied & 0x7F
      };

    }

    /**
     * Returns the supplied MIDI note number offset by the requested octave and semitone values. If
     * the calculated value is less than 0, 0 will be returned. If the calculated value is more than
     * 127, 127 will be returned. If an invalid offset value is supplied, 0 will be used.
     *
     * @param number {number} The MIDI note to offset as an integer between 0 and 127.
     * @param octaveOffset {number} An integer to offset the note by (in octave)
     * @param octaveOffset {number} An integer to offset the note by (in semitones)
     * @returns {number} An integer between 0 and 127
     *
     * @throws {Error} Invalid note number
     * @static
     */
    static offsetNumber(number, octaveOffset = 0, semitoneOffset = 0) {

      if (wm$1.validation) {
        number = parseInt(number);
        if (isNaN(number)) throw new Error("Invalid note number");
        octaveOffset = parseInt(octaveOffset) || 0;
        semitoneOffset = parseInt(semitoneOffset) || 0;
      }

      return Math.min(Math.max(number + (octaveOffset * 12) + semitoneOffset, 0), 127);

    }

    /**
     * Returns the name of the first property of the supplied object whose value is equal to the one
     * supplied. If nothing is found, `undefined` is returned.
     *
     * @param object {object} The object to look for the property in.
     * @param value {*} Any value that can be expected to be found in the object's properties.
     * @returns {string|undefined} The name of the matching property or `undefined` if nothing is
     * found.
     * @static
     */
    static getPropertyByValue(object, value) {
      return Object.keys(object).find(key => object[key] === value);
    }

    /**
     * Returns the name of a control change message matching the specified number (0-127). Some valid
     * control change numbers do not have a specific name or purpose assigned in the MIDI
     * [spec](https://midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2).
     * In these cases, the method returns `controllerXXX` (where XXX is the number).
     *
     * @param {number} number An integer (0-127) representing the control change message
     * @returns {string|undefined} The matching control change name or `undefined` if no match was
     * found.
     *
     * @static
     */
    static getCcNameByNumber(number) {

      if (wm$1.validation) {
        number = parseInt(number);
        if (!(number >= 0 && number <= 127)) return undefined;
      }

      return Enumerations.CONTROL_CHANGE_MESSAGES[number].name;

    }

    /**
     * Returns the number of a control change message matching the specified name.
     *
     * @param {string} name A string representing the control change message
     * @returns {string|undefined} The matching control change number or `undefined` if no match was
     * found.
     *
     * @since 3.1
     * @static
     */
    static getCcNumberByName(name) {
      let message = Enumerations.CONTROL_CHANGE_MESSAGES.find(element => element.name === name);
      if (message) {
        return message.number;
      } else {
        // Legacy (remove in v4)
        return Enumerations.MIDI_CONTROL_CHANGE_MESSAGES[name];
      }
    }

    /**
     * Returns the channel mode name matching the specified number. If no match is found, the function
     * returns `false`.
     *
     * @param {number} number An integer representing the channel mode message (120-127)
     * @returns {string|false} The name of the matching channel mode or `false` if no match could be
     * found.
     *
     * @since 2.0.0
     */
    static getChannelModeByNumber(number) {

      if ( !(number >= 120 && number <= 127) ) return false;

      for (let cm in Enumerations.CHANNEL_MODE_MESSAGES) {

        if (
          Enumerations.CHANNEL_MODE_MESSAGES.hasOwnProperty(cm) &&
          number === Enumerations.CHANNEL_MODE_MESSAGES[cm]
        ) {
          return cm;
        }

      }

      return false;

    }

    /**
     * Indicates whether the execution environment is Node.js (`true`) or not (`false`)
     * @type {boolean}
     */
    static get isNode() {
      return typeof browser$1 !== "undefined" &&
        browser$1.versions != null &&
        browser$1.versions.node != null;
    }

    /**
     * Indicates whether the execution environment is a browser (`true`) or not (`false`)
     * @type {boolean}
     */
    static get isBrowser() {
      return typeof window !== "undefined" && typeof window.document !== "undefined";
    }

  }

  /**
   * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are
   * provided by an [`Output`](Output) port which, itself, is made available by a device. The
   * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated
   * directly.
   *
   * All 16 `OutputChannel` objects can be found inside the parent output's
   * [`channels`]{@link Output#channels} property.
   *
   * @param {Output} output The [`Output`](Output) this channel belongs to.
   * @param {number} number The MIDI channel number (`1` - `16`).
   *
   * @extends EventEmitter
   * @license Apache-2.0
   * @since 3.0.0
   */
  class OutputChannel extends EventEmitter {

    /**
     * Creates an `OutputChannel` object.
     *
     * @param {Output} output The [`Output`](Output) this channel belongs to.
     * @param {number} number The MIDI channel number (`1` - `16`).
     */
    constructor(output, number) {

      super();

      /**
       * @type {Output}
       * @private
       */
      this._output = output;

      /**
       * @type {number}
       * @private
       */
      this._number = number;

      /**
       * @type {number}
       * @private
       */
      this._octaveOffset = 0;

    }

    /**
     * Unlinks the MIDI subsystem, removes all listeners attached to the channel and nulls the channel
     * number. This method is mostly for internal use. It has not been prefixed with an underscore
     * since it is called by other objects such as the `Output` object.
     *
     * @private
     */
    destroy() {
      this._output = null;
      this._number = null;
      this._octaveOffset = 0;
      this.removeListener();
    }

    /**
     * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be
     * sent immediately. The message should be an array of 8-bit unsigned integers (`0` - `225`),
     * a
     * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}
     * object or a [`Message`](Message) object.
     *
     * It is usually not necessary to use this method directly as you can use one of the simpler
     * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),
     * [`sendControlChange()`](#sendControlChange), etc.
     *
     * Details on the format of MIDI messages are available in the summary of
     * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}
     * from the MIDI Manufacturers Association.
     *
     * @param message {number[]|Uint8Array|Message} A `Message` object, an array of 8-bit unsigned
     * integers or a `Uint8Array` object (not available in Node.js) containing the message bytes.
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.
     *
     * @throws {RangeError} Data bytes must be integers between 0 and 255.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    send(message, options = {time: 0}) {
      this.output.send(message, options);
      return this;
    }

    /**
     * Sends a MIDI **key aftertouch** message at the scheduled time. This is a key-specific
     * aftertouch. For a channel-wide aftertouch message, use
     * [`sendChannelAftertouch()`]{@link #sendChannelAftertouch}.
     *
     * @param target {number|Note|string|number[]|Note[]|string[]} The note(s) for which you are sending
     * an aftertouch value. The notes can be specified by using a MIDI note number (`0` - `127`), a
     * [`Note`](Note) object, a note identifier (e.g. `C3`, `G#4`, `F-1`, `Db7`) or an array of the
     * previous types. When using a note identifier, octave range must be between `-1` and `9`. The
     * lowest note is `C-1` (MIDI note number `0`) and the highest note is `G9` (MIDI note number
     * `127`).
     *
     * When using a note identifier, the octave value will be offset by the local
     * [`octaveOffset`](#octaveOffset) and by
     * [`Output.octaveOffset`](Output#octaveOffset) and [`WebMidi.octaveOffset`](WebMidi#octaveOffset)
     * (if those values are not `0`). When using a key number, `octaveOffset` values are ignored.
     *
     * @param [pressure=0.5] {number} The pressure level (between `0` and `1`). An invalid pressure
     * value will silently trigger the default behaviour. If the `rawValue` option is set to `true`,
     * the pressure is defined by using an integer between `0` and `127`.
     *
     * @param {object} [options={}]
     *
     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be
     * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @return {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     *
     * @throws RangeError Invalid key aftertouch value.
     */
    sendKeyAftertouch(target, pressure, options = {}) {

      if (wm$1.validation) {

        // Legacy support
        if (options.useRawValue) options.rawValue = options.useRawValue;

        if (isNaN(parseFloat(pressure))) {
          throw new RangeError("Invalid key aftertouch value.");
        }
        if (options.rawValue) {
          if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {
            throw new RangeError("Key aftertouch raw value must be an integer between 0 and 127.");
          }
        } else {
          if (!(pressure >= 0 && pressure <= 1)) {
            throw new RangeError("Key aftertouch value must be a float between 0 and 1.");
          }
        }

      }

      // Normalize pressure to integer
      if (!options.rawValue) pressure = Utilities.fromFloatTo7Bit(pressure);

      // Plot total offset
      const offset = wm$1.octaveOffset + this.output.octaveOffset + this.octaveOffset;

      // Make sure we are dealing with an array
      if (!Array.isArray(target)) target = [target];

      Utilities.buildNoteArray(target).forEach(n => {
        this.send(
          [
            (Enumerations.CHANNEL_MESSAGES.keyaftertouch << 4) + (this.number - 1),
            n.getOffsetNumber(offset),
            pressure
          ],
          {time: Utilities.toTimestamp(options.time)}
        );
      });

      return this;

    }

    /**
     * Sends a MIDI **control change** message to the channel at the scheduled time. The control
     * change message to send can be specified numerically (`0` to `127`) or by using one of the
     * following common names:
     *
     * | Number | Name                          |
     * |--------|-------------------------------|
     * | 0      |`bankselectcoarse`             |
     * | 1      |`modulationwheelcoarse`        |
     * | 2      |`breathcontrollercoarse`       |
     * | 4      |`footcontrollercoarse`         |
     * | 5      |`portamentotimecoarse`         |
     * | 6      |`dataentrycoarse`              |
     * | 7      |`volumecoarse`                 |
     * | 8      |`balancecoarse`                |
     * | 10     |`pancoarse`                    |
     * | 11     |`expressioncoarse`             |
     * | 12     |`effectcontrol1coarse`         |
     * | 13     |`effectcontrol2coarse`         |
     * | 18     |`generalpurposeslider3`        |
     * | 19     |`generalpurposeslider4`        |
     * | 32     |`bankselectfine`               |
     * | 33     |`modulationwheelfine`          |
     * | 34     |`breathcontrollerfine`         |
     * | 36     |`footcontrollerfine`           |
     * | 37     |`portamentotimefine`           |
     * | 38     |`dataentryfine`                |
     * | 39     |`volumefine`                   |
     * | 40     |`balancefine`                  |
     * | 42     |`panfine`                      |
     * | 43     |`expressionfine`               |
     * | 44     |`effectcontrol1fine`           |
     * | 45     |`effectcontrol2fine`           |
     * | 64     |`holdpedal`                    |
     * | 65     |`portamento`                   |
     * | 66     |`sustenutopedal`               |
     * | 67     |`softpedal`                    |
     * | 68     |`legatopedal`                  |
     * | 69     |`hold2pedal`                   |
     * | 70     |`soundvariation`               |
     * | 71     |`resonance`                    |
     * | 72     |`soundreleasetime`             |
     * | 73     |`soundattacktime`              |
     * | 74     |`brightness`                   |
     * | 75     |`soundcontrol6`                |
     * | 76     |`soundcontrol7`                |
     * | 77     |`soundcontrol8`                |
     * | 78     |`soundcontrol9`                |
     * | 79     |`soundcontrol10`               |
     * | 80     |`generalpurposebutton1`        |
     * | 81     |`generalpurposebutton2`        |
     * | 82     |`generalpurposebutton3`        |
     * | 83     |`generalpurposebutton4`        |
     * | 91     |`reverblevel`                  |
     * | 92     |`tremololevel`                 |
     * | 93     |`choruslevel`                  |
     * | 94     |`celestelevel`                 |
     * | 95     |`phaserlevel`                  |
     * | 96     |`dataincrement`                |
     * | 97     |`datadecrement`                |
     * | 98     |`nonregisteredparametercoarse` |
     * | 99     |`nonregisteredparameterfine`   |
     * | 100    |`registeredparametercoarse`    |
     * | 101    |`registeredparameterfine`      |
     * | 120    |`allsoundoff`                  |
     * | 121    |`resetallcontrollers`          |
     * | 122    |`localcontrol`                 |
     * | 123    |`allnotesoff`                  |
     * | 124    |`omnimodeoff`                  |
     * | 125    |`omnimodeon`                   |
     * | 126    |`monomodeon`                   |
     * | 127    |`polymodeon`                   |
     *
     * As you can see above, not all control change message have a matching name. This does not mean
     * you cannot use the others. It simply means you will need to use their number
     * (`0` to `127`) instead of their name. While you can still use them, numbers `120` to `127` are
     * usually reserved for *channel mode* messages. See
     * [`sendChannelMode()`]{@link OutputChannel#sendChannelMode} method for more info.
     *
     * To view a detailed list of all available **control change** messages, please consult "Table 3 -
     * Control Change Messages" from the [MIDI Messages](
     * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)
     * specification.
     *
     * **Note**: messages #0-31 (MSB) are paired with messages #32-63 (LSB). For example, message #1
     * (`modulationwheelcoarse`) can be accompanied by a second control change message for
     * `modulationwheelfine` to achieve a greater level of precision. if you want to specify both MSB
     * and LSB for messages between `0` and `31`, you can do so by passing a 2-value array as the
     * second parameter.
     *
     * @param {number|string} controller The MIDI controller name or number (`0` - `127`).
     *
     * @param {number|number[]} value The value to send (0-127). You can also use a two-position array
     * for controllers 0 to 31. In this scenario, the first value will be sent as usual and the second
     * value will be sent to the matching LSB controller (which is obtained by adding 32 to the first
     * controller)
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {RangeError} Controller numbers must be between 0 and 127.
     * @throws {RangeError} Invalid controller name.
     * @throws {TypeError} The value array must have a length of 2.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     *
     * @license Apache-2.0
     * @since 3.0.0
     */
    sendControlChange(controller, value, options = {}) {

      if (typeof controller === "string") {
        controller = Utilities.getCcNumberByName(controller);
      }

      if (!Array.isArray(value)) value = [value];

      if (wm$1.validation) {

        if (controller === undefined) {
          throw new TypeError(
            "Control change must be identified with a valid name or an integer between 0 and 127."
          );
        }

        if (!Number.isInteger(controller) || !(controller >= 0 && controller <= 127)) {
          throw new TypeError("Control change number must be an integer between 0 and 127.");
        }

        value = value.map(item => {
          const output = Math.min(Math.max(parseInt(item), 0), 127);
          if (isNaN(output)) throw new TypeError("Values must be integers between 0 and 127");
          return output;
        });

        if (value.length === 2 && controller >= 32) {
          throw new TypeError("To use a value array, the controller must be between 0 and 31");
        }

      }

      value.forEach((item, index) => {

        this.send(
          [
            (Enumerations.CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1),
            controller + (index * 32),
            value[index]
          ],
          {time: Utilities.toTimestamp(options.time)}
        );

      });

      return this;

    }

    /**
     * Selects a MIDI non-registered parameter so it is affected by upcoming data entry, data
     * increment and data decrement messages.
     *
     * @param parameter {number[]} A two-position array specifying the two control bytes that identify
     * the registered parameter. The NRPN MSB (99 or 0x63) is a position 0. The NRPN LSB (98 or 0x62)
     * is at position 1.
     *
     * @private
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time] If `time` is a string prefixed with `"+"` and followed by
     * a number, the message will be delayed by that many milliseconds. If the value is a number, the
     * operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    _selectNonRegisteredParameter(parameter, options = {}) {

      // parameter[0] = Math.floor(parameter[0]);
      // if (!(parameter[0] >= 0 && parameter[0] <= 127)) {
      //   throw new RangeError("The control63 value must be between 0 and 127.");
      // }
      //
      // parameter[1] = Math.floor(parameter[1]);
      // if (!(parameter[1] >= 0 && parameter[1] <= 127)) {
      //   throw new RangeError("The control62 value must be between 0 and 127.");
      // }

      this.sendControlChange(0x63, parameter[0], options);
      this.sendControlChange(0x62, parameter[1], options);

      return this;

    }

    /**
     * Deselects the currently active MIDI registered parameter so it is no longer affected by data
     * entry, data increment and data decrement messages.
     *
     * Current best practice recommends doing that after each call to
     * [_setCurrentParameter()]{@link #_setCurrentParameter}.
     *
     * @private
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time] If `time` is a string prefixed with `"+"` and followed by
     * a number, the message will be delayed by that many milliseconds. If the value is a number, the
     * operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    _deselectRegisteredParameter(options = {}) {
      this.sendControlChange(0x65, 0x7F, options);
      this.sendControlChange(0x64, 0x7F, options);
      return this;
    }

    /**
     * Deselects the currently active MIDI non-registered parameter so it is no longer affected by
     * data entry, data increment and data decrement messages.
     *
     * @private
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time] If `time` is a string prefixed with `"+"` and followed by
     * a number, the message will be delayed by that many milliseconds. If the value is a number, the
     * operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    _deselectNonRegisteredParameter(options = {}) {
      this.sendControlChange(0x65, 0x7F, options);
      this.sendControlChange(0x64, 0x7F, options);
      return this;
    }

    /**
     * Selects a MIDI registered parameter so it is affected by upcoming data entry, data increment
     * and data decrement messages.
     *
     * @private
     *
     * @param parameter {number[]} A two-position array of integers specifying the two control bytes
     * (0x65, 0x64) that identify the registered parameter. The integers must be between 0 and 127.
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time] If `time` is a string prefixed with `"+"` and followed by
     * a number, the message will be delayed by that many milliseconds. If the value is a number, the
     * operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    _selectRegisteredParameter(parameter, options = {}) {
      this.sendControlChange(0x65, parameter[0], options);
      this.sendControlChange(0x64, parameter[1], options);
      return this;
    }

    /**
     * Sets the value of the currently selected MIDI registered parameter.
     *
     * @private
     *
     * @param data {number|number[]}
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time] If `time` is a string prefixed with `"+"` and followed by
     * a number, the message will be delayed by that many milliseconds. If the value is a number, the
     * operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    _setCurrentParameter(data, options = {}) {

      data = [].concat(data);

      // MSB
      // data[0] = parseInt(data[0]);
      // if (!isNaN(data[0]) && data[0] >= 0 && data[0] <= 127) {
      this.sendControlChange(0x06, data[0], options);
      // } else {
      //   throw new RangeError("The msb value must be between 0 and 127.");
      // }

      if (data.length < 2) return this;

      // LSB
      // data[1] = parseInt(data[1]);

      // if (!isNaN(data[1]) && data[1] >= 0 && data[1] <= 127) {
      this.sendControlChange(0x26, data[1], options);
      // } else {
      //   throw new RangeError("The lsb value must be between 0 and 127.");
      // }

      return this;

    }

    /**
     * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter
     * names that can be used with this function:
     *
     *  * Pitchbend Range (0x00, 0x00): `"pitchbendrange"`
     *  * Channel Fine Tuning (0x00, 0x01): `"channelfinetuning"`
     *  * Channel Coarse Tuning (0x00, 0x02): `"channelcoarsetuning"`
     *  * Tuning Program (0x00, 0x03): `"tuningprogram"`
     *  * Tuning Bank (0x00, 0x04): `"tuningbank"`
     *  * Modulation Range (0x00, 0x05): `"modulationrange"`
     *  * Azimuth Angle (0x3D, 0x00): `"azimuthangle"`
     *  * Elevation Angle (0x3D, 0x01): `"elevationangle"`
     *  * Gain (0x3D, 0x02): `"gain"`
     *  * Distance Ratio (0x3D, 0x03): `"distanceratio"`
     *  * Maximum Distance (0x3D, 0x04): `"maximumdistance"`
     *  * Maximum Distance Gain (0x3D, 0x05): `"maximumdistancegain"`
     *  * Reference Distance Ratio (0x3D, 0x06): `"referencedistanceratio"`
     *  * Pan Spread Angle (0x3D, 0x07): `"panspreadangle"`
     *  * Roll Angle (0x3D, 0x08): `"rollangle"`
     *
     * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a
     * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered
     * parameter.
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws TypeError The specified registered parameter is invalid.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendRpnDecrement(parameter, options = {}) {

      if (!Array.isArray(parameter)) parameter = Enumerations.REGISTERED_PARAMETERS[parameter];

      if (wm$1.validation) {

        if (parameter === undefined) {
          throw new TypeError("The specified registered parameter is invalid.");
        }

        let valid = false;

        Object.getOwnPropertyNames(Enumerations.REGISTERED_PARAMETERS).forEach(p => {
          if (
            Enumerations.REGISTERED_PARAMETERS[p][0] === parameter[0] &&
            Enumerations.REGISTERED_PARAMETERS[p][1] === parameter[1]
          ) {
            valid = true;
          }
        });

        if (!valid) throw new TypeError("The specified registered parameter is invalid.");

      }

      this._selectRegisteredParameter(parameter, options);
      this.sendControlChange(0x61, 0, options);
      this._deselectRegisteredParameter(options);

      return this;

    }

    /**
     * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter
     * names that can be used with this function:
     *
     *  * Pitchbend Range (0x00, 0x00): `"pitchbendrange"`
     *  * Channel Fine Tuning (0x00, 0x01): `"channelfinetuning"`
     *  * Channel Coarse Tuning (0x00, 0x02): `"channelcoarsetuning"`
     *  * Tuning Program (0x00, 0x03): `"tuningprogram"`
     *  * Tuning Bank (0x00, 0x04): `"tuningbank"`
     *  * Modulation Range (0x00, 0x05): `"modulationrange"`
     *  * Azimuth Angle (0x3D, 0x00): `"azimuthangle"`
     *  * Elevation Angle (0x3D, 0x01): `"elevationangle"`
     *  * Gain (0x3D, 0x02): `"gain"`
     *  * Distance Ratio (0x3D, 0x03): `"distanceratio"`
     *  * Maximum Distance (0x3D, 0x04): `"maximumdistance"`
     *  * Maximum Distance Gain (0x3D, 0x05): `"maximumdistancegain"`
     *  * Reference Distance Ratio (0x3D, 0x06): `"referencedistanceratio"`
     *  * Pan Spread Angle (0x3D, 0x07): `"panspreadangle"`
     *  * Roll Angle (0x3D, 0x08): `"rollangle"`
     *
     * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a
     * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered
     * parameter.
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws TypeError The specified registered parameter is invalid.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendRpnIncrement(parameter, options = {}) {

      if (!Array.isArray(parameter)) parameter = Enumerations.REGISTERED_PARAMETERS[parameter];

      if (wm$1.validation) {

        if (parameter === undefined) {
          throw new TypeError("The specified registered parameter is invalid.");
        }

        let valid = false;

        Object.getOwnPropertyNames(Enumerations.REGISTERED_PARAMETERS).forEach(p => {
          if (
            Enumerations.REGISTERED_PARAMETERS[p][0] === parameter[0] &&
            Enumerations.REGISTERED_PARAMETERS[p][1] === parameter[1]
          ) {
            valid = true;
          }
        });

        if (!valid) throw new TypeError("The specified registered parameter is invalid.");

      }

      this._selectRegisteredParameter(parameter, options);
      this.sendControlChange(0x60, 0, options);
      this._deselectRegisteredParameter(options);

      return this;

    }

    /**
     * Plays a note or an array of notes on the channel. The first parameter is the note to play. It
     * can be a single value or an array of the following valid values:
     *
     *  - A [`Note`]{@link Note} object
     *  - A MIDI note number (integer between `0` and `127`)
     *  - A note name, followed by the octave (e.g. `"C3"`, `"G#4"`, `"F-1"`, `"Db7"`)
     *
     * The `playNote()` method sends a **note on** MIDI message for all specified notes. If a
     * `duration` is set in the `options` parameter or in the [`Note`]{@link Note} object's
     * [`duration`]{@link Note#duration} property, it will also schedule a **note off** message
     * to end the note after said duration. If no `duration` is set, the note will simply play until
     * a matching **note off** message is sent with [`stopNote()`]{@link OutputChannel#stopNote} or
     * [`sendNoteOff()`]{@link OutputChannel#sendNoteOff}.
     *
     *  The execution of the **note on** command can be delayed by using the `time` property of the
     * `options` parameter.
     *
     * When using [`Note`]{@link Note} objects, the durations and velocities defined in the
     * [`Note`]{@link Note} objects have precedence over the ones specified via the method's `options`
     * parameter.
     *
     * **Note**: per the MIDI standard, a **note on** message with an attack velocity of `0` is
     * functionally equivalent to a **note off** message.
     *
     * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be
     * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`,
     * `F-1`, `Db7`), a [`Note`]{@link Note} object or an array of the previous types. When using a
     * note identifier, the octave range must be between `-1` and `9`. The lowest note is `C-1` (MIDI
     * note number `0`) and the highest note is `G9` (MIDI note number `127`).
     *
     * @param {object} [options={}]
     *
     * @param {number} [options.duration] A positive decimal number larger than `0` representing the
     * number of milliseconds to wait before sending a **note off** message. If invalid or left
     * undefined, only a **note on** message will be sent.
     *
     * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and
     * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity
     * value will silently trigger the default of `0.5`.
     *
     * @param {number} [options.rawAttack=64] The attack velocity at which to play the note (between
     * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will
     * silently trigger the default of 64.
     *
     * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`
     * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid
     * velocity value will silently trigger the default of `0.5`. This is only used with the
     * **note off** event triggered when `options.duration` is set.
     *
     * @param {number} [options.rawRelease=64] The velocity at which to release the note (between `0`
     * and `127`). This has priority over the `release` property. An invalid velocity value will
     * silently trigger the default of 64. This is only used with the **note off** event triggered
     * when `options.duration` is set.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    playNote(note, options = {}) {

      // Send note on and, optionally, note off message (if duration is a positive number)
      this.sendNoteOn(note, options);

      const notes = Array.isArray(note) ? note : [note];

      for(let note of notes) {
        if (parseInt(note.duration) > 0) {
          const noteOffOptions = {
            time: (Utilities.toTimestamp(options.time) || wm$1.time) + parseInt(note.duration),
            release: note.release,
            rawRelease: note.rawRelease
          };
          this.sendNoteOff(note, noteOffOptions);
        } else if (parseInt(options.duration) > 0) {
          const noteOffOptions = {
            time: (Utilities.toTimestamp(options.time) || wm$1.time) + parseInt(options.duration),
            release: options.release,
            rawRelease: options.rawRelease
          };
          this.sendNoteOff(note, noteOffOptions);
        }
      }

      return this;

    }

    /**
     * Sends a **note off** message for the specified notes on the channel. The first parameter is the
     * note. It can be a single value or an array of the following valid values:
     *
     *  - A MIDI note number (integer between `0` and `127`)
     *  - A note name, followed by the octave (e.g. `"C3"`, `"G#4"`, `"F-1"`, `"Db7"`)
     *  - A [`Note`]{@link Note} object
     *
     * The execution of the **note off** command can be delayed by using the `time` property of the
     * `options` parameter.
     *
     * When using [`Note`]{@link Note} objects, the release velocity defined in the
     * [`Note`]{@link Note} objects has precedence over the one specified via the method's `options`
     * parameter.
     *
     * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to stop. The notes can be
     * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a
     * [`Note`]{@link Note} object or an array of the previous types. When using a note name, octave
     * range must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest
     * note is G9 (MIDI note number 127).
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @param {number} [options.release=0.5] The velocity at which to release the note
     * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have
     * priority. An invalid velocity value will silently trigger the default of `0.5`.
     *
     * @param {number} [options.rawRelease=64] The velocity at which to release the note
     * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have
     * priority. An invalid velocity value will silently trigger the default of `64`.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendNoteOff(note, options = {}) {

      if (wm$1.validation) {

        if (
          options.rawRelease != undefined &&
          !(options.rawRelease >= 0 && options.rawRelease <= 127)
        ) {
          throw new RangeError("The 'rawRelease' option must be an integer between 0 and 127");
        }

        if (options.release != undefined && !(options.release >= 0 && options.release <= 1)) {
          throw new RangeError("The 'release' option must be an number between 0 and 1");
        }

        // Legacy compatibility warnings
        if (options.rawVelocity) {
          options.rawRelease = options.velocity;
          console.warn("The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.");
        }
        if (options.velocity) {
          options.release = options.velocity;
          console.warn("The 'velocity' option is deprecated. Use 'attack' instead.");
        }

      }

      let nVelocity = 64;

      if (options.rawRelease != undefined) {
        nVelocity = options.rawRelease;
      } else {
        if (!isNaN(options.release)) nVelocity = Math.round(options.release * 127);
      }

      // Plot total octave offset
      const offset = wm$1.octaveOffset + this.output.octaveOffset + this.octaveOffset;

      Utilities.buildNoteArray(note, {rawRelease: parseInt(nVelocity)}).forEach(n => {
        this.send(
          [
            (Enumerations.CHANNEL_MESSAGES.noteoff << 4) + (this.number - 1),
            n.getOffsetNumber(offset),
            n.rawRelease,
          ],
          {time: Utilities.toTimestamp(options.time)}
        );
      });

      return this;

    }

    /**
     * Sends a **note off** message for the specified MIDI note number. The first parameter is the
     * note to stop. It can be a single value or an array of the following valid values:
     *
     *  - A MIDI note number (integer between `0` and `127`)
     *  - A note identifier (e.g. `"C3"`, `"G#4"`, `"F-1"`, `"Db7"`)
     *  - A [`Note`](Note) object
     *
     * The execution of the **note off** command can be delayed by using the `time` property of the
     * `options` parameter.
     *
     * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be
     * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,
     * `Db7`) or an array of the previous types. When using a note identifier, octave range must be
     * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is
     * `G9` (MIDI note number `127`).
     *
     * @param {Object} [options={}]
     *
     * @param {number} [options.release=0.5] The velocity at which to release the note
     * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have
     * priority. An invalid velocity value will silently trigger the default of `0.5`.
     *
     * @param {number} [options.rawRelease=64] The velocity at which to release the note
     * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have
     * priority. An invalid velocity value will silently trigger the default of `64`.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    stopNote(note, options = {}) {
      return this.sendNoteOff(note, options);
    }

    /**
     * Sends a **note on** message for the specified note(s) on the channel. The first parameter is
     * the note. It can be a single value or an array of the following valid values:
     *
     *  - A [`Note`]{@link Note} object
     *  - A MIDI note number (integer between `0` and `127`)
     *  - A note identifier (e.g. `"C3"`, `"G#4"`, `"F-1"`, `"Db7"`)
     *
     *  When passing a [`Note`]{@link Note}object or a note name, the `octaveOffset` will be applied.
     *  This is not the case when using a note number. In this case, we assume you know exactly which
     *  MIDI note number should be sent out.
     *
     * The execution of the **note on** command can be delayed by using the `time` property of the
     * `options` parameter.
     *
     * When using [`Note`]{@link Note} objects, the attack velocity defined in the
     * [`Note`]{@link Note} objects has precedence over the one specified via the method's `options`
     * parameter. Also, the `duration` is ignored. If you want to also send a **note off** message,
     * use the [`playNote()`]{@link #playNote} method instead.
     *
     * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is
     * functionally equivalent to a **note off** message.
     *
     * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be
     * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a
     * [`Note`]{@link Note} object or an array of the previous types.
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and
     * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid
     * velocity value will silently trigger the default of `0.5`.
     *
     * @param {number} [options.rawAttack=64] The velocity at which to release the note (between `0`
     * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid
     * velocity value will silently trigger the default of `64`.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendNoteOn(note, options = {}) {

      if (wm$1.validation) {

        if (options.rawAttack != undefined && !(options.rawAttack >= 0 && options.rawAttack <= 127)) {
          throw new RangeError("The 'rawAttack' option must be an integer between 0 and 127");
        }

        if (options.attack != undefined && !(options.attack >= 0 && options.attack <= 1)) {
          throw new RangeError("The 'attack' option must be an number between 0 and 1");
        }

        // Legacy compatibility warnings
        if (options.rawVelocity) {
          options.rawAttack = options.velocity;
          options.rawRelease = options.release;
          console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.");
        }
        if (options.velocity) {
          options.attack = options.velocity;
          console.warn("The 'velocity' option is deprecated. Use 'attack' instead.");
        }

      }

      let nVelocity = 64;

      if (options.rawAttack != undefined) {
        nVelocity = options.rawAttack;
      } else {
        if (!isNaN(options.attack)) nVelocity = Math.round(options.attack * 127);
      }

      // Plot total octave offset
      const offset = wm$1.octaveOffset + this.output.octaveOffset + this.octaveOffset;

      Utilities.buildNoteArray(note, {rawAttack: nVelocity}).forEach(n => {
        this.send(
          [
            (Enumerations.CHANNEL_MESSAGES.noteon << 4) + (this.number - 1),
            n.getOffsetNumber(offset),
            n.rawAttack
          ],
          {time: Utilities.toTimestamp(options.time)}
        );
      });

      return this;

    }

    /**
     * Sends a MIDI **channel mode** message. The channel mode message to send can be specified
     * numerically or by using one of the following common names:
     *
     * |  Type                |Number| Shortcut Method                                               |
     * | ---------------------|------|-------------------------------------------------------------- |
     * | `allsoundoff`        | 120  | [`sendAllSoundOff()`]{@link #sendAllSoundOff}                 |
     * | `resetallcontrollers`| 121  | [`sendResetAllControllers()`]{@link #sendResetAllControllers} |
     * | `localcontrol`       | 122  | [`sendLocalControl()`]{@link #sendLocalControl}               |
     * | `allnotesoff`        | 123  | [`sendAllNotesOff()`]{@link #sendAllNotesOff}                 |
     * | `omnimodeoff`        | 124  | [`sendOmniMode(false)`]{@link #sendOmniMode}                  |
     * | `omnimodeon`         | 125  | [`sendOmniMode(true)`]{@link #sendOmniMode}                   |
     * | `monomodeon`         | 126  | [`sendPolyphonicMode("mono")`]{@link #sendPolyphonicMode}     |
     * | `polymodeon`         | 127  | [`sendPolyphonicMode("poly")`]{@link #sendPolyphonicMode}     |
     *
     * **Note**: as you can see above, to make it easier, all channel mode messages also have a matching
     * helper method.
     *
     * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may
     * require a value that's not zero. For that reason, the `value` parameter is optional and
     * defaults to 0.
     *
     * @param {number|string} command The numerical identifier of the channel mode message (integer
     * between `120` and `127`) or its name as a string.
     *
     * @param {number} [value=0] The value to send (integer between `0` - `127`).
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendChannelMode(command, value = 0, options = {}) {

      // Normalize command to integer
      if (typeof command === "string") command = Enumerations.CHANNEL_MODE_MESSAGES[command];

      if (wm$1.validation) {

        if (command === undefined) {
          throw new TypeError("Invalid channel mode message name or number.");
        }

        if (isNaN(command) || !(command >= 120 && command <= 127)) {
          throw new TypeError("Invalid channel mode message number.");
        }

        if (isNaN(parseInt(value)) || value < 0 || value > 127) {
          throw new RangeError("Value must be an integer between 0 and 127.");
        }

      }

      this.send(
        [
          (Enumerations.CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1),
          command,
          value
        ],
        {time: Utilities.toTimestamp(options.time)}
      );

      return this;

    }

    /**
     * Sets OMNI mode to `"on"` or `"off"`. MIDI's OMNI mode causes the instrument to respond to
     * messages from all channels.
     *
     * It should be noted that support for OMNI mode is not as common as it used to be.
     *
     * @param [state=true] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {TypeError} Invalid channel mode message name.
     * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.
     * @throws {RangeError} Value must be an integer between 0 and 127.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendOmniMode(state, options = {}) {

      if (state === undefined || state) {
        this.sendChannelMode("omnimodeon", 0, options);
      } else {
        this.sendChannelMode("omnimodeoff", 0, options);
      }

      return this;

    }

    /**
     * Sends a MIDI **channel aftertouch** message. For key-specific aftertouch, you should instead
     * use [`sendKeyAftertouch()`]{@link #sendKeyAftertouch}.
     *
     * @param [pressure] {number} The pressure level (between `0` and `1`). If the `rawValue` option
     * is set to `true`, the pressure can be defined by using an integer between `0` and `127`.
     *
     * @param {object} [options={}]
     *
     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be
     * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     *
     * @throws RangeError Invalid channel aftertouch value.
     */
    sendChannelAftertouch(pressure, options = {}) {

      if (wm$1.validation) {

        if (isNaN(parseFloat(pressure))) {
          throw new RangeError("Invalid channel aftertouch value.");
        }

        if (options.rawValue) {
          if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {
            throw new RangeError(
              "Channel aftertouch raw value must be an integer between 0 and 127.")
            ;
          }
        } else {
          if (!(pressure >= 0 && pressure <= 1)) {
            throw new RangeError("Channel aftertouch value must be a float between 0 and 1.");
          }
        }

      }

      // Normalize pressure to integer
      if (!options.rawValue) pressure = Utilities.fromFloatTo7Bit(pressure);

      this.send(
        [
          (Enumerations.CHANNEL_MESSAGES.channelaftertouch << 4) + (this.number - 1),
          Math.round(pressure)
        ],
        {time: Utilities.toTimestamp(options.time)}
      );

      return this;

    }

    /**
     * Sends a **master tuning** message. The value is decimal and must be larger than -65 semitones
     * and smaller than 64 semitones.
     *
     * Because of the way the MIDI specification works, the decimal portion of the value will be
     * encoded with a resolution of 14bit. The integer portion must be between -64 and 63
     * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and
     * a **Master Fine Tuning** RPN messages.
     *
     * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller
     * than 64.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendMasterTuning(value, options = {}) {

      // @todo allow passing value as msb/lsb pair (the same as pitch bend range)

      value = parseFloat(value) || 0.0;

      if (wm$1.validation) {

        if (!(value > -65 && value < 64)) {
          throw new RangeError(
            "The value must be a decimal number larger than -65 and smaller than 64."
          );
        }

      }

      let coarse = Math.floor(value) + 64;
      let fine = value - Math.floor(value);

      // Calculate MSB and LSB for fine adjustment (14bit resolution)
      fine = Math.round((fine + 1) / 2 * 16383);
      let msb = (fine >> 7) & 0x7F;
      let lsb = fine & 0x7F;

      this.sendRpnValue("channelcoarsetuning", coarse, options);
      this.sendRpnValue("channelfinetuning", [msb, lsb], options);

      return this;

    }

    /**
     * Sends a **modulation depth range** message to adjust the depth of the modulation wheel's range.
     * The range can be specified with the `semitones` parameter, the `cents` parameter or by
     * specifying both parameters at the same time.
     *
     * @param {number} semitones The desired adjustment value in semitones (integer between 0 and
     * 127).
     *
     * @param {number} [cents=0] The desired adjustment value in cents (integer between 0 and 127).
     *
     * @param {Object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendModulationRange(semitones, cents, options = {}) {

      // @todo allow passing value as msb/lsb pair (the same as pitch bend range)
      // when passing a single argument, semitones and cents shoud be combined

      if (wm$1.validation) {

        if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {
          throw new RangeError("The semitones value must be an integer between 0 and 127.");
        }

        if (!(cents == undefined) && (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127))) {
          throw new RangeError("If specified, the cents value must be an integer between 0 and 127.");
        }

      }

      // Default value for cents
      if (!(cents >= 0 && cents <= 127)) cents = 0;

      this.sendRpnValue("modulationrange", [semitones, cents], options);

      return this;

    }

    /**
     * Sets a non-registered parameter (NRPN) to the specified value. The NRPN is selected by passing
     * in a two-position array specifying the values of the two control bytes. The value is specified
     * by passing in a single integer (most cases) or an array of two integers.
     *
     * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way
     * they see fit. For example, according to the Roland GS specification, you can control the
     * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you
     * would use:
     *
     * ```js
     * WebMidi.outputs[0].channels[0].sendNrpnValue([1, 8], 123);
     * ```
     *
     * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you
     * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation
     * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the
     * value to send was 10, you could use:
     *
     * ```js
     * WebMidi.outputs[0].channels[0].sendNrpnValue([2, 63], [0, 10]);
     * ```
     *
     * For further implementation details, refer to the manufacturer's documentation.
     *
     * @param nrpn {number[]} A two-position array specifying the two control bytes (0x63,
     * 0x62) that identify the non-registered parameter.
     *
     * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2
     * specifying the desired data.
     *
     * @param {Object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {RangeError} The control value must be between 0 and 127.
     * @throws {RangeError} The msb value must be between 0 and 127
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendNrpnValue(nrpn, data, options = {}) {

      data = [].concat(data);

      if (wm$1.validation) {

        if (!Array.isArray(nrpn) || !Number.isInteger(nrpn[0]) || !Number.isInteger(nrpn[1])) {
          throw new TypeError("The specified NRPN is invalid.");
        }

        if (!(nrpn[0] >= 0 && nrpn[0] <= 127)) {
          throw new RangeError("The first byte of the NRPN must be between 0 and 127.");
        }

        if (!(nrpn[1] >= 0 && nrpn[1] <= 127)) {
          throw new RangeError("The second byte of the NRPN must be between 0 and 127.");
        }

        data.forEach(value => {
          if (!(value >= 0 && value <= 127)) {
            throw new RangeError("The data bytes of the NRPN must be between 0 and 127.");
          }
        });

      }

      this._selectNonRegisteredParameter(nrpn, options);
      this._setCurrentParameter(data, options);
      this._deselectNonRegisteredParameter(options);

      return this;

    }

    /**
     * Sends a MIDI **pitch bend** message at the scheduled time. The resulting bend is relative to
     * the pitch bend range that has been defined. The range can be set with
     * [`sendPitchBendRange()`]{@link #sendPitchBendRange}. So, for example, if the pitch
     * bend range has been set to 12 semitones, using a bend value of -1 will bend the note 1 octave
     * below its nominal value.
     *
     * @param {number|number[]} [value] The intensity of the bend (between -1.0 and 1.0). A value of
     * zero means no bend. If the `rawValue` option is set to `true`, the intensity of the bend can be
     * defined by either using a single integer between 0 and 127 (MSB) or an array of two integers
     * between 0 and 127 representing, respectively, the MSB (most significant byte) and the LSB
     * (least significant byte). The MSB is expressed in semitones with `64` meaning no bend. A value
     * lower than `64` bends downwards while a value higher than `64` bends upwards. The LSB is
     * expressed in cents (1/100 of a semitone). An LSB of `64` also means no bend.
     *
     * @param {Object} [options={}]
     *
     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be
     * considered as a float between -1.0 and 1.0 (default) or as raw integer between 0 and 127 (or
     * an array of 2 integers if using both MSB and LSB).
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendPitchBend(value, options = {}) {

      // @todo standardize the way msb/lsb are passed in

      if (wm$1.validation) {

        if (options.rawValue && Array.isArray(value)) {

          if (!(value[0] >= 0 && value[0] <= 127)) {
            throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.");
          }
          if (!(value[1] >= 0 && value[1] <= 127)) {
            throw new RangeError("The pitch bend LSB must be an integer between 0 and 127.");
          }

        } else if (options.rawValue && !Array.isArray(value)) {

          if (!(value >= 0 && value <= 127)) {
            throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.");
          }

        } else {

          if (isNaN(value) || value === null) {
            throw new RangeError("Invalid pitch bend value.");
          }

          if (!(value >= -1 && value <= 1)) {
            throw new RangeError("The pitch bend value must be a float between -1 and 1.");
          }

        }

      }

      let msb = 0;
      let lsb = 0;

      // Calculate MSB and LSB for both scenarios
      if (options.rawValue && Array.isArray(value)) {
        msb = value[0];
        lsb = value[1];
      } else if (options.rawValue && !Array.isArray(value)) {
        msb = value;
      } else {
        const result = Utilities.fromFloatToMsbLsb((value + 1) / 2); // b/c value is -1 to 1
        msb = result.msb;
        lsb = result.lsb;
      }

      this.send(
        [
          (Enumerations.CHANNEL_MESSAGES.pitchbend << 4) + (this.number - 1),
          lsb,
          msb
        ],
        {time: Utilities.toTimestamp(options.time)}
      );

      return this;

    }

    /**
     * Sends a **pitch bend range** message at the scheduled time to adjust the range used by the
     * pitch bend lever. The range is specified by using the `semitones` and `cents` parameters. For
     * example, setting the `semitones` parameter to `12` means that the pitch bend range will be 12
     * semitones above and below the nominal pitch.
     *
     * @param semitones {number} The desired adjustment value in semitones (between 0 and 127). While
     * nothing imposes that in the specification, it is very common for manufacturers to limit the
     * range to 2 octaves (-12 semitones to 12 semitones).
     *
     * @param [cents=0] {number} The desired adjustment value in cents (integer between 0-127).
     *
     * @param {Object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {RangeError} The semitones value must be an integer between 0 and 127.
     * @throws {RangeError} The cents value must be an integer between 0 and 127.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendPitchBendRange(semitones, cents, options = {}) {

      // @todo use single value as parameter or pair of msb/lsb

      if (wm$1.validation) {

        if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {
          throw new RangeError("The semitones value must be an integer between 0 and 127.");
        }

        if (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127)) {
          throw new RangeError("The cents value must be an integer between 0 and 127.");
        }

      }

      this.sendRpnValue("pitchbendrange", [semitones, cents], options);
      return this;

    }

    /**
     * Sends a MIDI **program change** message at the scheduled time.
     *
     * @param [program=1] {number} The MIDI patch (program) number (integer between `0` and `127`).
     *
     * @param {Object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater
     * than 0xFF.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     *
     */
    sendProgramChange(program, options = {}) {

      program = parseInt(program) || 0;

      if (wm$1.validation) {

        if (!(program >= 0 && program <= 127)) {
          throw new RangeError("The program number must be between 0 and 127.");
        }

      }

      this.send(
        [
          (Enumerations.CHANNEL_MESSAGES.programchange << 4) + (this.number - 1),
          program
        ],
        {time: Utilities.toTimestamp(options.time)}
      );

      return this;

    }

    /**
     * Sets the specified MIDI registered parameter to the desired value. The value is defined with
     * up to two bytes of data (msb, lsb) that each can go from 0 to 127.
     *
     * MIDI
     * [registered parameters](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)
     * extend the original list of control change messages. The MIDI 1.0 specification lists only a
     * limited number of them:
     *
     * | Numbers      | Function                 |
     * |--------------|--------------------------|
     * | (0x00, 0x00) | `pitchbendrange`         |
     * | (0x00, 0x01) | `channelfinetuning`      |
     * | (0x00, 0x02) | `channelcoarsetuning`    |
     * | (0x00, 0x03) | `tuningprogram`          |
     * | (0x00, 0x04) | `tuningbank`             |
     * | (0x00, 0x05) | `modulationrange`        |
     * | (0x3D, 0x00) | `azimuthangle`           |
     * | (0x3D, 0x01) | `elevationangle`         |
     * | (0x3D, 0x02) | `gain`                   |
     * | (0x3D, 0x03) | `distanceratio`          |
     * | (0x3D, 0x04) | `maximumdistance`        |
     * | (0x3D, 0x05) | `maximumdistancegain`    |
     * | (0x3D, 0x06) | `referencedistanceratio` |
     * | (0x3D, 0x07) | `panspreadangle`         |
     * | (0x3D, 0x08) | `rollangle`              |
     *
     * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning
     * Standard*, which is not widely implemented.
     *
     * @param rpn {string|number[]} A string identifying the parameter's name (see above) or a
     * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the
     * registered parameter.
     *
     * @param [data=[]] {number|number[]} An single integer or an array of integers with a maximum
     * length of 2 specifying the desired data.
     *
     * @param {Object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendRpnValue(rpn, data, options = {}) {

      if (!Array.isArray(rpn)) rpn = Enumerations.REGISTERED_PARAMETERS[rpn];

      if (wm$1.validation) {

        if (!Number.isInteger(rpn[0]) || !Number.isInteger(rpn[1])) {
          throw new TypeError("The specified NRPN is invalid.");
        }

        if (!(rpn[0] >= 0 && rpn[0] <= 127)) {
          throw new RangeError("The first byte of the RPN must be between 0 and 127.");
        }

        if (!(rpn[1] >= 0 && rpn[1] <= 127)) {
          throw new RangeError("The second byte of the RPN must be between 0 and 127.");
        }

        [].concat(data).forEach(value => {
          if (!(value >= 0 && value <= 127)) {
            throw new RangeError("The data bytes of the RPN must be between 0 and 127.");
          }
        });

      }

      this._selectRegisteredParameter(rpn, options);
      this._setCurrentParameter(data, options);
      this._deselectRegisteredParameter(options);

      return this;

    }

    /**
     * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the
     * *MIDI Tuning Standard*, which is not widely implemented.
     *
     * @param value {number} The desired tuning bank (integer between `0` and `127`).
     *
     * @param {Object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {RangeError} The bank value must be between 0 and 127.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendTuningBank(value, options = {}) {

      if (wm$1.validation) {

        if (!Number.isInteger(value) || !(value >= 0 && value <= 127)) {
          throw new RangeError("The tuning bank number must be between 0 and 127.");
        }

      }

      this.sendRpnValue("tuningbank", value, options);
      return this;

    }

    /**
     * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the
     * *MIDI Tuning Standard*, which is not widely implemented.
     *
     * @param value {number} The desired tuning program (integer between `0` and `127`).
     *
     * @param {Object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {RangeError} The program value must be between 0 and 127.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendTuningProgram(value, options = {}) {

      if (wm$1.validation) {

        if (!Number.isInteger(value) || !(value >= 0 && value <= 127)) {
          throw new RangeError("The tuning program number must be between 0 and 127.");
        }

      }

      this.sendRpnValue("tuningprogram", value, options);
      return this;

    }

    /**
     * Turns local control on or off. Local control is usually enabled by default. If you disable it,
     * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to
     * its out port.
     *
     * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it
     * (`false`).
     *
     * @param {Object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendLocalControl(state, options = {}) {
      if (state) {
        return this.sendChannelMode("localcontrol", 127, options);
      } else {
        return this.sendChannelMode("localcontrol", 0, options);
      }
    }

    /**
     * Sends an **all notes off** channel mode message. This will make all currently playing notes
     * fade out just as if their key had been released. This is different from the
     * [`sendAllSoundOff()`]{@link #sendAllSoundOff} method which mutes all sounds immediately.
     *
     * @param {Object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendAllNotesOff(options = {}) {
      return this.sendChannelMode("allnotesoff", 0, options);
    }

    /**
     * Sends an **all sound off** channel mode message. This will silence all sounds playing on that
     * channel but will not prevent new sounds from being triggered.
     *
     * @param {Object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendAllSoundOff(options = {}) {
      return this.sendChannelMode("allsoundoff", 0, options);
    }

    /**
     * Sends a **reset all controllers** channel mode message. This resets all controllers, such as
     * the pitch bend, to their default value.
     *
     * @param {Object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendResetAllControllers(options = {}) {
      return this.sendChannelMode("resetallcontrollers", 0, options);
    }

    /**
     * Sets the polyphonic mode. In `"poly"` mode (usually the default), multiple notes can be played
     * and heard at the same time. In `"mono"` mode, only one note will be heard at once even if
     * multiple notes are being played.
     *
     * @param {string} [mode=poly] The mode to use: `"mono"` or `"poly"`.
     *
     * @param {Object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
     */
    sendPolyphonicMode(mode, options = {}) {
      if (mode === "mono") {
        return this.sendChannelMode("monomodeon", 0, options);
      } else {
        return this.sendChannelMode("polymodeon", 0, options);
      }
    }

    /**
     * An integer to offset the reported octave of outgoing note-specific messages (`noteon`,
     * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th
     * octave (C4).
     *
     * Note that this value is combined with the global offset value defined in
     * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) and with the parent value defined in
     * [`Output.octaveOffset`]{@link Output#octaveOffset}.
     *
     * @type {number}
     *
     * @since 3.0
     */
    get octaveOffset() {
      return this._octaveOffset;
    }
    set octaveOffset(value) {

      if (this.validation) {
        value = parseInt(value);
        if (isNaN(value)) throw new TypeError("The 'octaveOffset' property must be an integer.");
      }

      this._octaveOffset = value;

    }

    /**
     * The parent [`Output`]{@link Output} this channel belongs to.
     * @type {Output}
     * @since 3.0
     */
    get output() {
      return this._output;
    }

    /**
     * This channel's MIDI number (`1` - `16`).
     * @type {number}
     * @since 3.0
     */
    get number() {
      return this._number;
    }

  }

  /**
   * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).
   * A port is made available by a MIDI device. A MIDI device can advertise several input and output
   * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)
   * property.
   *
   * The `Output` object is automatically instantiated by the library according to the host's MIDI
   * subsystem and should not be directly instantiated.
   *
   * You can access all available `Output` objects by referring to the
   * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as
   * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or
   * [`WebMidi.getOutputById()`](WebMidi#getOutputById).
   *
   * @fires Output#opened
   * @fires Output#disconnected
   * @fires Output#closed
   *
   * @extends EventEmitter
   * @license Apache-2.0
   */
  class Output extends EventEmitter {

    /**
     * Creates an `Output` object.
     *
     * @param {MIDIOutput} midiOutput [`MIDIOutput`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutput)
     * object as provided by the MIDI subsystem.
     */
    constructor(midiOutput) {

      super();

      /**
       * A reference to the `MIDIOutput` object
       * @type {MIDIOutput}
       * @private
       */
      this._midiOutput = midiOutput;

      /**
       * @type {number}
       * @private
       */
      this._octaveOffset = 0;

      /**
       * Array containing the 16 [`OutputChannel`]{@link OutputChannel} objects available provided by
       * this `Output`. The channels are numbered 1 through 16.
       *
       * @type {OutputChannel[]}
       */
      this.channels = [];
      for (let i = 1; i <= 16; i++) this.channels[i] = new OutputChannel(this, i);

      this._midiOutput.onstatechange = this._onStateChange.bind(this);

    }

    /**
     * Destroys the `Output`. All listeners are removed, all channels are destroyed and the MIDI
     * subsystem is unlinked.
     * @returns {Promise<void>}
     */
    async destroy() {
      this.removeListener();
      this.channels.forEach(ch => ch.destroy());
      this.channels = [];
      if (this._midiOutput) this._midiOutput.onstatechange = null;
      await this.close();
      this._midiOutput = null;
    }

    /**
     * @private
     */
    _onStateChange(e) {

      let event = {
        timestamp: wm$1.time
      };

      if (e.port.connection === "open") {

        /**
         * Event emitted when the {@link Output} has been opened by calling the
         * [open()]{@link Output#open} method.
         *
         * @event Output#opened
         * @type {object}
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         * @property {string} type `"opened"`
         * @property {Output} target The object to which the listener was originally added (`Output`).
         * @property {Output} port The port that was opened
         */
        event.type = "opened";
        event.target = this;
        event.port = event.target; // for consistency
        this.emit("opened", event);

      } else if (e.port.connection === "closed" && e.port.state === "connected") {

        /**
         * Event emitted when the {@link Output} has been closed by calling the
         * [close()]{@link Output#close} method.
         *
         * @event Output#closed
         * @type {object}
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         * @property {string} type `"closed"`
         * @property {Output} target The object to which the listener was originally added (`Output`).
         * @property {Output} port The port that was closed
         */
        event.type = "closed";
        event.target = this;
        event.port = event.target; // for consistency
        this.emit("closed", event);

      } else if (e.port.connection === "closed" && e.port.state === "disconnected") {

        /**
         * Event emitted when the {@link Output} becomes unavailable. This event is typically fired
         * when the MIDI device is unplugged.
         *
         * @event Output#disconnected
         * @type {object}
         * @property {number} timestamp The moment (DOMHighResTimeStamp0 when the event occurred (in
         * milliseconds since the navigation start of the document).
         * @property {string} type `"disconnected"`
         * @property {Output} target The object to which the listener was originally added (`Output`).
         * @property {object} port Object with properties describing the {@link Output} that was
         * disconnected. This is not the actual `Output` as it is no longer available.
         */
        event.type = "disconnected";
        event.port = {
          connection: e.port.connection,
          id: e.port.id,
          manufacturer: e.port.manufacturer,
          name: e.port.name,
          state: e.port.state,
          type: e.port.type
        };
        this.emit("disconnected", event);

      } else if (e.port.connection === "pending" && e.port.state === "disconnected") ; else {
        console.warn("This statechange event was not caught:", e.port.connection, e.port.state);
      }

    }

    /**
     * Opens the output for usage. When the library is enabled, all ports are automatically opened.
     * This method is only useful for ports that have been manually closed.
     *
     * @returns {Promise<Output>} The promise is fulfilled with the `Output` object.
     */
    async open() {

      // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly
      // opened, it is implicitly opened (asynchronously) when calling `send()` on the `MIDIOutput`.
      // We do it explicitly so that 'connected' events are dispatched immediately and we are ready to
      // send.
      try {
        await this._midiOutput.open();
        return Promise.resolve(this);
      } catch (err) {
        return Promise.reject(err);
      }

    }

    /**
     * Closes the output connection. When an output is closed, it cannot be used to send MIDI messages
     * until the output is opened again by calling [`open()`]{@link #open}. You can check
     * the connection status by looking at the [`connection`]{@link #connection} property.
     *
     * @returns {Promise<void>}
     */
    async close() {

      // We close the port. This triggers a 'statechange' event which we listen to to re-trigger the
      // 'closed' event.
      if (this._midiOutput) {
        await this._midiOutput.close();
      } else {
        await Promise.resolve();
      }

    }

    /**
     * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be
     * sent immediately. The message should be an array of 8 bit unsigned integers (0-225), a
     * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}
     * object or a [`Message`](Message) object.
     *
     * It is usually not necessary to use this method directly as you can use one of the simpler
     * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),
     * [`sendControlChange()`](#sendControlChange), etc.
     *
     * Details on the format of MIDI messages are available in the summary of
     * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}
     * from the MIDI Manufacturers Association.
     *
     * @param message {number[]|Uint8Array|Message} An array of 8bit unsigned integers, a `Uint8Array`
     * object (not available in Node.js) containing the message bytes or a `Message` object.
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     *
     * @license Apache-2.0
     */
    send(message, options = {time: 0}, legacy = 0) {

      // If a Message object is passed in we extract the message data (the jzz plugin used on Node.js
      // does not support using Uint8Array).
      if (message instanceof Message) {
        message = Utilities.isNode ? message.data : message.rawData;
      }

      // If the data is a Uint8Array and we are on Node, we must convert it to array so it works with
      // the jzz module.
      if (message instanceof Uint8Array && Utilities.isNode) {
        message = Array.from(message);
      }

      // Validation
      if (wm$1.validation) {

        // If message is neither an array nor a Uint8Array, then we are in legacy mode
        if (!Array.isArray(message) && !(message instanceof Uint8Array)) {
          message = [message];
          if (Array.isArray(options)) message = message.concat(options);
          options = isNaN(legacy) ? {time: 0} : {time: legacy};
        }

        if (!(parseInt(message[0]) >= 128 && parseInt(message[0]) <= 255)) {
          throw new RangeError("The first byte (status) must be an integer between 128 and 255.");
        }

        message.slice(1).forEach(value => {
          value = parseInt(value);
          if (!(value >= 0 && value <= 255)) {
            throw new RangeError("Data bytes must be integers between 0 and 255.");
          }
        });

        if (!options) options = {time: 0};

      }

      // Send message and return `Output` for chaining
      this._midiOutput.send(message, Utilities.toTimestamp(options.time));
      return this;

    }

    /**
     * Sends a MIDI [**system exclusive**]{@link
      * https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages}
     * (*sysex*) message. There are two categories of system exclusive messages: manufacturer-specific
     * messages and universal messages. Universal messages are further divided into three subtypes:
     *
     *   * Universal non-commercial (for research and testing): `0x7D`
     *   * Universal non-realtime: `0x7E`
     *   * Universal realtime: `0x7F`
     *
     * The method's first parameter (`identification`) identifies the type of message. If the value of
     * `identification` is `0x7D` (125), `0x7E` (126) or `0x7F` (127), the message will be identified
     * as a **universal non-commercial**, **universal non-realtime** or **universal realtime** message
     * (respectively).
     *
     * If the `identification` value is an array or an integer between 0 and 124, it will be used to
     * identify the manufacturer targeted by the message. The *MIDI Manufacturers Association*
     * maintains a full list of
     * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers).
     *
     * The `data` parameter should only contain the data of the message. When sending out the actual
     * MIDI message, WEBMIDI.js will automatically prepend the data with the **sysex byte** (`0xF0`)
     * and the identification byte(s). It will also automatically terminate the message with the
     * **sysex end byte** (`0xF7`).
     *
     * To use the `sendSysex()` method, system exclusive message support must have been enabled. To
     * do so, you must set the `sysex` option to `true` when calling
     * [`WebMidi.enable()`]{@link WebMidi#enable}:
     *
     * ```js
     * WebMidi.enable({sysex: true})
     *   .then(() => console.log("System exclusive messages are enabled");
     * ```
     *
     * ##### Examples of manufacturer-specific system exclusive messages
     *
     * If you want to send a sysex message to a Korg device connected to the first output, you would
     * use the following code:
     *
     * ```js
     * WebMidi.outputs[0].sendSysex(0x42, [0x1, 0x2, 0x3, 0x4, 0x5]);
     * ```
     * In this case `0x42` is the ID of the manufacturer (Korg) and `[0x1, 0x2, 0x3, 0x4, 0x5]` is the
     * data being sent.
     *
     * The parameters can be specified using any number notation (decimal, hex, binary, etc.).
     * Therefore, the code above is equivalent to this code:
     *
     * ```js
     * WebMidi.outputs[0].sendSysex(66, [1, 2, 3, 4, 5]);
     * ```
     *
     * Some manufacturers are identified using 3 bytes. In this case, you would use a 3-position array
     * as the first parameter. For example, to send the same sysex message to a
     * *Native Instruments* device:
     *
     * ```js
     * WebMidi.outputs[0].sendSysex([0x00, 0x21, 0x09], [0x1, 0x2, 0x3, 0x4, 0x5]);
     * ```
     *
     * There is no limit for the length of the data array. However, it is generally suggested to keep
     * system exclusive messages to 64Kb or less.
     *
     * ##### Example of universal system exclusive message
     *
     * If you want to send a universal sysex message, simply assign the correct identification number
     * in the first parameter. Number `0x7D` (125) is for non-commercial, `0x7E` (126) is for
     * non-realtime and `0x7F` (127) is for realtime.
     *
     * So, for example, if you wanted to send an identity request non-realtime message (`0x7E`), you
     * could use the following:
     *
     * ```js
     * WebMidi.outputs[0].sendSysex(0x7E, [0x7F, 0x06, 0x01]);
     * ```
     *
     * For more details on the format of universal messages, consult the list of
     * [universal sysex messages](https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages).
     *
     * @param {number|number[]} identification An unsigned integer or an array of three unsigned
     * integers between `0` and `127` that either identify the manufacturer or sets the message to be
     * a **universal non-commercial message** (`0x7D`), a **universal non-realtime message** (`0x7E`)
     * or a **universal realtime message** (`0x7F`). The *MIDI Manufacturers Association* maintains a
     * full list of
     * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers).
     *
     * @param {number[]|Uint8Array} [data] A `Uint8Array` or an array of unsigned integers between `0`
     * and `127`. This is the data you wish to transfer.
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {DOMException} Failed to execute 'send' on 'MIDIOutput': System exclusive message is
     * not allowed.
     *
     * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index x is greater
     * than 0xFF.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    sendSysex(identification, data= [], options = {}) {

      identification = [].concat(identification);

      // Check if data is Uint8Array
      if (data instanceof Uint8Array) {
        const merged = new Uint8Array(1 + identification.length + data.length + 1);
        merged[0] = Enumerations.SYSTEM_MESSAGES.sysex;
        merged.set(Uint8Array.from(identification), 1);
        merged.set(data, 1 + identification.length);
        merged[merged.length - 1] = Enumerations.SYSTEM_MESSAGES.sysexend;
        this.send(merged, {time: options.time});
      } else {
        const merged = identification.concat(data, Enumerations.SYSTEM_MESSAGES.sysexend);
        this.send([Enumerations.SYSTEM_MESSAGES.sysex].concat(merged), {time: options.time});
      }

      return this;

    };

    /**
     * Clears all MIDI messages that have been queued and scheduled but not yet sent.
     *
     * **Warning**: this method is defined in the
     * [Web MIDI API specification](https://www.w3.org/TR/webmidi/#MIDIOutput) but has not been
     * implemented by all browsers yet. You can follow
     * [this issue](https://github.com/djipco/webmidi/issues/52) for more info.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    clear() {

      if (this._midiOutput.clear) {

        this._midiOutput.clear();

      } else {

        if (wm$1.validation) {
          console.warn(
            "The 'clear()' method has not yet been implemented in your environment."
          );
        }

      }

      return this;

    }

    /**
     * Sends a MIDI **timecode quarter frame** message. Please note that no processing is being done
     * on the data. It is up to the developer to format the data according to the
     * [MIDI Timecode](https://en.wikipedia.org/wiki/MIDI_timecode) format.
     *
     * @param value {number} The quarter frame message content (integer between 0 and 127).
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    sendTimecodeQuarterFrame(value, options = {}) {

      if (wm$1.validation) {
        value = parseInt(value);
        if (isNaN(value) || !(value >= 0 && value <= 127)) {
          throw new RangeError("The value must be an integer between 0 and 127.");
        }
      }

      this.send(
        [
          Enumerations.SYSTEM_MESSAGES.timecode,
          value
        ],
        {time: options.time}
      );

      return this;

    };

    /**
     * Sends a **song position** MIDI message. The value is expressed in MIDI beats (between `0` and
     * `16383`) which are 16th note. Position `0` is always the start of the song.
     *
     * @param {number} [value=0] The MIDI beat to cue to (integer between `0` and `16383`).
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     *
     * @since 3.0.0
     */
    sendSongPosition(value = 0, options = {}) {

      // @todo allow passing in 2-entries array for msb/lsb

      value = Math.floor(value) || 0;

      var msb = (value >> 7) & 0x7F;
      var lsb = value & 0x7F;

      this.send(
        [
          Enumerations.SYSTEM_MESSAGES.songposition,
          msb,
          lsb
        ],
        {time: options.time}
      );

      return this;

    }

    /**
     * Sends a **song select** MIDI message.
     *
     * @param {number} [value=0] The number of the song to select (integer between `0` and `127`).
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws The song number must be between 0 and 127.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     *
     * @since 3.0.0
     */
    sendSongSelect(value = 0, options = {}) {

      if (wm$1.validation) {

        value = parseInt(value);

        if (isNaN(value) || !(value >= 0 && value <= 127)) {
          throw new RangeError("The program value must be between 0 and 127");
        }

      }

      this.send(
        [
          Enumerations.SYSTEM_MESSAGES.songselect,
          value
        ],
        {time: options.time}
      );

      return this;

    }

    /**
     * Sends a MIDI **tune request** real-time message.
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     *
     * @since 3.0.0
     */
    sendTuneRequest(options = {}) {

      this.send(
        [Enumerations.SYSTEM_MESSAGES.tunerequest],
        {time: options.time}
      );

      return this;

    }

    /**
     * Sends a MIDI **clock** real-time message. According to the standard, there are 24 MIDI clocks
     * for every quarter note.
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    sendClock(options = {}) {

      this.send(
        [Enumerations.SYSTEM_MESSAGES.clock],
        {time: options.time}
      );

      return this;

    }

    /**
     * Sends a **start** real-time message. A MIDI Start message starts the playback of the current
     * song at beat 0. To start playback elsewhere in the song, use the
     * [`sendContinue()`]{@link #sendContinue} method.
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    sendStart(options = {}) {

      this.send(
        [Enumerations.SYSTEM_MESSAGES.start],
        {time: options.time}
      );

      return this;

    }

    /**
     * Sends a **continue** real-time message. This resumes song playback where it was previously
     * stopped or where it was last cued with a song position message. To start playback from the
     * start, use the [`sendStart()`]{@link Output#sendStart}` method.
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    sendContinue(options = {}) {

      this.send(
        [Enumerations.SYSTEM_MESSAGES.continue],
        {time: options.time}
      );

      return this;

    }

    /**
     * Sends a **stop** real-time message. This tells the device connected to this output to stop
     * playback immediately (or at the scheduled time, if specified).
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    sendStop(options = {}) {

      this.send(
        [Enumerations.SYSTEM_MESSAGES.stop],
        {time: options.time}
      );

      return this;

    }

    /**
     * Sends an **active sensing** real-time message. This tells the device connected to this port
     * that the connection is still good. Active sensing messages are often sent every 300 ms if there
     * was no other activity on the MIDI port.
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    sendActiveSensing(options = {}) {

      this.send(
        [Enumerations.SYSTEM_MESSAGES.activesensing],
        {time: options.time}
      );

      return this;

    }

    /**
     * Sends a **reset** real-time message. This tells the device connected to this output that it
     * should reset itself to a default state.
     *
     * @param {object} [options={}]
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    sendReset(options = {}) {

      this.send(
        [Enumerations.SYSTEM_MESSAGES.reset],
        {time: options.time}
      );

      return this;

    }

    /**
     * @private
     * @deprecated since version 3.0
     */
    sendTuningRequest(options = {}) {

      if (wm$1.validation) {
        console.warn(
          "The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead."
        );
      }

      return this.sendTuneRequest(options);

    }

    /**
     * Sends a MIDI **key aftertouch** message to the specified channel(s) at the scheduled time. This
     * is a key-specific aftertouch. For a channel-wide aftertouch message, use
     * [`setChannelAftertouch()`]{@link #setChannelAftertouch}.
     *
     * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) for which you are sending
     * an aftertouch value. The notes can be specified by using a MIDI note number (`0` - `127`), a
     * [`Note`](Note) object, a note identifier (e.g. `C3`, `G#4`, `F-1`, `Db7`) or an array of the
     * previous types. When using a note identifier, octave range must be between `-1` and `9`. The
     * lowest note is `C-1` (MIDI note number `0`) and the highest note is `G9` (MIDI note number
     * `127`).
     *
     * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value
     * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the
     * pressure can be defined by using an integer between 0 and 127.
     *
     * @param {object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be
     * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @return {Output} Returns the `Output` object so methods can be chained.
     *
     * @since 3.0.0
     */
    sendKeyAftertouch(note, pressure, options = {}) {

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendKeyAftertouch(note, pressure, options);
      });

      return this;

    };

    /**
     * Sends a MIDI **control change** message to the specified channel(s) at the scheduled time. The
     * control change message to send can be specified numerically (0-127) or by using one of the
     * following common names:
     *
     * | Number | Name                          |
     * |--------|-------------------------------|
     * | 0      |`bankselectcoarse`             |
     * | 1      |`modulationwheelcoarse`        |
     * | 2      |`breathcontrollercoarse`       |
     * | 4      |`footcontrollercoarse`         |
     * | 5      |`portamentotimecoarse`         |
     * | 6      |`dataentrycoarse`              |
     * | 7      |`volumecoarse`                 |
     * | 8      |`balancecoarse`                |
     * | 10     |`pancoarse`                    |
     * | 11     |`expressioncoarse`             |
     * | 12     |`effectcontrol1coarse`         |
     * | 13     |`effectcontrol2coarse`         |
     * | 18     |`generalpurposeslider3`        |
     * | 19     |`generalpurposeslider4`        |
     * | 32     |`bankselectfine`               |
     * | 33     |`modulationwheelfine`          |
     * | 34     |`breathcontrollerfine`         |
     * | 36     |`footcontrollerfine`           |
     * | 37     |`portamentotimefine`           |
     * | 38     |`dataentryfine`                |
     * | 39     |`volumefine`                   |
     * | 40     |`balancefine`                  |
     * | 42     |`panfine`                      |
     * | 43     |`expressionfine`               |
     * | 44     |`effectcontrol1fine`           |
     * | 45     |`effectcontrol2fine`           |
     * | 64     |`holdpedal`                    |
     * | 65     |`portamento`                   |
     * | 66     |`sustenutopedal`               |
     * | 67     |`softpedal`                    |
     * | 68     |`legatopedal`                  |
     * | 69     |`hold2pedal`                   |
     * | 70     |`soundvariation`               |
     * | 71     |`resonance`                    |
     * | 72     |`soundreleasetime`             |
     * | 73     |`soundattacktime`              |
     * | 74     |`brightness`                   |
     * | 75     |`soundcontrol6`                |
     * | 76     |`soundcontrol7`                |
     * | 77     |`soundcontrol8`                |
     * | 78     |`soundcontrol9`                |
     * | 79     |`soundcontrol10`               |
     * | 80     |`generalpurposebutton1`        |
     * | 81     |`generalpurposebutton2`        |
     * | 82     |`generalpurposebutton3`        |
     * | 83     |`generalpurposebutton4`        |
     * | 91     |`reverblevel`                  |
     * | 92     |`tremololevel`                 |
     * | 93     |`choruslevel`                  |
     * | 94     |`celestelevel`                 |
     * | 95     |`phaserlevel`                  |
     * | 96     |`dataincrement`                |
     * | 97     |`datadecrement`                |
     * | 98     |`nonregisteredparametercoarse` |
     * | 99     |`nonregisteredparameterfine`   |
     * | 100    |`registeredparametercoarse`    |
     * | 101    |`registeredparameterfine`      |
     * | 120    |`allsoundoff`                  |
     * | 121    |`resetallcontrollers`          |
     * | 122    |`localcontrol`                 |
     * | 123    |`allnotesoff`                  |
     * | 124    |`omnimodeoff`                  |
     * | 125    |`omnimodeon`                   |
     * | 126    |`monomodeon`                   |
     * | 127    |`polymodeon`                   |
     *
     * Note: as you can see above, not all control change message have a matching name. This does not
     * mean you cannot use the others. It simply means you will need to use their number (`0` - `127`)
     * instead of their name. While you can still use them, numbers `120` to `127` are usually
     * reserved for *channel mode* messages. See [`sendChannelMode()`]{@link #sendChannelMode} method
     * for more info.
     *
     * To view a list of all available **control change** messages, please consult [Table 3 - Control
     * Change Messages](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)
     * from the MIDI specification.
     *
     * @param controller {number|string} The MIDI controller name or number (0-127).
     *
     * @param [value=0] {number} The value to send (0-127).
     *
     * @param {object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {RangeError} Controller numbers must be between 0 and 127.
     * @throws {RangeError} Invalid controller name.
     *
     * @return {Output} Returns the `Output` object so methods can be chained.
     */
    sendControlChange(controller, value, options = {}, legacy = {}) {

      if (wm$1.validation) {

        // Legacy compatibility
        if (Array.isArray(options) || Number.isInteger(options) || options === "all") {
          const channels = options;
          options = legacy;
          options.channels = channels;
          if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;
        }

      }

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendControlChange(controller, value, options);
      });

      return this;

    };

    /**
     * Sends a **pitch bend range** message to the specified channel(s) at the scheduled time so that
     * they adjust the range used by their pitch bend lever. The range is specified by using the
     * `semitones` and `cents` parameters. For example, setting the `semitones` parameter to `12`
     * means that the pitch bend range will be 12 semitones above and below the nominal pitch.
     *
     * @param {number} [semitones=0] The desired adjustment value in semitones (between `0` and `127`).
     * While nothing imposes that in the specification, it is very common for manufacturers to limit
     * the range to 2 octaves (-12 semitones to 12 semitones).
     *
     * @param {number} [cents=0] The desired adjustment value in cents (integer between `0` and
     * `127`).
     *
     * @param {object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {RangeError} The msb value must be between 0 and 127.
     * @throws {RangeError} The lsb value must be between 0 and 127.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     *
     * @since 3.0.0
     */
    sendPitchBendRange(semitones= 0, cents = 0, options = {}) {

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendPitchBendRange(semitones, cents, options);
      });

      return this;

    }


    /**
     * @private
     * @deprecated since version 3.0
     */
    setPitchBendRange(semitones = 0, cents = 0, channel = "all", options = {}) {

      if (wm$1.validation) {

        console.warn(
          "The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead."
        );

        options.channels = channel;
        if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      }

      return this.sendPitchBendRange(semitones, cents, options);

    }

    /**
     * Sets the specified MIDI registered parameter to the desired value. The value is defined with
     * up to two bytes of data (msb, lsb) that each can go from `0` to `127`.
     *
     * MIDI
     * [registered parameters](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)
     * extend the original list of control change messages. The MIDI 1.0 specification lists only a
     * limited number of them:
     *
     * | Numbers      | Function                 |
     * |--------------|--------------------------|
     * | (0x00, 0x00) | `pitchbendrange`         |
     * | (0x00, 0x01) | `channelfinetuning`      |
     * | (0x00, 0x02) | `channelcoarsetuning`    |
     * | (0x00, 0x03) | `tuningprogram`          |
     * | (0x00, 0x04) | `tuningbank`             |
     * | (0x00, 0x05) | `modulationrange`        |
     * | (0x3D, 0x00) | `azimuthangle`           |
     * | (0x3D, 0x01) | `elevationangle`         |
     * | (0x3D, 0x02) | `gain`                   |
     * | (0x3D, 0x03) | `distanceratio`          |
     * | (0x3D, 0x04) | `maximumdistance`        |
     * | (0x3D, 0x05) | `maximumdistancegain`    |
     * | (0x3D, 0x06) | `referencedistanceratio` |
     * | (0x3D, 0x07) | `panspreadangle`         |
     * | (0x3D, 0x08) | `rollangle`              |
     *
     * Note that the `tuningprogram` and `tuningbank` parameters are part of the *MIDI Tuning
     * Standard*, which is not widely implemented.
     *
     * @param parameter {string|number[]} A string identifying the parameter's name (see above) or a
     * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the
     * registered parameter.
     *
     * @param [data=[]] {number|number[]} A single integer or an array of integers with a maximum
     * length of 2 specifying the desired data.
     *
     * @param {object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    sendRpnValue(parameter, data, options = {}) {

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendRpnValue(parameter, data, options);
      });

      return this;

    }

    /**
     * @private
     * @deprecated since version 3.0
     */
    setRegisteredParameter(parameter, data = [], channel = "all", options = {}) {

      if (wm$1.validation) {

        console.warn(
          "The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead."
        );

        options.channels = channel;
        if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      }

      return this.sendRpnValue(parameter, data, options);

    }

    /**
     * Sends a MIDI **channel aftertouch** message to the specified channel(s). For key-specific
     * aftertouch, you should instead use [`setKeyAftertouch()`]{@link #setKeyAftertouch}.
     *
     * @param [pressure=0.5] {number} The pressure level (between `0` and `1`). An invalid pressure
     * value will silently trigger the default behaviour. If the `rawValue` option is set to `true`,
     * the pressure can be defined by using an integer between `0` and `127`.
     *
     * @param {object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be
     * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @return {Output} Returns the `Output` object so methods can be chained.
     * @since 3.0.0
     */
    sendChannelAftertouch(pressure, options = {}, legacy = {}) {

      if (wm$1.validation) {

        // Legacy compatibility
        if (Array.isArray(options) || Number.isInteger(options) || options === "all") {
          const channels = options;
          options = legacy;
          options.channels = channels;
          if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;
        }

      }

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendChannelAftertouch(pressure, options);
      });

      return this;

    }

    /**
     * Sends a MIDI **pitch bend** message to the specified channel(s) at the scheduled time.
     *
     * The resulting bend is relative to the pitch bend range that has been defined. The range can be
     * set with [`sendPitchBendRange()`]{@link #sendPitchBendRange}. So, for example, if the pitch
     * bend range has been set to 12 semitones, using a bend value of `-1` will bend the note 1 octave
     * below its nominal value.
     *
     * @param {number|number[]} value The intensity of the bend (between `-1.0` and `1.0`). A value of
     * `0` means no bend. If an invalid value is specified, the nearest valid value will be used
     * instead. If the `rawValue` option is set to `true`, the intensity of the bend can be defined by
     * either using a single integer between `0` and `127` (MSB) or an array of two integers between
     * `0` and `127` representing, respectively, the MSB (most significant byte) and the LSB (least
     * significant byte). The MSB is expressed in semitones with `64` meaning no bend. A value lower
     * than `64` bends downwards while a value higher than `64` bends upwards. The LSB is expressed
     * in cents (1/100 of a semitone). An LSB of `64` also means no bend.
     *
     * @param {object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be
     * considered as a float between `-1.0` and `1.0` (default) or as raw integer between `0` and
     * 127` (or an array of 2 integers if using both MSB and LSB).
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     *
     * @since 3.0.0
     */
    sendPitchBend(value, options = {}, legacy = {}) {

      if (wm$1.validation) {

        // Legacy compatibility
        if (Array.isArray(options) || Number.isInteger(options) || options === "all") {
          const channels = options;
          options = legacy;
          options.channels = channels;
          if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;
        }

      }

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendPitchBend(value, options);
      });

      return this;

    }

    /**
     * Sends a MIDI **program change** message to the specified channel(s) at the scheduled time.
     *
     * @param {number} [program=0] The MIDI patch (program) number (integer between `0` and `127`).
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater
     * than 0xFF.
     *
     * @return {Output} Returns the `Output` object so methods can be chained.
     *
     * @since 3.0.0
     */
    sendProgramChange(program = 0, options = {}, legacy = {}) {

      if (wm$1.validation) {

        // Legacy compatibility
        if (Array.isArray(options) || Number.isInteger(options) || options === "all") {
          const channels = options;
          options = legacy;
          options.channels = channels;
          if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;
        }

      }

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendProgramChange(program, options);
      });

      return this;

    }

    /**
     * Sends a **modulation depth range** message to the specified channel(s) so that they adjust the
     * depth of their modulation wheel's range. The range can be specified with the `semitones`
     * parameter, the `cents` parameter or by specifying both parameters at the same time.
     *
     * @param [semitones=0] {number} The desired adjustment value in semitones (integer between
     * 0 and 127).
     *
     * @param [cents=0] {number} The desired adjustment value in cents (integer between 0 and 127).
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {RangeError} The msb value must be between 0 and 127
     * @throws {RangeError} The lsb value must be between 0 and 127
     *
     * @return {Output} Returns the `Output` object so methods can be chained.
     *
     * @since 3.0.0
     */
    sendModulationRange(semitones, cents, options = {}) {

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendModulationRange(semitones, cents, options);
      });

      return this;

    };

    /**
     * @private
     * @deprecated since version 3.0
     */
    setModulationRange(semitones = 0, cents = 0, channel = "all", options = {}) {

      if (wm$1.validation) {

        console.warn(
          "The setModulationRange() method is deprecated. Use sendModulationRange() instead."
        );

        options.channels = channel;
        if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      }

      return this.sendModulationRange(semitones, cents, options);

    }

    /**
     * Sends a master tuning message to the specified channel(s). The value is decimal and must be
     * larger than `-65` semitones and smaller than `64` semitones.
     *
     * Because of the way the MIDI specification works, the decimal portion of the value will be
     * encoded with a resolution of 14bit. The integer portion must be between -64 and 63
     * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and
     * a **Master Fine Tuning** RPN messages.
     *
     * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller
     * than 64.
     *
     * @return {Output} Returns the `Output` object so methods can be chained.
     *
     * @since 3.0.0
     */
    sendMasterTuning(value, options = {}) {

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendMasterTuning(value, options);
      });

      return this;

    }

    /**
     * @private
     * @deprecated since version 3.0
     */
    setMasterTuning(value, channel = {}, options = {}) {

      if (wm$1.validation) {

        console.warn(
          "The setMasterTuning() method is deprecated. Use sendMasterTuning() instead."
        );

        options.channels = channel;
        if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      }

      return this.sendMasterTuning(value, options);

    }

    /**
     * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the
     * *MIDI Tuning Standard*, which is not widely implemented.
     *
     * @param value {number} The desired tuning program (integer between `0` and `127`).
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {RangeError} The program value must be between 0 and 127.
     *
     * @return {Output} Returns the `Output` object so methods can be chained.
     *
     * @since 3.0.0
     */
    sendTuningProgram(value, options = {}) {

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendTuningProgram(value, options);
      });

      return this;

    }

    /**
     * @private
     * @deprecated since version 3.0
     */
    setTuningProgram(value, channel = "all", options = {}) {

      if (wm$1.validation) {

        console.warn(
          "The setTuningProgram() method is deprecated. Use sendTuningProgram() instead."
        );

        options.channels = channel;
        if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      }

      return this.sendTuningProgram(value, options);

    }

    /**
     * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the
     * *MIDI Tuning Standard*, which is not widely implemented.
     *
     * @param {number} [value=0] The desired tuning bank (integer between `0` and `127`).
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {RangeError} The bank value must be between 0 and 127.
     *
     * @return {Output} Returns the `Output` object so methods can be chained.
     *
     * @since 3.0.0
     */
    sendTuningBank(value= 0, options = {}) {

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendTuningBank(value, options);
      });

      return this;

    };

    /**
     * @private
     * @deprecated since version 3.0
     */
    setTuningBank(parameter, channel = "all", options = {}) {

      if (wm$1.validation) {

        console.warn(
          "The setTuningBank() method is deprecated. Use sendTuningBank() instead."
        );

        options.channels = channel;
        if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      }

      return this.sendTuningBank(parameter, options);

    }

    /**
     * Sends a MIDI **channel mode** message to the specified channel(s). The channel mode message to
     * send can be specified numerically or by using one of the following common names:
     *
     * |  Type                |Number| Shortcut Method                                               |
     * | ---------------------|------|-------------------------------------------------------------- |
     * | `allsoundoff`        | 120  | [`sendAllSoundOff()`]{@link #sendAllSoundOff}                 |
     * | `resetallcontrollers`| 121  | [`sendResetAllControllers()`]{@link #sendResetAllControllers} |
     * | `localcontrol`       | 122  | [`sendLocalControl()`]{@link #sendLocalControl}               |
     * | `allnotesoff`        | 123  | [`sendAllNotesOff()`]{@link #sendAllNotesOff}                 |
     * | `omnimodeoff`        | 124  | [`sendOmniMode(false)`]{@link #sendOmniMode}                  |
     * | `omnimodeon`         | 125  | [`sendOmniMode(true)`]{@link #sendOmniMode}                   |
     * | `monomodeon`         | 126  | [`sendPolyphonicMode("mono")`]{@link #sendPolyphonicMode}     |
     * | `polymodeon`         | 127  | [`sendPolyphonicMode("poly")`]{@link #sendPolyphonicMode}     |
     *
     * Note: as you can see above, to make it easier, all channel mode messages also have a matching
     * helper method.
     *
     * It should also be noted that, per the MIDI specification, only `localcontrol` and `monomodeon`
     * may require a value that's not zero. For that reason, the `value` parameter is optional and
     * defaults to 0.
     *
     * @param {number|string} command The numerical identifier of the channel mode message (integer
     * between 120-127) or its name as a string.
     *
     * @param {number} [value=0] The value to send (integer between 0-127).
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {TypeError} Invalid channel mode message name.
     * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.
     * @throws {RangeError} Value must be an integer between 0 and 127.
     *
     * @return {Output} Returns the `Output` object so methods can be chained.
     *
     */
    sendChannelMode(command, value = 0, options = {}, legacy = {}) {

      if (wm$1.validation) {

        // Legacy compatibility
        if (Array.isArray(options) || Number.isInteger(options) || options === "all") {
          const channels = options;
          options = legacy;
          options.channels = channels;
          if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;
        }

      }

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendChannelMode(command, value, options);
      });

      return this;

    }

    /**
     * Sends an **all sound off** channel mode message. This will silence all sounds playing on that
     * channel but will not prevent new sounds from being triggered.
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output}
     *
     * @since 3.0.0
     */
    sendAllSoundOff(options = {}) {

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendAllSoundOff(options);
      });

      return this;

    }

    /**
     * Sends an **all notes off** channel mode message. This will make all currently playing notes
     * fade out just as if their key had been released. This is different from the
     * [`sendAllSoundOff()`]{@link #sendAllSoundOff} method which mutes all sounds immediately.
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output}
     *
     * @since 3.0.0
     */
    sendAllNotesOff(options = {}) {

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendAllNotesOff(options);
      });

      return this;

    }

    /**
     * Sends a **reset all controllers** channel mode message. This resets all controllers, such as
     * the pitch bend, to their default value.
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output}
     */
    sendResetAllControllers(options = {}, legacy = {}) {

      if (wm$1.validation) {

        // Legacy compatibility
        if (Array.isArray(options) || Number.isInteger(options) || options === "all") {
          const channels = options;
          options = legacy;
          options.channels = channels;
          if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;
        }

      }

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendResetAllControllers(options);
      });

      return this;

    }

    /**
     * Sets the polyphonic mode. In `poly` mode (usually the default), multiple notes can be played
     * and heard at the same time. In `mono` mode, only one note will be heard at once even if
     * multiple notes are being played.
     *
     * @param mode {string} The mode to use: `mono` or `poly`.
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @return {Output} Returns the `Output` object so methods can be chained.
     *
     * @since 3.0.0
     */
    sendPolyphonicMode(mode, options = {}, legacy = {}) {

      if (wm$1.validation) {

        // Legacy compatibility
        if (Array.isArray(options) || Number.isInteger(options) || options === "all") {
          const channels = options;
          options = legacy;
          options.channels = channels;
          if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;
        }

      }

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendPolyphonicMode(mode, options);
      });

      return this;

    }

    /**
     * Turns local control on or off. Local control is usually enabled by default. If you disable it,
     * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to
     * its out port.
     *
     * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it
     * (`false`).
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @return {Output} Returns the `Output` object so methods can be chained.
     *
     * @since 3.0.0
     */
    sendLocalControl(state, options = {}, legacy = {}) {

      if (wm$1.validation) {

        // Legacy compatibility
        if (Array.isArray(options) || Number.isInteger(options) || options === "all") {
          const channels = options;
          options = legacy;
          options.channels = channels;
          if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;
        }

      }

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendLocalControl(state, options);
      });

      return this;

    }

    /**
     * Sets OMNI mode to **on** or **off** for the specified channel(s). MIDI's OMNI mode causes the
     * instrument to respond to messages from all channels.
     *
     * It should be noted that support for OMNI mode is not as common as it used to be.
     *
     * @param [state] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {TypeError} Invalid channel mode message name.
     * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.
     * @throws {RangeError} Value must be an integer between 0 and 127.
     *
     * @return {Output} Returns the `Output` object so methods can be chained.
     *
     * @since 3.0.0
     */
    sendOmniMode(state, options = {}, legacy = {}) {

      if (wm$1.validation) {

        // Legacy compatibility
        if (Array.isArray(options) || Number.isInteger(options) || options === "all") {
          const channels = options;
          options = legacy;
          options.channels = channels;
          if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;
        }

      }

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendOmniMode(state, options);
      });

      return this;

    }

    /**
     * Sets a non-registered parameter to the specified value. The NRPN is selected by passing a
     * two-position array specifying the values of the two control bytes. The value is specified by
     * passing a single integer (most cases) or an array of two integers.
     *
     * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way
     * they see fit. For example, according to the Roland GS specification, you can control the
     * **vibrato rate** using NRPN (`1`, `8`). Therefore, to set the **vibrato rate** value to `123`
     * you would use:
     *
     * ```js
     * WebMidi.outputs[0].sendNrpnValue([1, 8], 123);
     * ```
     *
     * You probably want to should select a channel so the message is not sent to all channels. For
     * instance, to send to channel `1` of the first output port, you would use:
     *
     * ```js
     * WebMidi.outputs[0].sendNrpnValue([1, 8], 123, 1);
     * ```
     *
     * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you
     * would use a 2-position array. For example, for its **ClockBPM** parameter (`2`, `63`), Novation
     * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the
     * value to send was `10`, you could use:
     *
     * ```js
     * WebMidi.outputs[0].sendNrpnValue([2, 63], [0, 10], 1);
     * ```
     *
     * For further implementation details, refer to the manufacturer's documentation.
     *
     * @param parameter {number[]} A two-position array specifying the two control bytes (`0x63`,
     * `0x62`) that identify the non-registered parameter.
     *
     * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2
     * specifying the desired data.
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws {RangeError} The control value must be between 0 and 127.
     * @throws {RangeError} The msb value must be between 0 and 127
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    sendNrpnValue(parameter, data, options = {}) {

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendNrpnValue(parameter, data, options);
      });

      return this;

    }

    /**
     * @private
     * @deprecated since version 3.0
     */
    setNonRegisteredParameter(parameter, data = [], channel = "all", options = {}) {

      if (wm$1.validation) {

        console.warn(
          "The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead."
        );

        options.channels = channel;
        if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      }

      return this.sendNrpnValue(parameter, data, options);

    }

    /**
     * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter
     * names that can be used with this method:
     *
     *  * Pitchbend Range (0x00, 0x00): `"pitchbendrange"`
     *  * Channel Fine Tuning (0x00, 0x01): `"channelfinetuning"`
     *  * Channel Coarse Tuning (0x00, 0x02): `"channelcoarsetuning"`
     *  * Tuning Program (0x00, 0x03): `"tuningprogram"`
     *  * Tuning Bank (0x00, 0x04): `"tuningbank"`
     *  * Modulation Range (0x00, 0x05): `"modulationrange"`
     *  * Azimuth Angle (0x3D, 0x00): `"azimuthangle"`
     *  * Elevation Angle (0x3D, 0x01): `"elevationangle"`
     *  * Gain (0x3D, 0x02): `"gain"`
     *  * Distance Ratio (0x3D, 0x03): `"distanceratio"`
     *  * Maximum Distance (0x3D, 0x04): `"maximumdistance"`
     *  * Maximum Distance Gain (0x3D, 0x05): `"maximumdistancegain"`
     *  * Reference Distance Ratio (0x3D, 0x06): `"referencedistanceratio"`
     *  * Pan Spread Angle (0x3D, 0x07): `"panspreadangle"`
     *  * Roll Angle (0x3D, 0x08): `"rollangle"`
     *
     * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a
     * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered
     * parameter.
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    sendRpnIncrement(parameter, options = {}) {

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendRpnIncrement(parameter, options);
      });

      return this;

    }

    /**
     * @private
     * @deprecated since version 3.0
     */
    incrementRegisteredParameter(parameter, channel = "all", options = {}) {

      if (wm$1.validation) {

        console.warn(
          "The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead."
        );

        options.channels = channel;
        if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      }

      return this.sendRpnIncrement(parameter, options);

    }

    /**
     * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter
     * names that can be used with this method:
     *
     *  * Pitchbend Range (0x00, 0x00): `"pitchbendrange"`
     *  * Channel Fine Tuning (0x00, 0x01): `"channelfinetuning"`
     *  * Channel Coarse Tuning (0x00, 0x02): `"channelcoarsetuning"`
     *  * Tuning Program (0x00, 0x03): `"tuningprogram"`
     *  * Tuning Bank (0x00, 0x04): `"tuningbank"`
     *  * Modulation Range (0x00, 0x05): `"modulationrange"`
     *  * Azimuth Angle (0x3D, 0x00): `"azimuthangle"`
     *  * Elevation Angle (0x3D, 0x01): `"elevationangle"`
     *  * Gain (0x3D, 0x02): `"gain"`
     *  * Distance Ratio (0x3D, 0x03): `"distanceratio"`
     *  * Maximum Distance (0x3D, 0x04): `"maximumdistance"`
     *  * Maximum Distance Gain (0x3D, 0x05): `"maximumdistancegain"`
     *  * Reference Distance Ratio (0x3D, 0x06): `"referencedistanceratio"`
     *  * Pan Spread Angle (0x3D, 0x07): `"panspreadangle"`
     *  * Roll Angle (0x3D, 0x08): `"rollangle"`
     *
     * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a
     * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered
     * parameter.
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @throws TypeError The specified parameter is not available.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    sendRpnDecrement(parameter, options = {}) {

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendRpnDecrement(parameter, options);
      });

      return this;

    }

    /**
     * @private
     * @deprecated since version 3.0
     */
    decrementRegisteredParameter(parameter, channel = "all", options = {}) {

      if (wm$1.validation) {

        console.warn(
          "The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead."
        );

        options.channels = channel;
        if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      }

      return this.sendRpnDecrement(parameter, options);

    }

    /**
     * Sends a **note off** message for the specified MIDI note number on the specified channel(s).
     * The first parameter is the note to stop. It can be a single value or an array of the following
     * valid values:
     *
     *  - A MIDI note number (integer between `0` and `127`)
     *  - A note identifier (e.g. `"C3"`, `"G#4"`, `"F-1"`, `"Db7"`)
     *  - A [`Note`](Note) object
     *
     * The execution of the **note off** command can be delayed by using the `time` property of the
     * `options` parameter.
     *
     * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be
     * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`,
     * `F-1`, `Db7`) or an array of the previous types. When using a note identifier, octave range
     * must be between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest
     * note is `G9` (MIDI note number `127`).
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number} [options.release=0.5] The velocity at which to release the note
     * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have
     * priority. An invalid velocity value will silently trigger the default of `0.5`.
     *
     * @param {number} [options.rawRelease=64] The velocity at which to release the note
     * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have
     * priority. An invalid velocity value will silently trigger the default of `64`.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    sendNoteOff(note, options= {}, legacy = {}) {

      if (wm$1.validation) {

        // Legacy compatibility
        if (Array.isArray(options) || Number.isInteger(options) || options === "all") {
          const channels = options;
          options = legacy;
          options.channels = channels;
          if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;
        }

      }

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendNoteOff(note, options);
      });

      return this;

    }

    /**
     * Sends a **note off** message for the specified MIDI note number on the specified channel(s).
     * The first parameter is the note to stop. It can be a single value or an array of the following
     * valid values:
     *
     *  - A MIDI note number (integer between `0` and `127`)
     *  - A note identifier (e.g. `"C3"`, `"G#4"`, `"F-1"`, `"Db7"`)
     *  - A [`Note`](Note) object
     *
     * The execution of the **note off** command can be delayed by using the `time` property of the
     * `options` parameter.
     *
     * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be
     * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,
     * `Db7`) or an array of the previous types. When using a note identifier, octave range must be
     * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is
     * `G9` (MIDI note number `127`).
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number} [options.release=0.5] The velocity at which to release the note
     * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have
     * priority. An invalid velocity value will silently trigger the default of `0.5`.
     *
     * @param {number} [options.rawRelease=64] The velocity at which to release the note
     * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have
     * priority. An invalid velocity value will silently trigger the default of `64`.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    stopNote(note, options) {
      return this.sendNoteOff(note, options);
    }

    /**
     * Plays a note or an array of notes on one or more channels of this output. If you intend to play
     * notes on a single channel, you should probably use
     * [`OutputChannel.playNote()`](OutputChannel#playNote) instead.
     *
     * The first parameter is the note to play. It can be a single value or an array of the following
     * valid values:
     *
     *  - A MIDI note number (integer between `0` and `127`)
     *  - A note identifier (e.g. `"C3"`, `"G#4"`, `"F-1"`, `"Db7"`)
     *  - A [`Note`]{@link Note} object
     *
     * The `playNote()` method sends a **note on** MIDI message for all specified notes on all
     * specified channels. If no channel is specified, it will send to all channels. If a `duration`
     * is set in the `options` parameter or in the [`Note`]{@link Note} object's
     * [`duration`]{@link Note#duration} property, it will also schedule a **note off** message to end
     * the note after said duration. If no `duration` is set, the note will simply play until a
     * matching **note off** message is sent with [`stopNote()`]{@link #stopNote}.
     *
     * The execution of the **note on** command can be delayed by using the `time` property of the
     * `options` parameter.
     *
     * When using [`Note`]{@link Note} objects, the durations and velocities defined in the
     * [`Note`]{@link Note} objects have precedence over the ones specified via the method's `options`
     * parameter.
     *
     * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is
     * functionally equivalent to a **note off** message.
     *
     * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be
     * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a
     * [`Note`]{@link Note} object or an array of the previous types. When using a note identifier,
     * octave range must be between -1 and 9. The lowest note is C-1 (MIDI note number `0`) and the
     * highest note is G9 (MIDI note number `127`).
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number} [options.duration=undefined] The number of milliseconds after which a
     * **note off** message will be scheduled. If left undefined, only a **note on** message is sent.
     *
     * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and
     * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity
     * value will silently trigger the default of `0.5`.
     *
     * @param {number} [options.rawAttack=64] The attack velocity at which to play the note (between
     * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will
     * silently trigger the default of 64.
     *
     * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`
     * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid
     * velocity value will silently trigger the default of `0.5`. This is only used with the
     * **note off** event triggered when `options.duration` is set.
     *
     * @param {number} [options.rawRelease=64] The velocity at which to release the note (between `0`
     * and `127`). This has priority over the `release` property. An invalid velocity value will
     * silently trigger the default of 64. This is only used with the **note off** event triggered
     * when `options.duration` is set.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    playNote(note, options = {}, legacy = {}) {

      if (wm$1.validation) {

        // Legacy-compatibility warnings
        if (options.rawVelocity) {
          console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' instead.");
        }

        if (options.velocity) {
          console.warn("The 'velocity' option is deprecated. Use 'velocity' instead.");
        }

        // Legacy compatibility
        if (Array.isArray(options) || Number.isInteger(options) || options === "all") {
          const channels = options;
          options = legacy;
          options.channels = channels;
          if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;
        }

      }

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].playNote(note, options);
      });

      return this;

    }

    /**
     * Sends a **note on** message for the specified MIDI note number on the specified channel(s). The
     * first parameter is the number. It can be a single value or an array of the following valid
     * values:
     *
     *  - A MIDI note number (integer between `0` and `127`)
     *  - A note identifier (e.g. `"C3"`, `"G#4"`, `"F-1"`, `"Db7"`)
     *  - A [`Note`](Note) object
     *
     *  The execution of the **note on** command can be delayed by using the `time` property of the
     * `options` parameter.
     *
     * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is
     * functionally equivalent to a **note off** message.
     *
     * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be
     * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,
     * `Db7`) or an array of the previous types. When using a note identifier, octave range must be
     * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is
     * `G9` (MIDI note number `127`).
     *
     * @param {Object} [options={}]
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no
     * channel is specified, all channels will be used.
     *
     * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and
     * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid
     * velocity value will silently trigger the default of `0.5`.
     *
     * @param {number} [options.rawAttack=64] The velocity at which to release the note (between `0`
     * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid
     * velocity value will silently trigger the default of `64`.
     *
     * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
     * followed by a number, the message will be delayed by that many milliseconds. If the value is a
     * positive number
     * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
     * the operation will be scheduled for that time. The current time can be retrieved with
     * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
     * operation will be carried out as soon as possible.
     *
     * @returns {Output} Returns the `Output` object so methods can be chained.
     */
    sendNoteOn(note, options = {}, legacy = {}) {

      if (wm$1.validation) {

        // Legacy compatibility
        if (Array.isArray(options) || Number.isInteger(options) || options === "all") {
          const channels = options;
          options = legacy;
          options.channels = channels;
          if (options.channels === "all") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;
        }

      }

      if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      // This actually supports passing a Note object even if, semantically, this does not make sense.
      Utilities.sanitizeChannels(options.channels).forEach(ch => {
        this.channels[ch].sendNoteOn(note, options);
      });

      return this;

    }

    /**
     * Name of the MIDI output.
     *
     * @type {string}
     * @readonly
     */
    get name() {
      return this._midiOutput.name;
    }

    /**
     * ID string of the MIDI output. The ID is host-specific. Do not expect the same ID on different
     * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for
     * the same port.
     *
     * @type {string}
     * @readonly
     */
    get id() {
      return this._midiOutput.id;
    }

    /**
     * Output port's connection state: `pending`, `open` or `closed`.
     *
     * @type {string}
     * @readonly
     */
    get connection() {
      return this._midiOutput.connection;
    }

    /**
     * Name of the manufacturer of the device that makes this output port available.
     *
     * @type {string}
     * @readonly
     */
    get manufacturer() {
      return this._midiOutput.manufacturer;
    }

    /**
     * State of the output port: `connected` or `disconnected`.
     *
     * @type {string}
     * @readonly
     */
    get state() {
      return this._midiOutput.state;
    }

    /**
     * Type of the output port (it will always be: `output`).
     *
     * @type {string}
     * @readonly
     */
    get type() {
      return this._midiOutput.type;
    }

    /**
     * An integer to offset the octave of outgoing notes. By default, middle C (MIDI note number 60)
     * is placed on the 4th octave (C4).
     *
     * Note that this value is combined with the global offset value defined in
     * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) (if any).
     *
     * @type {number}
     *
     * @since 3.0
     */
    get octaveOffset() {
      return this._octaveOffset;
    }
    set octaveOffset(value) {

      if (this.validation) {
        value = parseInt(value);
        if (isNaN(value)) throw new TypeError("The 'octaveOffset' property must be an integer.");
      }

      this._octaveOffset = value;

    }

  }

  /**
   * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you
   * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object
   * to all the outputs listed in its [`destinations`](#destinations) property.
   *
   * If specific channels or message types have been defined in the [`channels`](#channels) or
   * [`types`](#types) properties, only messages matching the channels/types will be forwarded.
   *
   * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as
   * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.
   *
   * @license Apache-2.0
   * @since 3.0.0
   */
  class Forwarder {

    /**
     * Creates a `Forwarder` object.
     *
     * @param {Output|Output[]} [destinations=\[\]] An [`Output`](Output) object, or an array of such
     * objects, to forward the message to.
     *
     * @param {object} [options={}]
     * @param {string|string[]} [options.types=(all messages)] A MIDI message type or an array of such
     * types (`"noteon"`, `"controlchange"`, etc.), that the specified message must match in order to
     * be forwarded. If this option is not specified, all types of messages will be forwarded. Valid
     * messages are the ones found in either
     * [`SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES)
     * or [`CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * A MIDI channel number or an array of channel numbers that the message must match in order to be
     * forwarded. By default all MIDI channels are included (`1` to `16`).
     */
    constructor(destinations = [], options = {}) {

      /**
       * An array of [`Output`](Output) objects to forward the message to.
       * @type {Output[]}
       */
      this.destinations = [];

      /**
       * An array of message types (`"noteon"`, `"controlchange"`, etc.) that must be matched in order
       * for messages to be forwarded. By default, this array includes all
       * [`Enumerations.SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES) and
       * [`Enumerations.CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).
       * @type {string[]}
       */
      this.types = [
        ...Object.keys(Enumerations.SYSTEM_MESSAGES),
        ...Object.keys(Enumerations.CHANNEL_MESSAGES)
      ];

      /**
       * An array of MIDI channel numbers that the message must match in order to be forwarded. By
       * default, this array includes all MIDI channels (`1` to `16`).
       * @type {number[]}
       */
      this.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      /**
       * Indicates whether message forwarding is currently suspended or not in this forwarder.
       * @type {boolean}
       */
      this.suspended = false;

      // Make sure parameters are arrays
      if (!Array.isArray(destinations)) destinations = [destinations];
      if (options.types && !Array.isArray(options.types)) options.types = [options.types];
      if (options.channels && !Array.isArray(options.channels)) options.channels = [options.channels];

      if (wm$1.validation) {

        // Validate destinations
        destinations.forEach(destination => {
          if ( !(destination instanceof Output) ) {
            throw new TypeError("Destinations must be of type 'Output'.");
          }
        });

        // Validate types
        if (options.types !== undefined) {

          options.types.forEach(type => {
            if (
              ! Enumerations.SYSTEM_MESSAGES.hasOwnProperty(type) &&
              ! Enumerations.CHANNEL_MESSAGES.hasOwnProperty(type)
            ) {
              throw new TypeError("Type must be a valid message type.");
            }
          });

        }

        // Validate channels
        if (options.channels !== undefined) {

          options.channels.forEach(channel => {
            if (! Enumerations.MIDI_CHANNEL_NUMBERS.includes(channel) ) {
              throw new TypeError("MIDI channel must be between 1 and 16.");
            }
          });

        }

      }

      this.destinations = destinations;
      if (options.types) this.types = options.types;
      if (options.channels) this.channels = options.channels;

    }

    /**
     * Sends the specified message to the forwarder's destination(s) if it matches the specified
     * type(s) and channel(s).
     *
     * @param {Message} message The [`Message`](Message) object to forward.
     */
    forward(message) {

      // Abort if forwarding is currently suspended
      if (this.suspended) return;

      // Abort if this message type should not be forwarded
      if (!this.types.includes(message.type)) return;

      // Abort if this channel should not be forwarded
      if (message.channel && !this.channels.includes(message.channel)) return;

      // Forward
      this.destinations.forEach(destination => {
        if (wm$1.validation && !(destination instanceof Output)) return;
        destination.send(message);
      });

    }

  }

  /**
   * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input
   * device. This object is derived from the host's MIDI subsystem and should not be instantiated
   * directly.
   *
   * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)
   * property.
   *
   * @fires InputChannel#midimessage
   * @fires InputChannel#unknownmessage
   *
   * @fires InputChannel#noteoff
   * @fires InputChannel#noteon
   * @fires InputChannel#keyaftertouch
   * @fires InputChannel#programchange
   * @fires InputChannel#channelaftertouch
   * @fires InputChannel#pitchbend
   *
   * @fires InputChannel#allnotesoff
   * @fires InputChannel#allsoundoff
   * @fires InputChannel#localcontrol
   * @fires InputChannel#monomode
   * @fires InputChannel#omnimode
   * @fires InputChannel#resetallcontrollers
   *
   * @fires InputChannel#event:nrpn
   * @fires InputChannel#event:nrpn-dataentrycoarse
   * @fires InputChannel#event:nrpn-dataentryfine
   * @fires InputChannel#event:nrpn-dataincrement
   * @fires InputChannel#event:nrpn-datadecrement
   * @fires InputChannel#event:rpn
   * @fires InputChannel#event:rpn-dataentrycoarse
   * @fires InputChannel#event:rpn-dataentryfine
   * @fires InputChannel#event:rpn-dataincrement
   * @fires InputChannel#event:rpn-datadecrement
   *
   * @fires InputChannel#controlchange
   * @fires InputChannel#event:controlchange-controllerxxx
   * @fires InputChannel#event:controlchange-bankselectcoarse
   * @fires InputChannel#event:controlchange-modulationwheelcoarse
   * @fires InputChannel#event:controlchange-breathcontrollercoarse
   * @fires InputChannel#event:controlchange-footcontrollercoarse
   * @fires InputChannel#event:controlchange-portamentotimecoarse
   * @fires InputChannel#event:controlchange-dataentrycoarse
   * @fires InputChannel#event:controlchange-volumecoarse
   * @fires InputChannel#event:controlchange-balancecoarse
   * @fires InputChannel#event:controlchange-pancoarse
   * @fires InputChannel#event:controlchange-expressioncoarse
   * @fires InputChannel#event:controlchange-effectcontrol1coarse
   * @fires InputChannel#event:controlchange-effectcontrol2coarse
   * @fires InputChannel#event:controlchange-generalpurposecontroller1
   * @fires InputChannel#event:controlchange-generalpurposecontroller2
   * @fires InputChannel#event:controlchange-generalpurposecontroller3
   * @fires InputChannel#event:controlchange-generalpurposecontroller4
   * @fires InputChannel#event:controlchange-bankselectfine
   * @fires InputChannel#event:controlchange-modulationwheelfine
   * @fires InputChannel#event:controlchange-breathcontrollerfine
   * @fires InputChannel#event:controlchange-footcontrollerfine
   * @fires InputChannel#event:controlchange-portamentotimefine
   * @fires InputChannel#event:controlchange-dataentryfine
   * @fires InputChannel#event:controlchange-channelvolumefine
   * @fires InputChannel#event:controlchange-balancefine
   * @fires InputChannel#event:controlchange-panfine
   * @fires InputChannel#event:controlchange-expressionfine
   * @fires InputChannel#event:controlchange-effectcontrol1fine
   * @fires InputChannel#event:controlchange-effectcontrol2fine
   * @fires InputChannel#event:controlchange-damperpedal
   * @fires InputChannel#event:controlchange-portamento
   * @fires InputChannel#event:controlchange-sostenuto
   * @fires InputChannel#event:controlchange-softpedal
   * @fires InputChannel#event:controlchange-legatopedal
   * @fires InputChannel#event:controlchange-hold2
   * @fires InputChannel#event:controlchange-soundvariation
   * @fires InputChannel#event:controlchange-resonance
   * @fires InputChannel#event:controlchange-releasetime
   * @fires InputChannel#event:controlchange-attacktime
   * @fires InputChannel#event:controlchange-brightness
   * @fires InputChannel#event:controlchange-decaytime
   * @fires InputChannel#event:controlchange-vibratorate
   * @fires InputChannel#event:controlchange-vibratodepth
   * @fires InputChannel#event:controlchange-vibratodelay
   * @fires InputChannel#event:controlchange-generalpurposecontroller5
   * @fires InputChannel#event:controlchange-generalpurposecontroller6
   * @fires InputChannel#event:controlchange-generalpurposecontroller7
   * @fires InputChannel#event:controlchange-generalpurposecontroller8
   * @fires InputChannel#event:controlchange-portamentocontrol
   * @fires InputChannel#event:controlchange-highresolutionvelocityprefix
   * @fires InputChannel#event:controlchange-effect1depth
   * @fires InputChannel#event:controlchange-effect2depth
   * @fires InputChannel#event:controlchange-effect3depth
   * @fires InputChannel#event:controlchange-effect4depth
   * @fires InputChannel#event:controlchange-effect5depth
   * @fires InputChannel#event:controlchange-dataincrement
   * @fires InputChannel#event:controlchange-datadecrement
   * @fires InputChannel#event:controlchange-nonregisteredparameterfine
   * @fires InputChannel#event:controlchange-nonregisteredparametercoarse
   * @fires InputChannel#event:controlchange-registeredparameterfine
   * @fires InputChannel#event:controlchange-registeredparametercoarse
   * @fires InputChannel#event:controlchange-allsoundoff
   * @fires InputChannel#event:controlchange-resetallcontrollers
   * @fires InputChannel#event:controlchange-localcontrol
   * @fires InputChannel#event:controlchange-allnotesoff
   * @fires InputChannel#event:controlchange-omnimodeoff
   * @fires InputChannel#event:controlchange-omnimodeon
   * @fires InputChannel#event:controlchange-monomodeon
   * @fires InputChannel#event:controlchange-polymodeon
   * @fires InputChannel#event:
   *
   * @extends EventEmitter
   * @license Apache-2.0
   * @since 3.0.0
   */
  class InputChannel extends EventEmitter {

    /**
     * Creates an `InputChannel` object.
     *
     * @param {Input} input The [`Input`](Input) object this channel belongs to.
     * @param {number} number The channel's MIDI number (1-16).
     */
    constructor(input, number) {

      super();

      /**
       * @type {Input}
       * @private
       */
      this._input = input;

      /**
       * @type {number}
       * @private
       */
      this._number = number;

      /**
       * @type {number}
       * @private
       */
      this._octaveOffset = 0;

      /**
       * An array of messages that form the current NRPN sequence
       * @private
       * @type {Message[]}
       */
      this._nrpnBuffer = [];

      /**
       * An array of messages that form the current RPN sequence
       * @private
       * @type {Message[]}
       */
      this._rpnBuffer = [];

      /**
       * Indicates whether events for **Registered Parameter Number** and **Non-Registered Parameter
       * Number** should be dispatched. RPNs and NRPNs are composed of a sequence of specific
       * **control change** messages. When a valid sequence of such control change messages is
       * received, an [`rpn`](#event-rpn) or [`nrpn`](#event-nrpn) event will fire.
       *
       * If an invalid or out-of-order **control change** message is received, it will fall through
       * the collector logic and all buffered **control change** messages will be discarded as
       * incomplete.
       *
       * @type {boolean}
       */
      this.parameterNumberEventsEnabled = true;

      /**
       * Contains the current playing state of all MIDI notes of this channel (0-127). The state is
       * `true` for a currently playing note and `false` otherwise.
       * @type {boolean[]}
       */
      this.notesState = new Array(128).fill(false);

    }

    /**
     * Destroys the `InputChannel` by removing all listeners and severing the link with the MIDI
     * subsystem's input.
     */
    destroy() {
      this._input = null;
      this._number = null;
      this._octaveOffset = 0;
      this._nrpnBuffer = [];
      this.notesState = new Array(128).fill(false);
      this.parameterNumberEventsEnabled = false;
      this.removeListener();
    }

    /**
     * @param e MIDIMessageEvent
     * @private
     */
    _processMidiMessageEvent(e) {

      // Create and emit a new 'midimessage' event based on the incoming one
      const event = Object.assign({}, e);
      event.port = this.input;
      event.target = this;
      event.type = "midimessage";

      /**
       * Event emitted when a MIDI message of any kind is received by an `InputChannel`
       *
       * @event InputChannel#midimessage
       *
       * @type {object}
       *
       * @property {string} type `midimessage`
       * @property {InputChannel} target The object that dispatched the event.
       * @property {Input} port The `Input` that triggered the event.
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       */
      this.emit(event.type, event);

      // Parse the inbound event for regular MIDI messages
      this._parseEventForStandardMessages(event);

    }

    /**
     * Parses incoming channel events and emit standard MIDI message events (noteon, noteoff, etc.)
     * @param e Event
     * @private
     */
    _parseEventForStandardMessages(e) {

      const event = Object.assign({}, e);
      event.type = event.message.type || "unknownmessage";

      const data1 = e.message.dataBytes[0];
      const data2 = e.message.dataBytes[1];

      if ( event.type === "noteoff" || (event.type === "noteon" && data2 === 0) ) {

        this.notesState[data1] = false;
        event.type = "noteoff"; // necessary for note on with 0 velocity

        /**
         * Event emitted when a **note off** MIDI message has been received on the channel.
         *
         * @event InputChannel#noteoff
         *
         * @type {object}
         * @property {string} type `noteoff`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the incoming
         * MIDI message.
         * @property {number} timestamp The moment
         * ([`DOMHighResTimeStamp`](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp))
         * when the event occurred (in milliseconds since the navigation start of the document).
         *
         * @property {object} note A [`Note`](Note) object containing information such as note name,
         * octave and release velocity.
         * @property {number} value The release velocity amount expressed as a float between 0 and 1.
         * @property {number} rawValue The release velocity amount expressed as an integer (between 0
         * and 127).
         */

        // The object created when a noteoff event arrives is a Note with an attack velocity of 0.
        event.note = new Note(
          Utilities.offsetNumber(
            data1, this.octaveOffset + this.input.octaveOffset + wm$1.octaveOffset
          ),
          {
            rawAttack: 0,
            rawRelease: data2,
          }
        );

        event.value = Utilities.from7bitToFloat(data2);
        event.rawValue = data2;

        // Those are kept for backwards-compatibility but are gone from the documentation. They will
        // be removed in future versions (@deprecated).
        event.velocity = event.note.release;
        event.rawVelocity = event.note.rawRelease;

      } else if (event.type === "noteon") {

        this.notesState[data1] = true;

        /**
         * Event emitted when a **note on** MIDI message has been received.
         *
         * @event InputChannel#noteon
         *
         * @type {object}
         * @property {string} type `noteon`
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} note A [`Note`](Note) object containing information such as note name,
         * octave and release velocity.
         * @property {number} value The attack velocity amount expressed as a float between 0 and 1.
         * @property {number} rawValue The attack velocity amount expressed as an integer (between 0
         * and 127).
         */
        event.note = new Note(
          Utilities.offsetNumber(
            data1, this.octaveOffset + this.input.octaveOffset + wm$1.octaveOffset
          ),
          { rawAttack: data2 }
        );

        event.value = Utilities.from7bitToFloat(data2);
        event.rawValue = data2;

        // Those are kept for backwards-compatibility but are gone from the documentation. They will
        // be removed in future versions (@deprecated).
        event.velocity = event.note.attack;
        event.rawVelocity = event.note.rawAttack;

      } else if (event.type === "keyaftertouch") {

        /**
         * Event emitted when a **key-specific aftertouch** MIDI message has been received.
         *
         * @event InputChannel#keyaftertouch
         *
         * @type {object}
         * @property {string} type `"keyaftertouch"`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} note A [`Note`](Note) object containing information such as note name
         * and number.
         * @property {number} value The aftertouch amount expressed as a float between 0 and 1.
         * @property {number} rawValue The aftertouch amount expressed as an integer (between 0 and
         * 127).
         */
        event.note = new Note(
          Utilities.offsetNumber(
            data1, this.octaveOffset + this.input.octaveOffset + wm$1.octaveOffset
          )
        );

        // Aftertouch value
        event.value = Utilities.from7bitToFloat(data2);
        event.rawValue = data2;

        // @deprecated
        event.identifier = event.note.identifier;
        event.key = event.note.number;
        event.rawKey = data1;

      } else if (event.type === "controlchange") {

        /**
         * Event emitted when a **control change** MIDI message has been received.
         *
         * @event InputChannel#controlchange
         *
         * @type {object}
         * @property {string} type `controlchange`
         * @property {string} subtype The type of control change message that was received.
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */
        event.controller = {
          number: data1,
          name: Enumerations.CONTROL_CHANGE_MESSAGES[data1].name,
          description: Enumerations.CONTROL_CHANGE_MESSAGES[data1].description,
          position: Enumerations.CONTROL_CHANGE_MESSAGES[data1].position,
        };

        event.subtype = event.controller.name || "controller" + data1;
        event.value = Utilities.from7bitToFloat(data2);
        event.rawValue = data2;

        /**
         * Event emitted when a **control change** MIDI message has been received and that message is
         * targeting the controller numbered "xxx". Of course, "xxx" should be replaced by a valid
         * controller number (0-127).
         *
         * @event InputChannel#controlchange-controllerxxx
         *
         * @type {object}
         * @property {string} type `controlchange-controllerxxx`
         * @property {string} subtype The type of control change message that was received.
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */
        const numberedEvent = Object.assign({}, event);
        numberedEvent.type = `${event.type}-controller${data1}`;
        delete numberedEvent.subtype;
        this.emit(numberedEvent.type, numberedEvent);

        /**
         * Event emitted when a **controlchange-bankselectcoarse** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-bankselectcoarse
         *
         * @type {object}
         * @property {string} type `controlchange-bankselectcoarse`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-modulationwheelcoarse** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-modulationwheelcoarse
         *
         * @type {object}
         * @property {string} type `controlchange-modulationwheelcoarse`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-breathcontrollercoarse** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-breathcontrollercoarse
         *
         * @type {object}
         * @property {string} type `controlchange-breathcontrollercoarse`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-footcontrollercoarse** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-footcontrollercoarse
         *
         * @type {object}
         * @property {string} type `controlchange-footcontrollercoarse`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-portamentotimecoarse** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-portamentotimecoarse
         *
         * @type {object}
         * @property {string} type `controlchange-portamentotimecoarse`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-dataentrycoarse** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-dataentrycoarse
         *
         * @type {object}
         * @property {string} type `controlchange-dataentrycoarse`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-volumecoarse** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-volumecoarse
         *
         * @type {object}
         * @property {string} type `controlchange-volumecoarse`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-balancecoarse** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-balancecoarse
         *
         * @type {object}
         * @property {string} type `controlchange-balancecoarse`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-pancoarse** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-pancoarse
         *
         * @type {object}
         * @property {string} type `controlchange-pancoarse`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-expressioncoarse** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-expressioncoarse
         *
         * @type {object}
         * @property {string} type `controlchange-expressioncoarse`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-effectcontrol1coarse** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-effectcontrol1coarse
         *
         * @type {object}
         * @property {string} type `controlchange-effectcontrol1coarse`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-effectcontrol2coarse** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-effectcontrol2coarse
         *
         * @type {object}
         * @property {string} type `controlchange-effectcontrol2coarse`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-generalpurposecontroller1** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-generalpurposecontroller1
         *
         * @type {object}
         * @property {string} type `controlchange-generalpurposecontroller1`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-generalpurposecontroller2** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-generalpurposecontroller2
         *
         * @type {object}
         * @property {string} type `controlchange-generalpurposecontroller2`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-generalpurposecontroller3** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-generalpurposecontroller3
         *
         * @type {object}
         * @property {string} type `controlchange-generalpurposecontroller3`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-generalpurposecontroller4** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-generalpurposecontroller4
         *
         * @type {object}
         * @property {string} type `controlchange-generalpurposecontroller4`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-bankselectfine** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-bankselectfine
         *
         * @type {object}
         * @property {string} type `controlchange-bankselectfine`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-modulationwheelfine** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-modulationwheelfine
         *
         * @type {object}
         * @property {string} type `controlchange-modulationwheelfine`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-breathcontrollerfine** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-breathcontrollerfine
         *
         * @type {object}
         * @property {string} type `controlchange-breathcontrollerfine`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-footcontrollerfine** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-footcontrollerfine
         *
         * @type {object}
         * @property {string} type `controlchange-footcontrollerfine`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-portamentotimefine** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-portamentotimefine
         *
         * @type {object}
         * @property {string} type `controlchange-portamentotimefine`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-dataentryfine** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-dataentryfine
         *
         * @type {object}
         * @property {string} type `controlchange-dataentryfine`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-channelvolumefine** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-channelvolumefine
         *
         * @type {object}
         * @property {string} type `controlchange-channelvolumefine`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-balancefine** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-balancefine
         *
         * @type {object}
         * @property {string} type `controlchange-balancefine`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-panfine** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-panfine
         *
         * @type {object}
         * @property {string} type `controlchange-panfine`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-expressionfine** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-expressionfine
         *
         * @type {object}
         * @property {string} type `controlchange-expressionfine`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-effectcontrol1fine** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-effectcontrol1fine
         *
         * @type {object}
         * @property {string} type `controlchange-effectcontrol1fine`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-effectcontrol2fine** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-effectcontrol2fine
         *
         * @type {object}
         * @property {string} type `controlchange-effectcontrol2fine`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-damperpedal** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-damperpedal
         *
         * @type {object}
         * @property {string} type `controlchange-damperpedal`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-portamento** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-portamento
         *
         * @type {object}
         * @property {string} type `controlchange-portamento`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-sostenuto** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-sostenuto
         *
         * @type {object}
         * @property {string} type `controlchange-sostenuto`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-softpedal** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-softpedal
         *
         * @type {object}
         * @property {string} type `controlchange-softpedal`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-legatopedal** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-legatopedal
         *
         * @type {object}
         * @property {string} type `controlchange-legatopedal`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-hold2** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-hold2
         *
         * @type {object}
         * @property {string} type `controlchange-hold2`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-soundvariation** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-soundvariation
         *
         * @type {object}
         * @property {string} type `controlchange-soundvariation`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-resonance** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-resonance
         *
         * @type {object}
         * @property {string} type `controlchange-resonance`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-releasetime** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-releasetime
         *
         * @type {object}
         * @property {string} type `controlchange-releasetime`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-attacktime** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-attacktime
         *
         * @type {object}
         * @property {string} type `controlchange-attacktime`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-brightness** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-brightness
         *
         * @type {object}
         * @property {string} type `controlchange-brightness`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-decaytime** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-decaytime
         *
         * @type {object}
         * @property {string} type `controlchange-decaytime`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-vibratorate** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-vibratorate
         *
         * @type {object}
         * @property {string} type `controlchange-vibratorate`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-vibratodepth** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-vibratodepth
         *
         * @type {object}
         * @property {string} type `controlchange-vibratodepth`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-vibratodelay** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-vibratodelay
         *
         * @type {object}
         * @property {string} type `controlchange-vibratodelay`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-generalpurposecontroller5** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-generalpurposecontroller5
         *
         * @type {object}
         * @property {string} type `controlchange-generalpurposecontroller5`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-generalpurposecontroller6** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-generalpurposecontroller6
         *
         * @type {object}
         * @property {string} type `controlchange-generalpurposecontroller6`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-generalpurposecontroller7** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-generalpurposecontroller7
         *
         * @type {object}
         * @property {string} type `controlchange-generalpurposecontroller7`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-generalpurposecontroller8** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-generalpurposecontroller8
         *
         * @type {object}
         * @property {string} type `controlchange-generalpurposecontroller8`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-portamentocontrol** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-portamentocontrol
         *
         * @type {object}
         * @property {string} type `controlchange-portamentocontrol`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-highresolutionvelocityprefix** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-highresolutionvelocityprefix
         *
         * @type {object}
         * @property {string} type `controlchange-highresolutionvelocityprefix`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-effect1depth** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-effect1depth
         *
         * @type {object}
         * @property {string} type `controlchange-effect1depth`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-effect2depth** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-effect2depth
         *
         * @type {object}
         * @property {string} type `controlchange-effect2depth`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-effect3depth** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-effect3depth
         *
         * @type {object}
         * @property {string} type `controlchange-effect3depth`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-effect4depth** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-effect4depth
         *
         * @type {object}
         * @property {string} type `controlchange-effect4depth`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-effect5depth** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-effect5depth
         *
         * @type {object}
         * @property {string} type `controlchange-effect5depth`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-dataincrement** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-dataincrement
         *
         * @type {object}
         * @property {string} type `controlchange-dataincrement`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-datadecrement** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-datadecrement
         *
         * @type {object}
         * @property {string} type `controlchange-datadecrement`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-nonregisteredparameterfine** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-nonregisteredparameterfine
         *
         * @type {object}
         * @property {string} type `controlchange-nonregisteredparameterfine`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-nonregisteredparametercoarse** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-nonregisteredparametercoarse
         *
         * @type {object}
         * @property {string} type `controlchange-nonregisteredparametercoarse`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-registeredparameterfine** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-registeredparameterfine
         *
         * @type {object}
         * @property {string} type `controlchange-registeredparameterfine`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-registeredparametercoarse** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-registeredparametercoarse
         *
         * @type {object}
         * @property {string} type `controlchange-registeredparametercoarse`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-allsoundoff** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-allsoundoff
         *
         * @type {object}
         * @property {string} type `controlchange-allsoundoff`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-resetallcontrollers** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-resetallcontrollers
         *
         * @type {object}
         * @property {string} type `controlchange-resetallcontrollers`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-localcontrol** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-localcontrol
         *
         * @type {object}
         * @property {string} type `controlchange-localcontrol`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-allnotesoff** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-allnotesoff
         *
         * @type {object}
         * @property {string} type `controlchange-allnotesoff`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-omnimodeoff** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-omnimodeoff
         *
         * @type {object}
         * @property {string} type `controlchange-omnimodeoff`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-omnimodeon** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-omnimodeon
         *
         * @type {object}
         * @property {string} type `controlchange-omnimodeon`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-monomodeon** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-monomodeon
         *
         * @type {object}
         * @property {string} type `controlchange-monomodeon`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        /**
         * Event emitted when a **controlchange-polymodeon** MIDI message has been
         * received.
         *
         * @event InputChannel#controlchange-polymodeon
         *
         * @type {object}
         * @property {string} type `controlchange-polymodeon`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {object} controller
         * @property {object} controller.number The number of the controller.
         * @property {object} controller.name The usual name or function of the controller.
         * @property {object} controller.description A user-friendly representation of the
         * controller's default function
         * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The value expressed as an integer (between 0 and 127).
         */

        const namedEvent = Object.assign({}, event);
        namedEvent.type = `${event.type}-` + Enumerations.CONTROL_CHANGE_MESSAGES[data1].name;
        delete namedEvent.subtype;

        // Dispatch controlchange-"function" events only if the "function" is defined (not the generic
        // controllerXXX nomenclature)
        if (namedEvent.type.indexOf("controller") !== 0) {
          this.emit(namedEvent.type, namedEvent);
        }

        // Trigger channel mode message events (if appropriate)
        if (event.message.dataBytes[0] >= 120) this._parseChannelModeMessage(event);

        // Parse the inbound event to see if its part of an RPN/NRPN sequence
        if (
          this.parameterNumberEventsEnabled &&
          this._isRpnOrNrpnController(event.message.dataBytes[0])
        ) {
          this._parseEventForParameterNumber(event);
        }

      } else if (event.type === "programchange") {

        /**
         * Event emitted when a **program change** MIDI message has been received.
         *
         * @event InputChannel#programchange
         *
         * @type {object}
         * @property {string} type `programchange`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {number} value The value expressed as an integer between 0 and 127.
         * @property {number} rawValue  The raw MIDI value expressed as an integer between 0 and 127.
         */
        event.value = data1;
        event.rawValue = event.value;

      } else if (event.type === "channelaftertouch") {

        /**
         * Event emitted when a control change MIDI message has been received.
         *
         * @event InputChannel#channelaftertouch
         *
         * @type {object}
         * @property {string} type `channelaftertouch`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The raw MIDI value expressed as an integer between 0 and 127.
         */
        event.value = Utilities.from7bitToFloat(data1);
        event.rawValue = data1;

      } else if (event.type === "pitchbend") {

        /**
         * Event emitted when a pitch bend MIDI message has been received.
         *
         * @event InputChannel#pitchbend
         *
         * @type {object}
         * @property {string} type `pitchbend`
         *
         * @property {InputChannel} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         * @property {Message} message A [`Message`](Message) object containing information about the
         * incoming MIDI message.
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         *
         * @property {number} value The value expressed as a float between 0 and 1.
         * @property {number} rawValue The raw MIDI value expressed as an integer (between 0 and
         * 16383).
         */
        event.value = ((data2 << 7) + data1 - 8192) / 8192;
        event.rawValue = (data2 << 7) + data1;

      } else {
        event.type = "unknownmessage";
      }

      this.emit(event.type, event);

    }

    /**
     * @param e {Object}
     * @private
     */
    _parseChannelModeMessage(e) {

      // Make a shallow copy of the incoming event so we can use it as the new event.
      const event = Object.assign({}, e);
      event.type = event.controller.name;

      /**
       * Event emitted when an "all sound off" channel-mode MIDI message has been received.
       *
       * @event InputChannel#allsoundoff
       *
       * @type {object}
       * @property {string} type `allsoundoff`
       *
       * @property {InputChannel} target The object that dispatched the event.
       * @property {Input} port The `Input` that triggered the event.
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       */

      /**
       * Event emitted when a "reset all controllers" channel-mode MIDI message has been received.
       *
       * @event InputChannel#resetallcontrollers
       *
       * @type {object}
       *
       * @property {InputChannel} target The object that dispatched the event.
       * @property {Input} port The `Input` that triggered the event.
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       */

      /**
       * Event emitted when a "local control" channel-mode MIDI message has been received. The value
       * property of the event is set to either `true` (local control on) of `false` (local control
       * off).
       *
       * @event InputChannel#localcontrol
       *
       * @type {object}
       * @property {string} type `localcontrol`
       *
       * @property {InputChannel} target The object that dispatched the event.
       * @property {Input} port The `Input` that triggered the event.
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       *
       * @property {boolean} value For local control on, the value is `true`. For local control off,
       * the value is `false`.
       * @property {boolean} rawValue For local control on, the value is `127`. For local control off,
       * the value is `0`.
       */
      if (event.type === "localcontrol") {
        event.value = event.message.data[2] === 127 ? true : false;
        event.rawValue = event.message.data[2];
      }

      /**
       * Event emitted when an "all notes off" channel-mode MIDI message has been received.
       *
       * @event InputChannel#allnotesoff
       *
       * @type {object}
       * @property {string} type `allnotesoff`
       *
       * @property {InputChannel} target The object that dispatched the event.
       * @property {Input} port The `Input` that triggered the event.
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       */

      /**
       * Event emitted when an "omni mode" channel-mode MIDI message has been received. The value
       * property of the event is set to either `true` (omni mode on) of `false` (omni mode off).
       *
       * @event InputChannel#omnimode
       *
       * @type {object}
       * @property {string} type `"omnimode"`
       *
       * @property {InputChannel} target The object that dispatched the event.
       * @property {Input} port The `Input` that triggered the event.
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       *
       * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.
       * @property {boolean} rawValue The raw MIDI value
       */
      if (event.type === "omnimodeon") {
        event.type = "omnimode";
        event.value = true;
        event.rawValue = event.message.data[2];
      } else if (event.type === "omnimodeoff") {
        event.type = "omnimode";
        event.value = false;
        event.rawValue = event.message.data[2];
      }


      /**
       * Event emitted when a "mono/poly mode" MIDI message has been received. The value property of
       * the event is set to either `true` (mono mode on / poly mode off) or `false` (mono mode off /
       * poly mode on).
       *
       * @event InputChannel#monomode
       *
       * @type {object}
       * @property {string} type `monomode`
       *
       * @property {InputChannel} target The object that dispatched the event.
       * @property {Input} port The `Input` that triggered the event.
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       *
       * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.
       * @property {boolean} rawValue The raw MIDI value
       */
      if (event.type === "monomodeon") {
        event.type = "monomode";
        event.value = true;
        event.rawValue = event.message.data[2];
      } else if (event.type === "polymodeon") {
        event.type = "monomode";
        event.value = false;
        event.rawValue = event.message.data[2];
      }

      this.emit(event.type, event);

    }

    /**
     * Parses inbound events to identify RPN/NRPN sequences.
     * @param e Event
     * @private
     */
    _parseEventForParameterNumber(event) {

      // To make it more legible
      const controller = event.message.dataBytes[0];
      const value = event.message.dataBytes[1];

      // A. Check if the message is the start of an RPN (101) or NRPN (99) parameter declaration.
      if (controller === 99 || controller === 101) {

        this._nrpnBuffer = [];
        this._rpnBuffer = [];

        if (controller === 99) {                          // 99
          this._nrpnBuffer = [event.message];
        } else {                                          // 101
          // 127 is a reset so we ignore it
          if (value !== 127) this._rpnBuffer = [event.message];
        }

      // B. Check if the message is the end of an RPN (100) or NRPN (98) parameter declaration.
      } else if (controller === 98 || controller === 100) {

        if (controller === 98) {                          // 98

          // Flush the other buffer (they are mutually exclusive)
          this._rpnBuffer = [];

          // Check if we are in sequence
          if (this._nrpnBuffer.length === 1) {
            this._nrpnBuffer.push(event.message);
          } else {
            this._nrpnBuffer = []; // out of sequence
          }

        } else {                                          // 100

          // Flush the other buffer (they are mutually exclusive)
          this._nrpnBuffer = [];

          // 127 is a reset so we ignore it
          if (this._rpnBuffer.length === 1 && value !== 127) {
            this._rpnBuffer.push(event.message);
          } else {
            this._rpnBuffer = []; // out of sequence or reset
          }

        }

      // C. Check if the message is for data entry (6, 38, 96 or 97). Those messages trigger events.
      } else if (
        controller === 6 ||
        controller === 38 ||
        controller === 96 ||
        controller === 97
      ) {

        if (this._rpnBuffer.length === 2) {
          this._dispatchParameterNumberEvent(
            "rpn",
            this._rpnBuffer[0].dataBytes[1],
            this._rpnBuffer[1].dataBytes[1],
            event
          );
        } else if (this._nrpnBuffer.length === 2) {
          this._dispatchParameterNumberEvent(
            "nrpn",
            this._nrpnBuffer[0].dataBytes[1],
            this._nrpnBuffer[1].dataBytes[1],
            event
          );
        } else {
          this._nrpnBuffer = [];
          this._rpnBuffer = [];
        }

      }

    }

    /**
     * Indicates whether the specified controller can be part of an RPN or NRPN sequence
     * @param controller
     * @returns {boolean}
     * @private
     */
    _isRpnOrNrpnController(controller) {

      return controller === 6 ||
        controller === 38 ||
        controller === 96 ||
        controller === 97 ||
        controller === 98 ||
        controller === 99 ||
        controller === 100 ||
        controller === 101;

    }

    /**
     * @private
     */
    _dispatchParameterNumberEvent(type, paramMsb, paramLsb, e) {

      type = type === "nrpn" ? "nrpn" : "rpn";

      /**
       * Event emitted when an **RPN data entry coarse** message is received on the input. The
       * specific parameter to which the message applies can be found in the event's `parameter`
       * property. It is one of the ones defined in
       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).
       *
       * @event InputChannel#rpn-dataentrycoarse
       *
       * @type {object}
       *
       * @property {string} type `rpn-dataentrycoarse`
       * @property {InputChannel} target The object that dispatched the event.
       * @property {Input} port The `Input` that triggered the event.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {string} parameter The registered parameter's name
       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)
       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)
       * @property {number} value The received value as a normalized number between 0 and 1.
       * @property {number} rawValue The value as received (0-127)
       */

      /**
       * Event emitted when an **RPN data entry fine** message is received on the input. The
       * specific parameter to which the message applies can be found in the event's `parameter`
       * property. It is one of the ones defined in
       * [`EnumerationsREGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).
       *
       * @event InputChannel#rpn-dataentryfine
       *
       * @type {object}
       *
       * @property {string} type `rpn-dataentryfine`
       * @property {InputChannel} target The object that dispatched the event.
       * @property {Input} port The `Input` that triggered the event.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {string} parameter The registered parameter's name
       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)
       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)
       * @property {number} value The received value as a normalized number between 0 and 1.
       * @property {number} rawValue The value as received (0-127)
       */

      /**
       * Event emitted when an **RPN data increment** message is received on the input. The specific
       * parameter to which the message applies can be found in the event's `parameter` property. It
       * is one of the ones defined in
       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).
       *
       * @event InputChannel#rpn-dataincrement
       *
       * @type {object}
       *
       * @property {string} type `rpn-dataincrement`
       * @property {InputChannel} target The object that dispatched the event.
       * @property {Input} port The `Input` that triggered the event.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {string} parameter The registered parameter's name
       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)
       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)
       * @property {number} value The received value as a normalized number between 0 and 1.
       * @property {number} rawValue The value as received (0-127)
       */

      /**
       * Event emitted when an **RPN data decrement** message is received on the input. The specific
       * parameter to which the message applies can be found in the event's `parameter` property. It
       * is one of the ones defined in
       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).
       *
       * @event InputChannel#rpn-datadecrement
       *
       * @type {object}
       *
       * @property {string} type `rpn-datadecrement`
       * @property {InputChannel} target The object that dispatched the event.
       * @property {Input} port The `Input` that triggered the event.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {string} parameter The registered parameter's name
       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)
       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)
       * @property {number} value The received value as a normalized number between 0 and 1.
       * @property {number} rawValue The value as received (0-127)
       */

      /**
       * Event emitted when an **NRPN data entry coarse** message is received on the input. The
       * specific parameter to which the message applies can be found in the event's `parameter`
       * property. It is one of the ones defined in
       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).
       *
       * @event InputChannel#nrpn-dataentrycoarse
       *
       * @type {object}
       *
       * @property {string} type `nrpn-dataentrycoarse`
       * @property {InputChannel} target The object that dispatched the event.
       * @property {Input} port The `Input` that triggered the event.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {string} parameter The registered parameter's name
       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)
       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)
       * @property {number} value The received value as a normalized number between 0 and 1.
       * @property {number} rawValue The value as received (0-127)
       */

      /**
       * Event emitted when an **NRPN data entry fine** message is received on the input. The
       * specific parameter to which the message applies can be found in the event's `parameter`
       * property. It is one of the ones defined in
       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).
       *
       * @event InputChannel#nrpn-dataentryfine
       *
       * @type {object}
       *
       * @property {string} type `nrpn-dataentryfine`
       * @property {InputChannel} target The object that dispatched the event.
       * @property {Input} port The `Input` that triggered the event.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {string} parameter The registered parameter's name
       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)
       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)
       * @property {number} value The received value as a normalized number between 0 and 1.
       * @property {number} rawValue The value as received (0-127)
       */

      /**
       * Event emitted when an **NRPN data increment** message is received on the input. The specific
       * parameter to which the message applies can be found in the event's `parameter` property. It
       * is one of the ones defined in
       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).
       *
       * @event InputChannel#nrpn-dataincrement
       *
       * @type {object}
       *
       * @property {string} type `nrpn-dataincrement`
       * @property {InputChannel} target The object that dispatched the event.
       * @property {Input} port The `Input` that triggered the event.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {string} parameter The registered parameter's name
       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)
       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)
       * @property {number} value The received value as a normalized number between 0 and 1.
       * @property {number} rawValue The value as received (0-127)
       */

      /**
       * Event emitted when an **NRPN data decrement** message is received on the input. The specific
       * parameter to which the message applies can be found in the event's `parameter` property. It
       * is one of the ones defined in
       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).
       *
       * @event InputChannel#nrpn-datadecrement
       *
       * @type {object}
       *
       * @property {string} type `nrpn-datadecrement`
       * @property {InputChannel} target The object that dispatched the event.
       * @property {Input} port The `Input` that triggered the event.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {string} parameter The registered parameter's name
       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)
       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)
       * @property {number} value The received value as a normalized number between 0 and 1.
       * @property {number} rawValue The value as received (0-127)
       */

      const event = {
        target: e.target,
        timestamp: e.timestamp,
        message: e.message,
        parameterMsb: paramMsb,
        parameterLsb: paramLsb,
        value: Utilities.from7bitToFloat(e.message.dataBytes[1]),
        rawValue: e.message.dataBytes[1],
      };

      // Identify the parameter (by name for RPN and by number for NRPN)
      if (type === "rpn") {

        event.parameter = Object.keys(Enumerations.REGISTERED_PARAMETERS).find(key => {
          return Enumerations.REGISTERED_PARAMETERS[key][0] === paramMsb &&
            Enumerations.REGISTERED_PARAMETERS[key][1] === paramLsb;
        });

      } else {
        event.parameter = (paramMsb << 7) + paramLsb;
      }

      // Type and subtype
      const subtype = Enumerations.CONTROL_CHANGE_MESSAGES[e.message.dataBytes[0]].name;

      // Emit specific event
      event.type = `${type}-${subtype}`;
      this.emit(event.type, event);

      // Begin Legacy Block (remove in v4)
      const legacyEvent = Object.assign({}, event);
      if (legacyEvent.type === "nrpn-dataincrement") {
        legacyEvent.type = "nrpn-databuttonincrement";
      } else if (legacyEvent.type === "nrpn-datadecrement") {
        legacyEvent.type = "nrpn-databuttondecrement";
      } else if (legacyEvent.type === "rpn-dataincrement") {
        legacyEvent.type = "rpn-databuttonincrement";
      } else if (legacyEvent.type === "rpn-datadecrement") {
        legacyEvent.type = "rpn-databuttondecrement";
      }
      this.emit(legacyEvent.type, legacyEvent);
      // End Legacy Block

      /**
       * Event emitted when any NRPN message is received on the input. There are four subtypes of NRPN
       * messages:
       *
       *   * `nrpn-dataentrycoarse`
       *   * `nrpn-dataentryfine`
       *   * `nrpn-dataincrement`
       *   * `nrpn-datadecrement`
       *
       * The parameter to which the message applies can be found in the event's `parameter` property.
       *
       * @event InputChannel#nrpn
       *
       * @type {object}
       *
       * @property {string} type `nrpn`
       * @property {string} subtype The precise type of NRPN message that was received.
       * @property {InputChannel} target The object that dispatched the event.
       * @property {Input} port The `Input` that triggered the event.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {number} parameter The non-registered parameter number (0-16383)
       * @property {number} parameterMsb The MSB portion of the non-registered parameter number
       * (0-127)
       * @property {number} parameterLsb: The LSB portion of the non-registered parameter number
       * (0-127)
       * @property {number} value The received value as a normalized number between 0 and 1.
       * @property {number} rawValue The value as received (0-127)
       */

      /**
       * Event emitted when any RPN message is received on the input. There are four subtypes of RPN
       * messages:
       *
       *   * `rpn-dataentrycoarse`
       *   * `rpn-dataentryfine`
       *   * `rpn-dataincrement`
       *   * `rpn-datadecrement`
       *
       * The parameter to which the message applies can be found in the event's `parameter` property.
       * It is one of the ones defined in
       * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).
       *
       * @event InputChannel#rpn
       *
       * @type {object}
       *
       * @property {string} type `rpn`
       * @property {string} subtype The precise type of RPN message that was received.
       * @property {InputChannel} target The object that dispatched the event.
       * @property {Input} port The `Input` that triggered the event.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {string} parameter The registered parameter's name
       * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)
       * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)
       * @property {number} value The received value as a normalized number between 0 and 1.
       * @property {number} rawValue The value as received (0-127)
       */

      // Emit general event
      event.type = type;
      event.subtype = subtype;
      this.emit(event.type, event);

    }

    /**
     * @deprecated since version 3.
     * @private
     */
    getChannelModeByNumber(number) {

      if (wm$1.validation) {
        console.warn(
          "The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class."
        );
        number = Math.floor(number);
      }

      return Utilities.getChannelModeByNumber(number);

    }

    /**
     * @deprecated since version 3.
     * @private
     */
    getCcNameByNumber(number) {

      if (wm$1.validation) {
        console.warn(
          "The 'getCcNameByNumber()' method has been moved to the 'Utilities' class."
        );
        number = parseInt(number);
        if ( !(number >= 0 && number <= 127) ) throw new RangeError("Invalid control change number.");
      }

      return Utilities.getCcNameByNumber(number);

    }

    /**
     * Returns the playing status of the specified note (`true` if the note is currently playing,
     * `false` if it is not). The `note` parameter can be an unsigned integer (0-127), a note
     * identifier (`"C4"`, `"G#5"`, etc.) or a [`Note`]{@link Note} object.
     *
     * IF the note is specified using an integer (0-127), no octave offset will be applied.
     *
     * @param {number|string|Note} note The note to get the state for. The
     * [`octaveOffset`](#octaveOffset) (channel, input and global) will be factored in for note
     * identifiers and [`Note`]{@link Note} objects.
     * @returns {boolean}
     * @since version 3.0.0
     */
    getNoteState(note) {

      // If it's a note object, we simply use the identifier
      if (note instanceof Note) note = note.identifier;

      const number = Utilities.guessNoteNumber(
        note,
        wm$1.octaveOffset + this.input.octaveOffset + this.octaveOffset
      );

      return this.notesState[number];

    }

    /**
     * An integer to offset the reported octave of incoming note-specific messages (`noteon`,
     * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th
     * octave (C4).
     *
     * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If
     * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.
     *
     * Note that this value is combined with the global offset value defined by
     * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) object and with the value defined on the parent
     * input object with [`Input.octaveOffset`](Input#octaveOffset).
     *
     * @type {number}
     *
     * @since 3.0
     */
    get octaveOffset() {
      return this._octaveOffset;
    }
    set octaveOffset(value) {

      if (this.validation) {
        value = parseInt(value);
        if (isNaN(value)) throw new TypeError("The 'octaveOffset' property must be an integer.");
      }

      this._octaveOffset = value;

    }

    /**
     * The [`Input`](Input) this channel belongs to.
     * @type {Input}
     * @since 3.0
     */
    get input() {
      return this._input;
    }

    /**
     * This channel's MIDI number (1-16).
     * @type {number}
     * @since 3.0
     */
    get number() {
      return this._number;
    }

    /**
     * Whether RPN/NRPN events are parsed and dispatched.
     * @type {boolean}
     * @since 3.0
     * @deprecated Use parameterNumberEventsEnabled instead.
     * @private
     */
    get nrpnEventsEnabled() {
      return this.parameterNumberEventsEnabled;
    }
    set nrpnEventsEnabled(value) {

      if (this.validation) {
        value = !!value;
      }

      this.parameterNumberEventsEnabled = value;

    }

  }

  /**
   * The `Message` class represents a single MIDI message. It has several properties that make it
   * easy to make sense of the binary data it contains.
   *
   * @license Apache-2.0
   * @since 3.0.0
   */
  class Message {

    /**
     * Creates a new `Message` object from raw MIDI data.
     *
     * @param {Uint8Array} data The raw data of the MIDI message as a
     * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)
     * of integers between `0` and `255`.
     */
    constructor(data) {

      /**
       * A
       * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)
       * containing the bytes of the MIDI message. Each byte is an integer between `0` and `255`.
       *
       * @type {Uint8Array}
       * @readonly
       */
      this.rawData = data;

      /**
       * An array containing all the bytes of the MIDI message. Each byte is an integer between `0`
       * and `255`.
       *
       * @type {number[]}
       * @readonly
       */
      this.data = Array.from(this.rawData);

      /**
       * The MIDI status byte of the message as an integer between `0` and `255`.
       *
       * @type {number}
       * @readonly
       */
      this.statusByte = this.rawData[0];

      /**
       * A
       * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)
       * of the data byte(s) of the MIDI message. When the message is a system exclusive message
       * (sysex), `rawDataBytes` explicitly excludes the manufacturer ID and the sysex end byte so
       * only the actual data is included.
       *
       * @type {Uint8Array}
       * @readonly
       */
      this.rawDataBytes = this.rawData.slice(1);

      /**
       * An array of the the data byte(s) of the MIDI message (as opposed to the status byte). When
       * the message is a system exclusive message (sysex), `dataBytes` explicitly excludes the
       * manufacturer ID and the sysex end byte so only the actual data is included.
       *
       * @type {number[]}
       * @readonly
       */
      this.dataBytes = this.data.slice(1);

      /**
       * A boolean indicating whether the MIDI message is a channel-specific message.
       *
       * @type {boolean}
       * @readonly
       */
      this.isChannelMessage = false;

      /**
       * A boolean indicating whether the MIDI message is a system message (not specific to a
       * channel).
       *
       * @type {boolean}
       * @readonly
       */
      this.isSystemMessage = false;

      /**
       * An integer identifying the MIDI command. For channel-specific messages, the value is 4-bit
       * and will be between `8` and `14`. For system messages, the value will be between `240` and
       * `255`.
       *
       * @type {number}
       * @readonly
       */
      this.command = undefined;

      /**
       * The MIDI channel number (`1` - `16`) that the message is targeting. This is only for
       * channel-specific messages. For system messages, this will be left `undefined`.
       *
       * @type {number}
       * @readonly
       */
      this.channel = undefined;

      /**
       * When the message is a system exclusive message (sysex), this property contains an array with
       * either 1 or 3 entries that identify the manufacturer targeted by the message.
       *
       * To know how to translate these entries into manufacturer names, check out the official list:
       * https://www.midi.org/specifications-old/item/manufacturer-id-numbers
       *
       * @type {number[]}
       * @readonly
       */
      this.manufacturerId = undefined;

      /**
       * The type of message as a string (`"noteon"`, `"controlchange"`, `"sysex"`, etc.)
       *
       * @type {string}
       * @readonly
       */
      this.type = undefined;

      // Assign values to property that vary according to whether they are channel-specific or system
      if (this.statusByte < 240) {
        this.isChannelMessage = true;
        this.command = this.statusByte >> 4;
        this.channel = (this.statusByte & 0b00001111) + 1;
      } else {
        this.isSystemMessage = true;
        this.command = this.statusByte;
      }

      // Assign type (depending on whether the message is channel-specific or system)
      if (this.isChannelMessage) {
        this.type = Utilities.getPropertyByValue(Enumerations.CHANNEL_MESSAGES, this.command);
      } else if (this.isSystemMessage) {
        this.type = Utilities.getPropertyByValue(Enumerations.SYSTEM_MESSAGES, this.command);
      }

      // When the message is a sysex message, we add a manufacturer property and strip out the id from
      // dataBytes and rawDataBytes.
      if (this.statusByte === Enumerations.SYSTEM_MESSAGES.sysex) {

        if (this.dataBytes[0] === 0) {
          this.manufacturerId = this.dataBytes.slice(0, 3);
          this.dataBytes = this.dataBytes.slice(3, this.rawDataBytes.length - 1);
          this.rawDataBytes = this.rawDataBytes.slice(3, this.rawDataBytes.length - 1);
        } else {
          this.manufacturerId = [this.dataBytes[0]];
          this.dataBytes = this.dataBytes.slice(1, this.dataBytes.length - 1);
          this.rawDataBytes = this.rawDataBytes.slice(1, this.rawDataBytes.length - 1);
        }

      }

    }

  }

  /**
   * The `Input` class represents a single MIDI input port. This object is automatically instantiated
   * by the library according to the host's MIDI subsystem and does not need to be directly
   * instantiated. Instead, you can access all `Input` objects by referring to the
   * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as
   * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and
   * [`WebMidi.getInputById()`](WebMidi#getInputById).
   *
   * Note that a single MIDI device may expose several inputs and/or outputs.
   *
   * **Important**: the `Input` class does not directly fire channel-specific MIDI messages
   * (such as [`noteon`](InputChannel#event:noteon) or
   * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)
   * object does that. However, you can still use the
   * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple
   * [`InputChannel`](InputChannel) objects at once.
   *
   * @fires Input#opened
   * @fires Input#disconnected
   * @fires Input#closed
   * @fires Input#midimessage
   *
   * @fires Input#sysex
   * @fires Input#timecode
   * @fires Input#songposition
   * @fires Input#songselect
   * @fires Input#tunerequest
   * @fires Input#clock
   * @fires Input#start
   * @fires Input#continue
   * @fires Input#stop
   * @fires Input#activesensing
   * @fires Input#reset
   *
   * @fires Input#unknownmidimessage
   *
   * @extends EventEmitter
   * @license Apache-2.0
   */
  class Input extends EventEmitter {

    /**
     * Creates an `Input` object.
     *
     * @param {MIDIInput} midiInput [`MIDIInput`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInput)
     * object as provided by the MIDI subsystem (Web MIDI API).
     */
    constructor(midiInput) {

      super();

      /**
       * Reference to the actual MIDIInput object
       * @private
       */
      this._midiInput = midiInput;

      /**
       * @type {number}
       * @private
       */
      this._octaveOffset = 0;

      /**
       * Array containing the 16 [`InputChannel`](InputChannel) objects available for this `Input`. The
       * channels are numbered 1 through 16.
       *
       * @type {InputChannel[]}
       */
      this.channels = [];
      for (let i = 1; i <= 16; i++) this.channels[i] = new InputChannel(this, i);

      /**
       * @type {Forwarder[]}
       * @private
       */
      this._forwarders = [];

      // Setup listeners
      this._midiInput.onstatechange = this._onStateChange.bind(this);
      this._midiInput.onmidimessage = this._onMidiMessage.bind(this);

    }

    /**
     * Destroys the `Input` by removing all listeners, emptying the [`channels`](#channels) array and
     * unlinking the MIDI subsystem. This is mostly for internal use.
     *
     * @returns {Promise<void>}
     */
    async destroy() {
      this.removeListener();
      this.channels.forEach(ch => ch.destroy());
      this.channels = [];
      this._forwarders = [];
      if (this._midiInput) {
        this._midiInput.onstatechange = null;
        this._midiInput.onmidimessage = null;
      }
      await this.close();
      this._midiInput = null;
    }

    /**
     * Executed when a `"statechange"` event occurs.
     *
     * @param e
     * @private
     */
    _onStateChange(e) {

      let event = {
        timestamp: wm$1.time,
        target: this,
        port: this // for consistency
      };

      if (e.port.connection === "open") {

        /**
         * Event emitted when the `Input` has been opened by calling the [`open()`]{@link #open}
         * method.
         *
         * @event Input#opened
         * @type {object}
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         * @property {string} type `opened`
         * @property {Input} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         */
        event.type = "opened";
        this.emit("opened", event);

      } else if (e.port.connection === "closed" && e.port.state === "connected") {

        /**
         * Event emitted when the `Input` has been closed by calling the
         * [`close()`]{@link #close} method.
         *
         * @event Input#closed
         * @type {object}
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         * @property {string} type `closed`
         * @property {Input} target The object that dispatched the event.
         * @property {Input} port The `Input` that triggered the event.
         */
        event.type = "closed";
        this.emit("closed", event);

      } else if (e.port.connection === "closed" && e.port.state === "disconnected") {

        /**
         * Event emitted when the `Input` becomes unavailable. This event is typically fired
         * when the MIDI device is unplugged.
         *
         * @event Input#disconnected
         * @type {object}
         * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
         * milliseconds since the navigation start of the document).
         * @property {string} type `disconnected`
         * @property {Input} port Object with properties describing the {@link Input} that was
         * disconnected. This is not the actual `Input` as it is no longer available.
         * @property {Input} target The object that dispatched the event.
         */
        event.type = "disconnected";
        event.port = {
          connection: e.port.connection,
          id: e.port.id,
          manufacturer: e.port.manufacturer,
          name: e.port.name,
          state: e.port.state,
          type: e.port.type
        };
        this.emit("disconnected", event);

      } else if (e.port.connection === "pending" && e.port.state === "disconnected") ; else {
        console.warn("This statechange event was not caught: ", e.port.connection, e.port.state);
      }

    }

    /**
     * Executed when a `"midimessage"` event is received
     * @param e
     * @private
     */
    _onMidiMessage(e) {

      // Create Message object from MIDI data
      const message = new Message(e.data);

      /**
       * Event emitted when any MIDI message is received on an `Input`.
       *
       * @event Input#midimessage
       *
       * @type {object}
       *
       * @property {Input} port The `Input` that triggered the event.
       * @property {Input} target The object that dispatched the event.
       * @property {Message} message A [`Message`](Message) object containing information about the
       * incoming MIDI message.
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
       * milliseconds since the navigation start of the document).
       * @property {string} type `midimessage`
       *
       * @since 2.1
       */
      const event = {
        port: this,
        target: this,
        message: message,
        timestamp: e.timeStamp,
        type: "midimessage",

        data: message.data,           // @deprecated (will be removed in v4)
        rawData: message.data,        // @deprecated (will be removed in v4)
        statusByte: message.data[0],  // @deprecated (will be removed in v4)
        dataBytes: message.dataBytes  // @deprecated (will be removed in v4)
      };

      this.emit("midimessage", event);

      // Messages are forwarded to InputChannel if they are channel messages or parsed locally for
      // system messages.
      if (message.isSystemMessage) {           // system messages
        this._parseEvent(event);
      } else if (message.isChannelMessage) {   // channel messages
        this.channels[message.channel]._processMidiMessageEvent(event);
      }

      // Forward message if forwarders have been defined
      this._forwarders.forEach(forwarder => forwarder.forward(message));

    }

    /**
     * @private
     */
    _parseEvent(e) {

      // Make a shallow copy of the incoming event so we can use it as the new event.
      const event = Object.assign({}, e);
      event.type = event.message.type || "unknownmidimessage";

      // Add custom property for 'songselect'
      if (event.type === "songselect") {
        event.song = e.data[1] + 1; // deprecated
        event.value = e.data[1];
        event.rawValue = event.value;
      }

      // Emit event
      this.emit(event.type, event);

    }

    /**
     * Opens the input for usage. This is usually unnecessary as the port is opened automatically when
     * WebMidi is enabled.
     *
     * @returns {Promise<Input>} The promise is fulfilled with the `Input` object.
     */
    async open() {

      // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly
      // opened, it is implicitly opened (asynchronously) when assigning a listener to the
      // `onmidimessage` property of the `MIDIInput`. We do it explicitly so that 'connected' events
      // are dispatched immediately and that we are ready to listen.
      try {
        await this._midiInput.open();
      } catch (err) {
        return Promise.reject(err);
      }

      return Promise.resolve(this);

    }

    /**
     * Closes the input. When an input is closed, it cannot be used to listen to MIDI messages until
     * the input is opened again by calling [`Input.open()`](Input#open).
     *
     * **Note**: if what you want to do is stop events from being dispatched, you should use
     * [`eventsSuspended`](#eventsSuspended) instead.
     *
     * @returns {Promise<Input>} The promise is fulfilled with the `Input` object
     */
    async close() {

      // We close the port. This triggers a statechange event which, in turn, will emit the 'closed'
      // event.
      if (!this._midiInput) return Promise.resolve(this);

      try {
        await this._midiInput.close();
      } catch (err) {
        return Promise.reject(err);
      }

      return Promise.resolve(this);

    }

    /**
     * @private
     * @deprecated since v3.0.0 (moved to 'Utilities' class)
     */
    getChannelModeByNumber() {
      if (wm$1.validation) {
        console.warn(
          "The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class."
        );
      }
    }

    /**
     * Adds an event listener that will trigger a function callback when the specified event is
     * dispatched. The event usually is **input-wide** but can also be **channel-specific**.
     *
     * Input-wide events do not target a specific MIDI channel so it makes sense to listen for them
     * at the `Input` level and not at the [`InputChannel`](InputChannel) level. Channel-specific
     * events target a specific channel. Usually, in this case, you would add the listener to the
     * [`InputChannel`](InputChannel) object. However, as a convenience, you can also listen to
     * channel-specific events directly on an `Input`. This allows you to react to a channel-specific
     * event no matter which channel it actually came through.
     *
     * When listening for an event, you simply need to specify the event name and the function to
     * execute:
     *
     * ```javascript
     * const listener = WebMidi.inputs[0].addListener("midimessage", e => {
     *   console.log(e);
     * });
     * ```
     *
     * Calling the function with an input-wide event (such as
     * [`"midimessage"`]{@link #event:midimessage}), will return the [`Listener`](Listener) object
     * that was created.
     *
     * If you call the function with a channel-specific event (such as
     * [`"noteon"`]{@link InputChannel#event:noteon}), it will return an array of all
     * [`Listener`](Listener) objects that were created (one for each channel):
     *
     * ```javascript
     * const listeners = WebMidi.inputs[0].addListener("noteon", someFunction);
     * ```
     *
     * You can also specify which channels you want to add the listener to:
     *
     * ```javascript
     * const listeners = WebMidi.inputs[0].addListener("noteon", someFunction, {channels: [1, 2, 3]});
     * ```
     *
     * In this case, `listeners` is an array containing 3 [`Listener`](Listener) objects. The order of
     * the listeners in the array follows the order the channels were specified in.
     *
     * Note that, when adding channel-specific listeners, it is the [`InputChannel`](InputChannel)
     * instance that actually gets a listener added and not the `Input` instance. You can check that
     * by calling [`InputChannel.hasListener()`](InputChannel#hasListener()).
     *
     * There are 8 families of events you can listen to:
     *
     * 1. **MIDI System Common** Events (input-wide)
     *
     *    * [`songposition`]{@link Input#event:songposition}
     *    * [`songselect`]{@link Input#event:songselect}
     *    * [`sysex`]{@link Input#event:sysex}
     *    * [`timecode`]{@link Input#event:timecode}
     *    * [`tunerequest`]{@link Input#event:tunerequest}
     *
     * 2. **MIDI System Real-Time** Events (input-wide)
     *
     *    * [`clock`]{@link Input#event:clock}
     *    * [`start`]{@link Input#event:start}
     *    * [`continue`]{@link Input#event:continue}
     *    * [`stop`]{@link Input#event:stop}
     *    * [`activesensing`]{@link Input#event:activesensing}
     *    * [`reset`]{@link Input#event:reset}
     *
     * 3. **State Change** Events (input-wide)
     *
     *    * [`opened`]{@link Input#event:opened}
     *    * [`closed`]{@link Input#event:closed}
     *    * [`disconnected`]{@link Input#event:disconnected}
     *
     * 4. **Catch-All** Events (input-wide)
     *
     *    * [`midimessage`]{@link Input#event:midimessage}
     *    * [`unknownmidimessage`]{@link Input#event:unknownmidimessage}
     *
     * 5. **Channel Voice** Events (channel-specific)
     *
     *    * [`channelaftertouch`]{@link InputChannel#event:channelaftertouch}
     *    * [`controlchange`]{@link InputChannel#event:controlchange}
     *      * [`controlchange-controller0`]{@link InputChannel#event:controlchange-controller0}
     *      * [`controlchange-controller1`]{@link InputChannel#event:controlchange-controller1}
     *      * [`controlchange-controller2`]{@link InputChannel#event:controlchange-controller2}
     *      * (...)
     *      * [`controlchange-controller127`]{@link InputChannel#event:controlchange-controller127}
     *    * [`keyaftertouch`]{@link InputChannel#event:keyaftertouch}
     *    * [`noteoff`]{@link InputChannel#event:noteoff}
     *    * [`noteon`]{@link InputChannel#event:noteon}
     *    * [`pitchbend`]{@link InputChannel#event:pitchbend}
     *    * [`programchange`]{@link InputChannel#event:programchange}
     *
     *    Note: you can listen for a specific control change message by using an event name like this:
     *    `controlchange-controller23`, `controlchange-controller99`, `controlchange-controller122`,
     *    etc.
     *
     * 6. **Channel Mode** Events (channel-specific)
     *
     *    * [`allnotesoff`]{@link InputChannel#event:allnotesoff}
     *    * [`allsoundoff`]{@link InputChannel#event:allsoundoff}
     *    * [`localcontrol`]{@link InputChannel#event:localcontrol}
     *    * [`monomode`]{@link InputChannel#event:monomode}
     *    * [`omnimode`]{@link InputChannel#event:omnimode}
     *    * [`resetallcontrollers`]{@link InputChannel#event:resetallcontrollers}
     *
     * 7. **NRPN** Events (channel-specific)
     *
     *    * [`nrpn`]{@link InputChannel#event:nrpn}
     *    * [`nrpn-dataentrycoarse`]{@link InputChannel#event:nrpn-dataentrycoarse}
     *    * [`nrpn-dataentryfine`]{@link InputChannel#event:nrpn-dataentryfine}
     *    * [`nrpn-dataincrement`]{@link InputChannel#event:nrpn-dataincrement}
     *    * [`nrpn-datadecrement`]{@link InputChannel#event:nrpn-datadecrement}
     *
     * 8. **RPN** Events (channel-specific)
     *
     *    * [`rpn`]{@link InputChannel#event:rpn}
     *    * [`rpn-dataentrycoarse`]{@link InputChannel#event:rpn-dataentrycoarse}
     *    * [`rpn-dataentryfine`]{@link InputChannel#event:rpn-dataentryfine}
     *    * [`rpn-dataincrement`]{@link InputChannel#event:rpn-dataincrement}
     *    * [`rpn-datadecrement`]{@link InputChannel#event:rpn-datadecrement}
     *
     * @param event {string | EventEmitter.ANY_EVENT} The type of the event.
     *
     * @param listener {function} A callback function to execute when the specified event is detected.
     * This function will receive an event parameter object. For details on this object's properties,
     * check out the documentation for the various events (links above).
     *
     * @param {object} [options={}]
     *
     * @param {array} [options.arguments] An array of arguments which will be passed separately to the
     * callback function. This array is stored in the [`arguments`](Listener#arguments) property of
     * the [`Listener`](Listener) object and can be retrieved or modified as desired.
     *
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * An integer between 1 and 16 or an array of such integers representing the MIDI channel(s) to
     * listen on. If no channel is specified, all channels will be used. This parameter is ignored for
     * input-wide events.
     *
     * @param {object} [options.context=this] The value of `this` in the callback function.
     *
     * @param {number} [options.duration=Infinity] The number of milliseconds before the listener
     * automatically expires.
     *
     * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning
     * of the listeners array and thus be triggered before others.
     *
     * @param {number} [options.remaining=Infinity] The number of times after which the callback
     * should automatically be removed.
     *
     * @returns {Listener|Listener[]} If the event is input-wide, a single [`Listener`](Listener)
     * object is returned. If the event is channel-specific, an array of all the
     * [`Listener`](Listener) objects is returned (one for each channel).
     */
    addListener(event, listener, options = {}) {

      if (wm$1.validation) {

        // Legacy compatibility
        if (typeof options === "function") {
          let channels = (listener != undefined) ? [].concat(listener) : undefined; // clone
          listener = options;
          options = {channels: channels};
        }

      }

      // Check if the event is channel-specific or input-wide
      if (Enumerations.CHANNEL_EVENTS.includes(event)) {

        // If no channel defined, use all.
        if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

        let listeners = [];

        Utilities.sanitizeChannels(options.channels).forEach(ch => {
          listeners.push(this.channels[ch].addListener(event, listener, options));
        });

        return listeners;

      } else {

        return super.addListener(event, listener, options);

      }

    }

    /**
     * Adds a one-time event listener that will trigger a function callback when the specified event
     * happens. The event can be **channel-bound** or **input-wide**. Channel-bound events are
     * dispatched by [`InputChannel`]{@link InputChannel} objects and are tied to a specific MIDI
     * channel while input-wide events are dispatched by the `Input` object itself and are not tied
     * to a specific channel.
     *
     * Calling the function with an input-wide event (such as
     * [`"midimessage"`]{@link #event:midimessage}), will return the [`Listener`](Listener) object
     * that was created.
     *
     * If you call the function with a channel-specific event (such as
     * [`"noteon"`]{@link InputChannel#event:noteon}), it will return an array of all
     * [`Listener`](Listener) objects that were created (one for each channel):
     *
     * ```javascript
     * const listeners = WebMidi.inputs[0].addOneTimeListener("noteon", someFunction);
     * ```
     *
     * You can also specify which channels you want to add the listener to:
     *
     * ```javascript
     * const listeners = WebMidi.inputs[0].addOneTimeListener("noteon", someFunction, {channels: [1, 2, 3]});
     * ```
     *
     * In this case, the `listeners` variable contains an array of 3 [`Listener`](Listener) objects.
     *
     * The code above will add a listener for the `"noteon"` event and call `someFunction` when the
     * event is triggered on MIDI channels `1`, `2` or `3`.
     *
     * Note that, when adding events to channels, it is the [`InputChannel`](InputChannel) instance
     * that actually gets a listener added and not the `Input` instance.
     *
     * Note: if you want to add a listener to a single MIDI channel you should probably do so directly
     * on the [`InputChannel`](InputChannel) object itself.
     *
     * There are 8 families of events you can listen to:
     *
     * 1. **MIDI System Common** Events (input-wide)
     *
     *    * [`songposition`]{@link Input#event:songposition}
     *    * [`songselect`]{@link Input#event:songselect}
     *    * [`sysex`]{@link Input#event:sysex}
     *    * [`timecode`]{@link Input#event:timecode}
     *    * [`tunerequest`]{@link Input#event:tunerequest}
     *
     * 2. **MIDI System Real-Time** Events (input-wide)
     *
     *    * [`clock`]{@link Input#event:clock}
     *    * [`start`]{@link Input#event:start}
     *    * [`continue`]{@link Input#event:continue}
     *    * [`stop`]{@link Input#event:stop}
     *    * [`activesensing`]{@link Input#event:activesensing}
     *    * [`reset`]{@link Input#event:reset}
     *
     * 3. **State Change** Events (input-wide)
     *
     *    * [`opened`]{@link Input#event:opened}
     *    * [`closed`]{@link Input#event:closed}
     *    * [`disconnected`]{@link Input#event:disconnected}
     *
     * 4. **Catch-All** Events (input-wide)
     *
     *    * [`midimessage`]{@link Input#event:midimessage}
     *    * [`unknownmidimessage`]{@link Input#event:unknownmidimessage}
     *
     * 5. **Channel Voice** Events (channel-specific)
     *
     *    * [`channelaftertouch`]{@link InputChannel#event:channelaftertouch}
     *    * [`controlchange`]{@link InputChannel#event:controlchange}
     *      * [`controlchange-controller0`]{@link InputChannel#event:controlchange-controller0}
     *      * [`controlchange-controller1`]{@link InputChannel#event:controlchange-controller1}
     *      * [`controlchange-controller2`]{@link InputChannel#event:controlchange-controller2}
     *      * (...)
     *      * [`controlchange-controller127`]{@link InputChannel#event:controlchange-controller127}
     *    * [`keyaftertouch`]{@link InputChannel#event:keyaftertouch}
     *    * [`noteoff`]{@link InputChannel#event:noteoff}
     *    * [`noteon`]{@link InputChannel#event:noteon}
     *    * [`pitchbend`]{@link InputChannel#event:pitchbend}
     *    * [`programchange`]{@link InputChannel#event:programchange}
     *
     *    Note: you can listen for a specific control change message by using an event name like this:
     *    `controlchange-controller23`, `controlchange-controller99`, `controlchange-controller122`,
     *    etc.
     *
     * 6. **Channel Mode** Events (channel-specific)
     *
     *    * [`allnotesoff`]{@link InputChannel#event:allnotesoff}
     *    * [`allsoundoff`]{@link InputChannel#event:allsoundoff}
     *    * [`localcontrol`]{@link InputChannel#event:localcontrol}
     *    * [`monomode`]{@link InputChannel#event:monomode}
     *    * [`omnimode`]{@link InputChannel#event:omnimode}
     *    * [`resetallcontrollers`]{@link InputChannel#event:resetallcontrollers}
     *
     * 7. **NRPN** Events (channel-specific)
     *
     *    * [`nrpn`]{@link InputChannel#event:nrpn}
     *    * [`nrpn-dataentrycoarse`]{@link InputChannel#event:nrpn-dataentrycoarse}
     *    * [`nrpn-dataentryfine`]{@link InputChannel#event:nrpn-dataentryfine}
     *    * [`nrpn-dataincrement`]{@link InputChannel#event:nrpn-dataincrement}
     *    * [`nrpn-datadecrement`]{@link InputChannel#event:nrpn-datadecrement}
     *
     * 8. **RPN** Events (channel-specific)
     *
     *    * [`rpn`]{@link InputChannel#event:rpn}
     *    * [`rpn-dataentrycoarse`]{@link InputChannel#event:rpn-dataentrycoarse}
     *    * [`rpn-dataentryfine`]{@link InputChannel#event:rpn-dataentryfine}
     *    * [`rpn-dataincrement`]{@link InputChannel#event:rpn-dataincrement}
     *    * [`rpn-datadecrement`]{@link InputChannel#event:rpn-datadecrement}
     *
     * @param event {string} The type of the event.
     *
     * @param listener {function} A callback function to execute when the specified event is detected.
     * This function will receive an event parameter object. For details on this object's properties,
     * check out the documentation for the various events (links above).
     *
     * @param {object} [options={}]
     *
     * @param {array} [options.arguments] An array of arguments which will be passed separately to the
     * callback function. This array is stored in the [`arguments`](Listener#arguments) property of
     * the [`Listener`](Listener) object and can be retrieved or modified as desired.
     *
     * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of
     * such integers representing the MIDI channel(s) to listen on. This parameter is ignored for
     * input-wide events.
     *
     * @param {object} [options.context=this] The value of `this` in the callback function.
     *
     * @param {number} [options.duration=Infinity] The number of milliseconds before the listener
     * automatically expires.
     *
     * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning
     * of the listeners array and thus be triggered before others.
     *
     * @returns {Listener[]} An array of all [`Listener`](Listener) objects that were created.
     */
    addOneTimeListener(event, listener, options = {}) {
      options.remaining = 1;
      return this.addListener(event, listener, options);
    }

    /**
     * This is an alias to the [Input.addListener()]{@link Input#addListener} method.
     * @since 2.0.0
     * @deprecated since v3.0
     * @private
     */
    on(event, channel, listener, options) {
      return this.addListener(event, channel, listener, options);
    }

    /**
     * Checks if the specified event type is already defined to trigger the specified callback
     * function. For channel-specific events, the function will return `true` only if all channels
     * have the listener defined.
     *
     * @param event {string|Symbol} The type of the event.
     *
     * @param listener {function} The callback function to check for.
     *
     * @param {object} [options={}]
     *
     * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of such
     * integers representing the MIDI channel(s) to check. This parameter is ignored for input-wide
     * events.
     *
     * @returns {boolean} Boolean value indicating whether or not the `Input` or
     * [`InputChannel`](InputChannel) already has this listener defined.
     */
    hasListener(event, listener, options = {}) {

      if (wm$1.validation) {

        // Legacy compatibility
        if (typeof options === "function") {
          let channels = [].concat(listener); // clone
          listener = options;
          options = {channels: channels};
        }

      }

      if (Enumerations.CHANNEL_EVENTS.includes(event)) {

        // If no channel defined, use all.
        if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

        return Utilities.sanitizeChannels(options.channels).every(ch => {
          return this.channels[ch].hasListener(event, listener);
        });

      } else {
        return super.hasListener(event, listener);
      }

    }

    /**
     * Removes the specified event listener. If no listener is specified, all listeners matching the
     * specified event will be removed. If the event is channel-specific, the listener will be removed
     * from all [`InputChannel`]{@link InputChannel} objects belonging to that channel. If no event is
     * specified, all listeners for the `Input` as well as all listeners for all
     * [`InputChannel`]{@link InputChannel} objects belonging to the `Input` will be removed.
     *
     * By default, channel-specific listeners will be removed from all
     * [`InputChannel`]{@link InputChannel} objects unless the `options.channel` narrows it down.
     *
     * @param [type] {string} The type of the event.
     *
     * @param [listener] {function} The callback function to check for.
     *
     * @param {object} [options={}]
     *
     * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of
     * such integers representing the MIDI channel(s) to match. This parameter is ignored for
     * input-wide events.
     *
     * @param {*} [options.context] Only remove the listeners that have this exact context.
     *
     * @param {number} [options.remaining] Only remove the listener if it has exactly that many
     * remaining times to be executed.
     */
    removeListener(event, listener, options = {}) {

      if (wm$1.validation) {

        // Legacy compatibility
        if (typeof options === "function") {
          let channels = [].concat(listener); // clone
          listener = options;
          options = {channels: channels};
        }

      }

      if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;

      // If the event is not specified, remove everything (channel-specific and input-wide)!
      if (event == undefined) {
        Utilities.sanitizeChannels(options.channels).forEach(ch => {
          if (this.channels[ch]) this.channels[ch].removeListener();
        });
        return super.removeListener();
      }

      // If the event is specified, check if it's channel-specific or input-wide.
      if (Enumerations.CHANNEL_EVENTS.includes(event)) {

        Utilities.sanitizeChannels(options.channels).forEach(ch => {
          this.channels[ch].removeListener(event, listener, options);
        });

      } else {

        super.removeListener(event, listener, options);

      }

    }

    /**
     * Adds a forwarder that will forward all incoming MIDI messages matching the criteria to the
     * specified [`Output`](Output) destination(s). This is akin to the hardware MIDI THRU port, with
     * the added benefit of being able to filter which data is forwarded.
     *
     * @param {Output|Output[]} output An [`Output`](Output) object, or an array of such
     * objects, to forward messages to.
     * @param {object} [options={}]
     * @param {string|string[]} [options.types=(all messages)] A message type, or an array of such
     * types (`noteon`, `controlchange`, etc.), that the message type must match in order to be
     * forwarded. If this option is not specified, all types of messages will be forwarded. Valid
     * messages are the ones found in either
     * [`SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES) or
     * [`CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).
     * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]
     * A MIDI channel number or an array of channel numbers that the message must match in order to be
     * forwarded. By default all MIDI channels are included (`1` to `16`).
     *
     * @returns {Forwarder} The [`Forwarder`](Forwarder) object created to handle the forwarding. This
     * is useful if you wish to manipulate or remove the [`Forwarder`](Forwarder) later on.
     */
    addForwarder(output, options = {}) {

      let forwarder;

      // Unless 'output' is a forwarder, create a new forwarder
      if (output instanceof Forwarder) {
        forwarder = output;
      } else {
        forwarder = new Forwarder(output, options);
      }

      this._forwarders.push(forwarder);
      return forwarder;

    }

    /**
     * Removes the specified [`Forwarder`](Forwarder) object from the input.
     *
     * @param {Forwarder} forwarder The [`Forwarder`](Forwarder) to remove (the
     * [`Forwarder`](Forwarder) object is returned when calling `addForwarder()`.
     */
    removeForwarder(forwarder) {
      this._forwarders = this._forwarders.filter(item => item !== forwarder);
    }

    /**
     * Checks whether the specified [`Forwarder`](Forwarder) object has already been attached to this
     * input.
     *
     * @param {Forwarder} forwarder The [`Forwarder`](Forwarder) to check for (the
     * [`Forwarder`](Forwarder) object is returned when calling [`addForwarder()`](#addForwarder).
     * @returns {boolean}
     */
    hasForwarder(forwarder) {
      return this._forwarders.includes(forwarder);
    }

    /**
     * Name of the MIDI input.
     *
     * @type {string}
     * @readonly
     */
    get name() {
      return this._midiInput.name;
    }

    /**
     * ID string of the MIDI port. The ID is host-specific. Do not expect the same ID on different
     * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for
     * the same port.
     *
     * @type {string}
     * @readonly
     */
    get id() {
      return this._midiInput.id;
    }

    /**
     * Input port's connection state: `pending`, `open` or `closed`.
     *
     * @type {string}
     * @readonly
     */
    get connection() {
      return this._midiInput.connection;
    }

    /**
     * Name of the manufacturer of the device that makes this input port available.
     *
     * @type {string}
     * @readonly
     */
    get manufacturer() {
      return this._midiInput.manufacturer;
    }

    /**
     * An integer to offset the reported octave of incoming notes. By default, middle C (MIDI note
     * number 60) is placed on the 4th octave (C4).
     *
     * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If
     * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.
     *
     * Note that this value is combined with the global offset value defined in the
     * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) property (if any).
     *
     * @type {number}
     *
     * @since 3.0
     */
    get octaveOffset() {
      return this._octaveOffset;
    }
    set octaveOffset(value) {

      if (this.validation) {
        value = parseInt(value);
        if (isNaN(value)) throw new TypeError("The 'octaveOffset' property must be an integer.");
      }

      this._octaveOffset = value;

    }

    /**
     * State of the input port: `connected` or `disconnected`.
     *
     * @type {string}
     * @readonly
     */
    get state() {
      return this._midiInput.state;
    }

    /**
     * The port type. In the case of the `Input` object, this is always: `input`.
     *
     * @type {string}
     * @readonly
     */
    get type() {
      return this._midiInput.type;
    }

    /**
     * @type {boolean}
     * @private
     * @deprecated since v3.0.0 (moved to 'InputChannel' class)
     */
    get nrpnEventsEnabled() {
      if (wm$1.validation) {
        console.warn("The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class.");
      }
      return false;
    }

  }

  // Events that do not have code below them must be placed outside the class definition (?!)

  /**
   * Input-wide (system) event emitted when a **system exclusive** message has been received.
   * You should note that, to receive `sysex` events, you must call the
   * [`WebMidi.enable()`](WebMidi#enable()) method with the `sysex` option set to `true`:
   *
   * ```js
   * WebMidi.enable({sysex: true})
   *  .then(() => console.log("WebMidi has been enabled with sysex support."))
   * ```
   *
   * @event Input#sysex
   *
   * @type {object}
   *
   * @property {Input} port The `Input` that triggered the event.
   * @property {Input} target The object that dispatched the event.
   * @property {Message} message A [`Message`](Message) object containing information about the
   * incoming MIDI message.
   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
   * milliseconds since the navigation start of the document).
   * @property {string} type `sysex`
   *
   */

  /**
   * Input-wide (system) event emitted when a **time code quarter frame** message has been
   * received.
   *
   * @event Input#timecode
   *
   * @type {object}
   *
   * @property {Input} port The `Input` that triggered the event.
   * @property {Input} target The object that dispatched the event.
   * @property {Message} message A [`Message`](Message) object containing information about the
   * incoming MIDI message.
   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
   * milliseconds since the navigation start of the document).
   * @property {string} type `timecode`
   *
   * @since 2.1
   */

  /**
   * Input-wide (system) event emitted when a **song position** message has been received.
   *
   * @event Input#songposition
   *
   * @type {object}
   *
   * @property {Input} port The `Input` that triggered the event.
   * @property {Input} target The object that dispatched the event.
   * @property {Message} message A [`Message`](Message) object containing information about the
   * incoming MIDI message.
   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
   * milliseconds since the navigation start of the document).
   * @property {string} type `songposition`
   *
   * @since 2.1
   */

  /**
   * Input-wide (system) event emitted when a **song select** message has been received.
   *
   * @event Input#songselect
   *
   * @type {object}
   *
   * @property {Input} port The `Input` that triggered the event.
   * @property {Input} target The object that dispatched the event.
   * @property {Message} message A [`Message`](Message) object containing information about the
   * incoming MIDI message.
   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
   * milliseconds since the navigation start of the document).
   * @property {string} value Song (or sequence) number to select (0-127)
   * @property {string} rawValue Song (or sequence) number to select (0-127)
   *
   * @since 2.1
   */

  /**
   * Input-wide (system) event emitted when a **tune request** message has been received.
   *
   * @event Input#tunerequest
   *
   * @type {object}
   *
   * @property {Input} port The `Input` that triggered the event.
   * @property {Input} target The object that dispatched the event.
   * @property {Message} message A [`Message`](Message) object containing information about the
   * incoming MIDI message.
   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
   * milliseconds since the navigation start of the document).
   * @property {string} type `tunerequest`
   *
   * @since 2.1
   */

  /**
   * Input-wide (system) event emitted when a **timing clock** message has been received.
   *
   * @event Input#clock
   *
   * @type {object}
   *
   * @property {Input} port The `Input` that triggered the event.
   * @property {Input} target The object that dispatched the event.
   * @property {Message} message A [`Message`](Message) object containing information about the
   * incoming MIDI message.
   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
   * milliseconds since the navigation start of the document).
   * @property {string} type `clock`
   *
   * @since 2.1
   */

  /**
   * Input-wide (system) event emitted when a **start** message has been received.
   *
   * @event Input#start
   *
   * @type {object}
   *
   * @property {Input} port The `Input` that triggered the event.
   * @property {Input} target The object that dispatched the event.
   * @property {Message} message A [`Message`](Message) object containing information about the
   * incoming MIDI message.
   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
   * milliseconds since the navigation start of the document).
   * @property {string} type `start`
   *
   * @since 2.1
   */

  /**
   * Input-wide (system) event emitted when a **continue** message has been received.
   *
   * @event Input#continue
   *
   * @type {object}
   *
   * @property {Input} port The `Input` that triggered the event.
   * @property {Input} target The object that dispatched the event.
   * @property {Message} message A [`Message`](Message) object containing information about the
   * incoming MIDI message.
   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
   * milliseconds since the navigation start of the document).
   * @property {string} type `continue`
   *
   * @since 2.1
   */

  /**
   * Input-wide (system) event emitted when a **stop** message has been received.
   *
   * @event Input#stop
   *
   * @type {object}
   *
   * @property {Input} port The `Input` that triggered the event.
   * @property {Input} target The object that dispatched the event.
   * @property {Message} message A [`Message`](Message) object containing information about the
   * incoming MIDI message.
   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
   * milliseconds since the navigation start of the document).
   * @property {string} type `stop`
   *
   * @since 2.1
   */

  /**
   * Input-wide (system) event emitted when an **active sensing** message has been received.
   *
   * @event Input#activesensing
   *
   * @type {object}
   *
   * @property {Input} port The `Input` that triggered the event.
   * @property {Input} target The object that dispatched the event.
   * @property {Message} message A [`Message`](Message) object containing information about the
   * incoming MIDI message.
   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
   * milliseconds since the navigation start of the document).
   * @property {string} type `activesensing`
   *
   * @since 2.1
   */

  /**
   * Input-wide (system) event emitted when a **reset** message has been received.
   *
   * @event Input#reset
   *
   * @type {object}
   *
   * @property {Input} port The `Input` that triggered the event.
   * @property {Input} target The object that dispatched the event.
   * @property {Message} message A [`Message`](Message) object containing information about the
   * incoming MIDI message.
   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
   * milliseconds since the navigation start of the document).
   * @property {string} type `reset`
   *
   * @since 2.1
   */

  /**
   * Input-wide (system) event emitted when an unknown MIDI message has been received. It could
   * be, for example, one of the undefined/reserved messages.
   *
   * @event Input#unknownmessage
   *
   * @type {Object}
   *
   * @property {Input} port The `Input` that triggered the event.
   * @property {Input} target The object that dispatched the event.
   * @property {Message} message A [`Message`](Message) object containing information about the
   * incoming MIDI message.
   * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in
   * milliseconds since the navigation start of the document).
   * @property {string} type `unknownmessage`
   *
   * @since 2.1
   */

  /**
   * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it
   * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.
   *
   * When using the WebMidi.js library, you should know that the `WebMidi` class has already been
   * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should
   * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6
   * module) version, you get an already-instantiated object when you import the module.
   *
   * @fires WebMidi#connected
   * @fires WebMidi#disabled
   * @fires WebMidi#disconnected
   * @fires WebMidi#enabled
   * @fires WebMidi#error
   * @fires WebMidi#midiaccessgranted
   * @fires WebMidi#portschanged
   *
   * @extends EventEmitter
   * @license Apache-2.0
   */
  class WebMidi extends EventEmitter {

    /**
     * The WebMidi class is a singleton and you cannot instantiate it directly. It has already been
     * instantiated for you.
     */
    constructor() {

      super();

      /**
       * Object containing system-wide default values that can be changed to customize how the library
       * works.
       *
       * @type {object}
       *
       * @property {object}  defaults.note - Default values relating to note
       * @property {number}  defaults.note.attack - A number between 0 and 127 representing the
       * default attack velocity of notes. Initial value is 64.
       * @property {number}  defaults.note.release - A number between 0 and 127 representing the
       * default release velocity of notes. Initial value is 64.
       * @property {number}  defaults.note.duration - A number representing the default duration of
       * notes (in seconds). Initial value is Infinity.
       */
      this.defaults = {
        note: {
          attack: Utilities.from7bitToFloat(64),
          release: Utilities.from7bitToFloat(64),
          duration: Infinity
        }
      };

      /**
       * The [`MIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)
       * instance used to talk to the lower-level Web MIDI API. This should not be used directly
       * unless you know what you are doing.
       *
       * @type {MIDIAccess}
       * @readonly
       */
      this.interface = null;

      /**
       * Indicates whether argument validation and backwards-compatibility checks are performed
       * throughout the WebMidi.js library for object methods and property setters.
       *
       * This is an advanced setting that should be used carefully. Setting `validation` to `false`
       * improves performance but should only be done once the project has been thoroughly tested with
       * `validation` turned on.
       *
       * @type {boolean}
       */
      this.validation = true;

      /**
       * Array of all (Input) objects
       * @type {Input[]}
       * @private
       */
      this._inputs = [];

      /**
       * Array of disconnected [`Input`](Input) objects. This is used when inputs are plugged back in
       * to retain their previous state.
       * @type {Input[]}
       * @private
       */
      this._disconnectedInputs = [];

      /**
       * Array of all [`Output`](Output) objects
       * @type {Output[]}
       * @private
       */
      this._outputs = [];

      /**
       * Array of disconnected [`Output`](Output) objects. This is used when outputs are plugged back
       * in to retain their previous state.
       * @type {Output[]}
       * @private
       */
      this._disconnectedOutputs = [];

      /**
       * Array of statechange events to process. These events must be parsed synchronously so they do
       * not override each other.
       *
       * @type {string[]}
       * @private
       */
      this._stateChangeQueue = [];

      /**
       * @type {number}
       * @private
       */
      this._octaveOffset = 0;

    }

    /**
     * Checks if the Web MIDI API is available in the current environment and then tries to connect to
     * the host's MIDI subsystem. This is an asynchronous operation and it causes a security prompt to
     * be displayed to the user.
     *
     * To enable the use of MIDI system exclusive messages, the `sysex` option should be set to
     * `true`. However, under some environments (e.g. Jazz-Plugin), the `sysex` option is ignored
     * and system exclusive messages are always enabled. You can check the
     * [`sysexEnabled`](#sysexEnabled) property to confirm.
     *
     * To enable access to software synthesizers available on the host, you would set the `software`
     * option to `true`. However, this option is only there to future-proof the library as support for
     * software synths has not yet been implemented in any browser (as of September 2021).
     *
     * By the way, if you call the [`enable()`](#enable) method while WebMidi.js is already enabled,
     * the callback function will be executed (if any), the promise will resolve but the events
     * ([`"midiaccessgranted"`](#event:midiaccessgranted), [`"connected"`](#event:connected) and
     * [`"enabled"`](#event:enabled)) will not be fired.
     *
     * There are 3 ways to execute code after `WebMidi` has been enabled:
     *
     * - Pass a callback function in the `options`
     * - Listen to the [`"enabled"`](#event:enabled) event
     * - Wait for the promise to resolve
     *
     * In order, this is what happens towards the end of the enabling process:
     *
     * 1. [`"midiaccessgranted"`](#event:midiaccessgranted) event is triggered once the user has
     * granted access to use MIDI.
     * 2. [`"connected"`](#event:connected) events are triggered (for each available input and output)
     * 3. [`"enabled"`](#event:enabled) event is triggered when WebMidi.js is fully ready
     * 4. specified callback (if any) is executed
     * 5. promise is resolved and fulfilled with the `WebMidi` object.
     *
     * **Important note**: starting with Chrome v77, a page using Web MIDI API must be hosted on a
     * secure origin (`https://`, `localhost` or `file:///`) and the user will always be prompted to
     * authorize the operation (no matter if the `sysex` option is `true` or not).
     *
     * ##### Example
     * ```js
     * // Enabling WebMidi and using the promise
     * WebMidi.enable().then(() => {
     *   console.log("WebMidi.js has been enabled!");
     * })
     * ```
     *
     * @param [options] {object}
     *
     * @param [options.callback] {function} A function to execute once the operation completes. This
     * function will receive an `Error` object if enabling the Web MIDI API failed.
     *
     * @param [options.sysex=false] {boolean} Whether to enable MIDI system exclusive messages or not.
     *
     * @param [options.validation=true] {boolean} Whether to enable library-wide validation of method
     * arguments and setter values. This is an advanced setting that should be used carefully. Setting
     * [`validation`](#validation) to `false` improves performance but should only be done once the
     * project has been thoroughly tested with [`validation`](#validation)  turned on.
     *
     * @param [options.software=false] {boolean} Whether to request access to software synthesizers on
     * the host system. This is part of the spec but has not yet been implemented by most browsers as
     * of April 2020.
     *
     * @param [options.requestMIDIAccessFunction] {function} A custom function to use to return
     * the MIDIAccess object. This is useful if you want to use a polyfill for the Web MIDI API
     * or if you want to use a custom implementation of the Web MIDI API - probably for testing
     * purposes.
     *
     * @async
     *
     * @returns {Promise.<WebMidi>} The promise is fulfilled with the `WebMidi` object for
     * chainability
     *
     * @throws {Error} The Web MIDI API is not supported in your environment.
     * @throws {Error} Jazz-Plugin must be installed to use WebMIDIAPIShim.
     */
    async enable(options = {}, legacy = false) {

      /*START-ESM*/

      // This block is stripped out of the IIFE and CJS versions where it isn't needed.

      // If this code is executed by Node.js in "module" mode (when "type": "module" is used in the
      // package.json file), then we must import the `jzz` module. I import it in this convoluted way
      // to prevent Webpack from automatically bundling it in browser bundles where it isn't needed.
      if (Utilities.isNode) {

        // Some environments may have both Node.js and browser runtimes (Electron, NW.js, React
        // Native, etc.) so we also check for the presence of the window.navigator property.
        try {
          window.navigator;
        } catch (err) {
          let jzz = await Object.getPrototypeOf(async function() {}).constructor(`
        let jzz = await import("jzz");
        return jzz.default;
        `)();
          if (!global$1.navigator) global$1.navigator = {}; // for Node.js prior to v21
          Object.assign(global$1.navigator, jzz);
        }

        // The `performance` module appeared in Node.js v8.5.0 but has started to be automatically
        // imported only in v16+.
        try {
          performance;
        } catch (err) {
          global$1.performance = await Object.getPrototypeOf(async function() {}).constructor(`
        let perf_hooks = await import("perf_hooks");
        return perf_hooks.performance;
        `)();
        }

      }

      /*END-ESM*/

      this.validation = (options.validation !== false);

      if (this.validation) {
        // Backwards-compatibility. Previous syntax was: enable(callback, sysex)
        if (typeof options === "function") options = {callback: options, sysex: legacy};
        if (legacy) options.sysex = true;
      }

      // If already enabled, trigger callback and resolve promise but do not dispatch events.
      if (this.enabled) {
        if (typeof options.callback === "function") options.callback();
        return Promise.resolve();
      }

      /**
       * Event emitted when an error occurs trying to enable `WebMidi`
       *
       * @event WebMidi#error
       * @type {object}
       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in
       * milliseconds since the navigation start of the document).
       * @property {WebMidi} target The object that triggered the event
       * @property {string} type `error`
       * @property {*} error Actual error that occurred
       */
      const errorEvent = {
        timestamp: this.time,
        target: this,
        type: "error",
        error: undefined
      };

      /**
       * Event emitted once the MIDI interface has been successfully created (which implies user has
       * granted access to MIDI).
       *
       * @event WebMidi#midiaccessgranted
       * @type {object}
       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds
       * since the navigation start of the document).
       * @property {WebMidi} target The object that triggered the event
       * @property {string} type `midiaccessgranted`
       */
      const midiAccessGrantedEvent = {
        timestamp: this.time,
        target: this,
        type: "midiaccessgranted"
      };

      /**
       * Event emitted once `WebMidi` has been fully enabled
       *
       * @event WebMidi#enabled
       * @type {object}
       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds
       * since the navigation start of the document).
       * @property {WebMidi} target The object that triggered the event
       * @property {string} type `"enabled"`
       */
      const enabledEvent = {
        timestamp: this.time,
        target: this,
        type: "enabled"
      };

      // Request MIDI access (this is where the prompt will appear)
      try {
        if (typeof options.requestMIDIAccessFunction === "function") {
          this.interface = await options.requestMIDIAccessFunction(
            {sysex: options.sysex, software: options.software}
          );
        } else {
          this.interface = await navigator.requestMIDIAccess(
            {sysex: options.sysex, software: options.software}
          );
        }
      } catch(err) {
        errorEvent.error = err;
        this.emit("error", errorEvent);
        if (typeof options.callback === "function") options.callback(err);
        return Promise.reject(err);
      }

      // Now that the Web MIDI API interface has been created, we trigger the 'midiaccessgranted'
      // event. This allows the developer an occasion to assign listeners on 'connected' events.
      this.emit("midiaccessgranted", midiAccessGrantedEvent);

      // We setup the state change listener before creating the ports so that it properly catches the
      // the ports' `connected` events
      this.interface.onstatechange = this._onInterfaceStateChange.bind(this);

      // Update inputs and outputs (this is where `Input` and `Output` objects are created).
      try {
        await this._updateInputsAndOutputs();
      } catch (err) {
        errorEvent.error = err;
        this.emit("error", errorEvent);
        if (typeof options.callback === "function") options.callback(err);
        return Promise.reject(err);
      }

      // If we make it here, the ports have been successfully created, so we trigger the 'enabled'
      // event.
      this.emit("enabled", enabledEvent);

      // Execute the callback (if any) and resolve the promise with 'this' (for chainability)
      if (typeof options.callback === "function") options.callback();
      return Promise.resolve(this);

    }

    /**
     * Completely disables **WebMidi.js** by unlinking the MIDI subsystem's interface and closing all
     * [`Input`](Input) and [`Output`](Output) objects that may have been opened. This also means that
     * listeners added to [`Input`](Input) objects, [`Output`](Output) objects or to `WebMidi` itself
     * are also destroyed.
     *
     * @async
     * @returns {Promise<Array>}
     *
     * @throws {Error} The Web MIDI API is not supported by your environment.
     *
     * @since 2.0.0
     */
    async disable() {

      // This needs to be done right away to prevent racing conditions in listeners while the inputs
      // are being destroyed.
      if (this.interface) this.interface.onstatechange = undefined;

      return this._destroyInputsAndOutputs().then(() => {

        if (navigator && typeof navigator.close === "function") navigator.close(); // jzz

        this.interface = null; // also resets enabled, sysexEnabled

        /**
         * Event emitted once `WebMidi` has been successfully disabled.
         *
         * @event WebMidi#disabled
         * @type {object}
         * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in
         * milliseconds since the navigation start of the document).
         * @property {WebMidi} target The object that triggered the event
         * @property {string} type `"disabled"`
         */
        let event = {
          timestamp: this.time,
          target: this,
          type: "disabled"
        };

        // Finally, trigger the 'disabled' event and then remove all listeners.
        this.emit("disabled", event);
        this.removeListener();

      });

    };

    /**
     * Returns the [`Input`](Input) object that matches the specified ID string or `false` if no
     * matching input is found. As per the Web MIDI API specification, IDs are strings (not integers).
     *
     * Please note that IDs change from one host to another. For example, Chrome does not use the same
     * kind of IDs as Jazz-Plugin.
     *
     * @param id {string} The ID string of the input. IDs can be viewed by looking at the
     * [`WebMidi.inputs`](WebMidi#inputs) array. Even though they sometimes look like integers, IDs
     * are strings.
     * @param [options] {object}
     * @param [options.disconnected] {boolean} Whether to retrieve a disconnected input
     *
     * @returns {Input} An [`Input`](Input) object matching the specified ID string or `undefined`
     * if no matching input can be found.
     *
     * @throws {Error} WebMidi is not enabled.
     *
     * @since 2.0.0
     */
    getInputById(id, options = {disconnected: false}) {

      if (this.validation) {
        if (!this.enabled) throw new Error("WebMidi is not enabled.");
        if (!id) return;
      }

      if (options.disconnected) {
        for (let i = 0; i < this._disconnectedInputs.length; i++) {
          if (this._disconnectedInputs[i].id === id.toString()) return this._disconnectedInputs[i];
        }
      } else {
        for (let i = 0; i < this.inputs.length; i++) {
          if (this.inputs[i].id === id.toString()) return this.inputs[i];
        }
      }

    };

    /**
     * Returns the first [`Input`](Input) object whose name **contains** the specified string. Note
     * that the port names change from one environment to another. For example, Chrome does not report
     * input names in the same way as the Jazz-Plugin does.
     *
     * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as
     * those visible in the [inputs](WebMidi#inputs) array).
     *
     * @returns {Input} The [`Input`](Input) that was found or `undefined` if no input contained the
     * specified name.
     * @param [options] {object}
     * @param [options.disconnected] {boolean} Whether to retrieve a disconnected input
     *
     * @throws {Error} WebMidi is not enabled.
     *
     * @since 2.0.0
     */
    getInputByName(name, options = {disconnected: false}) {

      if (this.validation) {
        if (!this.enabled) throw new Error("WebMidi is not enabled.");
        if (!name) return;
        name = name.toString();
      }

      if (options.disconnected) {
        for (let i = 0; i < this._disconnectedInputs.length; i++) {
          if (~this._disconnectedInputs[i].name.indexOf(name)) return this._disconnectedInputs[i];
        }
      } else {
        for (let i = 0; i < this.inputs.length; i++) {
          if (~this.inputs[i].name.indexOf(name)) return this.inputs[i];
        }
      }

    };

    /**
     * Returns the first [`Output`](Output) object whose name **contains** the specified string. Note
     * that the port names change from one environment to another. For example, Chrome does not report
     * input names in the same way as the Jazz-Plugin does.
     *
     * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as
     * those visible in the [`outputs`](#outputs) array).
     * @param [options] {object}
     * @param [options.disconnected] {boolean} Whether to retrieve a disconnected output
     *
     * @returns {Output} The [`Output`](Output) that was found or `undefined` if no output matched
     * the specified name.
     *
     * @throws {Error} WebMidi is not enabled.
     *
     * @since 2.0.0
     */
    getOutputByName(name, options = {disconnected: false}) {

      if (this.validation) {
        if (!this.enabled) throw new Error("WebMidi is not enabled.");
        if (!name) return;
        name = name.toString();
      }

      if (options.disconnected) {
        for (let i = 0; i < this._disconnectedOutputs.length; i++) {
          if (~this._disconnectedOutputs[i].name.indexOf(name)) return this._disconnectedOutputs[i];
        }
      } else {
        for (let i = 0; i < this.outputs.length; i++) {
          if (~this.outputs[i].name.indexOf(name)) return this.outputs[i];
        }
      }

    };

    /**
     * Returns the [`Output`](Output) object that matches the specified ID string or `false` if no
     * matching output is found. As per the Web MIDI API specification, IDs are strings (not
     * integers).
     *
     * Please note that IDs change from one host to another. For example, Chrome does not use the same
     * kind of IDs as Jazz-Plugin.
     *
     * @param id {string} The ID string of the port. IDs can be viewed by looking at the
     * [`WebMidi.outputs`](WebMidi#outputs) array.
     * @param [options] {object}
     * @param [options.disconnected] {boolean} Whether to retrieve a disconnected output
     *
     * @returns {Output} An [`Output`](Output) object matching the specified ID string. If no
     * matching output can be found, the method returns `undefined`.
     *
     * @throws {Error} WebMidi is not enabled.
     *
     * @since 2.0.0
     */
    getOutputById(id, options = {disconnected: false}) {

      if (this.validation) {
        if (!this.enabled) throw new Error("WebMidi is not enabled.");
        if (!id) return;
      }

      if (options.disconnected) {
        for (let i = 0; i < this._disconnectedOutputs.length; i++) {
          if (this._disconnectedOutputs[i].id === id.toString()) return this._disconnectedOutputs[i];
        }
      } else {
        for (let i = 0; i < this.outputs.length; i++) {
          if (this.outputs[i].id === id.toString()) return this.outputs[i];
        }
      }

    };

    /**
     * @private
     * @deprecated since version 3.0.0, use Utilities.toNoteNumber() instead.
     */
    noteNameToNumber(name) {
      if (this.validation) {
        console.warn(
          "The noteNameToNumber() method is deprecated. Use " +
          "Utilities.toNoteNumber() instead."
        );
      }
      return Utilities.toNoteNumber(name, this.octaveOffset);
    }

    /**
     * @private
     * @deprecated since 3.0.0, use Utilities.getNoteDetails() instead.
     */
    getOctave(number) {

      if (this.validation) {
        console.warn("The getOctave()is deprecated. Use Utilities.getNoteDetails() instead");
        number = parseInt(number);
      }

      if (!isNaN(number) && number >= 0 && number <= 127) {
        return Utilities.getNoteDetails(Utilities.offsetNumber(number, this.octaveOffset)).octave;
      } else {
        return false;
      }

    }

    /**
     * @private
     * @deprecated since 3.0.0, use Utilities.sanitizeChannels() instead.
     */
    sanitizeChannels(channel) {

      if (this.validation) {
        console.warn("The sanitizeChannels() method has been moved to the utilities class.");
      }

      return Utilities.sanitizeChannels(channel);

    }

    /**
     * @private
     * @deprecated since version 3.0.0, use Utilities.sanitizeChannels() instead.
     */
    toMIDIChannels(channel) {

      if (this.validation) {
        console.warn(
          "The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead."
        );
      }

      return Utilities.sanitizeChannels(channel);

    }

    /**
     * @private
     * @deprecated since version 3.0.0, use Utilities.guessNoteNumber() instead.
     */
    guessNoteNumber(input) {

      if (this.validation) {
        console.warn(
          "The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead."
        );
      }

      return Utilities.guessNoteNumber(input, this.octaveOffset);

    }

    /**
     * @private
     * @deprecated since version 3.0.0, use Utilities.buildNoteArray() instead.
     */
    getValidNoteArray(notes, options = {}) {
      if (this.validation) {
        console.warn(
          "The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()"
        );
      }
      return Utilities.buildNoteArray(notes, options);
    }

    /**
     * @private
     * @deprecated since version 3.0.0, use Utilities.toTimestamp() instead.
     */
    convertToTimestamp(time) {

      if (this.validation) {
        console.warn(
          "The convertToTimestamp() method has been moved to Utilities.toTimestamp()."
        );
      }

      return Utilities.toTimestamp(time);

    }

    /**
     * @return {Promise<void>}
     * @private
     */
    async _destroyInputsAndOutputs() {

      let promises = [];

      this.inputs.forEach(input => promises.push(input.destroy()));
      this.outputs.forEach(output => promises.push(output.destroy()));

      return Promise.all(promises).then(() => {
        this._inputs = [];
        this._outputs = [];
      });

    }

    /**
     * @private
     */
    _onInterfaceStateChange(e) {

      this._updateInputsAndOutputs();

      /**
       * Event emitted when an [`Input`](Input) or [`Output`](Output) port is connected or
       * disconnected. This event is typically fired whenever a MIDI device is plugged in or
       * unplugged. Please note that it may fire several times if a device possesses multiple inputs
       * and/or outputs (which is often the case).
       *
       * @event WebMidi#portschanged
       * @type {object}
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred
       * (in milliseconds since the navigation start of the document).
       * @property {string} type `portschanged`
       * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)
       * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that
       * triggered the event.
       *
       * @since 3.0.2
       */

      /**
       * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes available. This event is
       * typically fired whenever a MIDI device is plugged in. Please note that it may fire several
       * times if a device possesses multiple inputs and/or outputs (which is often the case).
       *
       * @event WebMidi#connected
       * @type {object}
       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred
       * (in milliseconds since the navigation start of the document).
       * @property {string} type `connected`
       * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)
       * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that
       * triggered the event.
       */

      /**
       * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes unavailable. This event
       * is typically fired whenever a MIDI device is unplugged. Please note that it may fire several
       * times if a device possesses multiple inputs and/or outputs (which is often the case).
       *
       * @event WebMidi#disconnected
       * @type {object}
       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds
       * since the navigation start of the document).
       * @property {string} type `disconnected`
       * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)
       * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that
       * triggered the event.
       */
      let event = {
        timestamp: e.timeStamp,
        type: e.port.state,
        target: this
      };

      // We check if "connection" is "open" because connected events are also triggered with
      // "connection=closed"
      if (e.port.state === "connected" && e.port.connection === "open") {

        if (e.port.type === "output") {
          event.port = this.getOutputById(e.port.id);
        } else if (e.port.type === "input") {
          event.port = this.getInputById(e.port.id);
        }

        // Emit "connected" event
        this.emit(e.port.state, event);

        // Make a shallow copy of the event so we can use it for the "portschanged" event
        const portsChangedEvent = Object.assign({}, event);
        portsChangedEvent.type = "portschanged";
        this.emit(portsChangedEvent.type, portsChangedEvent);

      // We check if "connection" is "pending" because we do not always get the "closed" event
      } else if (e.port.state === "disconnected" && e.port.connection === "pending") {

        if (e.port.type === "input") {
          event.port = this.getInputById(e.port.id, {disconnected: true});
        } else if (e.port.type === "output") {
          event.port = this.getOutputById(e.port.id, {disconnected: true});
        }

        // Emit "disconnected" event
        this.emit(e.port.state, event);

        // Make a shallow copy of the event so we can use it for the "portschanged" event
        const portsChangedEvent = Object.assign({}, event);
        portsChangedEvent.type = "portschanged";
        this.emit(portsChangedEvent.type, portsChangedEvent);

      }

    };

    /**
     * @private
     */
    async _updateInputsAndOutputs() {

      return Promise.all([
        this._updateInputs(),
        this._updateOutputs()
      ]);

    };

    /**
     * @private
     */
    async _updateInputs() {

      // We must check for the existence of this.interface because it might have been closed via
      // WebMidi.disable().
      if (!this.interface) return;

      // Check for items to remove from the existing array (because they are no longer being reported
      // by the MIDI back-end).
      for (let i = this._inputs.length - 1; i >= 0; i--) {
        const current = this._inputs[i];
        const inputs = Array.from(this.interface.inputs.values());
        if (! inputs.find(input => input === current._midiInput)) {
          // Instead of destroying removed inputs, we stash them in case they come back (which is the
          // case when the computer goes to sleep and is later brought back online).
          this._disconnectedInputs.push(current);
          this._inputs.splice(i, 1);
        }
      }

      // Array to hold pending promises from trying to open all input ports
      let promises = [];

      // Add new inputs (if not already present)
      this.interface.inputs.forEach(nInput => {

        // Check if the input is currently absent from the 'inputs' array.
        if (! this._inputs.find(input => input._midiInput === nInput) ) {

          // If the input has previously been stashed away, reuse it. If not, create a new one.
          let input = this._disconnectedInputs.find(input => input._midiInput === nInput);
          if (!input) input = new Input(nInput);
          this._inputs.push(input);
          promises.push(input.open());

        }

      });

      // Return a promise that resolves when all promises have resolved
      return Promise.all(promises);

    };

    /**
     * @private
     */
    async _updateOutputs() {

      // We must check for the existence of this.interface because it might have been closed via
      // WebMidi.disable().
      if (!this.interface) return;

      // Check for items to remove from the existing array (because they are no longer being reported
      // by the MIDI back-end).
      for (let i = this._outputs.length - 1; i >= 0; i--) {
        const current = this._outputs[i];
        const outputs = Array.from(this.interface.outputs.values());
        if (! outputs.find(output => output === current._midiOutput)) {
          // Instead of destroying removed inputs, we stash them in case they come back (which is the
          // case when the computer goes to sleep and is later brought back online).
          this._disconnectedOutputs.push(current);
          this._outputs.splice(i, 1);
        }
      }

      // Array to hold pending promises from trying to open all output ports
      let promises = [];

      // Add new outputs (if not already present)
      this.interface.outputs.forEach(nOutput => {

        // Check if the output is currently absent from the 'outputs' array.
        if (! this._outputs.find(output => output._midiOutput === nOutput) ) {

          // If the output has previously been stashed away, reuse it. If not, create a new one.
          let output = this._disconnectedOutputs.find(output => output._midiOutput === nOutput);
          if (!output) output = new Output(nOutput);
          this._outputs.push(output);
          promises.push(output.open());

        }

      });

      // Return a promise that resolves when all sub-promises have resolved
      return Promise.all(promises);

    };

    // injectPluginMarkup(parent) {
    //
    //   // Silently ignore on Node.js
    //   if (Utilities.isNode) return;
    //
    //   // Default to <body> if no parent is specified
    //   if (!(parent instanceof Element) && !(parent instanceof HTMLDocument)) {
    //     parent = document.body;
    //   }
    //
    //   // IE10 needs this:
    //   // <meta http-equiv="X-UA-Compatible" content="requiresActiveX=true"/>
    //
    //   // Create markup and add to parent
    //   const obj = document.createElement("object");
    //   obj.classid = "CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90"; // IE
    //   if (!obj.isJazz) obj.type = "audio/x-jazz";                 // Standards-compliant
    //   obj.style.visibility = "hidden";
    //   obj.style.width = obj.style.height = "0px";
    //   parent.appendChild(obj);
    //
    // }

    /**
     * Indicates whether access to the host's MIDI subsystem is active or not.
     *
     * @readonly
     * @type {boolean}
     */
    get enabled() {
      return this.interface !== null;
    }

    /**
     * An array of all currently available MIDI inputs.
     *
     * @readonly
     * @type {Input[]}
     */
    get inputs() {
      return this._inputs;
    }

    /**
     * @private
     * @deprecated
     */
    get isNode() {

      if (this.validation) {
        console.warn("WebMidi.isNode has been deprecated. Use Utilities.isNode instead.");
      }

      return Utilities.isNode;

    }

    /**
     * @private
     * @deprecated
     */
    get isBrowser() {

      if (this.validation) {
        console.warn("WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead.");
      }

      return Utilities.isBrowser;

    }

    /**
     * An integer to offset the octave of notes received from external devices or sent to external
     * devices.
     *
     * When a MIDI message comes in on an input channel the reported note name will be offset. For
     * example, if the `octaveOffset` is set to `-1` and a [`"noteon"`](InputChannel#event:noteon)
     * message with MIDI number 60 comes in, the note will be reported as C3 (instead of C4).
     *
     * By the same token, when [`OutputChannel.playNote()`](OutputChannel#playNote) is called, the
     * MIDI note number being sent will be offset. If `octaveOffset` is set to `-1`, the MIDI note
     * number sent will be 72 (instead of 60).
     *
     * @type {number}
     *
     * @since 2.1
     */
    get octaveOffset() {
      return this._octaveOffset;
    }
    set octaveOffset(value) {

      if (this.validation) {
        value = parseInt(value);
        if (isNaN(value)) throw new TypeError("The 'octaveOffset' property must be an integer.");
      }

      this._octaveOffset = value;

    }

    /**
     * An array of all currently available MIDI outputs as [`Output`](Output) objects.
     *
     * @readonly
     * @type {Output[]}
     */
    get outputs() {
      return this._outputs;
    }

    /**
     * Indicates whether the environment provides support for the Web MIDI API or not.
     *
     * **Note**: in environments that do not offer built-in MIDI support, this will report `true` if
     * the
     * [`navigator.requestMIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)
     * function is available. For example, if you have installed WebMIDIAPIShim.js but no plugin, this
     * property will be `true` even though actual support might not be there.
     *
     * @readonly
     * @type {boolean}
     */
    get supported() {
      return (typeof navigator !== "undefined" && !!navigator.requestMIDIAccess);
    }

    /**
     * Indicates whether MIDI system exclusive messages have been activated when WebMidi.js was
     * enabled via the [`enable()`](#enable) method.
     *
     * @readonly
     * @type boolean
     */
    get sysexEnabled() {
      return !!(this.interface && this.interface.sysexEnabled);
    }

    /**
     * The elapsed time, in milliseconds, since the time
     * [origin](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp#The_time_origin).
     * Said simply, it is the number of milliseconds that passed since the page was loaded. Being a
     * floating-point number, it has sub-millisecond accuracy. According to the
     * [documentation](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp), the
     * time should be accurate to 5 µs (microseconds). However, due to various constraints, the
     * browser might only be accurate to one millisecond.
     *
     * Note: `WebMidi.time` is simply an alias to `performance.now()`.
     *
     * @type {DOMHighResTimeStamp}
     * @readonly
     */
    get time() {
      return performance.now();
    }

    /**
     * The version of the library as a [semver](https://semver.org/) string.
     *
     * @readonly
     * @type string
     */
    get version() {
      return "3.1.12";
    }

    /**
     * The flavour of the library. Can be one of:
     *
     * * `esm`: ECMAScript Module
     * * `cjs`: CommonJS Module
     * * `iife`: Immediately-Invoked Function Expression
     *
     * @readonly
     * @type string
     * @since 3.0.25
     */
    get flavour() {
      return "esm"; // will be replaced during bundling by the correct identifier
    }

    /**
     * @private
     * @deprecated since 3.0.0. Use Enumerations.CHANNEL_EVENTS instead.
     */
    get CHANNEL_EVENTS() {
      if (this.validation) {
        console.warn(
          "The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS."
        );
      }
      return Enumerations.CHANNEL_EVENTS;
    }

    /**
     * @private
     * @deprecated since 3.0.0. Use Enumerations.SYSTEM_MESSAGES instead.
     */
    get MIDI_SYSTEM_MESSAGES() {

      if (this.validation) {
        console.warn(
          "The MIDI_SYSTEM_MESSAGES enum has been moved to " +
          "Enumerations.SYSTEM_MESSAGES."
        );
      }

      return Enumerations.SYSTEM_MESSAGES;

    }

    /**
     * @private
     * @deprecated since 3.0.0. Use Enumerations.CHANNEL_MODE_MESSAGES instead
     */
    get MIDI_CHANNEL_MODE_MESSAGES() {

      if (this.validation) {
        console.warn(
          "The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to " +
          "Enumerations.CHANNEL_MODE_MESSAGES."
        );
      }

      return Enumerations.CHANNEL_MODE_MESSAGES;

    }

    /**
     * @private
     * @deprecated since 3.0.0. Use Enumerations.CONTROL_CHANGE_MESSAGES instead.
     */
    get MIDI_CONTROL_CHANGE_MESSAGES() {

      if (this.validation) {
        console.warn(
          "The MIDI_CONTROL_CHANGE_MESSAGES enum has been replaced by the " +
          "Enumerations.CONTROL_CHANGE_MESSAGES array."
        );
      }

      return Enumerations.MIDI_CONTROL_CHANGE_MESSAGES;

    }

    /**
     * @deprecated since 3.0.0. Use Enumerations.REGISTERED_PARAMETERS instead.
     * @private
     */
    get MIDI_REGISTERED_PARAMETER() {

      if (this.validation) {
        console.warn(
          "The MIDI_REGISTERED_PARAMETER enum has been moved to " +
          "Enumerations.REGISTERED_PARAMETERS."
        );
      }

      return Enumerations.REGISTERED_PARAMETERS;

    }

    /**
     * @deprecated since 3.0.0.
     * @private
     */
    get NOTES() {

      if (this.validation) {
        console.warn("The NOTES enum has been deprecated.");
      }

      return ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];

    }

  }

  // Export singleton instance of WebMidi class. The 'constructor' is nulled so that it cannot be used
  // to instantiate a new WebMidi object or extend it. However, it is not freezed so it remains
  // extensible (properties can be added at will).
  const wm$1 = new WebMidi();
  wm$1.constructor = null;

  const $APP = {};
  var ba,za,Wa,gb,ib,jb,kb,lb,mb,nb,pb,qb,rb,sb,tb,wb,xb,Cb,Eb,Fb,Ib,Jb,Kb,Lb,Mb,Nb,Pb,Qb,Rb,Ub,Wb,Xb,$b,ac,bc,dc,ec,gc,jc,nc,pc,qc,sc,tc,wc,xc,yc,Ac,Gc,Hc,Kc,Nc,Sc,Tc,Wc,dd,ed,fd,$c,gd,kd,qd,rd,sd,td,ud,yd,zd,Ad,Bd,Jd,Ld,je,me,ke,le,pe,qe,ze,Be,Ge,Ie,Oe,Se,Ue,Ve,af,bf,df,cf,ef,ff,lf,nf,of,rf,sf,tf,uf,vf,wf,zf,Cf,Kf,Pf,Qf,Tf,Uf,Yf,Zf,$f,ag,bg,cg,eg,dg,gg,mg,qg,ng,pg,rg,sg,ug,vg,xg,yg,zg,Bg,Dg,Fg,Gg,Jg,Mg,Og,Pg,Qg,Vg,Xg,Yg,$g,ah,dh,jh,hh,ih,lh,oh,mh,nh,ph,sh,qh,rh,th,uh,xh,yh,Dh,Eh,Fh,Gh,Ch,Bh,Ih,Jh,
  Lh,Th,ci,di,ei,fi,ri,si,xi,Fi,Ii,Li,wi,Mi,Pi,Qi,Si,Ti,Ui,gj,jj,lj,Tj,Wj,Yj,fk,ik,jk,sk,tk,wk,xk,yk,zk,Ak,Dk,Ik,Jk,Sk,Wk,dl,fl,hl,jl,kl,ll,ml,ol,pl,ql,rl,sl,tl,ul,vl,zl,Al,Kl,Ml,Nl,Ol,Rl,Sl,Tl,Ul,Wl,Xl,$l,bm,dm,hm,im,jm,km,nm,pm,rm,tm,um,wm,Am,Ll,Pl,Ql,Zl,Gm,Hm,Km,Lm,Mm,Pm,Ym,gn,hn,rn,bn,yn,xn,zn,Cn,Dn,En,Gn,Ln,Mn,Nn,On,Pn,Zn,$n,ao,bo,co,go,lo,oo,po,so,uo,Do,Ho,Io,Jo,Ko,To,Un,Tn,Po,$o,bp,lp,Cp,Ip,Mp,Op,Up,$p,aq,cq,dq,eq,fq,gq,jq,kq,lq,mq,nq,wq,Bq,Eq,Fq,Tq,$q,ar,cr,fr,gr,lr,or,pr,Ar,Mr,Or,Qr,Pr,Wr,
  Xr,cs,es,ns,ss,vs,Ds,Es,Fs,Ms,Ns,Us,Ws,Xs,Ys,ft,qt,Gt,Ht,It,Kt,Lt,Ot,Pt,Qt,Rt,cu,fu,gu,qu,tu,Ju;ba=function(a){return function(){return $APP.aa[a].apply(this,arguments)}};$APP.ka=function(a){var b=typeof a;return "object"!=b?b:a?Array.isArray(a)?"array":b:"null"};$APP.na=function(a){return Object.prototype.hasOwnProperty.call(a,la)&&a[la]||(a[la]=++ma)};$APP.qa=function(a,b){return 0==a.lastIndexOf(b,0)};$APP.ra=function(a,b){const c=a.length-b.length;return 0<=c&&a.indexOf(b,c)==c};$APP.ua=function(a){return /^[\s\xa0]*$/.test(a)};
  $APP.va=function(a){const b=[];let c=0;for(const d in a)b[c++]=d;return b};$APP.wa=function(a,b){return null!==a&&b in a?a[b]:void 0};za=function(a){const b=a.length;if(0<b){const c=Array(b);for(let d=0;d<b;d++)c[d]=a[d];return c}return []};$APP.Ba=function(a,b){return a>b?1:a<b?-1:0};$APP.Ea=function(a){return String(a.charAt(0)).toUpperCase()+String(a.slice(1)).toLowerCase()};$APP.Fa=function(a,b){null!=a&&this.append.apply(this,arguments);};
  $APP.Ra=function(){return new $APP.n(null,5,[$APP.Ga,true,$APP.Ia,$APP.Ja,Ka,$APP.La,Ma,$APP.Na,Pa,$APP.Qa],null)};Wa=function(){$APP.Sa=false;$APP.Ta=function(){var a=arguments;return console.log.apply(console,za(a))};$APP.Va=function(){var a=arguments;return console.error.apply(console,za(a))};};$APP.r=function(a){return null!=a&&false!==a};$APP.Xa=function(a){return a instanceof Array};$APP.Ya=function(a){return "number"===typeof a};$APP.Za=function(a){return null==a?true:false===a?true:false};
  $APP.$a=function(a){return null!=a?a.constructor===Object:false};$APP.ab=function(a){return "string"===$APP.ka(a)};$APP.bb=function(a){return "string"===typeof a&&1===a.length};$APP.cb=function(a,b){return a[$APP.ka(null==b?null:b)]?true:a._?true:false};$APP.eb=function(a){return null==a?null:a.constructor};$APP.fb=function(a,b){var c=$APP.eb(b);return Error(["No protocol method ",a," defined for type ",$APP.r($APP.r(c)?c.mf:c)?c.ke:$APP.ka(b),": ",b].join(""))};gb=function(a){var b=a.ke;return $APP.r(b)?b:$APP.t.h(a)};
  $APP.hb=function(a){for(var b=a.length,c=Array(b),d=0;;)if(d<b)c[d]=a[d],d+=1;else break;return c};ib=function(){};jb=function(){};kb=function(a){if(null!=a&&null!=a.aa)a=a.aa(a);else {var b=kb[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=kb._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("ICounted.-count",a);}return a};lb=function(){};
  mb=function(a){if(null!=a&&null!=a.na)a=a.na(a);else {var b=mb[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=mb._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IEmptyableCollection.-empty",a);}return a};nb=function(){};
  $APP.ob=function(a,b){if(null!=a&&null!=a.ea)a=a.ea(a,b);else {var c=$APP.ob[$APP.ka(null==a?null:a)];if(null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else if(c=$APP.ob._,null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else throw $APP.fb("ICollection.-conj",a);}return a};pb=function(){};qb=function(){};
  rb=function(a){if(null!=a&&null!=a.Fa)a=a.Fa(a);else {var b=rb[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=rb._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("ISeq.-first",a);}return a};sb=function(a){if(null!=a&&null!=a.Ja)a=a.Ja(a);else {var b=sb[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=sb._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("ISeq.-rest",a);}return a};tb=function(){};
  wb=function(a){if(null!=a&&null!=a.Ga)a=a.Ga(a);else {var b=wb[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=wb._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("INext.-next",a);}return a};xb=function(){};$APP.yb=function(){};
  $APP.zb=function(a,b){if(null!=a&&null!=a.Za)a=a.Za(a,b);else {var c=$APP.zb[$APP.ka(null==a?null:a)];if(null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else if(c=$APP.zb._,null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else throw $APP.fb("IAssociative.-contains-key?",a);}return a};
  Cb=function(a,b,c){if(null!=a&&null!=a.ha)a=a.ha(a,b,c);else {var d=Cb[$APP.ka(null==a?null:a)];if(null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else if(d=Cb._,null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else throw $APP.fb("IAssociative.-assoc",a);}return a};$APP.Db=function(a,b){if(null!=a&&null!=a.rc)a=a.rc(a,b);else {var c=$APP.Db[$APP.ka(null==a?null:a)];if(null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else if(c=$APP.Db._,null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else throw $APP.fb("IFind.-find",a);}return a};
  Eb=function(){};Fb=function(a,b){if(null!=a&&null!=a.ob)a=a.ob(a,b);else {var c=Fb[$APP.ka(null==a?null:a)];if(null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else if(c=Fb._,null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else throw $APP.fb("IMap.-dissoc",a);}return a};$APP.Gb=function(a){if(null!=a&&null!=a.Wd)a=a.key;else {var b=$APP.Gb[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=$APP.Gb._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IMapEntry.-key",a);}return a};
  $APP.Hb=function(a){if(null!=a&&null!=a.Xd)a=a.val;else {var b=$APP.Hb[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=$APP.Hb._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IMapEntry.-val",a);}return a};Ib=function(){};Jb=function(a,b){if(null!=a&&null!=a.ee)a=a.ee(a,b);else {var c=Jb[$APP.ka(null==a?null:a)];if(null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else if(c=Jb._,null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else throw $APP.fb("ISet.-disjoin",a);}return a};
  Kb=function(a){if(null!=a&&null!=a.uc)a=a.uc(a);else {var b=Kb[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=Kb._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IStack.-peek",a);}return a};Lb=function(a){if(null!=a&&null!=a.vc)a=a.vc(a);else {var b=Lb[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=Lb._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IStack.-pop",a);}return a};Mb=function(){};
  Nb=function(a,b,c){if(null!=a&&null!=a.Qb)a=a.Qb(a,b,c);else {var d=Nb[$APP.ka(null==a?null:a)];if(null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else if(d=Nb._,null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else throw $APP.fb("IVector.-assoc-n",a);}return a};$APP.Ob=function(){};
  $APP.u=function(a){if(null!=a&&null!=a.nb)a=a.nb(a);else {var b=$APP.u[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=$APP.u._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IDeref.-deref",a);}return a};Pb=function(){};Qb=function(a){if(null!=a&&null!=a.V)a=a.V(a);else {var b=Qb[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=Qb._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IMeta.-meta",a);}return a};Rb=function(){};
  $APP.Sb=function(a,b){if(null!=a&&null!=a.W)a=a.W(a,b);else {var c=$APP.Sb[$APP.ka(null==a?null:a)];if(null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else if(c=$APP.Sb._,null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else throw $APP.fb("IWithMeta.-with-meta",a);}return a};Ub=function(){};Wb=function(){};
  Xb=function(a,b,c){if(null!=a&&null!=a.hb)a=a.hb(a,b,c);else {var d=Xb[$APP.ka(null==a?null:a)];if(null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else if(d=Xb._,null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else throw $APP.fb("IKVReduce.-kv-reduce",a);}return a};$b=function(a,b){if(null!=a&&null!=a.Z)a=a.Z(a,b);else {var c=$b[$APP.ka(null==a?null:a)];if(null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else if(c=$b._,null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else throw $APP.fb("IEquiv.-equiv",a);}return a};
  ac=function(a){if(null!=a&&null!=a.$)a=a.$(a);else {var b=ac[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=ac._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IHash.-hash",a);}return a};bc=function(){};$APP.cc=function(a){if(null!=a&&null!=a.Y)a=a.Y(a);else {var b=$APP.cc[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=$APP.cc._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("ISeqable.-seq",a);}return a};dc=function(){};ec=function(){};
  $APP.fc=function(){};gc=function(){};$APP.hc=function(a){if(null!=a&&null!=a.tc)a=a.tc(a);else {var b=$APP.hc[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=$APP.hc._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IReversible.-rseq",a);}return a};
  $APP.ic=function(a,b){if(null!=a&&null!=a.Ic)a=a.Ic(a,b);else {var c=$APP.ic[$APP.ka(null==a?null:a)];if(null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else if(c=$APP.ic._,null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else throw $APP.fb("IWriter.-write",a);}return a};jc=function(){};
  $APP.kc=function(a,b,c){if(null!=a&&null!=a.R)a=a.R(a,b,c);else {var d=$APP.kc[$APP.ka(null==a?null:a)];if(null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else if(d=$APP.kc._,null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else throw $APP.fb("IPrintWithWriter.-pr-writer",a);}return a};
  $APP.lc=function(a){if(null!=a&&null!=a.$c)a=a.$c(a);else {var b=$APP.lc[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=$APP.lc._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IPending.-realized?",a);}return a};$APP.mc=function(a){if(null!=a&&null!=a.Xc)a=a.Xc(a);else {var b=$APP.mc[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=$APP.mc._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IEditableCollection.-as-transient",a);}return a};
  nc=function(a,b){if(null!=a&&null!=a.cd)a=a.cd(a,b);else {var c=nc[$APP.ka(null==a?null:a)];if(null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else if(c=nc._,null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else throw $APP.fb("ITransientCollection.-conj!",a);}return a};
  $APP.oc=function(a){if(null!=a&&null!=a.ud)a=a.ud(a);else {var b=$APP.oc[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=$APP.oc._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("ITransientCollection.-persistent!",a);}return a};
  pc=function(a,b,c){if(null!=a&&null!=a.bd)a=a.bd(a,b,c);else {var d=pc[$APP.ka(null==a?null:a)];if(null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else if(d=pc._,null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else throw $APP.fb("ITransientAssociative.-assoc!",a);}return a};qc=function(){};
  sc=function(a,b){if(null!=a&&null!=a.cc)a=a.cc(a,b);else {var c=sc[$APP.ka(null==a?null:a)];if(null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else if(c=sc._,null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else throw $APP.fb("IComparable.-compare",a);}return a};tc=function(a){if(null!=a&&null!=a.Td)a=a.Td(a);else {var b=tc[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=tc._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IChunk.-drop-first",a);}return a};
  $APP.uc=function(a){if(null!=a&&null!=a.od)a=a.od(a);else {var b=$APP.uc[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=$APP.uc._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IChunkedSeq.-chunked-first",a);}return a};$APP.vc=function(a){if(null!=a&&null!=a.Fc)a=a.Fc(a);else {var b=$APP.vc[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=$APP.vc._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IChunkedSeq.-chunked-rest",a);}return a};
  wc=function(a){if(null!=a&&null!=a.Yc)a=a.Yc(a);else {var b=wc[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=wc._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("INamed.-name",a);}return a};xc=function(a){if(null!=a&&null!=a.Zc)a=a.Zc(a);else {var b=xc[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=xc._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("INamed.-namespace",a);}return a};
  yc=function(a,b){if(null!=a&&null!=a.ff)a=a.ff(a,b);else {var c=yc[$APP.ka(null==a?null:a)];if(null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else if(c=yc._,null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else throw $APP.fb("IReset.-reset!",a);}return a};$APP.zc=function(a,b){if(null!=a&&null!=a.Rb)a=a.Rb(a,b);else {var c=$APP.zc[$APP.ka(null==a?null:a)];if(null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else if(c=$APP.zc._,null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else throw $APP.fb("IVolatile.-vreset!",a);}return a};Ac=function(){};
  $APP.Bc=function(a){if(null!=a&&null!=a.Da)a=a.Da(a);else {var b=$APP.Bc[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=$APP.Bc._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IIterable.-iterator",a);}return a};$APP.Cc=function(a){this.Bf=a;this.D=1073741824;this.M=0;};$APP.Dc=function(a){var b=new $APP.Fa,c=new $APP.Cc(b);a.R(null,c,$APP.Ra());c.dc(null);return $APP.t.h(b)};Gc=function(a){a=Ec(a|0,-862048943);return Ec(a<<15|a>>>-15,461845907)};
  Hc=function(a,b){a=(a|0)^(b|0);return Ec(a<<13|a>>>-13,5)+-430675100|0};Kc=function(a,b){a=(a|0)^b;a=Ec(a^a>>>16,-2048144789);a=Ec(a^a>>>13,-1028477387);return a^a>>>16};Nc=function(a){255<Lc&&(Mc={},Lc=0);if(null==a)return 0;var b=Mc[a];if("number"===typeof b)a=b;else {a:if(null!=a)if(b=a.length,0<b)for(var c=0,d=0;;)if(c<b)d=Ec(31,d)+a.charCodeAt(c),c+=1;else {b=d;break a}else b=0;else b=0;Mc[a]=b;Lc+=1;a=b;}return a};
  $APP.Pc=function(a){if(null!=a&&(a.D&4194304||$APP.Oc===a.Of))return a.$(null)^0;if("number"===typeof a){if(isFinite(a))return Math.floor(a)%2147483647;switch(a){case Infinity:return 2146435072;case -Infinity:return  -1048576;default:return 2146959360}}else return  true===a?a=1231:false===a?a=1237:"string"===typeof a?(a=Nc(a),a=0===a?a:Kc(Hc(0,Gc(a)),4)):a=a instanceof Date?a.valueOf()^0:null==a?0:ac(a)^0,a};$APP.Qc=function(a,b){return a^b+2654435769+(a<<6)+(a>>2)};
  $APP.Rc=function(a){return a instanceof $APP.w};Sc=function(a){var b=a.name;a:{var c=1;for(var d=0;;)if(c<b.length)d=Hc(d,Gc(b.charCodeAt(c-1)|b.charCodeAt(c)<<16)),c+=2;else {c=d;break a}}return $APP.Qc(Kc(1===(b.length&1)?c^Gc(b.charCodeAt(b.length-1)):c,Ec(2,b.length)),Nc(a.xb))};Tc=function(a,b){if(a.mc===b.mc)return 0;var c=$APP.Za(a.xb);if($APP.r(c?b.xb:c))return  -1;if($APP.r(a.xb)){if($APP.Za(b.xb))return 1;c=$APP.Ba(a.xb,b.xb);return 0===c?$APP.Ba(a.name,b.name):c}return $APP.Ba(a.name,b.name)};
  $APP.w=function(a,b,c,d,e){this.xb=a;this.name=b;this.mc=c;this.Wc=d;this.Mb=e;this.D=2154168321;this.M=4096;};$APP.Vc=function(a,b,c){this.val=a;this.nc=b;this.Mb=c;this.D=6717441;this.M=0;};Wc=function(a){return null!=a?a.M&131072||$APP.Oc===a.Pf?true:a.M?false:$APP.cb(Ac,a):$APP.cb(Ac,a)};
  $APP.x=function(a){if(null==a)return null;if(null!=a&&(a.D&8388608||$APP.Oc===a.Ee))return a.Y(null);if($APP.Xa(a)||"string"===typeof a)return 0===a.length?null:new $APP.Xc(a,0,null);if(null!=a&&null!=a[Yc])return a=$APP.wa(a,Yc).call(a),$c.h?$c.h(a):$c.call(null,a);if($APP.cb(bc,a))return $APP.cc(a);throw Error([$APP.t.h(a)," is not ISeqable"].join(""));};$APP.y=function(a){if(null==a)return null;if(null!=a&&(a.D&64||$APP.Oc===a.ad))return a.Fa(null);a=$APP.x(a);return null==a?null:rb(a)};
  $APP.cd=function(a){return null!=a?null!=a&&(a.D&64||$APP.Oc===a.ad)?a.Ja(null):(a=$APP.x(a))?a.Ja(null):$APP.bd:$APP.bd};$APP.z=function(a){return null==a?null:null!=a&&(a.D&128||$APP.Oc===a.pd)?a.Ga(null):$APP.x($APP.cd(a))};dd=function(a){this.ga=a;};ed=function(a){return new dd($APP.x(a))};fd=function(a,b){this.value=a;this.gd=b;this.Pd=null;this.D=8388672;this.M=0;};$c=function(a){var b=a.next();return $APP.r(b.done)?null:new fd(b.value,a)};
  gd=function(a){var b=0,c=1;for(a=$APP.x(a);;)if(null!=a)b+=1,c=Ec(31,c)+$APP.Pc($APP.y(a))|0,a=$APP.z(a);else return Kc(Hc(0,Gc(c)),b)};$APP.id=function(a){var b=0,c=0;for(a=$APP.x(a);;)if(null!=a)b+=1,c=c+$APP.Pc($APP.y(a))|0,a=$APP.z(a);else return Kc(Hc(0,Gc(c)),b)};$APP.jd=function(a){return a+1};kd=function(a){this.val=a;this.D=32768;this.M=0;};$APP.ld=function(a){return new kd(a)};$APP.md=function(a){return a instanceof kd};$APP.nd=function(a){return $APP.md(a)?a:$APP.ld(a)};
  $APP.pd=function(a){return $APP.md(a)?$APP.od.h?$APP.od.h(a):$APP.od.call(null,a):a};$APP.od=function(a){return $APP.u(a)};qd=function(a,b){var c=a.aa(null);if(0===c)return b.v?b.v():b.call(null);for(var d=a.ba(null,0),e=1;;)if(e<c){var f=a.ba(null,e);d=b.g?b.g(d,f):b.call(null,d,f);if($APP.md(d))return $APP.u(d);e+=1;}else return d};rd=function(a,b,c){var d=a.aa(null),e=c;for(c=0;;)if(c<d){var f=a.ba(null,c);e=b.g?b.g(e,f):b.call(null,e,f);if($APP.md(e))return $APP.u(e);c+=1;}else return e};
  sd=function(a,b){var c=a.length;if(0===a.length)return b.v?b.v():b.call(null);for(var d=a[0],e=1;;)if(e<c){var f=a[e];d=b.g?b.g(d,f):b.call(null,d,f);if($APP.md(d))return $APP.u(d);e+=1;}else return d};td=function(a,b,c){var d=a.length,e=c;for(c=0;;)if(c<d){var f=a[c];e=b.g?b.g(e,f):b.call(null,e,f);if($APP.md(e))return $APP.u(e);c+=1;}else return e};ud=function(a,b,c,d){for(var e=a.length;;)if(d<e){var f=a[d];c=b.g?b.g(c,f):b.call(null,c,f);if($APP.md(c))return $APP.u(c);d+=1;}else return c};
  $APP.vd=function(a){return null!=a?a.D&2||$APP.Oc===a.Xe?true:a.D?false:$APP.cb(jb,a):$APP.cb(jb,a)};$APP.wd=function(a){return null!=a?a.D&16||$APP.Oc===a.De?true:a.D?false:$APP.cb(pb,a):$APP.cb(pb,a)};yd=function(a,b,c){var d=$APP.xd.h?$APP.xd.h(a):$APP.xd.call(null,a);if(c>=d)return  -1;!(0<c)&&0>c&&(c+=d,c=0>c?0:c);for(;;)if(c<d){if($APP.A.g($APP.B.g?$APP.B.g(a,c):$APP.B.call(null,a,c),b))return c;c+=1;}else return  -1};
  zd=function(a,b,c){var d=$APP.xd.h?$APP.xd.h(a):$APP.xd.call(null,a);if(0===d)return  -1;0<c?(--d,c=d<c?d:c):c=0>c?d+c:c;for(;;)if(0<=c){if($APP.A.g($APP.B.g?$APP.B.g(a,c):$APP.B.call(null,a,c),b))return c;--c;}else return  -1};Ad=function(a,b){this.C=a;this.K=b;};$APP.Xc=function(a,b,c){this.C=a;this.K=b;this.I=c;this.D=166592766;this.M=139264;};$APP.F=function(a){return 0<a.length?new $APP.Xc(a,0,null):null};Bd=function(a,b,c){this.Id=a;this.K=b;this.I=c;this.D=32374990;this.M=8192;};$APP.Cd=function(a){return $APP.y($APP.z(a))};
  $APP.Dd=function(a){return $APP.y($APP.y(a))};$APP.Ed=function(a){return $APP.y($APP.z(a))};$APP.Fd=function(a){return $APP.z($APP.z(a))};$APP.Gd=function(a){for(;;){var b=$APP.z(a);if(null!=b)a=b;else return $APP.y(a)}};$APP.Hd=function(a){return null==a?null:null!=a&&(a.D&4||$APP.Oc===a.Ze)?a.na(null):(null!=a?a.D&4||$APP.Oc===a.Ze||(a.D?0:$APP.cb(lb,a)):$APP.cb(lb,a))?mb(a):null};
  $APP.xd=function(a){if(null!=a)if(null!=a&&(a.D&2||$APP.Oc===a.Xe))a=a.aa(null);else if($APP.Xa(a))a=a.length;else if("string"===typeof a)a=a.length;else if(null!=a&&(a.D&8388608||$APP.Oc===a.Ee))a:{a=$APP.x(a);for(var b=0;;){if($APP.vd(a)){a=b+kb(a);break a}a=$APP.z(a);b+=1;}}else a=kb(a);else a=0;return a};Jd=function(a,b,c){for(;;){if(null==a)return c;if(0===b)return $APP.x(a)?$APP.y(a):c;if($APP.wd(a))return $APP.Id(a,b,c);if($APP.x(a))a=$APP.z(a),--b;else return c}};
  $APP.Kd=function(a){var b="function"===typeof a;return b?b:null!=a?$APP.Oc===a.Be?true:a.wd?false:$APP.cb(ib,a):$APP.cb(ib,a)};Ld=function(a,b){this.afn=a;this.I=b;this.D=393217;this.M=0;};$APP.Md=function(a,b){return "function"===typeof a?new Ld(a,b):null==a?null:$APP.Sb(a,b)};$APP.Nd=function(a){var b=null!=a;return (b?null!=a?a.D&131072||$APP.Oc===a.Yd||(a.D?0:$APP.cb(Pb,a)):$APP.cb(Pb,a):b)?Qb(a):null};$APP.Od=function(a){return null==a?null:Kb(a)};$APP.Pd=function(a){return null==a?null:Lb(a)};
  $APP.Qd=function(a){return null==a||$APP.Za($APP.x(a))};$APP.Rd=function(a){return null==a?false:null!=a?a.D&8||$APP.Oc===a.Lf?true:a.D?false:$APP.cb(nb,a):$APP.cb(nb,a)};$APP.Sd=function(a){return null==a?false:null!=a?a.D&4096||$APP.Oc===a.Xf?true:a.D?false:$APP.cb(Ib,a):$APP.cb(Ib,a)};$APP.Ud=function(a){return null!=a?a.D&16777216||$APP.Oc===a.Fe?true:a.D?false:$APP.cb(dc,a):$APP.cb(dc,a)};$APP.Vd=function(a){return null==a?false:null!=a?a.D&1024||$APP.Oc===a.Sf?true:a.D?false:$APP.cb(Eb,a):$APP.cb(Eb,a)};
  $APP.Wd=function(a){return null!=a?a.D&67108864||$APP.Oc===a.df?true:a.D?false:$APP.cb($APP.fc,a):$APP.cb($APP.fc,a)};$APP.Xd=function(a){return null!=a?a.D&16384||$APP.Oc===a.$f?true:a.D?false:$APP.cb(Mb,a):$APP.cb(Mb,a)};$APP.Zd=function(a){return null!=a?a.M&512||$APP.Oc===a.Kf?true:false:false};$APP.$d=function(a,b,c,d,e){for(;;){if(0===e)return c;c[d]=a[b];d+=1;--e;b+=1;}};$APP.ae=function(a){return  true===a||false===a};
  $APP.be=function(a){return null==a?false:null!=a?a.D&64||$APP.Oc===a.ad?true:a.D?false:$APP.cb(qb,a):$APP.cb(qb,a)};$APP.ce=function(a){var b=null==a;return b?b:(b=null!=a?a.D&8388608||$APP.Oc===a.Ee?true:a.D?false:$APP.cb(bc,a):$APP.cb(bc,a))?b:$APP.Xa(a)||"string"===typeof a};$APP.de=function(a){return null==a?false:false===a?false:true};$APP.ee=function(a){return "number"===typeof a&&!isNaN(a)&&Infinity!==a&&parseFloat(a)===parseInt(a,10)};
  $APP.he=function(a,b){return null!=a&&(a.D&512||$APP.Oc===a.Ce)?a.Za(null,b):$APP.cb($APP.yb,a)?$APP.zb(a,b):$APP.fe.j(a,b,ge)===ge?false:true};
  $APP.ie=function(a,b){if(a===b)return 0;if(null==a)return  -1;if(null==b)return 1;if("number"===typeof a){if("number"===typeof b)return $APP.Ba(a,b);throw Error(["Cannot compare ",$APP.t.h(a)," to ",$APP.t.h(b)].join(""));}if(null!=a?a.M&2048||$APP.Oc===a.Gc||(a.M?0:$APP.cb(qc,a)):$APP.cb(qc,a))return sc(a,b);if("string"!==typeof a&&!$APP.Xa(a)&&true!==a&&false!==a||$APP.eb(a)!==$APP.eb(b))throw Error(["Cannot compare ",$APP.t.h(a)," to ",$APP.t.h(b)].join(""));return $APP.Ba(a,b)};
  je=function(a,b){var c=$APP.xd(a),d=$APP.xd(b);if(c<d)a=-1;else if(c>d)a=1;else if(0===c)a=0;else a:for(d=0;;){var e=$APP.ie($APP.B.g(a,d),$APP.B.g(b,d));if(0===e&&d+1<c)d+=1;else {a=e;break a}}return a};me=function(a){switch(arguments.length){case 2:return ke(arguments[0],arguments[1]);case 3:return le(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};
  ke=function(a,b){var c=$APP.x(b);return c?(b=$APP.y(c),c=$APP.z(c),$APP.ne.j?$APP.ne.j(a,b,c):$APP.ne.call(null,a,b,c)):a.v?a.v():a.call(null)};le=function(a,b,c){for(c=$APP.x(c);;)if(c){var d=$APP.y(c);b=a.g?a.g(b,d):a.call(null,b,d);if($APP.md(b))return $APP.u(b);c=$APP.z(c);}else return b};pe=function(a,b){a=$APP.Bc(a);if($APP.r(a.pa()))for(var c=a.next();;)if(a.pa()){var d=a.next();c=b.g?b.g(c,d):b.call(null,c,d);if($APP.md(c))return $APP.u(c)}else return c;else return b.v?b.v():b.call(null)};
  qe=function(a,b,c){for(a=$APP.Bc(a);;)if(a.pa()){var d=a.next();c=b.g?b.g(c,d):b.call(null,c,d);if($APP.md(c))return $APP.u(c)}else return c};$APP.re=function(a,b,c){return null!=c?Xb(c,a,b):b};$APP.se=function(a){return a};$APP.te=function(a){if("number"===typeof a)return String.fromCharCode(a);if("string"===typeof a&&1===a.length)return a;throw Error("Argument to char must be a character or number");};$APP.ue=function(a){return 0<=a?Math.floor(a):Math.ceil(a)};
  $APP.ve=function(a,b){return (a%b+b)%b};$APP.we=function(a,b){return $APP.ue((a-a%b)/b)};$APP.xe=function(a,b){return a-b*$APP.we(a,b)};$APP.ye=function(a){a-=a>>1&1431655765;a=(a&858993459)+(a>>2&858993459);return 16843009*(a+(a>>4)&252645135)>>24};
  ze=function(a,b){if($APP.Ud(b))if($APP.vd(a)&&$APP.vd(b)&&$APP.xd(a)!==$APP.xd(b))a=false;else a:for(a=$APP.x(a),b=$APP.x(b);;){if(null==a){a=null==b;break a}if(null!=b&&$APP.A.g($APP.y(a),$APP.y(b)))a=$APP.z(a),b=$APP.z(b);else {a=false;break a}}else a=null;return $APP.de(a)};$APP.G=function(a,b,c,d,e){this.I=a;this.first=b;this.lb=c;this.count=d;this.F=e;this.D=65937646;this.M=8192;};$APP.Ae=function(a){return null!=a?a.D&33554432||$APP.Oc===a.Rf?true:a.D?false:$APP.cb(ec,a):$APP.cb(ec,a)};
  Be=function(a){this.I=a;this.D=65937614;this.M=8192;};$APP.Ce=function(a){return null!=a?a.D&134217728||$APP.Oc===a.Wf?true:a.D?false:$APP.cb(gc,a):$APP.cb(gc,a)};$APP.Fe=function(a){return $APP.Ce(a)?(a=$APP.hc(a))?a:$APP.bd:$APP.ne.j($APP.De,$APP.bd,a)};Ge=function(a,b,c,d){this.I=a;this.first=b;this.lb=c;this.F=d;this.D=65929452;this.M=8192;};$APP.He=function(a,b){return null==b?new $APP.G(null,a,null,1,null):null!=b&&(b.D&64||$APP.Oc===b.ad)?new Ge(null,a,b,null):new Ge(null,a,$APP.x(b),null)};
  Ie=function(a,b){if(a.da===b.da)return 0;var c=$APP.Za(a.xb);if($APP.r(c?b.xb:c))return  -1;if($APP.r(a.xb)){if($APP.Za(b.xb))return 1;c=$APP.Ba(a.xb,b.xb);return 0===c?$APP.Ba(a.name,b.name):c}return $APP.Ba(a.name,b.name)};$APP.I=function(a,b,c,d){this.xb=a;this.name=b;this.da=c;this.Wc=d;this.D=2153775105;this.M=4096;};$APP.Je=function(a){return a instanceof $APP.I};$APP.Ke=function(a,b){return a===b?true:a instanceof $APP.I&&b instanceof $APP.I?a.da===b.da:false};
  $APP.Le=function(a){if(null!=a&&(a.M&4096||$APP.Oc===a.de))return a.Zc(null);throw Error(["Doesn't support namespace: ",$APP.t.h(a)].join(""));};$APP.Me=function(a){return a instanceof $APP.w&&null==$APP.Le(a)};$APP.Ne=function(a,b,c,d){this.I=a;this.Ca=b;this.ga=c;this.F=d;this.D=32374988;this.M=1;};Oe=function(a){null!=a.Ca&&(a.ga=a.Ca.v?a.Ca.v():a.Ca.call(null),a.Ca=null);return a.ga};Se=function(a){this.Mc=a;this.end=0;this.D=2;this.M=0;};$APP.Te=function(a){return new Se(Array(a))};
  Ue=function(a,b,c){this.C=a;this.kb=b;this.end=c;this.D=524306;this.M=0;};Ve=function(a,b,c,d){this.gb=a;this.Yb=b;this.I=c;this.F=d;this.D=31850732;this.M=1536;};$APP.We=function(a,b){return 0===kb(a)?b:new Ve(a,b,null,null)};$APP.Xe=function(a,b){return a.add(b)};$APP.Ye=function(a){return a.gb()};$APP.Ze=function(a){var b=[];for(a=$APP.x(a);;)if(null!=a)b.push($APP.y(a)),a=$APP.z(a);else return b};
  $APP.$e=function(a,b){if($APP.vd(b))return $APP.xd(b);var c=0;for(b=$APP.x(b);;)if(null!=b&&c<a)c+=1,b=$APP.z(b);else return c};
  af=function(a,b,c){var d=$APP.x(c);if(0===b)return a.v?a.v():a.call(null);c=rb(d);var e=sb(d);if(1===b)return a.h?a.h(c):a.call(null,c);d=rb(e);var f=sb(e);if(2===b)return a.g?a.g(c,d):a.call(null,c,d);e=rb(f);var k=sb(f);if(3===b)return a.j?a.j(c,d,e):a.call(null,c,d,e);f=rb(k);var l=sb(k);if(4===b)return a.A?a.A(c,d,e,f):a.call(null,c,d,e,f);k=rb(l);var m=sb(l);if(5===b)return a.J?a.J(c,d,e,f,k):a.call(null,c,d,e,f,k);l=rb(m);var h=sb(m);if(6===b)return a.fa?a.fa(c,d,e,f,k,l):a.call(null,c,d,e,
  f,k,l);m=rb(h);var q=sb(h);if(7===b)return a.Aa?a.Aa(c,d,e,f,k,l,m):a.call(null,c,d,e,f,k,l,m);h=rb(q);var p=sb(q);if(8===b)return a.oa?a.oa(c,d,e,f,k,l,m,h):a.call(null,c,d,e,f,k,l,m,h);q=rb(p);var v=sb(p);if(9===b)return a.Ba?a.Ba(c,d,e,f,k,l,m,h,q):a.call(null,c,d,e,f,k,l,m,h,q);p=rb(v);var D=sb(v);if(10===b)return a.qa?a.qa(c,d,e,f,k,l,m,h,q,p):a.call(null,c,d,e,f,k,l,m,h,q,p);v=rb(D);var H=sb(D);if(11===b)return a.ra?a.ra(c,d,e,f,k,l,m,h,q,p,v):a.call(null,c,d,e,f,k,l,m,h,q,p,v);D=rb(H);var O=
  sb(H);if(12===b)return a.sa?a.sa(c,d,e,f,k,l,m,h,q,p,v,D):a.call(null,c,d,e,f,k,l,m,h,q,p,v,D);H=rb(O);var P=sb(O);if(13===b)return a.ta?a.ta(c,d,e,f,k,l,m,h,q,p,v,D,H):a.call(null,c,d,e,f,k,l,m,h,q,p,v,D,H);O=rb(P);var W=sb(P);if(14===b)return a.ua?a.ua(c,d,e,f,k,l,m,h,q,p,v,D,H,O):a.call(null,c,d,e,f,k,l,m,h,q,p,v,D,H,O);P=rb(W);var ca=sb(W);if(15===b)return a.va?a.va(c,d,e,f,k,l,m,h,q,p,v,D,H,O,P):a.call(null,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P);W=rb(ca);var ha=sb(ca);if(16===b)return a.wa?a.wa(c,d,
  e,f,k,l,m,h,q,p,v,D,H,O,P,W):a.call(null,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W);ca=rb(ha);var oa=sb(ha);if(17===b)return a.xa?a.xa(c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca):a.call(null,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca);ha=rb(oa);var pa=sb(oa);if(18===b)return a.ya?a.ya(c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha):a.call(null,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha);oa=rb(pa);pa=sb(pa);if(19===b)return a.za?a.za(c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha,oa):a.call(null,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha,oa);var fa=rb(pa);
  sb(pa);if(20===b)return a.$a?a.$a(c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha,oa,fa):a.call(null,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha,oa,fa);throw Error("Only up to 20 arguments supported on functions");};bf=function(a){return null!=a&&(a.D&128||$APP.Oc===a.pd)?a.Ga(null):$APP.x($APP.cd(a))};df=function(a,b,c){return null==c?a.h?a.h(b):a.call(a,b):cf(a,b,rb(c),bf(c))};cf=function(a,b,c,d){return null==d?a.g?a.g(b,c):a.call(a,b,c):ef(a,b,c,rb(d),bf(d))};
  ef=function(a,b,c,d,e){return null==e?a.j?a.j(b,c,d):a.call(a,b,c,d):ff(a,b,c,d,rb(e),bf(e))};
  ff=function(a,b,c,d,e,f){if(null==f)return a.A?a.A(b,c,d,e):a.call(a,b,c,d,e);var k=rb(f),l=$APP.z(f);if(null==l)return a.J?a.J(b,c,d,e,k):a.call(a,b,c,d,e,k);f=rb(l);var m=$APP.z(l);if(null==m)return a.fa?a.fa(b,c,d,e,k,f):a.call(a,b,c,d,e,k,f);l=rb(m);var h=$APP.z(m);if(null==h)return a.Aa?a.Aa(b,c,d,e,k,f,l):a.call(a,b,c,d,e,k,f,l);m=rb(h);var q=$APP.z(h);if(null==q)return a.oa?a.oa(b,c,d,e,k,f,l,m):a.call(a,b,c,d,e,k,f,l,m);h=rb(q);var p=$APP.z(q);if(null==p)return a.Ba?a.Ba(b,c,d,e,k,f,l,m,h):
  a.call(a,b,c,d,e,k,f,l,m,h);q=rb(p);var v=$APP.z(p);if(null==v)return a.qa?a.qa(b,c,d,e,k,f,l,m,h,q):a.call(a,b,c,d,e,k,f,l,m,h,q);p=rb(v);var D=$APP.z(v);if(null==D)return a.ra?a.ra(b,c,d,e,k,f,l,m,h,q,p):a.call(a,b,c,d,e,k,f,l,m,h,q,p);v=rb(D);var H=$APP.z(D);if(null==H)return a.sa?a.sa(b,c,d,e,k,f,l,m,h,q,p,v):a.call(a,b,c,d,e,k,f,l,m,h,q,p,v);D=rb(H);var O=$APP.z(H);if(null==O)return a.ta?a.ta(b,c,d,e,k,f,l,m,h,q,p,v,D):a.call(a,b,c,d,e,k,f,l,m,h,q,p,v,D);H=rb(O);var P=$APP.z(O);if(null==P)return a.ua?
  a.ua(b,c,d,e,k,f,l,m,h,q,p,v,D,H):a.call(a,b,c,d,e,k,f,l,m,h,q,p,v,D,H);O=rb(P);var W=$APP.z(P);if(null==W)return a.va?a.va(b,c,d,e,k,f,l,m,h,q,p,v,D,H,O):a.call(a,b,c,d,e,k,f,l,m,h,q,p,v,D,H,O);P=rb(W);var ca=$APP.z(W);if(null==ca)return a.wa?a.wa(b,c,d,e,k,f,l,m,h,q,p,v,D,H,O,P):a.call(a,b,c,d,e,k,f,l,m,h,q,p,v,D,H,O,P);W=rb(ca);var ha=$APP.z(ca);if(null==ha)return a.xa?a.xa(b,c,d,e,k,f,l,m,h,q,p,v,D,H,O,P,W):a.call(a,b,c,d,e,k,f,l,m,h,q,p,v,D,H,O,P,W);ca=rb(ha);var oa=$APP.z(ha);if(null==oa)return a.ya?
  a.ya(b,c,d,e,k,f,l,m,h,q,p,v,D,H,O,P,W,ca):a.call(a,b,c,d,e,k,f,l,m,h,q,p,v,D,H,O,P,W,ca);ha=rb(oa);var pa=$APP.z(oa);if(null==pa)return a.za?a.za(b,c,d,e,k,f,l,m,h,q,p,v,D,H,O,P,W,ca,ha):a.call(a,b,c,d,e,k,f,l,m,h,q,p,v,D,H,O,P,W,ca,ha);oa=rb(pa);pa=$APP.z(pa);if(null==pa)return a.$a?a.$a(b,c,d,e,k,f,l,m,h,q,p,v,D,H,O,P,W,ca,ha,oa):a.call(a,b,c,d,e,k,f,l,m,h,q,p,v,D,H,O,P,W,ca,ha,oa);b=[b,c,d,e,k,f,l,m,h,q,p,v,D,H,O,P,W,ca,ha,oa];for(c=pa;;)if(c)b.push(rb(c)),c=$APP.z(c);else break;return a.apply(a,
  b)};$APP.jf=function(a){return null!=a&&(a.D&64||$APP.Oc===a.ad)?$APP.z(a)?$APP.gf($APP.Ze(a)):$APP.x(a)?$APP.y(a):$APP.hf:a};$APP.kf=function(a){return $APP.x(a)?a:null};lf=function(a){this.qf=a;this.D=393216;this.M=0;};$APP.mf=function(){return new lf($APP.hf)};nf=function(a){this.ga=a;this.K=0;};of=function(a){this.C=a;this.K=0;};rf=function(a){this.ld=qf;this.pb=a;};
  sf=function(a){if(Wc(a))return $APP.Bc(a);if(null==a)return $APP.mf();if("string"===typeof a)return new nf(a);if($APP.Xa(a))return new of(a);if($APP.ce(a))return new rf(a);throw Error(["Cannot create iterator from ",$APP.t.h(a)].join(""));};tf=function(a){this.Nd=a;};uf=function(a){this.val=a;};vf=function(){};wf=function(a){this.ne=a;};zf=function(a,b){this.buffer=xf;this.pb=yf;this.me=false;this.bc=null;this.ue=a;this.yf=b;};
  Cf=function(a,b,c){var d=new zf(b,c);d.bc=function(){var e=function(){function f(l,m){d.buffer=d.buffer.add(m);return l}var k=null;k=function(l,m){switch(arguments.length){case 0:return null;case 1:return l;case 2:return f.call(this,l,m)}throw Error("Invalid arity: "+arguments.length);};k.v=function(){return null};k.h=function(l){return l};k.g=f;return k}();return a.h?a.h(e):a.call(null,e)}();return d};
  $APP.Df=function(a,b){for(;;){if(null==$APP.x(b))return  true;var c=$APP.y(b);c=a.h?a.h(c):a.call(null,c);if($APP.r(c))b=$APP.z(b);else return  false}};$APP.Ef=function(a,b){for(;;)if(b=$APP.x(b)){var c=$APP.y(b);c=a.h?a.h(c):a.call(null,c);if($APP.r(c))return c;b=$APP.z(b);}else return null};$APP.Ff=function(a){if($APP.ee(a))return 0===(a&1);throw Error(["Argument must be an integer: ",$APP.t.h(a)].join(""));};
  $APP.Hf=function(a){return function(){function b(k,l){return $APP.Za(a.g?a.g(k,l):a.call(null,k,l))}function c(k){return $APP.Za(a.h?a.h(k):a.call(null,k))}function d(){return $APP.Za(a.v?a.v():a.call(null))}var e=null,f=function(){function k(m,h,q){var p=null;if(2<arguments.length){p=0;for(var v=Array(arguments.length-2);p<v.length;)v[p]=arguments[p+2],++p;p=new $APP.Xc(v,0,null);}return l.call(this,m,h,p)}function l(m,h,q){return $APP.Za($APP.Gf.A(a,m,h,q))}k.m=2;k.o=function(m){var h=$APP.y(m);
  m=$APP.z(m);var q=$APP.y(m);m=$APP.cd(m);return l(h,q,m)};k.l=l;return k}();e=function(k,l,m){switch(arguments.length){case 0:return d.call(this);case 1:return c.call(this,k);case 2:return b.call(this,k,l);default:var h=null;if(2<arguments.length){h=0;for(var q=Array(arguments.length-2);h<q.length;)q[h]=arguments[h+2],++h;h=new $APP.Xc(q,0,null);}return f.l(k,l,h)}};e.m=2;e.o=f.o;e.v=d;e.h=c;e.g=b;e.l=f.l;return e}()};
  $APP.If=function(a,b,c){this.state=a;this.I=b;this.Hf=c;this.kd=null;this.M=16386;this.D=6455296;};
  $APP.Jf=function(a,b){if(a instanceof $APP.If){var c=a.Hf;if(null!=c&&!$APP.r(c.h?c.h(b):c.call(null,b)))throw Error("Validator rejected reference state");c=a.state;a.state=b;if(null!=a.kd)a:for(var d=$APP.x(a.kd),e=null,f=0,k=0;;)if(k<f){var l=e.ba(null,k),m=$APP.B.j(l,0,null);l=$APP.B.j(l,1,null);l.A?l.A(m,a,c,b):l.call(null,m,a,c,b);k+=1;}else if(d=$APP.x(d))$APP.Zd(d)?(e=$APP.uc(d),d=$APP.vc(d),m=e,f=$APP.xd(e),e=m):(e=$APP.y(d),m=$APP.B.j(e,0,null),l=$APP.B.j(e,1,null),l.A?l.A(m,a,c,b):l.call(null,
  m,a,c,b),d=$APP.z(d),e=null,f=0),k=0;else break a;return b}return yc(a,b)};Kf=function(a){this.state=a;this.D=32768;this.M=0;};$APP.Lf=function(a){return new Kf(a)};$APP.Of=function(a,b){return new $APP.J(null,2,5,$APP.N,[$APP.Mf.g(a,b),$APP.Nf.g(a,b)],null)};Pf=function(a,b,c,d){this.I=a;this.count=b;this.val=c;this.next=d;this.F=null;this.D=32374988;this.M=1;};Qf=function(a,b,c,d,e){this.I=a;this.f=b;this.re=c;this.seed=d;this.next=e;this.D=26083532;this.M=1;};
  $APP.Rf=function(a,b){return new Qf(null,a,null,b,null)};$APP.Sf=function(a,b){this.ka=a;this.C=b;};Tf=function(a){return new $APP.Sf(a,[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null])};Uf=function(a){return new $APP.Sf(a.ka,$APP.hb(a.C))};$APP.Xf=function(a){a=a.G;return 32>a?0:a-1>>>5<<5};Yf=function(a,b,c){for(;;){if(0===b)return c;var d=Tf(a);d.C[0]=c;c=d;b-=5;}};
  Zf=function(a,b){throw Error(["No item ",$APP.t.h(a)," in vector of length ",$APP.t.h(b)].join(""));};$f=function(a,b){if(b>=$APP.Xf(a))return a.mb;var c=a.root;for(a=a.shift;;)if(0<a){var d=a-5;c=c.C[b>>>a&31];a=d;}else return c.C};ag=function(a,b){return 0<=b&&b<a.G?$f(a,b):Zf(b,a.G)};bg=function(a,b,c,d,e,f){this.K=a;this.Qd=b;this.C=c;this.fb=d;this.start=e;this.end=f;};cg=function(a,b,c){return new bg(b,b-b%32,b<$APP.xd(a)?$f(a,b):null,a,b,c)};
  eg=function(a,b,c,d){return c<d?dg(a,b,$APP.B.g(a,c),c+1,d):b.v?b.v():b.call(null)};dg=function(a,b,c,d,e){var f=c;c=d;for(d=$f(a,d);;)if(c<e){var k=c&31;d=0===k?$f(a,c):d;k=d[k];f=b.g?b.g(f,k):b.call(null,f,k);if($APP.md(f))return $APP.u(f);c+=1;}else return f};$APP.J=function(a,b,c,d,e,f){this.I=a;this.G=b;this.shift=c;this.root=d;this.mb=e;this.F=f;this.D=167666463;this.M=139268;};
  gg=function(a,b){var c=a.length;a=b?a:$APP.hb(a);if(32>c)return new $APP.J(null,c,5,$APP.N,a,null);b=32;for(var d=(new $APP.J(null,32,5,$APP.N,a.slice(0,32),null)).Xc(null);;)if(b<c){var e=b+1;d=$APP.fg.g(d,a[b]);b=e;}else return $APP.oc(d)};
  $APP.lg=function(a){return $APP.r($APP.hg.h?$APP.hg.h(a):$APP.hg.call(null,a))?new $APP.J(null,2,5,$APP.N,[$APP.ig.h?$APP.ig.h(a):$APP.ig.call(null,a),$APP.jg.h?$APP.jg.h(a):$APP.jg.call(null,a)],null):$APP.Xd(a)?$APP.Md(a,null):$APP.Xa(a)?gg(a,true):$APP.oc($APP.ne.j(nc,$APP.mc($APP.kg),a))};mg=function(a,b,c,d,e){this.Fb=a;this.node=b;this.K=c;this.kb=d;this.I=e;this.F=null;this.D=32375020;this.M=1536;};
  qg=function(a){switch(arguments.length){case 3:var b=arguments[0],c=arguments[1],d=arguments[2];return new mg(b,ag(b,c),c,d,null);case 4:return ng(arguments[0],arguments[1],arguments[2],arguments[3]);case 5:return pg(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};ng=function(a,b,c,d){return new mg(a,b,c,d,null)};pg=function(a,b,c,d,e){return new mg(a,b,c,d,e)};
  rg=function(a,b,c,d,e){this.I=a;this.fb=b;this.start=c;this.end=d;this.F=e;this.D=167666463;this.M=139264;};sg=function(a,b,c,d,e){for(;;)if(b instanceof rg)c=b.start+c,d=b.start+d,b=b.fb;else {if(!$APP.Xd(b))throw Error("v must satisfy IVector");if(0>c||d<c||d>$APP.xd(b))throw Error("Index out of bounds");return new rg(a,b,c,d,e)}};$APP.tg=function(a,b){return a===b.ka?b:new $APP.Sf(a,$APP.hb(b.C))};ug=function(a){return new $APP.Sf({},$APP.hb(a.C))};
  vg=function(a){var b=[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];$APP.$d(a,0,b,0,a.length);return b};$APP.wg=function(a,b,c,d){this.G=a;this.shift=b;this.root=c;this.mb=d;this.M=88;this.D=275;};
  xg=function(a,b,c){if(a.root.ka){if(0<=b&&b<a.G){if($APP.Xf(a)<=b)a.mb[b&31]=c;else {var d=function l(f,k){k=$APP.tg(a.root.ka,k);if(0===f)k.C[b&31]=c;else {var m=b>>>f&31;f=l(f-5,k.C[m]);k.C[m]=f;}return k}(a.shift,a.root);a.root=d;}return a}if(b===a.G)return a.cd(null,c);throw Error(["Index ",$APP.t.h(b)," out of bounds for TransientVector of length",$APP.t.h(a.G)].join(""));}throw Error("assoc! after persistent!");};yg=function(a,b){this.dd=a;this.Gd=b;};
  zg=function(a,b,c,d){this.I=a;this.Cb=b;this.Eb=c;this.F=d;this.D=31850700;this.M=0;};$APP.Ag=function(a,b,c,d,e){this.I=a;this.count=b;this.Cb=c;this.Eb=d;this.F=e;this.M=139264;this.D=31858766;};Bg=function(){this.D=2097152;this.M=0;};
  Dg=function(a,b){return $APP.de($APP.Vd(b)&&!$APP.Wd(b)?$APP.xd(a)===$APP.xd(b)?(null!=a?a.D&1048576||$APP.Oc===a.Qf||(a.D?0:$APP.cb(Wb,a)):$APP.cb(Wb,a))?$APP.re(function(c,d,e){return $APP.A.g($APP.fe.j(b,d,Cg),e)?true:$APP.ld(false)},true,a):$APP.Df(function(c){return $APP.A.g($APP.fe.j(b,$APP.y(c),Cg),$APP.Cd(c))},a):null:null)};$APP.Eg=function(a,b,c,d){this.K=0;this.Af=a;this.Ae=b;this.Rc=c;this.Ke=d;};Fg=function(a){this.ga=a;};Gg=function(a){this.ga=a;};
  $APP.Hg=function(a,b){if(b instanceof $APP.I)a:{var c=a.length;b=b.da;for(var d=0;;){if(c<=d){a=-1;break a}if(a[d]instanceof $APP.I&&b===a[d].da){a=d;break a}d+=2;}}else if("string"===typeof b||"number"===typeof b)a:for(c=a.length,d=0;;){if(c<=d){a=-1;break a}if(b===a[d]){a=d;break a}d+=2;}else if(b instanceof $APP.w)a:for(c=a.length,b=b.mc,d=0;;){if(c<=d){a=-1;break a}if(a[d]instanceof $APP.w&&b===a[d].mc){a=d;break a}d+=2;}else if(null==b)a:for(b=a.length,c=0;;){if(b<=c){a=-1;break a}if(null==a[c]){a=
  c;break a}c+=2;}else a:for(c=a.length,d=0;;){if(c<=d){a=-1;break a}if($APP.A.g(b,a[d])){a=d;break a}d+=2;}return a};$APP.Ig=function(a,b,c){this.key=a;this.val=b;this.F=c;this.D=166619935;this.M=0;};$APP.hg=function(a){return null!=a?a.D&2048||$APP.Oc===a.Tf?true:false:false};Jg=function(a,b,c){this.C=a;this.K=b;this.Mb=c;this.D=32374990;this.M=0;};Mg=function(a,b){this.C=a;this.K=0;this.G=b;};$APP.n=function(a,b,c,d){this.I=a;this.G=b;this.C=c;this.F=d;this.D=16647951;this.M=139268;};
  $APP.Ng=function(a,b){return a===b?true:$APP.Ke(a,b)?true:$APP.A.g(a,b)};Og=function(a){for(var b=0,c=0;;)if(b<a.length){var d;a:for(d=0;;)if(d<b){var e=$APP.Ng(a[b],a[d]);if(e){d=e;break a}d=2+d;}else {d=false;break a}c=d?c:c+2;b=2+b;}else return c};Pg=function(a,b){var c=a.length-1,d=$APP.x(b);b=Array(c+2*$APP.xd(d));a=$APP.$d(a,0,b,0,c);for(b=c;;)if(d){var e=$APP.y(d);a[b]=$APP.Gb(e);a[b+1]=$APP.Hb(e);b=2+c;d=$APP.z(d);}else return a};
  $APP.gf=function(a){var b=a.length,c=1===(b&1),d;if(!(d=c))a:for(d=0;;)if(d<a.length){var e;b:for(e=0;;)if(e<d){var f=$APP.Ng(a[d],a[e]);if(f){e=f;break b}e=2+e;}else {e=false;break b}if(e){d=e;break a}d=2+d;}else {d=false;break a}return d?Qg(a,c):new $APP.n(null,b/2,a,null)};
  Qg=function(a,b){var c=b?Pg(a,$APP.Rg.g($APP.hf,a[a.length-1])):a;a=Og(c);var d=c.length;if(a<d){a=Array(a);for(var e=0,f=0;;)if(e<d)(function(){for(var k=0;;)if(k<f){var l=$APP.Ng(c[e],c[k]);if(l)return l;k=2+k;}else return  false})()?(b=f,e=2+e,f=b):(b=function(){for(var k=d-2;;)if(k>=e){if($APP.Ng(c[e],c[k]))return k;k-=2;}else return k}(),a[f]=c[e],a[f+1]=c[b+1],b=2+f,e=2+e,f=b);else break;return new $APP.n(null,a.length/2,a,null)}return new $APP.n(null,c.length/2,c,null)};
  $APP.Sg=function(a,b){this.Qc={};this.Wb=a;this.C=b;this.D=259;this.M=56;};Vg=function(a,b){for(var c=$APP.mc(Tg),d=0;;)if(d<a)c=$APP.Ug.j(c,b[d],b[d+1]),d+=2;else return c};$APP.Wg=function(){this.val=false;};Xg=function(a,b,c){a=$APP.hb(a);a[b]=c;return a};Yg=function(a,b){var c=Array(a.length-2);$APP.$d(a,0,c,0,2*b);$APP.$d(a,2*(b+1),c,2*b,c.length-2*b);return c};$APP.Zg=function(a,b,c,d){a=a.yc(b);a.C[c]=d;return a};
  $g=function(a,b,c){for(var d=a.length,e=0,f=c;;)if(e<d){c=a[e];if(null!=c){var k=a[e+1];c=b.j?b.j(f,c,k):b.call(null,f,c,k);}else c=a[e+1],c=null!=c?c.Sc(b,f):f;if($APP.md(c))return c;e+=2;f=c;}else return f};ah=function(a){this.C=a;this.K=0;this.Zb=this.Cd=null;};$APP.bh=function(a,b,c){this.ka=a;this.ma=b;this.C=c;this.M=131072;this.D=0;};
  $APP.ch=function(a,b,c){var d=a.C,e=d.length;a=Array(2*(a.G-1));for(var f=0,k=1,l=0;;)if(f<e)f!==c&&null!=d[f]?(a[k]=d[f],k+=2,l|=1<<f,f+=1):f+=1;else return new $APP.bh(b,l,a)};dh=function(a){this.C=a;this.K=0;this.Zb=null;};$APP.eh=function(a,b,c){this.ka=a;this.G=b;this.C=c;this.M=131072;this.D=0;};$APP.fh=function(a,b,c){b*=2;for(var d=0;;)if(d<b){if($APP.Ng(c,a[d]))return d;d+=2;}else return  -1};$APP.gh=function(a,b,c,d){this.ka=a;this.xc=b;this.G=c;this.C=d;this.M=131072;this.D=0;};
  jh=function(a){switch(arguments.length){case 6:return hh(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);case 7:return ih(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};hh=function(a,b,c,d,e,f){var k=$APP.Pc(b);if(k===d)return new $APP.gh(null,k,2,[b,c,e,f]);var l=new $APP.Wg;return kh.Ub(a,k,b,c,l).Ub(a,d,e,f,l)};
  ih=function(a,b,c,d,e,f,k){var l=$APP.Pc(c);if(l===e)return new $APP.gh(null,l,2,[c,d,f,k]);var m=new $APP.Wg;return kh.Vb(a,b,l,c,d,m).Vb(a,b,e,f,k,m)};lh=function(a,b,c,d,e){this.I=a;this.$b=b;this.K=c;this.ga=d;this.F=e;this.D=32374988;this.M=0;};oh=function(a){switch(arguments.length){case 1:return mh(arguments[0]);case 3:return nh(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};mh=function(a){return nh(a,0,null)};
  nh=function(a,b,c){if(null==c)for(c=a.length;;)if(b<c){if(null!=a[b])return new lh(null,a,b,null,null);var d=a[b+1];if($APP.r(d)&&(d=d.zd(),$APP.r(d)))return new lh(null,a,b+2,d,null);b+=2;}else return null;else return new lh(null,a,b,c,null)};ph=function(a,b,c,d,e){this.I=a;this.$b=b;this.K=c;this.ga=d;this.F=e;this.D=32374988;this.M=0;};
  sh=function(a){switch(arguments.length){case 1:return qh(arguments[0]);case 3:return rh(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};qh=function(a){return rh(a,0,null)};rh=function(a,b,c){if(null==c)for(c=a.length;;)if(b<c){var d=a[b];if($APP.r(d)&&(d=d.zd(),$APP.r(d)))return new ph(null,a,b+1,d,null);b+=1;}else return null;else return new ph(null,a,b,c,null)};th=function(a,b){this.jb=a;this.Ne=b;this.te=false;};
  uh=function(a,b,c,d,e,f){this.I=a;this.G=b;this.root=c;this.ib=d;this.jb=e;this.F=f;this.D=16123663;this.M=139268;};$APP.vh=function(a,b){for(var c=a.length,d=0,e=$APP.mc(Tg);;)if(d<c){if(b.length<=d)throw Error(["No value supplied for key: ",$APP.t.h(a[d])].join(""));var f=d+1;e=pc(e,a[d],b[d]);d=f;}else return $APP.oc(e)};$APP.wh=function(a,b,c,d){this.ka={};this.root=a;this.count=b;this.ib=c;this.jb=d;this.D=259;this.M=56;};
  xh=function(a,b,c){if(a.ka){if(null==b)a.jb!==c&&(a.jb=c),a.ib||(a.count+=1,a.ib=true);else {var d=new $APP.Wg;b=(null==a.root?kh:a.root).Vb(a.ka,0,$APP.Pc(b),b,c,d);b!==a.root&&(a.root=b);d.val&&(a.count+=1);}return a}throw Error("assoc! after persistent!");};yh=function(a,b,c){for(var d=b;;)if(null!=a)b=c?a.left:a.right,d=$APP.De.g(d,a),a=b;else return d};$APP.zh=function(a,b,c,d,e){this.I=a;this.stack=b;this.Lc=c;this.G=d;this.F=e;this.D=32374990;this.M=0;};
  $APP.Ah=function(a,b,c){return new $APP.zh(null,yh(a,null,b),b,c,null)};Dh=function(a,b,c,d){return c instanceof Bh?c.left instanceof Bh?new Bh(c.key,c.val,c.left.oc(),new Ch(a,b,c.right,d)):c.right instanceof Bh?new Bh(c.right.key,c.right.val,new Ch(c.key,c.val,c.left,c.right.left),new Ch(a,b,c.right.right,d)):new Ch(a,b,c,d):new Ch(a,b,c,d)};
  Eh=function(a,b,c,d){return d instanceof Bh?d.right instanceof Bh?new Bh(d.key,d.val,new Ch(a,b,c,d.left),d.right.oc()):d.left instanceof Bh?new Bh(d.left.key,d.left.val,new Ch(a,b,c,d.left.left),new Ch(d.key,d.val,d.left.right,d.right)):new Ch(a,b,c,d):new Ch(a,b,c,d)};
  Fh=function(a,b,c,d){if(c instanceof Bh)return new Bh(a,b,c.oc(),d);if(d instanceof Ch)return Eh(a,b,c,d.Fd());if(d instanceof Bh&&d.left instanceof Ch)return new Bh(d.left.key,d.left.val,new Ch(a,b,c,d.left.left),Eh(d.key,d.val,d.left.right,d.right.Fd()));throw Error("red-black tree invariant violation");};
  Gh=function(a,b,c,d){if(d instanceof Bh)return new Bh(a,b,c,d.oc());if(c instanceof Ch)return Dh(a,b,c.Fd(),d);if(c instanceof Bh&&c.right instanceof Ch)return new Bh(c.right.key,c.right.val,Dh(c.key,c.val,c.left.Fd(),c.right.left),new Ch(a,b,c.right.right,d));throw Error("red-black tree invariant violation");};Ch=function(a,b,c,d){this.key=a;this.val=b;this.left=c;this.right=d;this.F=null;this.D=166619935;this.M=0;};
  Bh=function(a,b,c,d){this.key=a;this.val=b;this.left=c;this.right=d;this.F=null;this.D=166619935;this.M=0;};$APP.Hh=function(a,b,c,d,e){this.Bb=a;this.ac=b;this.G=c;this.I=d;this.F=e;this.D=418776847;this.M=8192;};Ih=function(a,b){for(var c=a.ac;;)if(null!=c){var d=c.key;d=a.Bb.g?a.Bb.g(b,d):a.Bb.call(null,b,d);if(0===d)return c;c=0>d?c.left:c.right;}else return null};Jh=function(a,b){this.la=a;this.Mb=b;this.D=32374988;this.M=0;};$APP.Kh=function(a){return (a=$APP.x(a))?new Jh(a,null):null};$APP.ig=function(a){return $APP.Gb(a)};
  Lh=function(a,b){this.la=a;this.Mb=b;this.D=32374988;this.M=0;};$APP.Mh=function(a){return (a=$APP.x(a))?new Lh(a,null):null};$APP.jg=function(a){return $APP.Hb(a)};$APP.Sh=function(a,b){var c=$APP.hf;for(b=$APP.x(b);;)if(b){var d=$APP.y(b),e=$APP.fe.j(a,d,Ph);c=$APP.Qh.g(e,Ph)?$APP.Rh.j(c,d,e):c;b=$APP.z(b);}else return $APP.Sb(c,$APP.Nd(a))};Th=function(a){this.gd=a;};$APP.Uh=function(a,b,c){this.I=a;this.zc=b;this.F=c;this.D=15077647;this.M=139268;};
  $APP.Wh=function(a){for(var b=a.length,c=$APP.mc($APP.Vh),d=0;;)if(d<b)nc(c,a[d]),d+=1;else break;return $APP.oc(c)};$APP.Xh=function(a){this.Dc=a;this.M=136;this.D=259;};$APP.Yh=function(a,b,c){this.I=a;this.Kb=b;this.F=c;this.D=417730831;this.M=8192;};$APP.Zh=function(a){if($APP.Sd(a))return $APP.Md(a,null);a=$APP.x(a);if(null==a)return $APP.Vh;if(a instanceof $APP.Xc&&0===a.K)return $APP.Wh(a.C);for(var b=$APP.mc($APP.Vh);;)if(null!=a){var c=$APP.z(a);b=nc(b,rb(a));a=c;}else return $APP.oc(b)};
  $APP.$h=function(a){for(var b=$APP.kg;;)if($APP.z(a))b=$APP.De.g(b,$APP.y(a)),a=$APP.z(a);else return $APP.x(b)};$APP.ai=function(a){if(null!=a&&(a.M&4096||$APP.Oc===a.de))return a.Yc(null);if("string"===typeof a)return a;throw Error(["Doesn't support name: ",$APP.t.h(a)].join(""));};$APP.bi=function(a,b){var c=$APP.mc($APP.hf);a=$APP.x(a);for(b=$APP.x(b);;)if(a&&b)c=$APP.Ug.j(c,$APP.y(a),$APP.y(b)),a=$APP.z(a),b=$APP.z(b);else return $APP.oc(c)};
  ci=function(a,b,c){this.start=a;this.step=b;this.count=c;this.D=82;this.M=0;};di=function(a,b,c){this.K=a;this.end=b;this.step=c;};ei=function(a,b,c,d,e,f,k){this.I=a;this.start=b;this.end=c;this.step=d;this.gb=e;this.qc=f;this.F=k;this.D=32375006;this.M=140800;};fi=function(a,b,c,d,e,f,k){this.I=a;this.start=b;this.end=c;this.step=d;this.gb=e;this.qc=f;this.F=k;this.M=140800;this.D=32374988;};
  $APP.gi=function(a){return $APP.oc($APP.ne.j(function(b,c){return $APP.Ug.j(b,c,$APP.fe.j(b,c,0)+1)},$APP.mc($APP.hf),a))};$APP.hi=function(a,b){if("string"===typeof b)return a=a.exec(b),null!=a&&$APP.A.g(a[0],b)?1===a.length?a[0]:$APP.lg(a):null;throw new TypeError("re-matches must match against a string.");};$APP.ii=function(a,b){if("string"===typeof b)return a=a.exec(b),null==a?null:1===a.length?a[0]:$APP.lg(a);throw new TypeError("re-find must match against a string.");};
  $APP.ki=function(a){if(a instanceof RegExp)return a;var b=$APP.ii(/^\(\?([idmsux]*)\)/,a),c=$APP.B.j(b,0,null);b=$APP.B.j(b,1,null);a=$APP.ji.g(a,null==c?0:c.length);return new RegExp(a,$APP.r(b)?b:"")};
  $APP.ni=function(a,b,c,d,e,f,k){var l=$APP.li;$APP.li=null==$APP.li?null:$APP.li-1;try{if(null!=$APP.li&&0>$APP.li)return $APP.ic(a,"#");$APP.ic(a,c);if(0===Pa.h(f))$APP.x(k)&&$APP.ic(a,function(){var D=mi.h(f);return $APP.r(D)?D:"..."}());else {if($APP.x(k)){var m=$APP.y(k);b.j?b.j(m,a,f):b.call(null,m,a,f);}for(var h=$APP.z(k),q=Pa.h(f)-1;;)if(!h||null!=q&&0===q){$APP.x(h)&&0===q&&($APP.ic(a,d),$APP.ic(a,function(){var D=mi.h(f);return $APP.r(D)?D:"..."}()));break}else {$APP.ic(a,d);var p=$APP.y(h);
  c=a;k=f;b.j?b.j(p,c,k):b.call(null,p,c,k);var v=$APP.z(h);c=q-1;h=v;q=c;}}return $APP.ic(a,e)}finally{$APP.li=l;}};$APP.oi=function(a,b){b=$APP.x(b);for(var c=null,d=0,e=0;;)if(e<d){var f=c.ba(null,e);$APP.ic(a,f);e+=1;}else if(b=$APP.x(b))c=b,$APP.Zd(c)?(b=$APP.uc(c),d=$APP.vc(c),c=b,f=$APP.xd(b),b=d,d=f):(f=$APP.y(c),$APP.ic(a,f),b=$APP.z(c),c=null,d=0),e=0;else return null};$APP.pi=function(a){if(null==$APP.Ta)throw Error("No *print-fn* fn set for evaluation environment");$APP.Ta.call(null,a);return null};
  ri=function(a){return ['"',$APP.t.h(a.replace(RegExp('[\\\\"\b\f\n\r\t]',"g"),function(b){return qi[b]})),'"'].join("")};si=function(a,b){return (a=$APP.de($APP.fe.g(a,Ka)))?(a=null!=b?b.D&131072||$APP.Oc===b.Yd?true:false:false)?null!=$APP.Nd(b):a:a};
  xi=function(a,b,c){if(null==a)return $APP.ic(b,"nil");if(si(c,a)){$APP.ic(b,"^");var d=$APP.Nd(a);$APP.ti.j?$APP.ti.j(d,b,c):$APP.ti.call(null,d,b,c);$APP.ic(b," ");}if(a.mf)return a.ag(a,b,c);if(null!=a?a.D&2147483648||$APP.Oc===a.ja||(a.D?0:$APP.cb(jc,a)):$APP.cb(jc,a))return $APP.kc(a,b,c);if(true===a||false===a)return $APP.ic(b,$APP.t.h(a));if("number"===typeof a)return $APP.ic(b,isNaN(a)?"##NaN":a===Number.POSITIVE_INFINITY?"##Inf":a===Number.NEGATIVE_INFINITY?"##-Inf":$APP.t.h(a));if($APP.$a(a))return $APP.ic(b,
  "#js "),d=$APP.ui.g(function(f){return new $APP.Ig(null!=$APP.hi(/[A-Za-z_\*\+\?!\-'][\w\*\+\?!\-']*/,f)?$APP.vi.h(f):f,a[f],null)},$APP.va(a)),wi.A?wi.A(d,$APP.ti,b,c):wi.call(null,d,$APP.ti,b,c);if($APP.Xa(a))return $APP.ni(b,$APP.ti,"#js ["," ","]",c,a);if("string"===typeof a)return $APP.r($APP.Ia.h(c))?$APP.ic(b,ri(a)):$APP.ic(b,a);if("function"===typeof a){var e=a.name;c=$APP.r(function(){var f=null==e;return f?f:$APP.ua(e)}())?"Function":e;return $APP.oi(b,$APP.F(["#object[",c,$APP.r(false)?[' "',
  $APP.t.h(a),'"'].join(""):"","]"]))}if(a instanceof Date)return c=function(f,k){for(f=$APP.t.h(f);;)if(f.length<k)f=["0",f].join("");else return f},$APP.oi(b,$APP.F(['#inst "',c(a.getUTCFullYear(),4),"-",c(a.getUTCMonth()+1,2),"-",c(a.getUTCDate(),2),"T",c(a.getUTCHours(),2),":",c(a.getUTCMinutes(),2),":",c(a.getUTCSeconds(),2),".",c(a.getUTCMilliseconds(),3),"-",'00:00"']));if(a instanceof RegExp)return $APP.oi(b,$APP.F(['#"',a.source,'"']));if("symbol"===$APP.ka(a)||"undefined"!==typeof Symbol&&
  a instanceof Symbol)return $APP.oi(b,$APP.F(["#object[",a.toString(),"]"]));if($APP.r(function(){var f=null==a?null:a.constructor;return null==f?null:f.ke}()))return $APP.oi(b,$APP.F(["#object[",a.constructor.ke.replace(RegExp("/","g"),"."),"]"]));e=function(){var f=null==a?null:a.constructor;return null==f?null:f.name}();c=$APP.r(function(){var f=null==e;return f?f:$APP.ua(e)}())?"Object":e;return null==a.constructor?$APP.oi(b,$APP.F(["#object[",c,"]"])):$APP.oi(b,$APP.F(["#object[",c," ",$APP.t.h(a),
  "]"]))};$APP.ti=function(a,b,c){var d=Ci.h(c);return $APP.r(d)?(c=$APP.Rh.j(c,Di,xi),d.j?d.j(a,b,c):d.call(null,a,b,c)):xi(a,b,c)};
  $APP.Ei=function(a,b){var c=new $APP.Fa,d=new $APP.Cc(c);a:{$APP.ti($APP.y(a),d,b);a=$APP.x($APP.z(a));for(var e=null,f=0,k=0;;)if(k<f){var l=e.ba(null,k);$APP.ic(d," ");$APP.ti(l,d,b);k+=1;}else if(a=$APP.x(a))e=a,$APP.Zd(e)?(a=$APP.uc(e),f=$APP.vc(e),e=a,l=$APP.xd(a),a=f,f=l):(l=$APP.y(e),$APP.ic(d," "),$APP.ti(l,d,b),a=$APP.z(e),e=null,f=0),k=0;else break a}d.dc(null);return c};Fi=function(a,b){return $APP.Qd(a)?"":$APP.t.h($APP.Ei(a,b))};$APP.Gi=function(a,b){return $APP.pi(Fi(a,b))};
  Ii=function(a){return a instanceof $APP.w?$APP.Hi.g(null,$APP.ai(a)):$APP.vi.g(null,$APP.ai(a))};
  $APP.Ki=function(a){if($APP.r($APP.Ji)){var b=$APP.x(a),c=$APP.x(b),d=$APP.y(c);$APP.z(c);$APP.B.j(d,0,null);$APP.B.j(d,1,null);c=$APP.Hd(a);for(a=null;;){d=a;b=$APP.x(b);a=$APP.y(b);var e=$APP.z(b),f=a;a=$APP.B.j(f,0,null);b=$APP.B.j(f,1,null);if($APP.r(f))if(a instanceof $APP.I||a instanceof $APP.w)if($APP.r(d))if($APP.A.g(d,$APP.Le(a)))c=$APP.Rh.j(c,Ii(a),b),a=d,b=e;else return null;else if(d=$APP.Le(a),$APP.r(d))c=$APP.Rh.j(c,Ii(a),b),a=d,b=e;else return null;else return null;else return new $APP.J(null,
  2,5,$APP.N,[d,c],null)}}else return null};Li=function(a,b,c,d,e){return $APP.ni(d,function(f,k,l){var m=$APP.Gb(f);c.j?c.j(m,k,l):c.call(null,m,k,l);$APP.ic(k," ");f=$APP.Hb(f);return c.j?c.j(f,k,l):c.call(null,f,k,l)},[$APP.t.h(a),"{"].join(""),", ","}",e,$APP.x(b))};wi=function(a,b,c,d){var e=$APP.Vd(a)?$APP.Ki(a):null,f=$APP.B.j(e,0,null);e=$APP.B.j(e,1,null);return $APP.r(f)?Li(["#:",$APP.t.h(f)].join(""),e,b,c,d):Li(null,a,b,c,d)};
  Mi=function(a){return function(b,c){b=a.g?a.g(b,c):a.call(null,b,c);return $APP.md(b)?$APP.ld(b):b}};$APP.Ni=function(a){var b=Mi(a);return function(){function c(k,l){return $APP.ne.j(b,k,l)}function d(k){return a.h?a.h(k):a.call(null,k)}function e(){return a.v?a.v():a.call(null)}var f=null;f=function(k,l){switch(arguments.length){case 0:return e.call(this);case 1:return d.call(this,k);case 2:return c.call(this,k,l)}throw Error("Invalid arity: "+arguments.length);};f.v=e;f.h=d;f.g=c;return f}()};
  $APP.Oi=function(a,b){this.Od=a;this.Jd=b;this.D=2173173760;this.M=131072;};Pi=function(){};Qi=function(a){if(null!=a&&null!=a.bf)a=a.bf(a);else {var b=Qi[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=Qi._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IEncodeJS.-clj-\x3ejs",a);}return a};
  Si=function(a,b){return (null!=a?$APP.Oc===a.af||(a.wd?0:$APP.cb(Pi,a)):$APP.cb(Pi,a))?Qi(a):"string"===typeof a||"number"===typeof a||a instanceof $APP.I||a instanceof $APP.w?b.h?b.h(a):b.call(null,a):$APP.Ri.l($APP.F([a]))};Ti=function(){};Ui=function(a,b){if(null!=a&&null!=a.$e)a=a.$e(a,b);else {var c=Ui[$APP.ka(null==a?null:a)];if(null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else if(c=Ui._,null!=c)a=c.g?c.g(a,b):c.call(null,a,b);else throw $APP.fb("IEncodeClojure.-js-\x3eclj",a);}return a};
  $APP.Xi=function(a){var b=$APP.Vi.h($APP.hf);return function(){function c(e){var f=null;if(0<arguments.length){f=0;for(var k=Array(arguments.length-0);f<k.length;)k[f]=arguments[f+0],++f;f=new $APP.Xc(k,0,null);}return d.call(this,f)}function d(e){var f=$APP.fe.j($APP.u(b),e,ge);return f===ge?(f=$APP.Gf.g(a,e),$APP.Wi.A(b,$APP.Rh,e,f),f):f}c.m=0;c.o=function(e){e=$APP.x(e);return d(e)};c.l=d;return c}()};
  $APP.Yi=function(a,b){return $APP.oc($APP.ne.j(function(c,d){var e=a.h?a.h(d):a.call(null,d);return $APP.Ug.j(c,e,$APP.De.g($APP.fe.j(c,e,$APP.kg),d))},$APP.mc($APP.hf),b))};$APP.bj=function(){return new $APP.n(null,3,[$APP.Zi,$APP.hf,$APP.$i,$APP.hf,$APP.aj,$APP.hf],null)};$APP.dj=function(){null==cj&&(cj=$APP.Vi.h($APP.bj()));return cj};
  $APP.ej=function(a,b,c){var d=$APP.A.g(b,c);if(d)return d;d=$APP.aj.h(a);d=d.h?d.h(b):d.call(null,b);if(!(d=$APP.he(d,c))&&(d=$APP.Xd(c)))if(d=$APP.Xd(b))if(d=$APP.xd(c)===$APP.xd(b)){d=true;for(var e=0;;)if(d&&e!==$APP.xd(c))d=$APP.ej(a,b.h?b.h(e):b.call(null,e),c.h?c.h(e):c.call(null,e)),e+=1;else return d}else return d;else return d;else return d};gj=function(a){return $APP.fj($APP.u($APP.dj()),a)};$APP.fj=function(a,b){return $APP.kf($APP.fe.g($APP.Zi.h(a),b))};
  $APP.hj=function(a,b,c,d){$APP.Wi.g(a,function(){return $APP.u(b)});return $APP.Wi.g(c,function(){return $APP.u(d)})};jj=function(a,b,c,d){c=$APP.ij(a,b,c);return $APP.r(c)?c:$APP.ej(d,a,b)};$APP.kj=function(a,b,c){if(null!=a&&null!=a.N)a=a.N(a,b,c);else {var d=$APP.kj[$APP.ka(null==a?null:a)];if(null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else if(d=$APP.kj._,null!=d)a=d.j?d.j(a,b,c):d.call(null,a,b,c);else throw $APP.fb("IMultiFn.-add-method",a);}return a};
  lj=function(a,b){throw Error(["No method in multimethod '",$APP.t.h(a),"' for dispatch value: ",$APP.t.h(b)].join(""));};$APP.mj=function(a,b,c,d,e,f,k,l){this.name=a;this.P=b;this.nf=c;this.ed=d;this.Ac=e;this.Dd=f;this.Tc=k;this.Nc=l;this.D=4194305;this.M=4352;};$APP.nj=function(a){this.Vc=a;this.F=null;this.D=2153775104;this.M=2048;};
  $APP.oj=function(a,b,c){var d=Error(a);this.message=a;this.data=b;this.cause=c;this.name=d.name;this.description=d.description;this.number=d.number;this.fileName=d.fileName;this.lineNumber=d.lineNumber;this.columnNumber=d.columnNumber;this.stack=d.stack;return this};$APP.pj=function(a){return a instanceof $APP.oj?a.data:null};
  $APP.Qj=function(a){return $APP.he(new $APP.Uh(null,new $APP.n(null,24,[$APP.qj,"null",$APP.rj,"null",sj,"null",$APP.vj,"null",wj,"null",$APP.xj,"null",$APP.yj,"null",$APP.zj,"null",Aj,"null",$APP.Bj,"null",$APP.Cj,"null",$APP.Dj,"null",Ej,"null",$APP.Fj,"null",Gj,"null",$APP.Hj,"null",$APP.Ij,"null",$APP.Jj,"null",$APP.Kj,"null",$APP.Lj,"null",$APP.Mj,"null",$APP.Nj,"null",$APP.Oj,"null",$APP.Pj,"null"],null),null),a)};
  Tj=function(a){null==Rj&&(Rj=$APP.ne.j(function(b,c){b[c]=true;return b},{},Sj));return Rj.hasOwnProperty(a)};$APP.Vj=function(a){var b=$APP.t.h(a);for(var c=new $APP.Fa,d=0;;)if(d<b.length){var e=b.charAt(d),f=$APP.wa(Uj,e);null!=f?c.append(f):c.append(e);d+=1;}else break;b=c.toString();b=".."===b?"_DOT__DOT_":$APP.r(Tj(b))?[b,"$"].join(""):b;return a instanceof $APP.w?$APP.Hi.h(b):b};
  Wj=function(a,b,c){var d=$APP.r(b.ignoreCase)?"gi":"g";d=$APP.r(b.multiline)?[d,"m"].join(""):d;return a.replace(new RegExp(b.source,$APP.r(b.unicode)?[d,"u"].join(""):d),c)};
  Yj=function(a){return function(){function b(d){var e=null;if(0<arguments.length){e=0;for(var f=Array(arguments.length-0);e<f.length;)f[e]=arguments[e+0],++e;e=new $APP.Xc(f,0,null);}return c.call(this,e)}function c(d){d=$APP.Xj.g(2,d);if($APP.A.g($APP.xd(d),1))return d=$APP.y(d),a.h?a.h(d):a.call(null,d);d=$APP.lg(d);return a.h?a.h(d):a.call(null,d)}b.m=0;b.o=function(d){d=$APP.x(d);return c(d)};b.l=c;return b}()};
  $APP.Zj=function(a,b,c){if("string"===typeof b)return a.replace(new RegExp(String(b).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08"),"g"),c);if(b instanceof RegExp)return "string"===typeof c?Wj(a,b,c):Wj(a,b,Yj(c));throw ["Invalid match arg: ",$APP.t.h(b)].join("");};$APP.ak=function(a,b,c){return a.replace(b,c)};$APP.bk=function(a){return a.toUpperCase()};$APP.ck=function(a){return a.toLowerCase()};
  fk=function(a,b){if(0>=b||b>=2+$APP.xd(a))return $APP.De.g($APP.lg($APP.He("",$APP.ui.g($APP.t,$APP.x(a)))),"");if($APP.r($APP.dk.g?$APP.dk.g(1,b):$APP.dk.call(null,1,b)))return new $APP.J(null,1,5,$APP.N,[a],null);if($APP.r($APP.dk.g?$APP.dk.g(2,b):$APP.dk.call(null,2,b)))return new $APP.J(null,2,5,$APP.N,["",a],null);b-=2;return $APP.De.g($APP.lg($APP.He("",$APP.ek.j($APP.lg($APP.ui.g($APP.t,$APP.x(a))),0,b))),$APP.ji.g(a,b))};$APP.gk=function(a){return $APP.ua(null==a?"":String(a))};
  $APP.hk=function(a,b){return  -1!=a.indexOf(b)};ik=function(a,b,c,d,e){this.lc=a;this.form=b;this.H=c;this.B=d;this.F=e;this.D=2230716170;this.M=139264;};jk=function(a,b){return new ik(b,a,null,null,null)};sk=function(a){return null==a?null:","===a?true:kk.test(a)};tk=function(a){return null==a?null:!/[^0-9]/.test(a)};$APP.uk=function(a){return "\n"===a||"\n"===a||null==a};
  wk=function(a,b){return function e(d){return new $APP.Ne(null,function(){for(;;){var f=$APP.x(d);if(f){if($APP.Zd(f)){var k=$APP.uc(f),l=$APP.xd(k),m=$APP.Te(l);return function(){for(var q=0;;)if(q<l){var p=$APP.Id(k,q),v=m;if(p instanceof $APP.w||p instanceof $APP.I){var D=$APP.vk.g($APP.Le,$APP.ai)(p),H=$APP.B.j(D,0,null);D=$APP.B.j(D,1,null);var O=p instanceof $APP.w?$APP.Hi:$APP.vi;p=null==H?O.g?O.g(a,D):O.call(null,a,D):$APP.A.g("_",H)?O.h?O.h(D):O.call(null,D):p;}v.add(p);q+=1;}else return  true}()?
  $APP.We($APP.Ye(m),e($APP.vc(f))):$APP.We($APP.Ye(m),null)}var h=$APP.y(f);return $APP.He(h instanceof $APP.w||h instanceof $APP.I?function(){var q=$APP.vk.g($APP.Le,$APP.ai)(h),p=$APP.B.j(q,0,null);q=$APP.B.j(q,1,null);var v=h instanceof $APP.w?$APP.Hi:$APP.vi;return null==p?v.g?v.g(a,q):v.call(null,a,q):$APP.A.g("_",p)?v.h?v.h(q):v.call(null,q):h}():h,e($APP.cd(f)))}return null}},null,null)}(b)};xk=function(a,b){a=parseInt(a,b);return $APP.r(isNaN(a))?-1:a};
  yk=function(a){if(null!=a&&null!=a.X)a=a.X(a);else {var b=yk[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=yk._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("Reader.read-char",a);}return a};zk=function(a){if(null!=a&&null!=a.Db)a=a.Db(a);else {var b=zk[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=zk._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("Reader.peek-char",a);}return a};
  Ak=function(a,b){if(null!=a&&null!=a.fc)a.fc(a,b);else {var c=Ak[$APP.ka(null==a?null:a)];if(null!=c)c.g?c.g(a,b):c.call(null,a,b);else if(c=Ak._,null!=c)c.g?c.g(a,b):c.call(null,a,b);else throw $APP.fb("IPushbackReader.unread",a);}};$APP.Bk=function(a){if(null!=a&&null!=a.Pc)a=a.Pc(a);else {var b=$APP.Bk[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=$APP.Bk._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IndexingReader.get-line-number",a);}return a};
  $APP.Ck=function(a){if(null!=a&&null!=a.Oc)a=a.Oc(a);else {var b=$APP.Ck[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=$APP.Ck._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IndexingReader.get-column-number",a);}return a};Dk=function(a){if(null!=a&&null!=a.Je)a=a.Kd;else {var b=Dk[$APP.ka(null==a?null:a)];if(null!=b)a=b.h?b.h(a):b.call(null,a);else if(b=Dk._,null!=b)a=b.h?b.h(a):b.call(null,a);else throw $APP.fb("IndexingReader.get-file-name",a);}return a};
  $APP.Ek=function(a,b){this.ga=a;this.Oe=b;this.hd=0;};$APP.Gk=function(a){var b=$APP.Fk.h(1);this.Nb=a;this.Mc=b;this.Pb=this.Rd=1;};$APP.Hk=function(a,b){return "\r"===b?(b=a.Db(null),"\f"!==b&&"\n"!==b||a.X(null),"\n"):b};Ik=function(a){this.Nb=a;this.sb=this.line=1;this.Xb=true;this.jc=null;this.Ed=0;this.Kd=null;};Jk=function(a){return null!=a?$APP.Oc===a.Ie?true:false:false};$APP.Kk=function(a){return new $APP.Gk(new $APP.Ek(a,$APP.xd(a)))};
  $APP.Lk=function(a){return new Ik("string"===typeof a?$APP.Kk(a):a)};
  Sk=function(a,b){var c=$APP.Mk.h($APP.u(a.frames));try{$APP.Wi.l(a.frames,$APP.Nk,new $APP.J(null,1,5,$APP.N,[$APP.Ok],null),$APP.De,$APP.F([c.getLength()]));var d=b.v?b.v():b.call(null);if(null!=d&&(d.D&131072||$APP.Oc===d.Yd)){var e=$APP.u(a.frames);var f=$APP.ji.g($APP.t.h($APP.Mk.h(e)),$APP.y($APP.Ok.h(e)));var k=new $APP.n(null,1,[$APP.Pk,f],null),l=$APP.Nd(d);var m=$APP.Md(d,$APP.Qk.l($APP.F([k,$APP.Rk.g(l,$APP.Pk)])));}else m=d;return m}finally{$APP.Wi.A(a.frames,$APP.Nk,new $APP.J(null,1,5,
  $APP.N,[$APP.Ok],null),$APP.cd);}};Wk=function(a,b,c,d){var e=$APP.xd(b);a=$APP.r(a)?0:10<e?10:e;b=$APP.ui.g($APP.Tk.g(Uk,true),$APP.Mf.g(a,b));b=$APP.Gf.g($APP.t,$APP.Vk.g(" ",b));e=a<e?"...":null;return [$APP.t.h(c),$APP.t.h(b),e,$APP.t.h(d)].join("")};
  dl=function(a,b,c){b=new $APP.n(null,2,[$APP.Xk,Yk,Zk,b],null);a=Jk(a)?$APP.Rh.l(b,$APP.$k,Dk(a),$APP.F([$APP.al,$APP.Bk(a),bl,$APP.Ck(a)])):b;var d=$APP.$k.h(a);b=$APP.al.h(a);var e=bl.h(a);d=$APP.r(d)?[$APP.t.h(d)," "].join(""):null;b=$APP.r(b)?["[line ",$APP.t.h(b),", col ",$APP.t.h(e),"]"].join(""):null;c=$APP.Gf.J($APP.t,d,b,$APP.r($APP.r(d)?d:b)?" ":null,c);throw $APP.cl.g(c,a);};fl=function(a,b){return dl(a,el,$APP.F([$APP.Gf.g($APP.t,b)]))};
  hl=function(a,b){return dl(a,gl,$APP.F([$APP.Gf.g($APP.t,b)]))};jl=function(a,b){return dl(a,$APP.il,$APP.F([$APP.Gf.g($APP.t,b)]))};kl=function(a,b,c,d){fl(a,$APP.F(["The map literal starting with ",Uk.g(false,$APP.y(d)),$APP.r(b)?[" on line ",$APP.t.h(b)," column ",$APP.t.h(c)].join(""):null," contains ",$APP.xd(d)," form(s). Map literals must contain an even number of forms."]));};ll=function(a,b,c){return fl(a,$APP.F(["Invalid ",$APP.ai(b),": ",c,"."]))};
  ml=function(a,b,c){return fl(a,$APP.F(["Invalid character: ",c," found while reading ",$APP.ai(b),"."]))};ol=function(a,b){a:{var c=$APP.nl instanceof $APP.I?$APP.nl.da:null;switch(c){case "regex":c='#"';break a;case "string":c='"';break a;default:throw Error(["No matching clause: ",$APP.t.h(c)].join(""));}}return jl(a,$APP.F(["Unexpected EOF reading ",$APP.ai($APP.nl)," starting ",$APP.Gf.j($APP.t,c,b),"."]))};pl=function(a,b){return hl(a,$APP.F(["Invalid digit ",b," in unicode character."]))};
  ql=function(a){return fl(a,$APP.F(["Octal escape sequence must be in range [0, 377]."]))};
  rl=function(a,b){b=function(c){return function f(e){return new $APP.Ne(null,function(){for(var k=e;;)if(k=$APP.x(k)){if($APP.Zd(k)){var l=$APP.uc(k),m=$APP.xd(l),h=$APP.Te(m);a:for(var q=0;;)if(q<m){var p=$APP.Id(l,q),v=$APP.B.j(p,0,null);1<$APP.B.j(p,1,null)&&h.add(v);q+=1;}else {l=true;break a}return l?$APP.We($APP.Ye(h),f($APP.vc(k))):$APP.We($APP.Ye(h),null)}h=$APP.y(k);l=$APP.B.j(h,0,null);if(1<$APP.B.j(h,1,null))return $APP.He(l,f($APP.cd(k)));k=$APP.cd(k);}else return null},null,null)}($APP.gi(c))}(b);
  return $APP.Gf.J($APP.t,a,1<$APP.xd(b)?"s":null,": ",$APP.Vk.g(", ",b))};sl=function(a,b,c){fl(a,$APP.F([rl([$APP.Ea($APP.ai(b))," literal contains duplicate key"].join(""),c)]));};tl=function(a,b){return tk(b)||("+"===b||"-"===b)&&tk(a.Db(null))};ul=function(a){for(var b=a.X(null);;)if(sk.h?sk.h(b):sk.call(null,b))b=a.X(null);else return b};vl=function(a,b){a=$APP.ii(a,b);return $APP.B.j(a,0,null)===b};
  zl=function(a){if(vl(wl,a)){var b=$APP.lg($APP.ii(wl,a));if(null!=(b.h?b.h(2):b.call(null,2)))a=0;else {a="-"===(b.h?b.h(1):b.call(null,1));b=null!=(b.h?b.h(3):b.call(null,3))?new $APP.J(null,2,5,$APP.N,[b.h?b.h(3):b.call(null,3),10],null):null!=(b.h?b.h(4):b.call(null,4))?new $APP.J(null,2,5,$APP.N,[b.h?b.h(4):b.call(null,4),16],null):null!=(b.h?b.h(5):b.call(null,5))?new $APP.J(null,2,5,$APP.N,[b.h?b.h(5):b.call(null,5),8],null):null!=(b.h?b.h(7):b.call(null,7))?new $APP.J(null,2,5,$APP.N,[b.h?b.h(7):
  b.call(null,7),parseInt(b.h?b.h(6):b.call(null,6))],null):new $APP.J(null,2,5,$APP.N,[null,null],null);var c=b.h?b.h(0):b.call(null,0);null==c?a=null:(b=parseInt(c,b.h?b.h(1):b.call(null,1)),a=a?-1*b:b,a=$APP.r(isNaN(a))?null:a);}}else vl(xl,a)?(b=$APP.lg($APP.ii(xl,a)),a=null!=(b.h?b.h(4):b.call(null,4))?parseFloat(b.h?b.h(1):b.call(null,1)):parseFloat(a)):vl(yl,a)?(b=$APP.lg($APP.ii(yl,a)),a=b.h?b.h(1):b.call(null,1),b=b.h?b.h(2):b.call(null,2),a=$APP.r($APP.ii(/^\+/,a))?$APP.ji.g(a,1):a,a=parseInt(a)/
  parseInt(b)):a=null;return a};Al=function(a){if(""===a||true===/:$/.test(a)||true===/^::/.test(a))return null;var b=a.indexOf("/"),c=0<b?$APP.ji.j(a,0,b):null;if(null!=c){b+=1;if(b===$APP.xd(a))return null;a=$APP.ji.g(a,b);return tk($APP.B.g(a,0))||""===a||false!==/:$/.test(c)||"/"!==a&&-1!==a.indexOf("/")?null:new $APP.J(null,2,5,$APP.N,[c,a],null)}return "/"===a||-1===a.indexOf("/")?new $APP.J(null,2,5,$APP.N,[null,a],null):null};
  Kl=function(){return function(){function a(c,d){var e=null;if(1<arguments.length){e=0;for(var f=Array(arguments.length-1);e<f.length;)f[e]=arguments[e+1],++e;e=new $APP.Xc(f,0,null);}return b.call(this,c,e)}function b(c){return fl(c,$APP.F(["Unreadable form"]))}a.m=1;a.o=function(c){var d=$APP.y(c);c=$APP.cd(c);return b(d)};a.l=b;return a}()};Ml=function(a){var b="#"!==a;return b?(b="'"!==a)?(b=":"!==a)?Ll.h?Ll.h(a):Ll.call(null,a):b:b:b};Nl=function(a){return "@"===a||"`"===a||"~"===a};
  Ol=function(a,b,c,d){if($APP.Za(c))return jl(a,$APP.F(["Unexpected EOF while reading start of ",$APP.ai(b),"."]));if($APP.r($APP.r(d)?Nl(c):d))return ml(a,b,c);d=new $APP.Fa;for(Ak(a,c);;){if(sk(c)||Ml(c)||null==c)return $APP.t.h(d);if(Nl(c))return ml(a,b,c);d.append(yk(a));c=zk(a);}};Rl=function(a,b,c){b=yk(a);if($APP.r(b)){var d=Pl.h?Pl.h(b):Pl.call(null,b);if($APP.r(d))return d.j?d.j(a,b,c):d.call(null,a,b,c);Ak(a,b);return Ql.j?Ql.j(a,b,c):Ql.call(null,a,b,c)}return jl(a,$APP.F(["Unexpected EOF while reading dispatch character."]))};
  Sl=function(a,b){return fl(a,$APP.F(["Unmatched delimiter ",b,"."]))};Tl=function(a,b,c){b=1+b;if($APP.xd(a)!==b)throw hl(null,$APP.F(["Invalid unicode literal: \\",a,"."]));for(var d=1,e=0;;){if(d===b)return String.fromCharCode(e);var f=xk($APP.B.g(a,d),c);if(-1===f)return c=$APP.B.g(a,d),hl(null,$APP.F(["Invalid digit ",c," in unicode character \\",a,"."]));e=f+e*c;d+=1;}};
  Ul=function(a,b,c,d,e){for(var f=1,k=xk(b,c);;){if(-1===k)return pl(a,b);if(f!==d){var l=zk(a);var m=sk(l);m||(m=Ll.h?Ll.h(l):Ll.call(null,l),m=$APP.r(m)?m:null==l);if($APP.r(m))return $APP.r(e)?hl(a,$APP.F(["Invalid unicode literal. Unicode literals should be ",d,"characters long. ","Value supplied is ",f," characters long."])):String.fromCharCode(k);m=xk(l,c);yk(a);if(-1===m)return pl(a,l);k=m+k*c;f+=1;}else return String.fromCharCode(k)}};
  Wl=function(a){var b=yk(a);if(null!=b){b=Ml(b)||Nl(b)||sk(b)?$APP.t.h(b):Ol(a,Vl,b,false);var c=b.length;if(1===c)return $APP.B.g(b,0);if("newline"===b)return "\n";if("space"===b)return " ";if("tab"===b)return "\t";if("backspace"===b)return "\b";if("formfeed"===b)return "\f";if("return"===b)return "\r";if($APP.r($APP.qa(b,"u")))return b=Tl(b,4,16),c=b.charCodeAt(),55295<c&&57344>c?(b=c.toString(16),a=fl(a,$APP.F(["Invalid character literal \\u",b,"."]))):a=b,a;if($APP.r($APP.qa(b,"o"))){--c;if(3<c)return fl(a,
  $APP.F(["Invalid octal escape sequence in a character literal: ",b,". Octal escape sequences must be 3 or fewer digits."]));b=Tl(b,c,8);return 255<(b|0)?ql(a):b}return fl(a,$APP.F(["Unsupported character: ",b,"."]))}return jl(a,$APP.F(["Unexpected EOF while reading character."]))};Xl=function(a){return Jk(a)?new $APP.J(null,2,5,$APP.N,[$APP.Bk(a),($APP.Ck(a)|0)-1|0],null):null};
  $l=function(a,b,c,d){var e=Xl(c),f=$APP.B.j(e,0,null);e=$APP.B.j(e,1,null);b=null==b?null:$APP.te(b);for(var k=$APP.mc($APP.kg);;){var l=ul(c);if(!$APP.r(l)){var m=a,h=f,q=e,p=$APP.xd(k);jl(c,$APP.F(["Unexpected EOF while reading ",$APP.r(p)?["item ",$APP.t.h(p)," of "].join(""):null,$APP.ai(m),$APP.r(h)?[", starting at line ",$APP.t.h(h)," and column ",$APP.t.h(q)].join(""):null,"."]));}if($APP.A.g(b,null==l?null:$APP.te(l)))return $APP.oc(k);m=Ll.h?Ll.h(l):Ll.call(null,l);$APP.r(m)?(l=m.j?m.j(c,
  l,d):m.call(null,c,l,d),k=l!==c?$APP.fg.g(k,l):k):(Ak(c,l),l=$APP.Yl?$APP.Yl(c,true,null,d):Zl.call(null,c,true,null,d),k=l!==c?$APP.fg.g(k,l):k);}};bm=function(a,b,c){a=$l($APP.am,")",a,c);return $APP.Qd(a)?$APP.bd:$APP.Gf.g($APP.Q,a)};dm=function(a,b,c){return $l($APP.cm,"]",a,c)};
  hm=function(a,b,c){var d=Xl(a);b=$APP.B.j(d,0,null);d=$APP.B.j(d,1,null);c=$l($APP.em,"}",a,c);var e=$APP.xd(c),f=$APP.fm.g(2,c),k=$APP.Zh(f);!$APP.Ff(e)&&kl(a,b,d,c);$APP.A.g($APP.xd(k),$APP.xd(f))||sl(a,$APP.em,f);if(e<=2*gm)a=$APP.Ze(c),a=new $APP.n(null,a.length/2,a,null);else a:for(a=$APP.Ze(c),b=a.length,d=0,e=$APP.mc(Tg);;)if(d<b)c=d+2,e=pc(e,a[d],a[d+1]),d=c;else {a=$APP.oc(e);break a}return a};
  im=function(a,b){for(var c=function(){var k=new $APP.Fa;k.append(b);return k}(),d=yk(a);;){if($APP.r(function(){var k=sk(d);if(k)return k;k=Ll.h?Ll.h(d):Ll.call(null,d);return $APP.r(k)?k:null==d}())){var e=$APP.t.h(c);Ak(a,d);var f=zl(e);return $APP.r(f)?f:fl(a,$APP.F(["Invalid number: ",e,"."]))}e=function(){var k=c;k.append(d);return k}();f=yk(a);c=e;d=f;}};
  jm=function(a,b){a=yk(b);switch(a){case "t":return "\t";case "r":return "\r";case "n":return "\n";case "\\":return "\\";case '"':return '"';case "b":return "\b";case "f":return "\f";case "u":return a=yk(b),-1===parseInt(a|0,16)?fl(b,$APP.F(["Invalid unicode escape: \\u",a,"."])):Ul(b,a,16,4,true);default:return tk(a)?(a=Ul(b,a,8,3,false),255<(a|0)?ql(b):a):fl(b,$APP.F(["Unsupported escape character: \\",a,"."]))}};
  km=function(a){for(var b=new $APP.Fa,c=yk(a);;){var d=c;if($APP.A.g(null,d))return ol(a,$APP.F(['"',b]));if($APP.A.g("\\",d)){d=function(){var f=b;f.append(jm(b,a));return f}();var e=yk(a);b=d;c=e;}else {if($APP.A.g('"',d))return $APP.t.h(b);d=function(){var f=b;f.append(c);return f}();e=yk(a);b=d;c=e;}}};
  nm=function(a,b){b=Ol(a,$APP.lm,b,true);if($APP.r(b))switch(b){case "nil":return null;case "true":return  true;case "false":return  false;case "/":return $APP.mm;default:var c=Al(b);c=$APP.r(c)?$APP.Hi.g(c.h?c.h(0):c.call(null,0),c.h?c.h(1):c.call(null,1)):null;return $APP.r(c)?c:ll(a,$APP.lm,b)}else return null};
  pm=function(a){var b=yk(a);if(sk(b))return fl(a,$APP.F(["A single colon is not a valid keyword."]));b=Ol(a,om,b,true);var c=Al(b);if($APP.r($APP.r(c)?-1===b.indexOf("::"):c)){var d=c.h?c.h(0):c.call(null,0);c=c.h?c.h(1):c.call(null,1);return ":"===$APP.B.g(b,0)?ll(a,om,[":",$APP.t.h(b)].join("")):$APP.vi.g(d,c)}return ll(a,om,[":",$APP.t.h(b)].join(""))};
  rm=function(a,b,c){b=$APP.Yl?$APP.Yl(a,true,null,c):Zl.call(null,a,true,null,c);b=b instanceof $APP.I?$APP.gf([b,true]):b instanceof $APP.w?new $APP.n(null,1,[$APP.qm,b],null):"string"===typeof b?new $APP.n(null,1,[$APP.qm,b],null):b;$APP.Vd(b)||fl(a,$APP.F(["Metadata cannot be ",Uk.g(false,b),". Metadata must be a Symbol, Keyword, String or Map."]));c=$APP.Yl?$APP.Yl(a,true,null,c):Zl.call(null,a,true,null,c);return null!=c&&(c.D&131072||$APP.Oc===c.Yd)?$APP.Md(c,$APP.Qk.l($APP.F([$APP.Nd(c),b]))):fl(a,$APP.F(["Metadata can not be applied to ",
  Uk.g(false,c),". ","Metadata can only be applied to IMetas."]))};tm=function(a,b,c){b=$l($APP.sm,"}",a,c);c=$APP.Zh(b);$APP.A.g($APP.xd(b),$APP.xd(c))||sl(a,$APP.sm,b);return c};um=function(a){$APP.Yl?$APP.Yl(a,true,null,true):Zl.call(null,a,true,null,true);return a};
  wm=function(a,b,c){b=yk(a);b=Ol(a,vm,b,true);var d=null==b?null:Al(b);if(null==d)var e=null;else e=$APP.B.j(d,0,null),d=$APP.B.j(d,1,null),e=$APP.r(e)?null:d;return $APP.r(e)?"{"===ul(a)?(c=$l(vm,"}",a,c),!$APP.Ff($APP.xd(c))&&kl(a,null,null,c),b=wk($APP.t.h(e),$APP.fm.g(2,c)),c=$APP.fm.g(2,$APP.cd(c)),$APP.A.g($APP.xd($APP.Zh(b)),$APP.xd(b))||sl(a,vm,b),$APP.bi(b,c)):fl(a,$APP.F(["Namespaced map with namespace ",b," does not specify a map."])):fl(a,$APP.F(["Invalid value used as namespace in namespaced map: ",
  b,"."]))};Am=function(a,b,c){b=$APP.Yl?$APP.Yl(a,true,null,c):Zl.call(null,a,true,null,c);return $APP.A.g(xm,b)?Number.NaN:$APP.A.g(ym,b)?Number.NEGATIVE_INFINITY:$APP.A.g(zm,b)?Number.POSITIVE_INFINITY:fl(a,$APP.F([["Invalid token: ##",$APP.t.h(b)].join("")]))};
  Ll=function(a){switch(a){case '"':return km;case ":":return pm;case ";":return Bm;case "^":return rm;case "(":return bm;case ")":return Sl;case "[":return dm;case "]":return Sl;case "{":return hm;case "}":return Sl;case "\\":return Wl;case "#":return Rl;default:return null}};Pl=function(a){switch(a){case "^":return rm;case "{":return tm;case "\x3c":return Kl();case "!":return Bm;case "_":return um;case ":":return wm;case "#":return Am;default:return null}};
  Ql=function(a,b,c){b=$APP.Yl?$APP.Yl(a,true,null,c):Zl.call(null,a,true,null,c);var d=$APP.Yl?$APP.Yl(a,true,null,c):Zl.call(null,a,true,null,c);b instanceof $APP.w||fl(a,$APP.F(["Invalid reader tag: ",Uk.g(false,"Reader tag must be a symbol"),". Reader tags must be symbols."]));var e=$APP.fe.g($APP.Cm.h(c),b);e=$APP.r(e)?e:$APP.hf.h?$APP.hf.h(b):$APP.hf.call(null,b);if($APP.r(e))return e.h?e.h(d):e.call(null,d);c=$APP.Dm.h(c);return $APP.r(c)?c.g?c.g(b,d):c.call(null,b,d):fl(a,$APP.F(["No reader function for tag ",
  Uk.g(false,b),"."]))};Zl=function(a){switch(arguments.length){case 1:return $APP.Em($APP.hf,arguments[0]);case 2:return $APP.Em(arguments[0],arguments[1]);case 4:return $APP.Yl(arguments[0],arguments[1],arguments[2],arguments[3]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.Em=function(a,b){a=$APP.jf(a);var c=$APP.fe.g(a,$APP.il),d=!$APP.he(a,$APP.il);return $APP.Yl(b,d,c,a)};
  $APP.Yl=function(a,b,c,d){try{for(;;){var e=yk(a);if(!sk(e)){if(null==e){if($APP.r(b)){b=a;var f=$APP.r(null)?jl(b,$APP.F(["EOF while reading, starting at line ",null,"."])):jl(b,$APP.F(["EOF while reading."]));}else f=c;return f}if(tl(a,e))return im(a,e);var k=Ll(e);if($APP.r(k)){var l=k.j?k.j(a,e,d):k.call(null,a,e,d);if(l!==a)return l}else return nm(a,e)}}}catch(m){if(m instanceof Error){f=m;if(f instanceof $APP.oj){b=$APP.pj(f);if($APP.A.g(Yk,$APP.Xk.h(b)))throw f;throw $APP.cl.j(f.message,$APP.Qk.l($APP.F([new $APP.n(null,
  1,[$APP.Xk,Yk],null),b,Jk(a)?new $APP.n(null,3,[$APP.al,$APP.Bk(a),$APP.Fm,$APP.Ck(a),$APP.$k,Dk(a)],null):null])),f);}throw $APP.cl.j(f.message,$APP.Qk.l($APP.F([new $APP.n(null,1,[$APP.Xk,Yk],null),Jk(a)?new $APP.n(null,3,[$APP.al,$APP.Bk(a),$APP.Fm,$APP.Ck(a),$APP.$k,Dk(a)],null):null])),f);}throw m;}};Gm=function(a){a=parseInt(a,10);return $APP.Za(isNaN(a))?a:null};
  Hm=function(a,b,c,d){if(!(a<=b&&b<=c))throw Error([$APP.t.h(d)," Failed:  ",$APP.t.h(a),"\x3c\x3d",$APP.t.h(b),"\x3c\x3d",$APP.t.h(c)].join(""));return b};
  Km=function(a){var b=$APP.hi(Im,a);$APP.B.j(b,0,null);var c=$APP.B.j(b,1,null),d=$APP.B.j(b,2,null),e=$APP.B.j(b,3,null),f=$APP.B.j(b,4,null),k=$APP.B.j(b,5,null),l=$APP.B.j(b,6,null),m=$APP.B.j(b,7,null),h=$APP.B.j(b,8,null),q=$APP.B.j(b,9,null),p=$APP.B.j(b,10,null);if($APP.Za(b))throw Error(["Unrecognized date/time syntax: ",$APP.t.h(a)].join(""));a=Gm(c);b=function(){var P=Gm(d);return $APP.r(P)?P:1}();c=function(){var P=Gm(e);return $APP.r(P)?P:1}();var v=function(){var P=Gm(f);return $APP.r(P)?
  P:0}(),D=function(){var P=Gm(k);return $APP.r(P)?P:0}(),H=function(){var P=Gm(l);return $APP.r(P)?P:0}(),O=function(){a:if($APP.A.g(3,$APP.xd(m)))var P=m;else if(3<$APP.xd(m))P=$APP.ji.j(m,0,3);else for(P=new $APP.Fa(m);;)if(3>P.getLength())P=P.append("0");else {P=P.toString();break a}P=Gm(P);return $APP.r(P)?P:0}();h=($APP.A.g(h,"-")?-1:1)*(60*function(){var P=Gm(q);return $APP.r(P)?P:0}()+function(){var P=Gm(p);return $APP.r(P)?P:0}());return new $APP.J(null,8,5,$APP.N,[a,Hm(1,b,12,"timestamp month field must be in range 1..12"),
  Hm(1,c,Jm(b,0===$APP.ve(a,4)&&(0!==$APP.ve(a,100)||0===$APP.ve(a,400))),"timestamp day field must be in range 1..last day in month"),Hm(0,v,23,"timestamp hour field must be in range 0..23"),Hm(0,D,59,"timestamp minute field must be in range 0..59"),Hm(0,H,$APP.A.g(D,59)?60:59,"timestamp second field must be in range 0..60"),Hm(0,O,999,"timestamp millisecond field must be in range 0..999"),h],null)};
  Lm=function(a){if("string"===typeof a){var b=Km(a);if($APP.r(b)){a=$APP.B.j(b,0,null);var c=$APP.B.j(b,1,null),d=$APP.B.j(b,2,null),e=$APP.B.j(b,3,null),f=$APP.B.j(b,4,null),k=$APP.B.j(b,5,null),l=$APP.B.j(b,6,null);b=$APP.B.j(b,7,null);b=new Date(Date.UTC(a,c-1,d,e,f,k,l)-6E4*b);}else throw Error(["Unrecognized date/time syntax: ",$APP.t.h(a)].join(""));return b}throw Error("Instance literal expects a string for its timestamp.");};
  Mm=function(a){return "string"===typeof a||a instanceof $APP.I&&null==$APP.Le(a)};$APP.Nm=function(a){this.val=a;};
  Pm=function(a,b,c){if($APP.Ae(c))return $APP.Md(function(){var e=$APP.Gf.g($APP.Q,$APP.ui.g(a,c));return b.h?b.h(e):b.call(null,e)}(),$APP.Nd(c));if($APP.hg(c)){var d=new $APP.Ig(function(){var e=$APP.Gb(c);return a.h?a.h(e):a.call(null,e)}(),function(){var e=$APP.Hb(c);return a.h?a.h(e):a.call(null,e)}(),null);return b.h?b.h(d):b.call(null,d)}return $APP.be(c)?$APP.Md(function(){var e=$APP.Om.h($APP.ui.g(a,c));return b.h?b.h(e):b.call(null,e)}(),$APP.Nd(c)):$APP.Wd(c)?(d=$APP.ne.j(function(e,f){return $APP.De.g(e,
  a.h?a.h(f):a.call(null,f))},c,c),b.h?b.h(d):b.call(null,d)):$APP.Rd(c)?(d=$APP.Rg.g($APP.Hd(c),$APP.ui.g(a,c)),b.h?b.h(d):b.call(null,d)):b.h?b.h(c):b.call(null,c)};
  Ym=function(a){var b=$APP.Lf(new $APP.n(null,2,[$APP.Qm,0,Rm,false],null));a=Sm(function(e){if(e instanceof $APP.w){var f=$APP.hi(/^%(.*)/,$APP.ai(e));if($APP.r(f)){$APP.B.j(f,0,null);f=$APP.B.j(f,1,null);if($APP.Qd(f))return b.Rb(null,$APP.Tm.A(b.nb(null),$APP.Qm,$APP.Um,1)),Vm;$APP.A.g("\x26",f)?b.Rb(null,$APP.Rh.j(b.nb(null),Rm,true)):(f=parseInt(f),b.Rb(null,$APP.Tm.A(b.nb(null),$APP.Qm,$APP.Um,f)));}}return e},a);var c=$APP.u(b),d=$APP.jf(c);c=$APP.fe.g(d,$APP.Qm);d=$APP.fe.g(d,Rm);c=$APP.ui.g(function(e){return $APP.Hi.h(["%",
  $APP.t.h(e)].join(""))},$APP.Wm.g(1,c+1));c=$APP.lg($APP.R.g(c,$APP.r(d)?new $APP.J(null,2,5,$APP.N,[$APP.qj,Xm],null):null));return new $APP.G(null,$APP.Hj,new $APP.G(null,c,new $APP.G(null,a,null,1,null),2,null),3,null)};
  gn=function(a,b,c,d){a:{d=$APP.x(d);for(var e=$APP.mc($APP.kg);;)if(d){var f=$APP.y(d);e=$APP.fg.g(e,$APP.be(f)&&$APP.A.g($APP.y(f),$APP.Zm)?new $APP.G(null,$m,new $APP.G(null,$APP.Cd(f),null,1,null),2,null):$APP.be(f)&&$APP.A.g($APP.y(f),an)?$APP.Cd(f):new $APP.G(null,$m,new $APP.G(null,bn.j?bn.j(a,b,f):bn.call(null,a,b,f),null,1,null),2,null));d=$APP.z(d);}else {a=$APP.x($APP.oc(e));break a}}a=new $APP.G(null,cn,new $APP.G(null,new $APP.G(null,dn,new $APP.G(null,$APP.He(en,a),null,1,null),2,null),
  null,1,null),2,null);return $APP.r(c)?new $APP.G(null,fn,new $APP.G(null,c,new $APP.G(null,a,null,1,null),2,null),3,null):a};hn=function(a){a=$APP.x(a);for(var b=$APP.mc($APP.kg);;)if(a){var c=$APP.y(a);a=$APP.z(a);b=$APP.fg.g($APP.fg.g(b,$APP.Gb(c)),$APP.Hb(c));}else return $APP.x($APP.oc(b))};
  rn=function(a,b,c){var d=$APP.jf(a),e=$APP.fe.g(d,jn);if($APP.Qj(c))return new $APP.G(null,$APP.Mj,new $APP.G(null,c,null,1,null),2,null);if(c instanceof $APP.w)return new $APP.G(null,$APP.Mj,new $APP.G(null,function(){var f=$APP.ai(c);if($APP.Qj(c))return c;if($APP.ra(f,"#")){var k=$APP.fe.g($APP.u(e),c);if($APP.r(k))return k;f=$APP.ji.j(f,0,f.length-1);f=$APP.kn.h([f,"__"].join(""));f=$APP.Hi.h([$APP.ai(f),"__auto__"].join(""));$APP.Wi.A(e,$APP.Rh,c,f);return f}f=$APP.ln.h($APP.mn.h(d));f=$APP.r(f)?
  f:$APP.se;return f.h?f.h(c):f.call(null,c)}(),null,1,null),2,null);if($APP.be(c)&&$APP.A.g($APP.y(c),$APP.Zm))return $APP.Cd(c);if($APP.be(c)&&$APP.A.g($APP.y(c),an))throw Error("unquote-splice not in list");if($APP.Rd(c)){if(c instanceof $APP.fc)return c;if($APP.Vd(c))return gn(d,b,16<=$APP.xd(c)?nn:on,hn(c));if($APP.Xd(c))return new $APP.G(null,pn,new $APP.G(null,gn(d,b,null,c),null,1,null),2,null);if($APP.Sd(c))return gn(d,b,qn,c);if($APP.be(c)||$APP.Ae(c))return (a=$APP.x(c))?gn(d,b,null,a):$APP.Q($m);
  throw Error("Unknown Collection type");}return c instanceof $APP.I||"number"===typeof c||$APP.bb(c)||"string"===typeof c||null==c||$APP.ae(c)||c instanceof RegExp?c:new $APP.G(null,$APP.Mj,new $APP.G(null,c,null,1,null),2,null)};
  bn=function(a,b,c){var d=rn(a,b,c),e=null!=c?c.D&262144||$APP.Oc===c.je?true:false:false;return (e?$APP.x($APP.Rk.l($APP.Nd(c),$APP.sn.h(a),$APP.F([$APP.tn.h(a),un.h(a),vn.h(a)]))):e)?new $APP.G(null,wn,new $APP.G(null,d,new $APP.G(null,rn(a,b,$APP.Nd(c)),null,1,null),2,null),3,null):d};yn=function(a,b,c){return xn(a,b,c,null)};xn=function(a,b,c,d){return zn(a,b,c,d,null)};
  zn=function(a,b,c,d,e){var f=Jk(b),k=f?bl.g(e,$APP.Ck(b)):null;b=f?An.g(e,$APP.Bk(b)):null;throw $APP.cl.g(c,$APP.Qk.l($APP.F([$APP.Rh.l(new $APP.n(null,1,[$APP.Xk,Bn],null),$APP.sn.h(a),b,$APP.F([$APP.tn.h(a),k])),d])));};Cn=function(a){return $APP.r(a)?-1<["\r","\n","\t"," ",","].indexOf(a):a};
  Dn=function(a,b){for(var c=new $APP.Fa;;){var d=Cn(b);if(!$APP.r(d)){b:switch(b){case '"':case ";":case "@":case "^":case "`":case "~":case "(":case ")":case "[":case "]":case "{":case "}":case "\\":d=true;break b;default:d=false;}d=$APP.r(d)?d:null==b;}if($APP.r(d))return $APP.r(b)&&a.fc(null,b),$APP.t.h(c);c=c.append(b);b=a.X(null);}};
  En=function(a,b,c){for(var d=function(){var l=new $APP.Fa;l.append(c);return l}(),e=b.X(null);;){if($APP.r(function(){var l=Cn(e);if($APP.r(l))return l;a:switch(e){case ":":case ";":case "'":case "@":case "^":case "`":case "~":case "(":case ")":case "[":case "]":case "{":case "}":case "\\":case "%":case "#":case '"':l=true;break a;default:l=false;}return $APP.r(l)?l:null==e}())){var f=$APP.t.h(d);b.fc(null,e);var k=zl(f);return $APP.r(k)?k:yn(a,b,["Invalid number: ",f].join(""))}f=function(){var l=d;l.append(e);
  return l}();k=b.X(null);d=f;e=k;}};Gn=function(a,b){a=Fn.h(a);return $APP.Em(a,b)};
  Ln=function(a,b){var c=Jk(b),d=c?b.Pc(null):null;c=c?b.Oc(null):null;for(var e=b.X(null),f=new $APP.Fa,k=b.X(null);;){var l=k;if($APP.A.g(null,l))return xn(a,b,["EOF while reading, expected ",$APP.t.h(e)," to match ",$APP.t.h(e)," at [",$APP.t.h(d),",",$APP.t.h(c),"]"].join(""),new $APP.n(null,3,[Hn,$APP.t.h(e),In,$APP.t.h(e),Jn,new $APP.n(null,2,[An,d,bl,c],null)],null));if($APP.A.g("\\",l)){l=function(){var h=f;h.append(Kn.g?Kn.g(f,b):Kn.call(null,f,b));return h}();var m=b.X(null);f=l;k=m;}else {if($APP.A.g('"',
  l))return $APP.t.h(f);l=function(){var h=f;h.append(k);return h}();m=b.X(null);f=l;k=m;}}};Mn=function(a,b,c,d,e){this.Bc=a;this.wc=b;this.H=c;this.B=d;this.F=e;this.D=2230716170;this.M=139264;};Nn=function(a){return new Mn(a.Pc(null),a.Oc(null),null,null,null)};On=function(a){a:for(var b=a.X(null),c=new $APP.Fa;;){if($APP.uk(b)){$APP.t.h(c);break a}var d=a.X(null);c=c.append(b);b=d;}return a};Pn=function(a){for(;;){var b=a.X(null);if($APP.r(b)){if(!$APP.r(Cn(b)))return a.fc(null,b),a}else return null}};
  Zn=function(a,b,c){var d=$APP.kg,e=Jk(b),f=e?b.Pc(null):null;e=e?b.Oc(null):null;var k=b.X(null);a=$APP.Rh.j($APP.Rh.j(a,Qn,c),Rn,new $APP.n(null,3,[Sn,k,An,f,bl,e],null));for(d=$APP.mc(d);;){var l=Tn?Tn(a,b):Un.call(null,a,b);var m=l;m=null==m?null:$APP.Nd(m);m=null==m?null:Vn.h(m);if(Wn===l)return xn(a,b,["EOF while reading, expected ",$APP.t.h(c)," to match ",$APP.t.h(k)," at [",$APP.t.h(f),",",$APP.t.h(e),"]"].join(""),new $APP.n(null,3,[Hn,$APP.t.h(c),In,$APP.t.h(k),Jn,new $APP.n(null,2,[An,
  f,bl,e],null)],null));if(Xn===l)return $APP.oc(d);if($APP.r(m)){l=$APP.x(l);m=null;for(var h=0,q=0;;)if(q<h){var p=m.ba(null,q);$APP.fg.g(d,p);q+=1;}else if(l=$APP.x(l))m=l,$APP.Zd(m)?(l=$APP.uc(m),q=$APP.vc(m),m=l,h=$APP.xd(l),l=q):(l=$APP.y(m),$APP.fg.g(d,l),l=$APP.z(m),m=null,h=0),q=0;else break}else l===Yn||(d=$APP.fg.g(d,l));}};
  $n=function(a,b){b.X(null);for(var c=new $APP.Fa,d=b.X(null);;){if('"'===d)return $APP.t.h(c);if(null==d)return yn(a,b,"Error while parsing regex");c.append(d);"\\"===d&&(d=b.X(null),null==d&&yn(a,b,"Error while parsing regex"),c.append(d));d=b.X(null);}};
  ao=function(a,b){b=function(c){return function f(e){return new $APP.Ne(null,function(){for(var k=e;;)if(k=$APP.x(k)){if($APP.Zd(k)){var l=$APP.uc(k),m=$APP.xd(l),h=$APP.Te(m);a:for(var q=0;;)if(q<m){var p=$APP.Id(l,q),v=$APP.B.j(p,0,null);1<$APP.B.j(p,1,null)&&h.add(v);q+=1;}else {l=true;break a}return l?$APP.We($APP.Ye(h),f($APP.vc(k))):$APP.We($APP.Ye(h),null)}h=$APP.y(k);l=$APP.B.j(h,0,null);if(1<$APP.B.j(h,1,null))return $APP.He(l,f($APP.cd(k)));k=$APP.cd(k);}else return null},null,null)}($APP.gi(c))}(b);
  return $APP.Gf.J($APP.t,a,1<$APP.xd(b)?"s":null,": ",$APP.Vk.g(", ",b))};bo=function(a,b,c,d,e){zn(a,b,ao([$APP.Ea($APP.ai(d))," literal contains duplicate key"].join(""),e),null,c);};co=function(a,b){var c=Jk(b)?Nn(b):null,d=Zn(a,b,"}"),e=$APP.Zh(d);$APP.A.g($APP.xd(d),$APP.xd(e))||bo(a,b,c,$APP.sm,d);return e};
  go=function(a,b){for(var c=$APP.eo.h(a);;){var d=Tn?Tn(a,b):Un.call(null,a,b);if(Xn===d)return Yn;if(Yn===Yn&&($APP.he(c,d)||$APP.Ke(d,$APP.Dm))){c=Tn?Tn(a,b):Un.call(null,a,b);for(a=$APP.Rh.j(a,fo,true);;){d=Tn?Tn(a,b):Un.call(null,a,b);if(Xn!==d)if(Wn===d){d=Qn.h(a);var e=Rn.h(a),f=$APP.jf(e);e=$APP.fe.g(f,An);var k=$APP.fe.g(f,bl);f=$APP.fe.g(f,Sn);xn(a,b,["EOF while reading, expected ",$APP.t.h(d)," to match ",$APP.t.h(f)," at [",$APP.t.h(e),",",$APP.t.h(k),"]"].join(""),new $APP.n(null,2,[Hn,$APP.t.h(d),
  In,$APP.t.h(f)],null));}else continue;break}return c}d=$APP.Rh.j(a,fo,true);e=b;Tn?Tn(d,e):Un.call(null,d,e);}};
  lo=function(a,b){Pn(b);var c=$APP.ho.h(a),d=$APP.A.g("@",b.Db(null));d&&b.X(null);Pn(b);if($APP.Ke(io,c))return jk(Tn?Tn(a,b):Un.call(null,a,b),d);if($APP.Kd(c))return b=$APP.jo.A(Tn?Tn(a,b):Un.call(null,a,b),$APP.Rh,ko,d),c.h?c.h(b):c.call(null,b);c=b.Pc(null);var e=b.Oc(null),f=b.X(null);a=$APP.Rh.j($APP.Rh.j(a,Qn,")"),Rn,new $APP.n(null,3,[Sn,f,An,c,bl,e],null));a=go(a,b);return a===Yn?b:d?$APP.jo.g(a,function(k){return $APP.Rh.j(k,Vn,true)}):a};
  oo=function(a,b,c,d){var e=$APP.mo.h(a);return $APP.r(e)?e:xn(a,b,$APP.r(d)?d:"Use `:auto-resolve` to resolve aliases.",new $APP.n(null,1,[no,[":",$APP.t.h(c)].join("")],null))};po=function(a,b,c,d,e,f){b=b.h?b.h(c):b.call(null,c);return $APP.r(b)?b:xn(a,d,$APP.r(f)?f:["Alias `",$APP.t.h($APP.Hi.h(c)),"` not found in `:auto-resolve`"].join(""),new $APP.n(null,1,[no,[":",$APP.t.h(e)].join("")],null))};
  so=function(a,b,c){c=Dn(b,c);if($APP.r(c))switch(c){case "nil":return null;case "true":return  true;case "false":return  false;case "/":return $APP.mm;default:var d=qo.h?qo.h(c):qo.call(null,c);d=$APP.r(d)?$APP.Hi.g(d.h?d.h(0):d.call(null,0),d.h?d.h(1):d.call(null,1)):null;return $APP.r(d)?d:xn(a,b,["Invalid symbol: ",c].join(""),$APP.Tm.A(Nn(b),bl,$APP.ro,c.length))}else return null};
  uo=function(a,b){if(":"===b.Db(null)){b.X(null);var c=true;}else c=null;var d=c,e=$APP.r(d)?"{"===b.Db(null):null,f=$APP.r(d)?$APP.r(e)?null:so(a,b,b.X(null)):so(a,b,b.X(null));c=Tn?Tn(a,b):Un.call(null,a,b);if($APP.r(d))return d=$APP.r(e)?$APP.to:$APP.Hi.h($APP.ai(f)),e=oo(a,b,d,null),a=po(a,e,d,b,f,null),$APP.bi(wk($APP.t.h(a),$APP.Kh(c)),$APP.Mh(c));a=$APP.ai(f);return $APP.bi(wk(a,$APP.Kh(c)),$APP.Mh(c))};
  Do=function(a,b){var c=b.Db(null);if($APP.A.g(null,c))return yn(a,b,"Unexpected EOF.");if($APP.A.g("!",c))return On(b),b;if($APP.A.g('"',c)){c=vo.h(a);if($APP.r(c)){var d=$n(a,b);return  true===c?$APP.ki(d):c.h?c.h(d):c.call(null,d)}return yn(a,b,"Regex not allowed. Use the `:regex` option")}if($APP.A.g("#",c))return b.X(null),wo.j?wo.j(b,null,null):wo.call(null,b,null,null);if($APP.A.g("'",c))return c=$APP.xo.h(a),$APP.r(c)?(b.X(null),d=Tn?Tn(a,b):Un.call(null,a,b),Wn===d&&yn(a,b,"EOF while reading"),
  true===c?new $APP.G(null,$APP.Lj,new $APP.G(null,d,null,1,null),2,null):c.h?c.h(d):c.call(null,d)):yn(a,b,"Var literal not allowed. Use the `:var` option");if($APP.A.g("(",c)){c=$APP.yo.h(a);if($APP.r(c)){if($APP.r(zo.h(a)))return yn(a,b,"Nested fn literals not allowed.");d=function(){var f=$APP.Rh.j(a,zo,true);return Tn?Tn(f,b):Un.call(null,f,b)}();return  true===c?Ym(d):c.h?c.h(d):c.call(null,d)}return yn(a,b,"Function literal not allowed. Use the `:fn` option")}if($APP.A.g(":",c))return b.X(null),uo(a,
  b);if($APP.A.g("{",c))return co(a,b);if($APP.A.g("\x3d",c))return c=$APP.Ao.h(a),$APP.r(c)?(b.X(null),d=Tn?Tn(a,b):Un.call(null,a,b),true===c?new $APP.G(null,Bo,new $APP.G(null,d,null,1,null),2,null):c.h?c.h(d):c.call(null,d)):yn(a,b,"Read-eval not allowed. Use the `:read-eval` option");if($APP.A.g("?",c))return $APP.r($APP.ho.h(a))||yn(a,b,"Conditional read not allowed."),b.X(null),lo(a,b);if($APP.A.g("_",c))return b.X(null),Tn?Tn(a,b):Un.call(null,a,b),b;a:switch(c){case "^":case "'":case "(":case "{":case '"':case "!":case "_":case "?":case ":":case "#":c=
  true;break a;default:c=false;}if($APP.r(c))return b.fc(null,"#"),Gn(a,b);c=fo.h(a);if($APP.r(c))return Tn?Tn(a,b):Un.call(null,a,b),Tn?Tn(a,b):Un.call(null,a,b);var e=Tn?Tn(a,b):Un.call(null,a,b);c=Tn?Tn(a,b):Un.call(null,a,b);d=function(){var f=$APP.Cm.h(a);f=$APP.r(f)?f.h?f.h(e):f.call(null,e):null;return $APP.r(f)?f:Co.call(null,e)}();if($APP.r(d))return d.h?d.h(c):d.call(null,c);throw Error(["No reader function for tag ",$APP.t.h(e)].join(""));};
  Ho=function(a,b){var c=Jk(b)?Nn(b):null,d=Zn(a,b,"}"),e=$APP.xd(d);if(0<e){$APP.Ff(e)||zn(a,b,["The map literal starting with ",$APP.t.h(Uk.g(false,$APP.y(d)))," contains ",$APP.t.h($APP.xd(d))," form(s). Map literals must contain an even number of forms."].join(""),null,c);var f=$APP.fm.g(2,d);$APP.r($APP.Gf.g($APP.Eo,f))||bo(a,b,c,$APP.em,f);}return 16>=e?$APP.Gf.g($APP.Fo,d):$APP.Gf.g($APP.Go,d)};
  Io=function(a,b){b.X(null);var c=b.X(null);$APP.r(Cn(c))&&yn(a,b,"Invalid token: :");c=Dn(b,c);var d=":"===c.charAt(0);if(d){var e=d?$APP.ji.g(c,1):c;d=qo.h?qo.h(e):qo.call(null,e);c=$APP.B.j(d,0,null);d=$APP.B.j(d,1,null);if($APP.r(c)){var f=oo(a,b,e,null);e=$APP.Hi.h(c);a=po(a,f,e,b,c,null);}else f=oo(a,b,e,"Use `:auto-resolve` + `:current` to resolve current namespace."),a=po(a,f,$APP.to,b,e,"Use `:auto-resolve` + `:current` to resolve current namespace.");return $APP.vi.g($APP.t.h(a),d)}return $APP.vi.h(c)};
  Jo=function(a){return a instanceof $APP.I?$APP.gf([a,true]):a instanceof $APP.w?new $APP.n(null,1,[$APP.qm,a],null):"string"===typeof a?new $APP.n(null,1,[$APP.qm,a],null):a};Ko=function(a,b){return a instanceof $APP.I?$APP.gf([b.h?b.h(a):b.call(null,a),b.h?b.h(true):b.call(null,true)]):a instanceof $APP.w?$APP.gf([b.h?b.h($APP.qm):b.call(null,$APP.qm),b.h?b.h(a):b.call(null,a)]):"string"===typeof a?$APP.gf([b.h?b.h($APP.qm):b.call(null,$APP.qm),b.h?b.h(a):b.call(null,a)]):a};
  To=function(a,b,c){var d=Jk(b);if($APP.A.g("#",c))return b.X(null),Do(a,b);if($APP.A.g(null,c))return Wn;if($APP.A.g("@",c))return c=$APP.Lo.h(a),$APP.r(c)?(d=c,b.X(null),c=Tn?Tn(a,b):Un.call(null,a,b),true===d?new $APP.G(null,$APP.Mo,new $APP.G(null,c,null,1,null),2,null):d.h?d.h(c):d.call(null,c)):yn(a,b,"Deref not allowed. Use the `:deref` option");if($APP.A.g("`",c))return c=$APP.mn.h(a),$APP.r(c)?(d=c,b.X(null),c=Tn?Tn(a,b):Un.call(null,a,b),true===d||$APP.Vd(d)?(d=$APP.Vi.h($APP.hf),d=$APP.Rh.j(a,
  jn,d),bn(d,b,c)):d.h?d.h(c):d.call(null,c)):yn(a,b,"Syntax quote not allowed. Use the `:syntax-quote` option");if($APP.A.g('"',c))return Ln(a,b);if($APP.A.g("'",c))return c=No.h(a),$APP.r(c)?(d=c,b.X(null),c=Tn?Tn(a,b):Un.call(null,a,b),Wn===c&&yn(a,b,"EOF while reading"),true===d?new $APP.G(null,$APP.Mj,new $APP.G(null,c,null,1,null),2,null):d.h?d.h(c):d.call(null,c)):Gn(a,b);if($APP.A.g("(",c))return $APP.Gf.g($APP.Q,Zn(a,b,")"));if($APP.A.g(")",c)){var e=Qn.h(a);if($APP.Qh.g(e,c))return d=d?Nn(b):
  null,b.X(null),zn(a,b,["Unmatched delimiter: ",$APP.t.h(c),$APP.r(e)?[", expected: ",$APP.t.h(e),function(){var f=Rn.h(a);if($APP.r(f)){var k=$APP.jf(f);f=$APP.fe.g(k,An);var l=$APP.fe.g(k,bl);k=$APP.fe.g(k,Sn);return [" to match ",$APP.t.h(k)," at ",$APP.t.h(new $APP.J(null,2,5,$APP.N,[f,l],null))].join("")}return null}()].join(""):null].join(""),function(){var f=Rn.h(a),k=$APP.jf(f);f=$APP.fe.g(k,Sn);var l=$APP.fe.g(k,An);k=$APP.fe.g(k,bl);return new $APP.n(null,3,[In,$APP.t.h(f),Jn,new $APP.n(null,
  2,[An,l,bl,k],null),Hn,$APP.t.h(e)],null)}(),d);b.X(null);return Xn}if($APP.A.g(":",c))return Io(a,b);if($APP.A.g(";",c))return On(b);if($APP.A.g("[",c))return Zn(a,b,"]");if($APP.A.g("{",c))return Ho(a,b);if($APP.A.g("\\",c))return c=b.X(null),Oo.j?Oo.j(b,c,null):Oo.call(null,b,c,null);if($APP.A.g("]",c)){e=Qn.h(a);if($APP.Qh.g(e,c))return d=d?Nn(b):null,b.X(null),zn(a,b,["Unmatched delimiter: ",$APP.t.h(c),$APP.r(e)?[", expected: ",$APP.t.h(e),function(){var f=Rn.h(a);if($APP.r(f)){var k=$APP.jf(f);
  f=$APP.fe.g(k,An);var l=$APP.fe.g(k,bl);k=$APP.fe.g(k,Sn);return [" to match ",$APP.t.h(k)," at ",$APP.t.h(new $APP.J(null,2,5,$APP.N,[f,l],null))].join("")}return null}()].join(""):null].join(""),function(){var f=Rn.h(a),k=$APP.jf(f);f=$APP.fe.g(k,Sn);var l=$APP.fe.g(k,An);k=$APP.fe.g(k,bl);return new $APP.n(null,3,[In,$APP.t.h(f),Jn,new $APP.n(null,2,[An,l,bl,k],null),Hn,$APP.t.h(e)],null)}(),d);b.X(null);return Xn}if($APP.A.g("}",c)){e=Qn.h(a);if($APP.Qh.g(e,c))return d=d?Nn(b):null,b.X(null),zn(a,
  b,["Unmatched delimiter: ",$APP.t.h(c),$APP.r(e)?[", expected: ",$APP.t.h(e),function(){var f=Rn.h(a);if($APP.r(f)){var k=$APP.jf(f);f=$APP.fe.g(k,An);var l=$APP.fe.g(k,bl);k=$APP.fe.g(k,Sn);return [" to match ",$APP.t.h(k)," at ",$APP.t.h(new $APP.J(null,2,5,$APP.N,[f,l],null))].join("")}return null}()].join(""):null].join(""),function(){var f=Rn.h(a),k=$APP.jf(f);f=$APP.fe.g(k,Sn);var l=$APP.fe.g(k,An);k=$APP.fe.g(k,bl);return new $APP.n(null,3,[In,$APP.t.h(f),Jn,new $APP.n(null,2,[An,l,bl,k],null),
  Hn,$APP.t.h(e)],null)}(),d);b.X(null);return Xn}if($APP.A.g("^",c))return b.X(null),c=Po?Po(a,b,true):Un.call(null,a,b,true),$APP.jo.j(Tn?Tn(a,b):Un.call(null,a,b),$APP.Qk,c);if($APP.A.g("~",c)){c=function(){var f=$APP.mn.h(a);return $APP.r(f)?(f=Qo.h(a),$APP.r(f)?f:true):f}();if($APP.r(c)){d=c;b.X(null);if("@"===b.Db(null))return d=function(){var f=$APP.mn.h(a);return $APP.r(f)?(f=Ro.h(a),$APP.r(f)?f:true):f}(),$APP.r(d)?(b.X(null),c=Tn?Tn(a,b):Un.call(null,a,b),true===d?new $APP.G(null,an,new $APP.G(null,
  c,null,1,null),2,null):d.h?d.h(c):d.call(null,c)):yn(a,b,"Syntax unquote splice not allowed. Use the `:syntax-quote` option");c=Tn?Tn(a,b):Un.call(null,a,b);return  true===d?new $APP.G(null,$APP.Zm,new $APP.G(null,c,null,1,null),2,null):d.h?d.h(c):d.call(null,c)}return yn(a,b,"Syntax unquote not allowed. Use the `:syntax-unquote` option")}c=b.X(null);return $APP.r(So.g?So.g(b,c):So.call(null,b,c))?En(a,b,c):so(a,b,c)};
  Un=function(a){switch(arguments.length){case 2:return Tn(arguments[0],arguments[1]);case 3:return Po(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};Tn=function(a,b){return Po(a,b,null)};
  Po=function(a,b,c){for(;;){var d=Jk(b),e=function(){var C=Pn(b);return $APP.r(C)?zk(b):C}();if($APP.r(e)){var f=e,k=d?Nn(b):null,l=$APP.Pk.h(a),m=function(C,ea){return function(){return $APP.t.h($APP.Mk.h($APP.u(ea.frames)))}}(a,b),h=$APP.r(l)?m().length:null,q=$APP.r(l)?Sk(b,function(C,ea,K,M,da,ia,ja,sa){return function(){return To(C,ea,sa)}}(a,b,c,k,l,m,h,f)):To(a,b,f);if(b!==q){if(Xn===q)return q;var p=Uo.h(a),v=$APP.Vo.h(a),D=$APP.Wo.h(a),H=null!=q?q.D&262144||$APP.Oc===q.je?
  true:q.D?false:$APP.cb(Rb,q):$APP.cb(Rb,q),O=$APP.r(l)?$APP.ji.g(m(),h).trim():null,P=function(){var C=d;if(C){if(C=H)C=(C=$APP.Za(v))?C:v.h?v.h(q):v.call(null,q);return $APP.r(C)?C:p}return C}(),W=$APP.r(function(){var C=d;return C?(C=P,$APP.r(C)?D:C):C}())?Nn(b):null,ca=$APP.r(P)?An.h(k):null,ha=$APP.r(D)?An.h(W):null,oa=$APP.r(P)?bl.h(k):null,pa=$APP.r(D)?bl.h(W):null,fa=$APP.r(p)?function(C,ea,K,M,da,ia,ja,sa,ta,xa,ya,Ca,Ha,Da){return function(Aa){var Oa=function(){var Ua=new $APP.n(null,1,[$APP.Xo,
  Aa],null);Ua=$APP.r(ta)?$APP.Rh.j(Ua,Yo,function(){var db=$APP.gf([$APP.sn.h(C),ya,$APP.tn.h(C),Ha]);return $APP.r(ia)?$APP.Rh.l(db,un.h(C),Ca,$APP.F([vn.h(C),Da])):db}()):Ua;return $APP.r(sa)?$APP.Rh.j(Ua,function(){var db=Zo.h(C);return $APP.r(db)?db:$APP.Pk}(),sa):Ua}();return M.h?M.h(Oa):M.call(null,Oa)}}(a,b,c,p,v,D,H,O,P,W,ca,ha,oa,pa):null,E=$APP.r(c)?$APP.r(fa)?Ko(q,fa):Jo(q):q;return $APP.r(p)?fa.h?fa.h(E):fa.call(null,E):$APP.r(P)?$APP.jo.g(E,function(C,ea,K,M,da,ia,ja,sa,
  ta,xa,ya,Ca,Ha,Da){return function(Aa){Aa=$APP.Rh.j($APP.Rh.j(Aa,$APP.sn.h(C),ya),$APP.tn.h(C),Ha);Aa=$APP.r(ia)?$APP.Rh.j($APP.Rh.j(Aa,un.h(C),Ca),vn.h(C),Da):Aa;return $APP.r(sa)?$APP.Rh.j(Aa,Zo.h(C),sa):Aa}}(a,b,c,p,v,D,H,O,P,W,ca,ha,oa,pa)):E}}else return Wn}};
  $o=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha,oa,pa){this.Ma=a;this.deref=b;this.Wa=c;this.Xa=d;this.Ya=e;this.quote=f;this.Ca=k;this.Ea=l;this.Sa=m;this.Ta=h;this.Ua=q;this.La=p;this.Pa=v;this.Na=D;this.source=H;this.Va=O;this.Ra=P;this.Qa=W;this.Oa=ca;this.H=ha;this.B=oa;this.F=pa;this.D=2230716170;this.M=139264;};
  bp=function(a){var b=$APP.Rk.l(a,$APP.ap,$APP.F([$APP.Lo,$APP.mn,Qo,Ro,No,$APP.yo,$APP.xo,$APP.Ao,vo,$APP.sn,$APP.tn,un,vn,$APP.Pk,Zo,Uo,$APP.Vo,$APP.Wo]));b=$APP.Wd(a)?$APP.Rg.g($APP.hf,b):b;return new $o($APP.ap.h(a),$APP.Lo.h(a),$APP.mn.h(a),Qo.h(a),Ro.h(a),No.h(a),$APP.yo.h(a),$APP.xo.h(a),$APP.Ao.h(a),vo.h(a),$APP.sn.h(a),$APP.tn.h(a),un.h(a),vn.h(a),$APP.Pk.h(a),Zo.h(a),Uo.h(a),$APP.Vo.h(a),$APP.Wo.h(a),null,$APP.kf(b),null)};
  $APP.gp=function(a){var b=function(){var d=$APP.ap.h(a);return $APP.r(d)?$APP.Rg.g($APP.Rk.g(a,$APP.ap),new $APP.J(null,9,5,$APP.N,[function(){var e=$APP.cp.g(d,new $APP.J(null,1,5,$APP.N,["@"],null));return $APP.r(e)?new $APP.J(null,2,5,$APP.N,[$APP.Lo,e],null):null}(),function(){var e=$APP.cp.g(d,new $APP.J(null,1,5,$APP.N,["`"],null));return $APP.r(e)?new $APP.J(null,2,5,$APP.N,[$APP.mn,e],null):null}(),function(){var e=$APP.cp.g(d,new $APP.J(null,1,5,$APP.N,["~"],null));if($APP.r(e)){if($APP.Kd(e))return new $APP.J(null,
  2,5,$APP.N,[Qo,e],null);e=$APP.Dm.h(e);return $APP.r(e)?new $APP.J(null,2,5,$APP.N,[Qo,e],null):null}return null}(),function(){var e=$APP.cp.g(d,new $APP.J(null,2,5,$APP.N,["~","@"],null));return $APP.r(e)?new $APP.J(null,2,5,$APP.N,[Ro,e],null):null}(),function(){var e=$APP.cp.g(d,new $APP.J(null,1,5,$APP.N,["'"],null));return $APP.r(e)?new $APP.J(null,2,5,$APP.N,[No,e],null):null}(),function(){var e=$APP.cp.g(d,new $APP.J(null,2,5,$APP.N,["#","("],null));return $APP.r(e)?new $APP.J(null,2,5,$APP.N,
  [$APP.yo,e],null):null}(),function(){var e=$APP.cp.g(d,new $APP.J(null,2,5,$APP.N,["#","'"],null));return $APP.r(e)?new $APP.J(null,2,5,$APP.N,[$APP.xo,e],null):null}(),function(){var e=$APP.cp.g(d,new $APP.J(null,2,5,$APP.N,["#","\x3d"],null));return $APP.r(e)?new $APP.J(null,2,5,$APP.N,[$APP.Ao,e],null):null}(),function(){var e=$APP.cp.g(d,new $APP.J(null,2,5,$APP.N,["#",'"'],null));return $APP.r(e)?new $APP.J(null,2,5,$APP.N,[vo,e],null):null}()],null)):a}(),c=$APP.r($APP.dp.h(b))?$APP.Qk.l($APP.F([new $APP.n(null,
  7,[$APP.Lo,true,$APP.yo,true,No,true,$APP.Ao,true,vo,true,$APP.mn,true,$APP.xo,true],null),b])):b;b=function(){var d=$APP.Za($APP.sn.h(c))?$APP.Rh.j(c,$APP.sn,An):c;d=$APP.Za($APP.tn.h(c))?$APP.Rh.j(d,$APP.tn,bl):d;d=$APP.Za(un.h(c))?$APP.Rh.j(d,un,ep):d;d=$APP.Za(vn.h(c))?$APP.Rh.j(d,vn,fp):d;d=$APP.Za(Zo.h(c))?$APP.Rh.j(d,Zo,$APP.Pk):d;return $APP.he(c,$APP.Wo)?d:$APP.Rh.j(d,$APP.Wo,true)}();return bp(b)};$APP.hp=function(a){a=new $APP.Ek(a,$APP.xd(a));a=new $APP.Gk(a);return $APP.Lk(a)};
  $APP.jp=function(a,b){a=Tn(b,a);return Wn===a?(b=$APP.fe.g(b,$APP.il),$APP.r(b)?b:$APP.ip):a};lp=function(a,b){const c=Array.prototype.slice.call(arguments),d=c.shift();if("undefined"==typeof d)throw Error("[goog.string.format] Template required");return d.replace(/%([0\- \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g,function(e,f,k,l,m,h,q,p){if("%"==h)return "%";const v=c.shift();if("undefined"==typeof v)throw Error("[goog.string.format] Not enough arguments");arguments[0]=v;return kp[h].apply(null,arguments)})};
  $APP.mp=function(a,b,c){if($APP.Ae(c)){var d=$APP.Gf.g($APP.Q,$APP.ui.g(a,c));return b.h?b.h(d):b.call(null,d)}return $APP.hg(c)?(d=new $APP.Ig(function(){var e=$APP.Gb(c);return a.h?a.h(e):a.call(null,e)}(),function(){var e=$APP.Hb(c);return a.h?a.h(e):a.call(null,e)}(),null),b.h?b.h(d):b.call(null,d)):$APP.be(c)?(d=$APP.Om.h($APP.ui.g(a,c)),b.h?b.h(d):b.call(null,d)):$APP.Wd(c)?(d=$APP.ne.j(function(e,f){return $APP.De.g(e,a.h?a.h(f):a.call(null,f))},c,c),b.h?b.h(d):b.call(null,d)):$APP.Rd(c)?(d=
  $APP.Rg.g($APP.Hd(c),$APP.ui.g(a,c)),b.h?b.h(d):b.call(null,d)):b.h?b.h(c):b.call(null,c)};
  Cp=function(a){var b=$APP.x(a);$APP.y(b);$APP.z(b);b=null;for(var c=$APP.kg,d=null,e=null,f=$APP.kg,k=null,l=$APP.kg,m=a;;){a=b;var h=c,q=d,p=e;e=f;d=k;c=l;k=m;f=$APP.x(k);b=$APP.y(f);l=$APP.z(f);f=b;b=l;l=$APP.be(f);m=f instanceof $APP.w;if($APP.Za($APP.x(k)))return b=new $APP.n(null,5,[np,a,op,p,$APP.pp,q,qp,h,rp,e],null),$APP.r(d)?$APP.Tm.A(b,rp,$APP.De,new $APP.n(null,2,[sp,d,tp,c],null)):b;if(m&&null==q&&$APP.Qd(h)&&$APP.Qd(e)&&null==p&&null==d&&null==a)a=h,k=e,h=d,l=c,m=b,b=f,c=a,d=q,e=p,f=
  k,k=h;else if(l&&null==d&&$APP.A.g(up,$APP.y(f)))if(l=$APP.xd(f),k=$APP.B.g(f,1),$APP.A.g(2,l)&&$APP.Me(k))f=$APP.De.g(h,new $APP.n(null,2,[vp,f,wp,k],null)),k=e,h=d,l=c,m=b,b=a,c=f,d=q,e=p,f=k,k=h;else if($APP.A.g(3,l)&&$APP.Me(k))f=$APP.De.g(h,new $APP.n(null,3,[vp,f,wp,k,xp,$APP.B.g(f,2)],null)),k=e,h=d,l=c,m=b,b=a,c=f,d=q,e=p,f=k,k=h;else throw $APP.cl.g("invalid field definition",new $APP.n(null,1,[yp,f],null));else if(l&&null==d&&null==q&&$APP.A.g(zp,$APP.y(f))&&$APP.Xd($APP.Cd(f)))q=h,k=e,
  h=d,l=c,m=b,b=a,c=q,d=f,e=p,f=k,k=h;else if(l&&null==d&&null==p&&$APP.A.g(Ap,$APP.y(f))&&$APP.A.g(2,$APP.xd(f))&&$APP.Cd(f)instanceof $APP.w)p=h,f=$APP.Cd(f),k=e,h=d,l=c,m=b,b=a,c=p,d=q,e=f,f=k,k=h;else if(m&&null!=d)b=a,a=h,f=q,l=$APP.De.g(e,new $APP.n(null,2,[sp,d,tp,c],null)),q=$APP.kg,h=k,c=a,d=f,e=p,f=l,k=null,l=q,m=h;else if(m)c=h,d=q,k=p,h=e,l=f,p=$APP.kg,q=b,b=a,e=k,f=h,k=l,l=p,m=q;else if(k=l,$APP.r(k?d:k)){k=a;l=e;m=d;a=$APP.De.g(c,$APP.jo.A(f,$APP.Rh,Bp,a));var v=b;b=k;c=h;d=q;e=p;f=l;
  k=m;l=a;m=v;}else throw $APP.cl.g("invalid defclass form",new $APP.n(null,1,[yp,f],null));}};
  Ip=function(a,b,c,d){var e=$APP.Dp(function(f){return $APP.Ae(f)&&$APP.A.g(Ep,$APP.y(f))?$APP.S.h($APP.x($APP.R.g(new $APP.G(null,Fp,null,1,null),new $APP.G(null,$APP.Gf.g($APP.Fo,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,Gp,null,1,null),new $APP.G(null,$APP.cd(f),null,1,null),$APP.F([new $APP.G(null,qp,null,1,null),new $APP.G(null,c,null,1,null),new $APP.G(null,Hp,null,1,null),new $APP.G(null,d,null,1,null)]))))),null,1,null)))):f},a);return $APP.Qh.g(a,e)?e:$APP.r(b)?$APP.He($APP.S.h($APP.x($APP.R.h(new $APP.G(null,
  Fp,null,1,null)))),a):a};
  Mp=function(a,b,c){var d=$APP.Jp.g("\n",function(){return function k(f){return new $APP.Ne(null,function(){for(;;){var l=$APP.x(f);if(l){if($APP.Zd(l)){var m=$APP.uc(l),h=$APP.xd(m),q=$APP.Te(h);return function(){for(var O=0;;)if(O<h){var P=$APP.Id(m,O),W=$APP.Rh.j(a,$APP.Kp,no),ca=$APP.he(P,xp),ha=Lp.h($APP.Nd($APP.y(vp.h(P)))),oa=q;ha=$APP.r(ha)?"static ":null;var pa=$APP.t.h($APP.Vj(wp.h(P)));if(ca){ca=$APP.t;var fa=ca.h;P=xp.h(P);W=b.g?b.g(P,W):b.call(null,P,W);W=[" \x3d ",fa.call(ca,W),";"].join("");}else W=
  ";";$APP.Xe(oa,[ha,pa,W].join(""));O+=1;}else return  true}()?$APP.We($APP.Ye(q),k($APP.vc(l))):$APP.We($APP.Ye(q),null)}var p=$APP.y(l),v=$APP.Rh.j(a,$APP.Kp,no),D=$APP.he(p,xp),H=Lp.h($APP.Nd($APP.y(vp.h(p))));return $APP.He([$APP.r(H)?"static ":null,$APP.t.h($APP.Vj(wp.h(p))),D?[" \x3d ",$APP.t.h(function(){var O=xp.h(p),P=v;return b.g?b.g(O,P):b.call(null,O,P)}()),";"].join(""):";"].join(""),k($APP.cd(l)))}return null}},null,null)}(c)}());return $APP.Qd(d)?null:[d,"\n"].join("")};
  Op=function(a,b,c){var d=$APP.Rh.l(a,$APP.Kp,no,$APP.F([Np,false]));return $APP.ui.g(function(e){return b.g?b.g(e,d):b.call(null,e,d)},c)};
  Up=function(a,b,c,d){function e(){return [$APP.r(v)?"static ":null,$APP.r(q)?"async ":null,$APP.r(p)?"* ":null,$APP.t.h($APP.Vj(f)),"(",$APP.Jp.g(", ",Op(D,b,h)),") { \n",["const ",$APP.t.h(b.g?b.g(m,D):b.call(null,m,D))].join("")," \x3d this;\nconst self__ \x3d this;",function(){var H=$APP.Gd(l),O=$APP.Rh.l(D,$APP.Kp,$APP.Pp,$APP.F([Np,false])),P=$APP.$h(l),W=$APP.Rh.l(D,$APP.Kp,$APP.Qp,$APP.F([Np,false]));return [$APP.Jp.h($APP.ui.g(function(ca){return [$APP.t.h(b.g?b.g(ca,W):b.call(null,ca,W)),";\n"].join("")},
  P)),$APP.t.h(b.g?b.g(H,O):b.call(null,H,O))].join("")}(),"\n}"].join("")}d=$APP.x(d);var f=$APP.y(d);d=$APP.z(d);var k=$APP.y(d),l=$APP.z(d);d=$APP.x(k);var m=$APP.y(d),h=$APP.z(d);a=$APP.Tm.A(a,Rp,$APP.Qk,$APP.Rh.l($APP.bi(h,h),Ep,"super",$APP.F([m,$APP.Vj(m)])));d=$APP.Nd(f);var q=$APP.Sp.h(d),p=Tp.h(d),v=Lp.h(d),D=$APP.r(q)?$APP.Rh.j(a,$APP.Sp,q):a;return c.g?c.g(q,e):c.call(null,q,e)};
  $p=function(a,b,c){var d=Vp,e=$APP.Rh.j(a,$APP.Kp,$APP.Qp);c=Cp($APP.cd(c));var f=$APP.jf(c),k=$APP.fe.g(f,np);c=$APP.fe.g(f,op);var l=$APP.fe.g(f,Wp),m=$APP.fe.g(f,$APP.pp),h=$APP.fe.g(f,qp),q=$APP.fe.g(f,rp);f=$APP.x(m);$APP.y(f);m=$APP.z(f);f=$APP.y(m);var p=$APP.z(m),v=$APP.Hi.h([$APP.t.h(k),"$"].join(""));m=$APP.x(f);f=$APP.y(m);m=$APP.z(m);var D=null!=c,H=Ip(p,D,h,f);p=$APP.ui.g(wp,h);p=$APP.ne.j(function(ca,ha){return $APP.Rh.j(ca,ha,$APP.Hi.h(["self__.",$APP.t.h($APP.Vj(ha))].join("")))},
  $APP.hf,p);var O=$APP.Tm.A(e,Rp,$APP.Qk,p);p=$APP.bi($APP.He(f,m),$APP.He($APP.Vj(f),$APP.ui.g($APP.Vj,m)));var P=$APP.Tm.A(O,Rp,$APP.Qk,p);p=tp.h($APP.Ef(function(ca){return $APP.A.g($APP.Xp,sp.h(ca))?ca:null},q));var W=$APP.S.h($APP.x($APP.R.l(new $APP.G(null,Yp,null,1,null),new $APP.G(null,k,null,1,null),$APP.F([$APP.Zp.l($APP.se,$APP.F([function(){return function oa(ha){return new $APP.Ne(null,function(){for(var pa=ha;;)if(pa=$APP.x(pa)){if($APP.Zd(pa)){var fa=$APP.uc(pa),E=$APP.xd(fa),C=$APP.Te(E);
  a:for(var ea=0;;)if(ea<E){var K=$APP.Id(fa,ea),M=$APP.jf(K);K=$APP.fe.g(M,sp);M=$APP.fe.g(M,tp);$APP.A.g($APP.Xp,K)||$APP.Xe(C,$APP.Rg.g(new $APP.J(null,1,5,$APP.N,[K],null),M));ea+=1;}else {fa=true;break a}return fa?$APP.We($APP.Ye(C),oa($APP.vc(pa))):$APP.We($APP.Ye(C),null)}C=$APP.y(pa);fa=$APP.jf(C);C=$APP.fe.g(fa,sp);fa=$APP.fe.g(fa,tp);if($APP.A.g($APP.Xp,C))pa=$APP.cd(pa);else return $APP.He($APP.Rg.g(new $APP.J(null,1,5,$APP.N,[C],null),fa),oa($APP.cd(pa)))}else return null},null,null)}(q)}()]))]))));
  return ["class ",$APP.t.h($APP.Vj(v)),$APP.r(c)?[" extends ",$APP.t.h(d.g?d.g(c,e):d.call(null,c,e))].join(""):null," {\n",Mp(e,d,h),["  constructor(",$APP.Jp.g(", ",$APP.ui.g(function(ca){return d.g?d.g(ca,P):d.call(null,ca,P)},m)),") {\n"].join(""),D?null:["const self__ \x3d this;\n",["const ",$APP.t.h(d.g?d.g(f,P):d.call(null,f,P))].join("")," \x3d this;\n"].join(""),$APP.t.h($APP.r(H)?function(){var ca=$APP.He($APP.zj,H);return d.g?d.g(ca,P):d.call(null,ca,P)}():null),"  }\n",$APP.Jp.g("\n",$APP.ui.g(function(ca){return Up(O,
  d,b,ca)},p)),"};\n",$APP.t.h(d.g?d.g(W,O):d.call(null,W,O)),$APP.r(l)?$APP.t.h(l):null,$APP.t.h(function(){var ca=new $APP.G(null,$APP.Pj,new $APP.G(null,k,new $APP.G(null,new $APP.G(null,Gj,new $APP.G(null,$APP.Vj(v),null,1,null),2,null),null,1,null),2,null),3,null);return d.g?d.g(ca,e):d.call(null,ca,e)}()),$APP.A.g($APP.Pp,$APP.Kp.h(a))?["return ",$APP.t.h($APP.Vj(k)),";"].join(""):null].join("")};aq=function(a){return "string"===typeof a?a:"${~{}}"};
  cq=function(a){return $APP.jo.A(a,$APP.Rh,$APP.qm,$APP.bq)};dq=function(a,b,c,d){if($APP.he(a,b))throw Error(["Duplicate case test constant '",$APP.t.h(b),"'",$APP.r($APP.al.h(d))?[" on line ",$APP.t.h($APP.al.h(d))," "].join(""):null].join(""));return $APP.Rh.j(a,b,c)};eq=function(a){return ["(",$APP.t.h(a),")"].join("")};fq=function(a,b){return $APP.A.g($APP.Pp,$APP.Kp.h(b))?lp.g?lp.g("return %s;",a):lp.call(null,"return %s;",a):a};
  gq=function(a,b,c,d,e){this.hc=a;this.pc=b;this.H=c;this.B=d;this.F=e;this.D=2230716170;this.M=139264;};jq=function(a){a=new $APP.n(null,2,[hq,a,iq,true],null);var b=$APP.Rk.l(a,hq,$APP.F([iq]));b=$APP.Wd(a)?$APP.Rg.g($APP.hf,b):b;return new gq(hq.h(a),iq.h(a),null,$APP.kf(b),null)};kq=function(a){return $APP.Rh.l(a,$APP.Kp,no,$APP.F([Np,false]))};lq=function(a){if($APP.gk(a))a=null;else {var b=$APP.A,c=b.g,d=$APP.t.h(a);a=c.call(b,";\n",2>d.length?d:d.substring(d.length-2))?a:[$APP.t.h(a),";\n"].join("");}return a};
  mq=function(a){return ["(",$APP.Jp.g(", ",a),")"].join("")};nq=function(a){var b=$APP.t.h($APP.Vj(a)),c=new $APP.Uh(null,new $APP.n(null,2,["await",null,"import",null],null),null);return $APP.ra(b,"$")&&$APP.he(c,$APP.t.h(a))?$APP.Zj(b,/\$$/,""):b};
  wq=function(a){var b=$APP.t.h($APP.Vj(a)),c=function(){var d=$APP.t.h(a),e=new $APP.Vc(function(){return Tj},oq,$APP.vh([$APP.pq,$APP.T,$APP.U,$APP.$k,$APP.qq,$APP.Fm,$APP.al,$APP.rq,$APP.V,$APP.X,$APP.sq],[true,$APP.tq,uq,"cljs/core.cljs",20,1,11767,11767,$APP.Q(new $APP.J(null,1,5,$APP.N,[$APP.vq],null)),null,$APP.r(Tj)?Tj.ec:null]));return e.h?e.h(d):e.call(null,d)}();return $APP.r(c)?$APP.ji.j(b,0,b.length-1):b};
  Bq=function(a,b){var c=xq.h(b);var d=$APP.yq.h(b);d=$APP.r(d)?$APP.r(c)?c:$APP.Za(zq.h(b)):d;return $APP.r(d)?($APP.r(c)&&(b=Aq.h(b),$APP.r(b)&&$APP.Jf(b,true)),c=$APP.r(c)?"$":"",lp.j?lp.j("%s{%s}",c,a):lp.call(null,"%s{%s}",c,a)):a};Eq=function(a,b){a=Cq.h(a);return $APP.he($APP.r(a)?a:Dq,$APP.ai(b))};Fq=function(a,b){var c=$APP.Rh.l(a,$APP.Kp,no,$APP.F([Np,false]));return $APP.ui.g(function(d){return Vp.g(d,c)},b)};
  Tq=function(a,b){b=$APP.x(b);var c=$APP.y(b),d=$APP.z(b),e=$APP.Rh.l(a,$APP.Kp,no,$APP.F([Np,false])),f=$APP.xd(d),k=$APP.ai(c);b=$APP.he(Gq,k);if($APP.Za(Hq.h?Hq.h(k):Hq.call(null,k))&&2<f)return Vp.g(new $APP.G(null,Iq,new $APP.G(null,new $APP.G(null,c,new $APP.G(null,$APP.y(d),new $APP.G(null,$APP.Cd(d),null,1,null),2,null),3,null),new $APP.G(null,$APP.Jq.g(c,$APP.cd(d)),null,1,null),2,null),3,null),a);if($APP.A.g($APP.Kq,c)&&$APP.A.g(1,f))c=["-",$APP.t.h(Vp.g($APP.y(d),e))].join("");else if($APP.A.g($APP.mm,
  c)&&$APP.A.g(1,f))c=["1 / ",$APP.t.h(Vp.g($APP.y(d),e))].join("");else {var l=$APP.vh([$APP.Lq,Mq,$APP.Nq,$APP.Oq,Pq,Qq,$APP.Rq,$APP.Sq,$APP.dk],"| ?? \x3d\x3d\x3d + !\x3d\x3d % !\x3d\x3d \x26 \x3d\x3d\x3d".split(" "));f=$APP.Jp.g;k=$APP.t;var m=k.h;l=l.h?l.h(c):l.call(null,c);c=f.call($APP.Jp,[" ",m.call(k,$APP.r(l)?l:c)," "].join(""),$APP.ui.g(eq,Fq(e,d)));}a=fq(c,a);return b?jq(a):a};
  $q=function(a,b){a=$APP.Vj(a);return $APP.he(Uq.h(b),a)&&!$APP.he($APP.u(Vq),a)?($APP.Wi.l(Wq,$APP.Tm,Xq,$APP.Yq.g($APP.De,$APP.Vh),$APP.F([a])),b=Zq.h(b),[$APP.r(b)?[$APP.t.h(b),"."].join(""):null,$APP.t.h(a)].join("")):null};ar=function(a){a=["await ",$APP.t.h(a)].join("");return lp.g?lp.g("(%s)",a):lp.call(null,"(%s)",a)};
  cr=function(a,b){var c=Tp.h(b),d=$APP.r(c)?"(%sfunction%s () {\n%s\n})()":"(%s() \x3d\x3e%s {\n%s\n})()",e=$APP.r($APP.br)?"async ":"";c=$APP.r(c)?"*":"";a=lp.A?lp.A(d,e,c,a):lp.call(null,d,e,c,a);a=$APP.r($APP.br)?ar(a):a;return $APP.r(Tp.h(b))?lp.g?lp.g("yield* (%s)",a):lp.call(null,"yield* (%s)",a):a};
  fr=function(a,b){var c=dr.h(a),d=$APP.r(c)?er.h($APP.u(c)):c;if($APP.r(function(){var f=Np.h(a);return $APP.r(f)?$APP.ii(/^(\/\*|\/\/|"|')/,$APP.t.h(b)):f}())){var e=[$APP.t.h(b),"\n"].join("");return $APP.r($APP.r(c)?$APP.Za(d)&&!$APP.qa(e,"/*"):c)?($APP.Wi.l(c,$APP.Tm,hq,$APP.t,$APP.F([e])),null):e}e=lq(b);$APP.r(function(){var f=$APP.Za(c);return f?f:d}())||$APP.Wi.A(c,$APP.Rh,er,true);return e};
  gr=function(a,b){var c=$APP.$h(b),d=$APP.Gd(b),e=$APP.Kp.h(a),f=$APP.Rh.j(a,$APP.Kp,$APP.Qp),k=$APP.x(c)&&$APP.A.g(no,e);return function(){var l=[$APP.Jp.g("",$APP.ui.g(function(m){return fr(a,Vp.g(m,f))},c)),$APP.t.h(Vp.g(d,$APP.Rh.j(a,$APP.Kp,k?$APP.Pp:e)))].join("");return k?cr(l,a):l}()};
  lr=function(a,b,c,d){var e=hr$1.h(a),f=$APP.Kp.h(a),k=$APP.Rh.j(a,$APP.Kp,no),l=$APP.ir.g(2,b),m=function(){var D=$APP.A.g(no,f);return D?D:Np.h(k)}(),h=Rp.h(a);b=function(){var D=$APP.Rk.g(k,Np);return $APP.ne.j(function(H,O){var P=$APP.B.j(H,0,null);H=$APP.B.j(H,1,null);var W=$APP.B.j(O,0,null),ca=$APP.B.j(O,1,null);O=$APP.Nd(W);O=$APP.Za(jr.h(O))?$APP.Vj(e.h?e.h(W):e.call(null,W)):W;var ha=$APP.t.h(O),oa=Vp.g(ca,$APP.Rh.j(D,Rp,H));ca=iq.h(oa);var pa=$APP.r(d)?"let":"const";ha=lp.A?lp.A("%s %s \x3d %s;\n",
  pa,ha,oa):lp.call(null,"%s %s \x3d %s;\n",pa,ha,oa);H=$APP.Rh.j(H,W,$APP.jo.A(O,$APP.Rh,iq,ca));return new $APP.J(null,2,5,$APP.N,[[$APP.t.h(P),$APP.t.h(ha)].join(""),H],null)},new $APP.J(null,2,5,$APP.N,["",h],null),l)}();var q=$APP.B.j(b,0,null),p=$APP.B.j(b,1,null),v=$APP.Rh.l(a,Rp,p,$APP.F([Np,false]));a=[$APP.t.h(q),$APP.r(d)?"while(true){\n":null,$APP.t.h(function(){var D=kr;kr=$APP.r(d)?$APP.ui.g(p,$APP.ui.g($APP.y,l)):kr;try{return gr($APP.r(m)?$APP.Rh.j(v,$APP.Kp,$APP.Pp):v,c)}finally{kr=D;}}()),
  $APP.r(d)?";break;\n}\n":null].join("");a=$APP.r(m)?cr(a,k):a;return $APP.r(m)?fq(a,v):a};or=function(a,b){var c=$APP.B.j(a,0,null),d=$APP.B.j(a,1,null),e=$APP.B.j(a,2,null);a=$APP.A.g(3,$APP.xd(a))?e:d;b=$APP.Rk.g(b,Np);return [["var ",$APP.t.h($APP.Vj(c))].join("")," \x3d ",$APP.t.h(Vp.g(a,kq(b))),";\n",$APP.r($APP.mr)?["globalThis.",$APP.r($APP.nr)?[$APP.t.h($APP.Vj($APP.nr)),"."].join(""):null,$APP.t.h($APP.Vj(c))," \x3d ",$APP.t.h($APP.Vj(c)),";\n"].join(""):null].join("")};
  pr=function(a,b){return fq(ar(Vp.g(b,kq(a))),a)};
  Ar=function(a,b){var c=qr;switch(c instanceof $APP.I?c.da:null){case "squint":return $APP.A.g(rr,b)||$APP.A.g($APP.sr,b)?"squint-cljs/src/squint/string.js":$APP.A.g(tr,b)||$APP.A.g($APP.ur,b)?"squint-cljs/src/squint/set.js":b instanceof $APP.w&&(a=$APP.vr.h(a),$APP.r(a))?(a=a.h?a.h(b):a.call(null,b),$APP.r(a)?a:b):b;case "cherry":return $APP.A.g(wr,b)?"cherry-cljs/lib/clojure.string.js":$APP.A.g($APP.sr,b)?"cherry-cljs/lib/clojure.string.js":$APP.A.g(xr,b)?"cherry-cljs/lib/clojure.walk.js":$APP.A.g($APP.yr,
  b)?"cherry-cljs/lib/clojure.walk.js":$APP.A.g(zr,b)?"cherry-cljs/lib/clojure.set.js":$APP.A.g($APP.ur,b)?"cherry-cljs/lib/clojure.set.js":b;default:return b}};
  Mr=function(a,b,c){c=$APP.x(c);var d=$APP.y(c);c=$APP.z(c);c=$APP.jf(c);var e=$APP.fe.g(c,$APP.Br),f=$APP.fe.g(c,$APP.Cr);c=$APP.fe.g(c,$APP.Dr);if($APP.A.g(Er,d)||$APP.A.g(Fr,d))return null;d=Ar(a,d);d=$APP.Gr.j("string"===typeof d?d:$APP.t.h(d),/\$/,2);var k=$APP.B.j(d,0,null);d=$APP.B.j(d,1,null);d=$APP.r(d)?$APP.Gr.g(d,/\./):null;var l=$APP.x(d);d=$APP.y(l);$APP.z(l);var m=$APP.r(c)?$APP.A.g("default",d):c,h=$APP.r(c)?$APP.Vj(c):null;c=$APP.t.h($APP.r($APP.r(h)?$APP.A.g("default",d):h)?$APP.r($APP.mr)?
  lq(lp.j?lp.j("const %s \x3d (await import('%s')).default",h,k):lp.call(null,"const %s \x3d (await import('%s')).default",h,k)):lq(lp.j?lp.j("import %s from '%s'",h,k):lp.call(null,"import %s from '%s'",h,k)):null);l=$APP.t.h($APP.Za(h)&&$APP.Za(d)&&$APP.Za(f)?$APP.r($APP.mr)?lq(lp.g?lp.g("await import('%s')",k):lp.call(null,"await import('%s')",k)):lq(lp.g?lp.g("import '%s'",k):lp.call(null,"import '%s'",k)):null);var q=$APP.t,p=q.h;$APP.r($APP.r(h)?$APP.Qh.g("default",d):h)?($APP.Wi.A(Wq,$APP.Tm,
  k,$APP.Yq.g($APP.se,$APP.Vh)),d=lq($APP.r($APP.mr)?lp.j?lp.j("var %s \x3d await import('%s')",h,k):lp.call(null,"var %s \x3d await import('%s')",h,k):lp.j?lp.j("import * as %s from '%s'",h,k):lp.call(null,"import * as %s from '%s'",h,k))):d=null;c=[c,l,p.call(q,d),$APP.t.h($APP.r(f)?function(){$APP.Wi.g($APP.Hr.h(a),function(H){var O=$APP.to.h(H);return $APP.Nk.j(H,new $APP.J(null,2,5,$APP.N,[O,$APP.Ir],null),function(P){return $APP.Qk.l($APP.F([P,$APP.bi(f,$APP.Jr.h(k))]))})});$APP.r(e)&&$APP.Wi.g($APP.Hr.h(a),
  function(H){var O=$APP.to.h(H);return $APP.Nk.A(H,new $APP.J(null,2,5,$APP.N,[O,$APP.Br],null),$APP.Qk,$APP.bi($APP.Mh(e),$APP.Kh(e)))});var v=$APP.ui.g($APP.Vj,f);if($APP.r($APP.mr))return [$APP.t.h(lq(function(){var H=$APP.Jp.g(", ",v),O=$APP.r(m)?".default":"";return lp.A?lp.A("var { %s } \x3d (await import ('%s'))%s",H,k,O):lp.call(null,"var { %s } \x3d (await import ('%s'))%s",H,k,O)}())),$APP.Jp.h($APP.ui.g(function(H){return lq(["globalThis.",$APP.t.h($APP.Vj(b)),".",$APP.t.h(H)," \x3d ",$APP.t.h(H)].join(""))},
  v))].join("");if($APP.r(m)){var D=function(){var H=hr$1.h(a);return H.h?H.h("default"):H.call(null,"default")}();return [$APP.t.h(lq(lp.j?lp.j("import %s from '%s'",D,k):lp.call(null,"import %s from '%s'",D,k))),$APP.t.h(lq(function(){var H=$APP.Jp.g(", ",$APP.ui.g($APP.Vj,f));return lp.j?lp.j("const { %s } \x3d %s",H,D):lp.call(null,"const { %s } \x3d %s",H,D)}()))].join("")}return lq(function(){var H=$APP.Jp.g(", ",$APP.ui.g($APP.Vj,f));return lp.j?lp.j("import { %s } from '%s'",H,k):lp.call(null,
  "import { %s } from '%s'",H,k)}())}():null)].join("");$APP.r(h)&&$APP.Wi.g($APP.Hr.h(a),function(v){var D=$APP.to.h(v);return $APP.Nk.j(v,new $APP.J(null,2,5,$APP.N,[D,$APP.Kr],null),function(H){return $APP.Yq.g($APP.Rh,$APP.hf)(H,h,k)})});return $APP.r($APP.Lr.h(a))?null:c};
  Or=function(a,b){var c=hr$1.h(a);return $APP.ne.j(function(d,e){var f=$APP.B.j(d,0,null),k=$APP.B.j(d,1,null);d=$APP.B.j(d,2,null);if($APP.Vd(e)){var l=$APP.Nr.h(e);l=$APP.bi(l,$APP.ui.g($APP.Vj,l));return new $APP.J(null,3,5,$APP.N,[$APP.Tm.A(f,Rp,$APP.Qk,l),$APP.De.g(k,e),$APP.Rg.g(d,l)],null)}return $APP.he(d,e)?(l=c.h?c.h(e):c.call(null,e),f=$APP.Tm.J(f,Rp,$APP.Rh,e,$APP.Vj(l)),k=$APP.De.g(k,l),e=$APP.De.g(d,e),new $APP.J(null,3,5,$APP.N,[f,k,e],null)):new $APP.J(null,3,5,$APP.N,[$APP.Tm.J(f,Rp,
  $APP.Rh,e,$APP.Vj(e)),$APP.De.g(k,e),$APP.De.g(d,e)],null)},new $APP.J(null,3,5,$APP.N,[a,$APP.kg,$APP.Vh],null),b)};Qr=function(a){for(var b=[],c=arguments.length,d=0;;)if(d<c)b.push(arguments[d]),d+=1;else break;return Pr(arguments[0],arguments[2],arguments[3],4<b.length?new $APP.Xc(b.slice(4),0,null):null)};
  Pr=function(a,b,c,d){d=$APP.B.j(d,0,null);var e=Rr.h(a);b=Or(a,b);a=$APP.B.j(b,0,null);var f=$APP.B.j(b,1,null);b=kr;kr=f;try{var k=$APP.Lf(null),l=$APP.Rh.j(a,Sr,function(q){return f===q?$APP.zc(k,!0):null}),m=gr($APP.Rh.j(l,$APP.Kp,$APP.Pp),c),h=$APP.r($APP.u(k))?lp.g?lp.g("while(true){\n%s\nbreak;}",m):lp.call(null,"while(true){\n%s\nbreak;}",m):m;return [$APP.r(d)?null:[$APP.r($APP.br)?"async ":null,$APP.r(e)?null:"function",$APP.r(Tp.h(l))?"*":null,$APP.r(function(){var q=$APP.Za(e);return q?
  q:$APP.br}())?" ":null].join(""),mq($APP.ui.g(function(q){$APP.Vd(q)?(q=$APP.Nr.h(q),q=["{",$APP.Jp.g(",",$APP.ui.g($APP.Vj,q)),"}"].join("")):q=$APP.Vj(q);return q},f)),$APP.r(e)?" \x3d\x3e":null," {\n",$APP.t.h(h),"\n}"].join("")}finally{kr=b;}};
  Wr=function(a,b,c){var d=$APP.y(b)instanceof $APP.w?$APP.y(b):null;b=$APP.r(d)?$APP.cd(b):b;var e=$APP.be($APP.y(b))?$APP.y(b):b,f=$APP.y(e),k=function(){var m=Rr.h(a);return $APP.r(m)?m:Tr.h($APP.Nd(f))}(),l=$APP.Rh.j(a,Rr,k);return $APP.r($APP.Ef(function(m){return $APP.A.g($APP.qj,m)},f))?(b=$APP.Md($APP.He($APP.Ur,e),$APP.Nd(e)),Vp.g(b,l)):fq(function(){var m=$APP.r(d)?function(){var h=$APP.cd(e);return [$APP.r($APP.br)?"async ":null,"function",$APP.r(Tp.h(l))?"*":null," ",$APP.t.h($APP.Vj(d)),
  " ",$APP.t.h(Pr(l,f,h,$APP.F([true])))].join("")}():function(){var h=$APP.cd(e);return $APP.t.h(Qr(l,null,f,h))}();return $APP.Za(Vr.h(c))&&$APP.Za(k)&&$APP.A.g(no,$APP.Kp.h(l))?eq(m):m}(),l)};Xr=function(a){return ['"',$APP.t.h(a),'"'].join("")};
  cs=function(a,b){if($APP.he(a,Yr)){var c=$APP.Rk.g(a,Yr),d=$APP.Rh.j(b,hq,true),e=$APP.A.g(Zr,qr);b=Aq.h(d);$APP.r(b)&&$APP.Jf(b,true);return Xr(function(){var f=Vp,k=f.g,l=$APP.fe.g(a,Yr);f=k.call(f,e?new $APP.G(null,$r,new $APP.G(null,l,null,1,null),2,null):l,$APP.Rk.g(d,$APP.yq));k=Vp.g(e?new $APP.G(null,$r,new $APP.G(null,c,null,1,null),2,null):c,$APP.Rk.g(d,$APP.yq));return lp.j?lp.j("${squint_html.css(%s,%s)}",f,k):lp.call(null,"${squint_html.css(%s,%s)}",f,k)}())}d=$APP.Rh.j(b,as,true);return Xr($APP.ne.j(function(f,
  k){var l=$APP.B.j(k,0,null);k=$APP.B.j(k,1,null);return [$APP.t.h(f),$APP.t.h(Vp.g(l,d)),":",$APP.t.h(Vp.g(k,d)),";"].join("")},"",a))};
  es=function(a,b){var c=kq(b),d=xq.h(c);return $APP.r(function(){var e=$APP.Za(d);return e?zq.h(c):e}())?$APP.r(a)?Vp.g(a,$APP.Rk.g(c,$APP.yq)):null:$APP.x(a)?[" ",$APP.t.h($APP.r($APP.r(d)?$APP.he(a,Yr):d)?function(){var e=$APP.Rk.g(a,Yr),f=Aq.h(c);$APP.r(f)&&$APP.Jf(f,true);f=$APP.Rh.j(c,hq,true);var k=$APP.A.g(Zr,qr),l=Vp,m=l.g,h=$APP.fe.g(a,Yr);l=m.call(l,k?new $APP.G(null,$r,new $APP.G(null,h,null,1,null),2,null):h,$APP.Rk.g(f,$APP.yq));e=Vp.g(k?new $APP.G(null,$r,new $APP.G(null,e,null,1,null),2,
  null):e,$APP.Rk.g(f,$APP.yq));return lp.j?lp.j("${squint_html.attrs(%s,%s)}",l,e):lp.call(null,"${squint_html.attrs(%s,%s)}",l,e)}():$APP.Jp.g(" ",$APP.ui.g(function(e){var f=$APP.B.j(e,0,null),k=$APP.B.j(e,1,null),l=function(){var m="string"===typeof k;return m?m:$APP.A.g(ds,qr)?k instanceof $APP.I:null}();return $APP.A.g(Yr,f)?["{...",$APP.t.h(Vp.g(k,$APP.Rk.g(c,$APP.yq))),"}"].join(""):[$APP.ai(f),"\x3d",$APP.t.h(function(){if($APP.r($APP.r(d)?$APP.Vd(k):d))return cs(k,c);var m=Vp.g(k,$APP.Rh.j(c,
  $APP.yq,false));m=$APP.Za(l)?Bq(m,$APP.Rh.j(c,as,$APP.r(d)?$APP.Za(l):d)):m;return $APP.r($APP.r(d)?$APP.Za(l):d)?Xr(m):m}())].join("")},a)))].join(""):""};
  ns=function(a,b){if($APP.r(function(){var O=$APP.yq.h(b);return $APP.r(O)?(O=$APP.y(a),O instanceof $APP.I||O instanceof $APP.w):O}())){var c=fs.h(b),d=function(){var O=Aq.h(b);return $APP.r(O)?O:$APP.Vi.h(false)}(),e=$APP.Rh.j(b,Aq,d),f=$APP.y(a),k=f instanceof $APP.I,l=$APP.Cd(a),m=$APP.Vd(l)?l:null,h=$APP.r(m)?$APP.Fd(a):$APP.z(a),q=$APP.Hi.h(f);q=(l=$APP.A.g(gs,q))?$APP.Hi.h(""):q;k=!l&&k?$APP.ji.g($APP.t.h(f),1):Vp.g(q,kq($APP.Rk.g(e,$APP.yq)));var p=xq.h(e),v=hs.h($APP.Nd(a));if($APP.r(function(){var O=
  $APP.Za(p);return O?(O=$APP.yq.h(e),$APP.r(O)?zq.h(e):O):O}())){var D=$APP.A.g(1,$APP.xd(h));return Vp.g(new $APP.G(null,D?is:js,new $APP.G(null,l?"_Fragment":f instanceof $APP.I?$APP.ai(k):q,new $APP.G(null,function(){var O=$APP.ui.g(function(W){return Vp.g(W,kq(e))},h);O=$APP.ui.g(function(W){return new $APP.G(null,Gj,new $APP.G(null,$APP.t.h(W),null,1,null),2,null)},O);O=D?$APP.y(O):$APP.lg(O);var P=$APP.r(m)?m:$APP.hf;return $APP.x(O)?$APP.Rh.j(P,ks,O):P}(),null,1,null),2,null),3,null),e)}var H=
  [$APP.r($APP.r(p)?l:p)?"":["\x3c",$APP.t.h(k),$APP.t.h(es(m,e)),"\x3e"].join(""),function(){var O=kq(e);return $APP.Jp.g("",$APP.ui.g(function(P){return Vp.g(P,O)},h))}(),$APP.r($APP.r(p)?l||$APP.he(ls,k):p)?"":["\x3c/",$APP.t.h(k),"\x3e"].join("")].join("");$APP.r(v)&&$APP.r(c)&&$APP.Jf(c,true);return fq(function(){if($APP.r(v)){var O=$APP.qm.h($APP.Nd(a));O=$APP.r(O)?Vp.g(O,kq($APP.Rk.l(e,$APP.yq,$APP.F([xq])))):$APP.r($APP.u(d))?"squint_html.tag":"squint_html.html";return lp.j?lp.j("%s`%s`",O,H):
  lp.call(null,"%s`%s`",O,H)}return H}(),e)}return fq($APP.A.g(Zr,qr)&&$APP.Za(ms.h($APP.Nd(a)))?function(){var O=Zq.h(b);O=$APP.r(O)?[$APP.t.h(O),"."].join(""):"";var P=$APP.Jp.g(", ",Fq(b,a));return lp.j?lp.j("%svector(%s)",O,P):lp.call(null,"%svector(%s)",O,P)}():function(){var O=$APP.Jp.g(", ",Fq(b,a));return lp.g?lp.g("[%s]",O):lp.call(null,"[%s]",O)}(),b)};
  ss=function(a,b){var c=$APP.y(b),d=$APP.Hi.h([$APP.t.h(a),"_",$APP.t.h(c)].join(""));b=$APP.cd(b);var e="string"===typeof $APP.Gd(b)?new $APP.J(null,2,5,$APP.N,[$APP.Gd(b),$APP.$h(b)],null):new $APP.J(null,2,5,$APP.N,[null,b],null);b=$APP.B.j(e,0,null);e=$APP.B.j(e,1,null);return $APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Pj,null,1,null),new $APP.G(null,d,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,os,null,1,null),new $APP.G(null,
  [$APP.t.h(a),"_",$APP.t.h(c)].join(""),null,1,null)))),null,1,null)])))),null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.ps,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([$APP.r(b)?new $APP.J(null,1,5,$APP.N,[b],null):null,$APP.ui.g(function(f){var k=$APP.y(f);return $APP.S.h($APP.x($APP.R.g(new $APP.G(null,f,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Bj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.qs,null,
  1,null),new $APP.G(null,k,null,1,null)))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,rs,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([new $APP.G(null,null,null,1,null)])))),null,1,null),f))),null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,rs,null,1,null),new $APP.G(null,$APP.y(f),null,1,null),$APP.F([new $APP.G(null,d,null,1,null)])))),null,1,null),f))),
  null,1,null)])))),null,1,null))))},e)])))),null,1,null))))};vs=function(a){for(var b=$APP.hf;;)if($APP.x(a))b=$APP.Rh.j(b,$APP.y(a),$APP.ts.g($APP.be,$APP.z(a))),a=$APP.us.g($APP.be,$APP.z(a));else return b};
  Ds=function(a,b){var c=$APP.B.j(b,0,null);b=$APP.B.j(b,1,null);var d=null==a?$APP.S.h($APP.x($APP.R.l(new $APP.G(null,ws,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([new $APP.G(null,null,null,1,null),new $APP.G(null,true,null,1,null)])))):$APP.S.h($APP.x($APP.R.l(new $APP.G(null,ws,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,xs,null,1,null),new $APP.G(null,a,null,1,null)))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,rs,null,1,null),
  new $APP.G(null,c,null,1,null),$APP.F([new $APP.G(null,"__sym",null,1,null)])))),null,1,null),new $APP.G(null,true,null,1,null)]))));return $APP.S.h($APP.x($APP.R.g(new $APP.G(null,d,null,1,null),$APP.ui.g(function(e){var f=$APP.y(e),k=$APP.A.g($APP.Xp,c)?$APP.t.h(f):$APP.Hi.h([$APP.t.h(c),"_",$APP.t.h(f)].join(""));e=$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.ys,null,1,null),zs($APP.cd(e)))));return null==a?$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,
  Bs,null,1,null),new $APP.G(null,e,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,ws,null,1,null),new $APP.G(null,f,null,1,null),$APP.F([new $APP.G(null,a,null,1,null),new $APP.G(null,Bs,null,1,null)])))),null,1,null)])))):$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,Cs,null,1,null),new $APP.G(null,e,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,
  ws,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,xs,null,1,null),new $APP.G(null,a,null,1,null)))),null,1,null),$APP.F([new $APP.G(null,k,null,1,null),new $APP.G(null,Cs,null,1,null)])))),null,1,null)]))))},b))))};Es=function(a){for(var b=$APP.hf;;)if($APP.x(a))b=$APP.Rh.j(b,$APP.y(a),$APP.ts.g($APP.be,$APP.z(a))),a=$APP.us.g($APP.be,$APP.z(a));else return b};
  Fs=function(a,b){b=Es(b);return $APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.zj,null,1,null),$APP.ui.g(function(c){var d=$APP.B.j(c,0,null);c=$APP.B.j(c,1,null);return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,Yp,null,1,null),new $APP.G(null,d,null,1,null),$APP.F([new $APP.G(null,a,null,1,null),c]))))},b))))};
  Ms=function(a){a=vs(a);var b=$APP.x($APP.Gs.g(Hs,$APP.ui.g($APP.se,$APP.Kh(a))));if(b){a=$APP.Rg.g($APP.Vh,$APP.Is.g($APP.Tk.g($APP.he,Hs),$APP.ui.g($APP.se,$APP.Kh(a))));var c=function(){var d=$APP.Yi($APP.y,b);d=$APP.Rg.g($APP.hf,$APP.ui.g($APP.vk.g($APP.ig,$APP.Js.g($APP.Tk.g($APP.ui,$APP.Od),$APP.jg)),d));return $APP.Rg.g($APP.hf,$APP.ui.g($APP.vk.g($APP.ig,$APP.Js.g($APP.Tk.g($APP.ne,$APP.Ks),$APP.jg)),d))}();return new $APP.J(null,2,5,$APP.N,[a,$APP.ne.j(function(d,e){return $APP.Nk.j(d,new $APP.J(null,
  1,5,$APP.N,[e],null),$APP.Yq.g($APP.se,0))},c,$APP.Wm.h(Ls))],null)}return null};Ns=function(a,b,c){var d=$APP.B.j(c,0,null);c=$APP.B.j(c,1,null);return $APP.De.g(b,$APP.jo.j($APP.He(d,$APP.ui.g(function(e){return $APP.He($APP.Cd(e),$APP.Fd(e))},c)),$APP.Qk,a))};
  Us=function(a,b){function c(k,l){return f(k,$APP.y(l),$APP.Cd(l))}var d=hr$1.h(a),e=$APP.ir.g(2,b),f=function q(l,m,h){function p(D,H,O){var P=$APP.Nd(H),W=d.h?d.h("map__"):d.call(null,"map__"),ca=$APP.Os.h(H),ha=function(fa,E,C){return function(ea){return $APP.r($APP.Dr.h(H))?$APP.De.l(ea,$APP.Dr.h(H),$APP.F([C])):ea}}(P,true,W)($APP.De.g($APP.De.g(D,W),O));for(D=function(){var fa=$APP.ne.j(function(E,C,ea){return function(K,M){if(M instanceof $APP.I){var da=$APP.Le(M),ia=$APP.ai(M);return ea?
  $APP.Rh.j(K,M,function(ja){return $APP.ji.g($APP.t.h($APP.vi.g($APP.r(da)?da:$APP.Le(ja),$APP.ai(ja))),1)}):$APP.A.g(ia,"keys")?$APP.Rh.j(K,M,function(ja){return $APP.vi.g($APP.r(da)?da:$APP.Le(ja),$APP.ai(ja))}):K}return K}}(ha,P,true),$APP.hf,$APP.Kh(H));return $APP.ne.j(function(){return function(E,C){return $APP.ne.j(function(ea,K){var M=$APP.Rh.j;var da=$APP.Hb(C);da=da.h?da.h(K):da.call(null,K);return M.call($APP.Rh,ea,K,da)},$APP.Rk.g(E,$APP.Gb(C)),function(){var ea=$APP.Gb(C);return ea.h?
  ea.h(E):ea.call(null,E)}())}}(),$APP.Rk.l(H,$APP.Dr,$APP.F([$APP.Os])),fa)}();;)if($APP.x(D)){O=$APP.Gb($APP.y(D));var oa=$APP.Hb($APP.y(D)),pa=null!=O&&(O.M&4096||$APP.Oc===O.de)?$APP.Md($APP.Hi.g(null,$APP.ai(O)),$APP.Nd(O)):O;oa=$APP.he(ca,pa)?new $APP.G(null,$APP.Ps,new $APP.G(null,W,new $APP.G(null,oa,new $APP.G(null,ca.h?ca.h(pa):ca.call(null,pa),null,1,null),2,null),3,null),4,null):new $APP.G(null,$APP.Ps,new $APP.G(null,W,new $APP.G(null,oa,null,1,null),2,null),3,null);
  O=O instanceof $APP.I||O instanceof $APP.w?$APP.De.l(ha,pa,$APP.F([oa])):q(ha,O,oa);D=$APP.z(D);ha=O;}else return ha}function v(D,H,O){var P=d.h?d.h("vec__"):d.call(null,"vec__"),W=d.h?d.h("seq__"):d.call(null,"seq__"),ca=d.h?d.h("first__"):d.call(null,"first__"),ha=$APP.Ef(new $APP.Uh(null,new $APP.n(null,1,[$APP.qj,null],null),null),H);D=$APP.De.l(D,P,$APP.F([O]));D=$APP.r(ha)?$APP.De.l(D,W,$APP.F([new $APP.G(null,$APP.Qs,new $APP.G(null,P,null,1,null),2,null)])):D;O=0;for(var oa=false;;)if($APP.x(H)){var pa=
  $APP.y(H);if($APP.A.g(pa,$APP.qj))D=q(D,$APP.Cd(H),W),H=$APP.Fd(H),oa=true;else {if($APP.A.g(pa,$APP.Dr))return q(D,$APP.Cd(H),P);if($APP.r(oa))throw Error("Unsupported binding form, only :as can follow \x26 parameter");D=q($APP.r(ha)?$APP.De.l(D,ca,$APP.F([$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Rs,null,1,null),new $APP.G(null,W,null,1,null)))),W,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Ss,null,1,null),new $APP.G(null,W,null,1,null))))])):D,pa,$APP.r(ha)?ca:new $APP.G(null,$APP.Ts,new $APP.G(null,
  P,new $APP.G(null,O,new $APP.G(null,null,null,1,null),2,null),3,null),4,null));O+=1;H=$APP.z(H);}}else return D}if(m instanceof $APP.w)return $APP.De.g($APP.De.g(l,$APP.r($APP.Le(m))?$APP.Hi.h($APP.ai(m)):m),h);if(m instanceof $APP.I)return $APP.De.g($APP.De.g(l,$APP.Hi.h($APP.ai(m))),h);if($APP.Xd(m))return v(l,m,h);if($APP.Vd(m))return p(l,m,h);throw Error(["Unsupported binding form: ",$APP.t.h(m)].join(""));};return $APP.Df($APP.Rc,$APP.ui.g($APP.y,e))?b:function(){var l=$APP.x($APP.Is.g(function(m){return $APP.y(m)instanceof
  $APP.I},e));if(l)throw Error(["Unsupported binding key: ",$APP.t.h($APP.Dd(l))].join(""));return $APP.ne.j(c,$APP.kg,e)}()};
  Ws=function(a,b){if($APP.Df($APP.Rc,a))return $APP.He(a,b);for(var c=$APP.Md($APP.kg,$APP.Nd(a)),d=$APP.kg;;)if($APP.r(a))if($APP.y(a)instanceof $APP.w){var e=$APP.z(a);c=$APP.De.g(c,$APP.y(a));a=e;}else {var f=$APP.y(a);$APP.r(function(){var k=$APP.Vd(f);if(k){k=$APP.Nd(f);var l=$APP.Za($APP.Dr.h(f));return l?(l=hq.h(k),k=$APP.r(l)?l:$APP.A.g($APP.Vs,$APP.qm.h(k)),$APP.r(k)?(k=$APP.Nr.h(f),$APP.r(k)?$APP.Qd($APP.Rk.g(f,$APP.Nr)):k):k):l}return k}())?(a=$APP.z(a),c=$APP.De.g(c,f)):(e=$APP.kn.h("p__"),
  a=$APP.z(a),c=$APP.De.g(c,e),d=$APP.De.g($APP.De.g(d,f),e));}else return $APP.S.h($APP.x($APP.R.g(new $APP.G(null,c,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,d,null,1,null),$APP.F([b])))),null,1,null))))};Xs=function(){return new $APP.G(null,Gj,new $APP.G(null,"arguments",null,1,null),2,null)};Ys=function(a){return new $APP.G(null,Gj,new $APP.G(null,"(~{}[~{}])",new $APP.G(null,Xs(),new $APP.G(null,a,null,1,null),2,null),3,null),4,null)};
  ft=function(a){var b=$APP.kn.h("i");return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,Zs,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$s,null,1,null),new $APP.G(null,Xs(),null,1,null)))),null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.at,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,b,null,1,null),new $APP.G(null,
  0,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.bt,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.ct,null,1,null),new $APP.G(null,b,null,1,null),$APP.F([new $APP.G(null,Zs,null,1,null)])))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,dt,null,1,null),new $APP.G(null,a,null,1,null),$APP.F([new $APP.G(null,Ys(b),null,1,null)])))),null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,
  $APP.Ij,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,et,null,1,null),new $APP.G(null,b,null,1,null)))),null,1,null)))),null,1,null)])))),null,1,null)])))),null,1,null)]))))};
  qt=function(a,b,c){function d(h){return $APP.lg($APP.S.h($APP.x($APP.R.l(new $APP.G(null,h,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Md($APP.Rs,$APP.Gf.g($APP.Fo,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.$k,null,1,null),new $APP.G(null,"squint/internal/fn.cljc",null,1,null),$APP.F([new $APP.G(null,$APP.al,null,1,null),new $APP.G(null,72,null,1,null),new $APP.G(null,$APP.Fm,null,1,null),new $APP.G(null,43,null,1,null),new $APP.G(null,$APP.rq,null,1,null),new $APP.G(null,
  72,null,1,null),new $APP.G(null,$APP.qq,null,1,null),new $APP.G(null,48,null,1,null),new $APP.G(null,gt,null,1,null),new $APP.G(null,true,null,1,null)])))))),null,1,null),new $APP.G(null,k,null,1,null)))),null,1,null),$APP.F([new $APP.G(null,k,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Md($APP.Ss,$APP.Gf.g($APP.Fo,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.$k,null,1,null),new $APP.G(null,"squint/internal/fn.cljc",null,1,null),$APP.F([new $APP.G(null,$APP.al,null,1,
  null),new $APP.G(null,73,null,1,null),new $APP.G(null,$APP.Fm,null,1,null),new $APP.G(null,45,null,1,null),new $APP.G(null,$APP.rq,null,1,null),new $APP.G(null,73,null,1,null),new $APP.G(null,$APP.qq,null,1,null),new $APP.G(null,49,null,1,null),new $APP.G(null,gt,null,1,null),new $APP.G(null,true,null,1,null)])))))),null,1,null),new $APP.G(null,k,null,1,null)))),null,1,null)])))))}var e=$APP.x(b);b=$APP.y(e);e=$APP.z(e);var f=$APP.ht.g(new $APP.Uh(null,new $APP.n(null,1,[$APP.qj,"null"],null),null),
  b),k=$APP.kn.h("seq");b=$APP.Nd(a);var l=$APP.Sp.h(b),m=Tp.h(b);return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.zj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Jj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Kj,null,1,null),new $APP.G(null,a,null,1,null),$APP.F([new $APP.G(null,$APP.Hi.h(["-",$APP.t.h(it)].join("")),null,1,null)])))),null,1,null),$APP.F([new $APP.G(null,$APP.Md($APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.ys,null,1,
  null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.lg(f),null,1,null),e))),null,1,null)))),new $APP.n(null,2,[$APP.Sp,l,Tp,m],null)),null,1,null)])))),null,1,null),$APP.F([$APP.r(c)?$APP.lg($APP.S.h($APP.x($APP.R.h(new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Jj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Kj,null,1,null),new $APP.G(null,a,null,1,null),$APP.F([new $APP.G(null,jt,null,1,null)])))),null,1,null),$APP.F([new $APP.G(null,
  $APP.xd(f)-1,null,1,null)])))),null,1,null))))):null,new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Jj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Kj,null,1,null),new $APP.G(null,$APP.jo.j(a,$APP.Rk,kt),null,1,null),$APP.F([new $APP.G(null,lt,null,1,null)])))),null,1,null),$APP.F([new $APP.G(null,function(){if(1<$APP.xd(f)){var h=$APP.mt.g($APP.xd(f)-1,$APP.kn);return $APP.Md($APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.ys,null,1,null),new $APP.G(null,
  $APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.h(new $APP.G(null,k,null,1,null))))),null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.h($APP.Zp.l(d,$APP.F([h])))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,nt,null,1,null),new $APP.G(null,ot,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Kj,null,1,null),new $APP.G(null,
  ot,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,it,null,1,null),h,$APP.F([new $APP.G(null,k,null,1,null)])))),null,1,null)])))),null,1,null)])))),null,1,null)])))),null,1,null)))),null,1,null)))),new $APP.n(null,2,[$APP.Sp,l,Tp,m],null))}return $APP.Md($APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.ys,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.h(new $APP.G(null,k,null,1,null))))),null,1,null),new $APP.G(null,
  $APP.S.h($APP.x($APP.R.l(new $APP.G(null,nt,null,1,null),new $APP.G(null,pt,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Kj,null,1,null),new $APP.G(null,pt,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,it,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Qs,null,1,null),new $APP.G(null,k,null,1,null)))),null,1,null)))),null,1,null)])))),null,1,null)])))),null,1,null)))),null,1,null)))),new $APP.n(null,2,
  [$APP.Sp,l,Tp,m],null))}(),null,1,null)])))),null,1,null)]))))};
  Gt=function(a,b,c){function d(D){return $APP.ui.g(function(H){return Ys(H)},$APP.Wm.h(D))}a=$APP.r(a)?a:$APP.kn.h("f");var e=$APP.Hi.h($APP.t.h(a)),f=$APP.ui.g($APP.y,c),k=$APP.rt.h(b),l=$APP.Yi(function(D){return $APP.de($APP.Ef(new $APP.Uh(null,new $APP.n(null,1,[$APP.qj,"null"],null),null),D))},f),m=$APP.jf(l);l=$APP.fe.g(m,false);var h=$APP.fe.g(m,true);(m=0<$APP.xd(h))&&function(){var D=$APP.ht.g(new $APP.Uh(null,new $APP.n(null,1,[$APP.qj,"null"],null),null),$APP.y(h));D=$APP.xd(D);return $APP.r(k)?
  D-2:D}();var q=$APP.Gf.g($APP.Um,$APP.R.g($APP.ui.g($APP.xd,l),new $APP.J(null,1,5,$APP.N,[$APP.xd($APP.y(h))-2],null))),p=$APP.r(k)?q-2:q;p=$APP.Rh.l(b,kt,new $APP.n(null,6,[st,m,$APP.tt,p,ut,p,vt,l,$APP.V,f,wt,$APP.Om.h($APP.ui.g($APP.Nd,f))],null),$APP.F([jr,true]));$APP.kn.h("args");$APP.ui.g($APP.xd,f);var v=$APP.Md(a,p);a=$APP.kn.h("args-arr");return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,v,null,1,null),new $APP.G(null,
  $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.ys,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.h(new $APP.G(null,xt,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,yt,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$s,null,1,null),new $APP.G(null,Xs(),null,1,null)))),null,1,null),$APP.F([$APP.Zp.l(function(D){D=$APP.xd(D);return new $APP.J(null,2,5,$APP.N,[D,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Kj,null,1,null),
  new $APP.G(null,new $APP.G(null,Gj,new $APP.G(null,$APP.t.h(e),null,1,null),2,null),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Hi.h(["cljs$core$IFn$_invoke$arity$",$APP.t.h(D)].join("")),null,1,null),d(D)))),null,1,null)]))))],null)},$APP.F([l])),new $APP.G(null,m?$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,a,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.v()))),
  null,1,null))))),null,1,null),$APP.F([new $APP.G(null,ft(a),null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,zt,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.bt,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.ct,null,1,null),new $APP.G(null,q,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$s,null,1,null),new $APP.G(null,
  a,null,1,null)))),null,1,null)])))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,At,null,1,null),new $APP.G(null,a,null,1,null),$APP.F([new $APP.G(null,q,null,1,null)])))),null,1,null)])))),null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Kj,null,1,null),new $APP.G(null,new $APP.G(null,Gj,new $APP.G(null,$APP.t.h(e),null,1,null),2,null),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,
  it,null,1,null),d(q),$APP.F([new $APP.G(null,zt,null,1,null)])))),null,1,null)])))),null,1,null)])))),null,1,null)])))):$APP.r($APP.rt.h(p))?$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Oj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Bt,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Ct,null,1,null),new $APP.G(null,"Invalid arity: ",null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,Dt,null,1,null),new $APP.G(null,
  $APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Et,null,1,null),new $APP.G(null,Xs(),null,1,null)))),null,1,null),$APP.F([new $APP.G(null,2,null,1,null)])))),null,1,null)])))),null,1,null)))),null,1,null)))):$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Oj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Bt,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Ct,null,1,null),new $APP.G(null,"Invalid arity: ",null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,
  $APP.Et,null,1,null),new $APP.G(null,Xs(),null,1,null)))),null,1,null)])))),null,1,null)))),null,1,null)))),null,1,null)])))),null,1,null)])))),null,1,null))))),null,1,null),$APP.F([$APP.ui.g(function(D){var H=$APP.x(D),O=$APP.y(H);$APP.z(H);return $APP.r($APP.Ef(new $APP.Uh(null,new $APP.n(null,1,[$APP.qj,"null"],null),null),O))?qt(v,D,false):$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Jj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Kj,null,1,null),new $APP.G(null,$APP.jo.J(v,
  $APP.Tm,kt,$APP.Qk,new $APP.n(null,2,[st,false,$APP.tt,$APP.xd(O)],null)),null,1,null),$APP.F([new $APP.G(null,$APP.Hi.h(["-cljs$core$IFn$_invoke$arity$",$APP.t.h($APP.xd(O))].join("")),null,1,null)])))),null,1,null),$APP.F([new $APP.G(null,$APP.Md($APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.ys,null,1,null),new $APP.G(null,D,null,1,null)))),$APP.Sh(b,new $APP.J(null,2,5,$APP.N,[Tp,$APP.Sp],null))),null,1,null)]))))},c),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Jj,null,1,null),new $APP.G(null,
  $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Kj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,Ft,null,1,null),new $APP.G(null,v,null,1,null)))),null,1,null),$APP.F([new $APP.G(null,jt,null,1,null)])))),null,1,null),$APP.F([new $APP.G(null,q,null,1,null)])))),null,1,null),new $APP.G(null,v,null,1,null)]))))};Ht=function(a){var b=$APP.A.g(1,$APP.xd(a));return b?$APP.Ef(new $APP.Uh(null,new $APP.n(null,1,[$APP.qj,"null"],null),null),$APP.Dd(a)):b};
  It=function(a){return $APP.ui.g(function(b){return $APP.Xd(b)?$APP.ek.g(b,2):$APP.Nf.g(2,b)},a)};
  Kt=function(a,b,c){c=$APP.B.j(c,0,null);var d=$APP.x(c),e=$APP.y(d);$APP.z(d);var f=$APP.Sp.h(b),k=Tp.h(b),l=$APP.r(a)?a:$APP.kn.h("f");a=$APP.Hi.h($APP.t.h(l));var m=$APP.ht.g(new $APP.Uh(null,new $APP.n(null,1,[$APP.qj,"null"],null),null),e);d=$APP.xd(m)-1;var h=$APP.rt.h(b),q=$APP.r(h)?d-2:d;b=$APP.Rh.l(b,kt,new $APP.n(null,6,[st,true,$APP.tt,q,ut,q,vt,function(){var p=new $APP.J(null,1,5,$APP.N,[m],null);return $APP.r(h)?It(p):p}(),$APP.V,function(){var p=new $APP.G(null,e,null,1,null);return $APP.r(h)?
  It(p):p}(),wt,$APP.Om.h($APP.ui.g($APP.Nd,new $APP.J(null,1,5,$APP.N,[e],null)))],null),$APP.F([jr,true,$APP.Sp,f,Tp,k]));b=$APP.Md(l,b);f=$APP.kn.h("args");return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,b,null,1,null),new $APP.G(null,$APP.Md($APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.ys,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.h(new $APP.G(null,xt,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,
  $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,f,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.v()))),null,1,null))))),null,1,null),$APP.F([new $APP.G(null,ft(f),null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,Jt,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.bt,null,1,null),
  new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.ct,null,1,null),new $APP.G(null,d,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$s,null,1,null),new $APP.G(null,f,null,1,null)))),null,1,null)])))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,At,null,1,null),new $APP.G(null,f,null,1,null),$APP.F([new $APP.G(null,d,null,1,null)])))),null,1,null)])))),null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,
  $APP.Kj,null,1,null),new $APP.G(null,new $APP.G(null,Gj,new $APP.G(null,$APP.t.h(a),null,1,null),2,null),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,it,null,1,null),function(p){return $APP.ui.g(function(v){return Ys(v)},$APP.Wm.h(p))}(d),$APP.F([new $APP.G(null,Jt,null,1,null)])))),null,1,null)])))),null,1,null)])))),null,1,null)])))),null,1,null)])))),null),null,1,null))))),null,1,null),$APP.F([new $APP.G(null,qt(b,c,true),null,1,null),new $APP.G(null,b,null,1,null)]))))};
  Lt=function(a,b){return Vp.g($APP.ji.g($APP.t.h(a),1),b)};Ot=function(a){return $APP.he(Mt,a)||$APP.he(Nt,a)};Pt=function(a){var b=$APP.B.j(a,0,null);a=$APP.B.j(a,1,null);return [$APP.t.h(b),$APP.t.h(Vp.h(a))].join("")};Qt=function(a){var b=$APP.B.j(a,0,null);a=$APP.B.j(a,1,null);return [$APP.t.h(Vp.h(a)),$APP.t.h(b)].join("")};Rt=function(a){var b=$APP.Le(a);return $APP.r($APP.r(b)?$APP.A.g("clojure.core",b)||$APP.A.g("cljs.core",b)||$APP.A.g("squint.core",b):b)?$APP.Hi.h($APP.ai(a)):a};
  cu=function(a,b){var c=$APP.Rh.j(b,$APP.yq,St.h($APP.Nd(a)));return Bq(function(){var d=$APP.y(a);if($APP.r(No.h(c))){$APP.Wi.l(Wq,$APP.Tm,"squintscript/core.js",$APP.Yq.g($APP.De,$APP.Vh),$APP.F([$APP.Tt]));d=function(){var m=Zq.h(c);return $APP.r(m)?[$APP.t.h(m),"."].join(""):""}();var e=$APP.Jp.g(", ",Fq(c,a));return lp.j?lp.j("%slist(%s)",d,e):lp.call(null,"%slist(%s)",d,e)}if(d instanceof $APP.w){d=$APP.y(a);var f=Rt(d);d=$APP.Qh.g(f,d)?$APP.Md($APP.He(f,$APP.cd(a)),$APP.Nd(a)):a;e=$APP.t.h(f);
  var k=f instanceof $APP.w?function(){var m=function(){var H=Rt(f);return Ut.h?Ut.h(H):Ut.call(null,H)}();if($APP.r(m))return m;var h=$APP.Le(f),q=$APP.ai(f);m=$APP.u($APP.Hr.h(c));var p=$APP.to.h(m),v=$APP.Hi.h(q);q=$APP.fe.g(m,p);if($APP.r(h)){var D=$APP.Hi.h(h);h=function(){var H=null==c?null:$APP.Vt.h(c);H=null==H?null:$APP.fe.g(H,D);return null==H?null:$APP.fe.g(H,v)}();if($APP.r(h))return h;h=$APP.cp.j(q,new $APP.J(null,2,5,$APP.N,[$APP.Kr,D],null),D);return $APP.cp.g(m,new $APP.J(null,3,5,$APP.N,
  [$APP.Vt,h,v],null))}h=$APP.Ir.h(q);h=$APP.fe.g(h,v);return $APP.r(h)?$APP.cp.g(m,new $APP.J(null,3,5,$APP.N,[$APP.Vt,h,v],null)):null}():null;return $APP.r(k)?(d=$APP.Gf.A(function(){var m=k.afn;return $APP.r(m)?m:k}(),d,new $APP.n(null,3,[$APP.Wt,$APP.mr,hr$1,hr$1.h(c),$APP.T,new $APP.n(null,1,[$APP.U,$APP.nr],null)],null),$APP.cd(d)),Vp.g(d,c)):$APP.A.g(".",e.charAt(0))&&1<e.length&&!$APP.A.g("..",e)?Xt.j($APP.Kj,c,$APP.Jq.A($APP.Kj,$APP.Cd(d),$APP.Hi.h($APP.ji.g(e,1)),$APP.Fd(d))):1<e.length&&$APP.ra(e,
  ".")?Vp.g($APP.Jq.j($APP.Cj,$APP.Hi.h($APP.ji.j(e,0,e.length-1)),$APP.cd(d)),c):Ot(f)?Xt.j(f,c,d):Eq(c,f)?Tq(c,d):$APP.he(Yt,f)?Pt(d):$APP.he(Zt,f)?Qt(d):Xt.j($t,c,a)}if(d instanceof $APP.I){e=$APP.x(a);d=$APP.y(e);var l=$APP.z(e);e=$APP.y(l);l=$APP.z(l);return Vp.g($APP.Jq.A(au,e,d,l),c)}if($APP.Vd(d)||$APP.Sd(d))return e=$APP.x(a),d=$APP.y(e),l=$APP.z(e),e=$APP.y(l),l=$APP.z(l),Vp.g($APP.Jq.A(au,d,e,l),c);if($APP.Ae(a))return Xt.j($t,c,a);throw new bu(["invalid form: ",$APP.t.h(a)].join(""));}(),
  b)};
  fu=function(a,b){if($APP.Df(function(e){var f="string"===typeof e;if(f||(f=e instanceof $APP.I))return f;f=No.h(b);return $APP.r(f)?e instanceof $APP.w:f},$APP.Kh(a))){var c=$APP.Rk.g(b,$APP.yq),d=$APP.Rh.j(c,$APP.Kp,no);a=$APP.Jp.g(", ",$APP.ui.g(function(e){var f=$APP.Gb(e);if($APP.A.g(Yr,f))var k="...";else {k=$APP.t;var l=k.h,m=Vp,h=m.g;var q=(q=f instanceof $APP.I)?$APP.Le(f):q;f=$APP.r(q)?[$APP.t.h(q),"/",$APP.ai(f)].join(""):$APP.ai(f);k=[l.call(k,h.call(m,f,d)),": "].join("");}return [k,$APP.t.h(Vp.g($APP.Hb(e),
  d))].join("")},$APP.x(a)));return Bq(fq(lp.g?lp.g("({ %s })",a):lp.call(null,"({ %s })",a),c),b)}c=$APP.Jq.j($APP.du,$APP.hf,$APP.ui.g(function(e){var f=$APP.B.j(e,0,null);e=$APP.B.j(e,1,null);return new $APP.G(null,eu,new $APP.G(null,f,new $APP.G(null,e,null,1,null),2,null),3,null)},a));return Vp.g(c,b)};gu=function(a,b){a=$APP.Jp.g(", ",Fq(kq(b),a));a=lp.g?lp.g("new Set([%s])",a):lp.call(null,"new Set([%s])",a);return fq(a,b)};
  qu=function(a,b){var c=$APP.mr;$APP.mr=$APP.Wt.g(b,$APP.mr);try{return $APP.t.h(Vp.g(a,$APP.Qk.l($APP.F([new $APP.n(null,6,[$APP.Hr,$APP.Vi.h($APP.hf),$APP.Kp,$APP.Qp,Np,!0,Uq,hu,hr$1,function(){var d=$APP.Lf(0);return function(){function e(l){var m=d.Rb(null,d.nb(null)+1);return $APP.Hi.h([$APP.t.h($APP.r(l)?$APP.Vj(l):"G__"),$APP.t.h(m)].join(""))}function f(){return k.h(null)}var k=null;k=function(l){switch(arguments.length){case 0:return f.call(this);case 1:return e.call(this,l)}throw Error("Invalid arity: "+
  arguments.length);};k.v=f;k.h=e;return k}()}(),iu,new $APP.n(null,6,[ju,cu,ku,ns,lu,fu,mu,Lt,nu,gu,ou,pu],null)],null),b]))))}finally{$APP.mr=c;}};
  tu=function(a,b){b=$APP.Qk.l($APP.F([new $APP.n(null,1,[$APP.Hr,$APP.Vi.h($APP.hf)],null),b]));a=$APP.hp(a);if($APP.r($APP.mr)){var c=$APP.Vj($APP.nr);c=["globalThis.",$APP.t.h(c)," \x3d globalThis.",$APP.t.h(c)," || {};\n"].join("");}else c="";for(;;){var d=$APP.Rh.j($APP.ru,$APP.mo,$APP.u(su));d=$APP.jp(a,d);if($APP.A.g($APP.ip,d))return c;d=$APP.kf(qu(d,b));d=fr(b,d);c=[c,$APP.t.h(d)].join("");}};
  $APP.Eu=function(a,b,c){var d=$APP.jf(b);b=$APP.fe.g(d,$APP.uu);var e=$APP.fe.g(d,$APP.Lr),f=$APP.fe.j(d,Zq,"squint_core"),k=$APP.Qk.l($APP.F([c,d]));c=Xq;d=qr;var l=vu,m=$APP.mr,h=$APP.Wt.g(k,$APP.mr);Xq="squint-cljs/core.js";qr=ds;vu=false;$APP.mr=h;try{var q=$APP.Vi.h(!1),p=$APP.Qk.l($APP.F([new $APP.n(null,2,[$APP.Hr,$APP.Vi.h($APP.hf),Np,!0],null),k])),v=$APP.Vi.h($APP.hf),D=$APP.Vi.h($APP.Vh),H=$APP.Vi.h($APP.gf([f,Xq])),O=zq.h(p),P=wu.h(O),W=$APP.Vi.h($APP.r($APP.mr)?lp.j?lp.j("var %s \x3d await import('%s');\n",
  f,Xq):lp.call(null,"var %s \x3d await import('%s');\n",f,Xq):lp.j?lp.j("import * as %s from '%s';\n",f,Xq):lp.call(null,"import * as %s from '%s';\n",f,Xq)),ca=$APP.Vi.h(new $APP.n(null,1,[hq,""],null));k=Wq;h=xu;var ha=su,oa=vu,pa=Vq,fa=$APP.nr,E=qr,C=$APP.br,ea=$APP.Vi.h($APP.Vh),K=$APP.T.g(p,$APP.nr),M=$APP.Sp.h(p);Wq=v;xu=D;su=H;vu=!1;Vq=ea;$APP.nr=K;qr=ds;$APP.br=M;try{var da=tu(a,$APP.Rh.l(p,Zq,f,$APP.F([$APP.yu,W,$APP.yq,!1,dr,ca,fs,q])));a=vu;$APP.r($APP.r(a)?O:a)&&$APP.Wi.j(W,$APP.t,function(){var ta=
  $APP.r(P)?"DEV":"",xa=$APP.r(P)?"":"s",ya=$APP.r(P)?"DEV":"",Ca=[$APP.t.h(zu.g(O,"react")),$APP.r(P)?"/jsx-dev-runtime":"/jsx-runtime"].join("");return lp.J?lp.J("var {jsx%s: _jsx, jsx%s%s: _jsxs, Fragment: _Fragment } \x3d await import('%s');\n",ta,xa,ya,Ca):lp.call(null,"var {jsx%s: _jsx, jsx%s%s: _jsxs, Fragment: _Fragment } \x3d await import('%s');\n",ta,xa,ya,Ca)}());$APP.r($APP.u(q))&&$APP.Wi.j(W,$APP.t,$APP.r($APP.mr)?"var squint_html \x3d await import('squint-cljs/src/squint/html.js');\n":
  "import * as squint_html from 'squint-cljs/src/squint/html.js';\n");var ia=hq.h($APP.u(ca)),ja=$APP.r(e)?null:$APP.u(W),sa=$APP.r(b)?null:[$APP.t.h(function(){var ta=$APP.Au.g($APP.u(D),"default$");return $APP.r(ta)&&$APP.x(ta)?(ta=$APP.Jp.g(", ",ta),lp.g?lp.g("\nexport { %s }\n",ta):lp.call(null,"\nexport { %s }\n",ta)):null}()),$APP.he($APP.u(D),"default$")?"export default default$\n":null].join("");return $APP.Rh.l(p,dr,ia,$APP.F([$APP.yu,ja,Bu,sa,$APP.Cu,da,$APP.Du,[$APP.t.h(ia),$APP.t.h(ja),
  da,sa].join(""),$APP.yq,a,$APP.T,$APP.nr,$APP.Hr,$APP.Hr.h(p)]))}finally{$APP.br=C,qr=E,$APP.nr=fa,Vq=pa,vu=oa,su=ha,xu=h,Wq=k;}}finally{$APP.mr=m,vu=l,qr=d,Xq=c;}};Ju=function(a){a=$APP.Fu.l(a,$APP.F([$APP.Gu,true]));var b=$APP.r($APP.Kp.h(a))?$APP.Tm.j(a,$APP.Kp,$APP.vi):a;b=$APP.r($APP.T.h(a))?$APP.Tm.j(b,$APP.T,$APP.Hi):b;b=$APP.r(Hu.h(a))?$APP.Rh.j(b,$APP.Lr,Hu.h(a)):b;return $APP.r(Iu.h(a))?$APP.Rh.j(b,$APP.uu,Iu.h(a)):b};$APP.aa=[];/*

   Copyright The Closure Library Authors.
   SPDX-License-Identifier: Apache-2.0
  */
  var la="closure_uid_"+(1E9*Math.random()>>>0),ma=0;$APP.Ku=String.prototype.trim?function(a){return a.trim()}:function(a){return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]};var Lu=String.prototype.repeat?function(a,b){return a.repeat(b)}:function(a,b){return Array(b+1).join(a)};$APP.g=$APP.Fa.prototype;$APP.g.Ec="";$APP.g.set=function(a){this.Ec=""+a;};$APP.g.append=function(a,b,c){this.Ec+=String(a);if(null!=b)for(let d=1;d<arguments.length;d++)this.Ec+=arguments[d];return this};$APP.g.clear=function(){this.Ec="";};$APP.g.getLength=function(){return this.Ec.length};$APP.g.toString=function(){return this.Ec};var Yc,Uj,Nu,Pu,ge,Zu,gm,qi,zv,cj,Dv;$APP.Oc={};$APP.Ta=null;$APP.Va=null;$APP.Sa=true;$APP.Ja=true;$APP.La=false;$APP.Na=false;$APP.Ji=false;$APP.Qa=null;$APP.li=null;Yc="undefined"!==typeof Symbol&&"function"===$APP.ka(Symbol)?Symbol.iterator:"@@iterator";
  Uj={"]":"_RBRACK_","'":"_SINGLEQUOTE_","\x3d":"_EQ_",'"':"_DOUBLEQUOTE_","!":"_BANG_","*":"_STAR_","%":"_PERCENT_","|":"_BAR_","~":"_TILDE_","/":"_SLASH_","\\":"_BSLASH_","-":"_","?":"_QMARK_","\x26":"_AMPERSAND_",":":"_COLON_","\x3c":"_LT_","{":"_LBRACE_","}":"_RBRACE_","[":"_LBRACK_","#":"_SHARP_","^":"_CARET_","+":"_PLUS_","@":"_CIRCA_","\x3e":"_GT_"};
  $APP.Mu=function Mu(a){switch(arguments.length){case 1:return Mu.h(arguments[0]);case 2:return Mu.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.Mu.h=function(a){return $APP.Mu.g(null,a)};$APP.Mu.g=function(a,b){function c(d,e){d.push(e);return d}a=[];return $APP.ne.j?$APP.ne.j(c,a,b):$APP.ne.call(null,c,a,b)};$APP.Mu.m=2;
  Nu=function(){function a(d,e,f){var k=$APP.Id[$APP.ka(null==d?null:d)];if(null!=k)return k.j?k.j(d,e,f):k.call(null,d,e,f);k=$APP.Id._;if(null!=k)return k.j?k.j(d,e,f):k.call(null,d,e,f);throw $APP.fb("IIndexed.-nth",d);}function b(d,e){var f=$APP.Id[$APP.ka(null==d?null:d)];if(null!=f)return f.g?f.g(d,e):f.call(null,d,e);f=$APP.Id._;if(null!=f)return f.g?f.g(d,e):f.call(null,d,e);throw $APP.fb("IIndexed.-nth",d);}var c=null;c=function(d,e,f){switch(arguments.length){case 2:return b.call(this,d,e);
  case 3:return a.call(this,d,e,f)}throw Error("Invalid arity: "+arguments.length);};c.g=b;c.j=a;return c}();$APP.Id=function Id(a){switch(arguments.length){case 2:return Id.g(arguments[0],arguments[1]);case 3:return Id.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.Id.g=function(a,b){return null!=a&&null!=a.ba?a.ba(a,b):Nu(a,b)};$APP.Id.j=function(a,b,c){return null!=a&&null!=a.ab?a.ab(a,b,c):Nu(a,b,c)};$APP.Id.m=3;
  Pu=function(){function a(d,e,f){var k=$APP.Ou[$APP.ka(null==d?null:d)];if(null!=k)return k.j?k.j(d,e,f):k.call(null,d,e,f);k=$APP.Ou._;if(null!=k)return k.j?k.j(d,e,f):k.call(null,d,e,f);throw $APP.fb("ILookup.-lookup",d);}function b(d,e){var f=$APP.Ou[$APP.ka(null==d?null:d)];if(null!=f)return f.g?f.g(d,e):f.call(null,d,e);f=$APP.Ou._;if(null!=f)return f.g?f.g(d,e):f.call(null,d,e);throw $APP.fb("ILookup.-lookup",d);}var c=null;c=function(d,e,f){switch(arguments.length){case 2:return b.call(this,
  d,e);case 3:return a.call(this,d,e,f)}throw Error("Invalid arity: "+arguments.length);};c.g=b;c.j=a;return c}();$APP.Ou=function Ou(a){switch(arguments.length){case 2:return Ou.g(arguments[0],arguments[1]);case 3:return Ou.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.Ou.g=function(a,b){return null!=a&&null!=a.ia?a.ia(a,b):Pu(a,b)};$APP.Ou.j=function(a,b,c){return null!=a&&null!=a.O?a.O(a,b,c):Pu(a,b,c)};$APP.Ou.m=3;
  var Ru=function(){function a(d,e,f){var k=Qu[$APP.ka(null==d?null:d)];if(null!=k)return k.j?k.j(d,e,f):k.call(null,d,e,f);k=Qu._;if(null!=k)return k.j?k.j(d,e,f):k.call(null,d,e,f);throw $APP.fb("IReduce.-reduce",d);}function b(d,e){var f=Qu[$APP.ka(null==d?null:d)];if(null!=f)return f.g?f.g(d,e):f.call(null,d,e);f=Qu._;if(null!=f)return f.g?f.g(d,e):f.call(null,d,e);throw $APP.fb("IReduce.-reduce",d);}var c=null;c=function(d,e,f){switch(arguments.length){case 2:return b.call(this,d,e);case 3:return a.call(this,
  d,e,f)}throw Error("Invalid arity: "+arguments.length);};c.g=b;c.j=a;return c}(),Qu=function Qu(a){switch(arguments.length){case 2:return Qu.g(arguments[0],arguments[1]);case 3:return Qu.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};Qu.g=function(a,b){return null!=a&&null!=a.Ha?a.Ha(a,b):Ru(a,b)};Qu.j=function(a,b,c){return null!=a&&null!=a.Ia?a.Ia(a,b,c):Ru(a,b,c)};Qu.m=3;
  var Tu=function(){function a(f,k,l,m,h){var q=Su[$APP.ka(null==f?null:f)];if(null!=q)return q.J?q.J(f,k,l,m,h):q.call(null,f,k,l,m,h);q=Su._;if(null!=q)return q.J?q.J(f,k,l,m,h):q.call(null,f,k,l,m,h);throw $APP.fb("ISwap.-swap!",f);}function b(f,k,l,m){var h=Su[$APP.ka(null==f?null:f)];if(null!=h)return h.A?h.A(f,k,l,m):h.call(null,f,k,l,m);h=Su._;if(null!=h)return h.A?h.A(f,k,l,m):h.call(null,f,k,l,m);throw $APP.fb("ISwap.-swap!",f);}function c(f,k,l){var m=Su[$APP.ka(null==f?null:f)];if(null!=
  m)return m.j?m.j(f,k,l):m.call(null,f,k,l);m=Su._;if(null!=m)return m.j?m.j(f,k,l):m.call(null,f,k,l);throw $APP.fb("ISwap.-swap!",f);}function d(f,k){var l=Su[$APP.ka(null==f?null:f)];if(null!=l)return l.g?l.g(f,k):l.call(null,f,k);l=Su._;if(null!=l)return l.g?l.g(f,k):l.call(null,f,k);throw $APP.fb("ISwap.-swap!",f);}var e=null;e=function(f,k,l,m,h){switch(arguments.length){case 2:return d.call(this,f,k);case 3:return c.call(this,f,k,l);case 4:return b.call(this,f,k,l,m);case 5:return a.call(this,
  f,k,l,m,h)}throw Error("Invalid arity: "+arguments.length);};e.g=d;e.j=c;e.A=b;e.J=a;return e}(),Su=function Su(a){switch(arguments.length){case 2:return Su.g(arguments[0],arguments[1]);case 3:return Su.j(arguments[0],arguments[1],arguments[2]);case 4:return Su.A(arguments[0],arguments[1],arguments[2],arguments[3]);case 5:return Su.J(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};
  Su.g=function(a,b){return null!=a&&null!=a.gf?a.gf(a,b):Tu(a,b)};Su.j=function(a,b,c){return null!=a&&null!=a.hf?a.hf(a,b,c):Tu(a,b,c)};Su.A=function(a,b,c,d){return null!=a&&null!=a.jf?a.jf(a,b,c,d):Tu(a,b,c,d)};Su.J=function(a,b,c,d,e){return null!=a&&null!=a.kf?a.kf(a,b,c,d,e):Tu(a,b,c,d,e)};Su.m=5;$APP.Cc.prototype.Ic=function(a,b){return this.Bf.append(b)};$APP.Cc.prototype.dc=function(){return null};
  var Ec="undefined"!==typeof Math&&"undefined"!==typeof Math.imul?function(a,b){return Math.imul(a,b)}:function(a,b){var c=a&65535,d=b&65535;return c*d+((a>>>16&65535)*d+c*(b>>>16&65535)<<16>>>0)|0},Mc={},Lc=0;$APP.g=$APP.w.prototype;$APP.g.toString=function(){return this.mc};$APP.g.Z=function(a,b){return b instanceof $APP.w?this.mc===b.mc:false};
  $APP.g.call=function(a){switch(arguments.length-1){case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};$APP.g.h=function(a){return $APP.fe.g?$APP.fe.g(a,this):$APP.fe.call(null,a,this)};$APP.g.g=function(a,b){return $APP.fe.j?$APP.fe.j(a,this,b):$APP.fe.call(null,a,this,b)};$APP.g.V=function(){return this.Mb};
  $APP.g.W=function(a,b){return new $APP.w(this.xb,this.name,this.mc,this.Wc,b)};$APP.g.$=function(){var a=this.Wc;return null!=a?a:this.Wc=a=Sc(this)};$APP.g.Yc=function(){return this.name};$APP.g.Zc=function(){return this.xb};$APP.g.R=function(a,b){return $APP.ic(b,this.mc)};$APP.Hi=function Hi(a){switch(arguments.length){case 1:return Hi.h(arguments[0]);case 2:return Hi.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};
  $APP.Hi.h=function(a){for(;;){if(a instanceof $APP.w)return a;if("string"===typeof a){var b=a.indexOf("/");return 1>b?$APP.Hi.g(null,a):$APP.Hi.g(a.substring(0,b),a.substring(b+1,a.length))}if(a instanceof $APP.Vc)return a.nc;if(a instanceof $APP.I)a=a.da;else throw Error("no conversion to symbol");}};$APP.Hi.g=function(a,b){var c=null!=a?[$APP.t.h(a),"/",$APP.t.h(b)].join(""):b;return new $APP.w(a,b,c,null,null)};$APP.Hi.m=2;$APP.g=$APP.Vc.prototype;$APP.g.toString=function(){return ["#'",$APP.t.h(this.nc)].join("")};
  $APP.g.nb=function(){return this.val.v?this.val.v():this.val.call(null)};$APP.g.V=function(){return this.Mb};$APP.g.W=function(a,b){return new $APP.Vc(this.val,this.nc,b)};$APP.g.Z=function(a,b){return b instanceof $APP.Vc?(a=this.nc,b=b.nc,$APP.A.g?$APP.A.g(a,b):$APP.A.call(null,a,b)):false};$APP.g.$=function(){return Sc(this.nc)};$APP.g.Be=$APP.Oc;
  $APP.g.call=function(a){switch(arguments.length-1){case 0:return this.v();case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);case 3:return this.j(arguments[1],arguments[2],arguments[3]);case 4:return this.A(arguments[1],arguments[2],arguments[3],arguments[4]);case 5:return this.J(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);case 6:return this.fa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6]);case 7:return this.Aa(arguments[1],
  arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7]);case 8:return this.oa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8]);case 9:return this.Ba(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9]);case 10:return this.qa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10]);
  case 11:return this.ra(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11]);case 12:return this.sa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12]);case 13:return this.ta(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],
  arguments[11],arguments[12],arguments[13]);case 14:return this.ua(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14]);case 15:return this.va(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15]);case 16:return this.wa(arguments[1],
  arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16]);case 17:return this.xa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17]);case 18:return this.ya(arguments[1],arguments[2],
  arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18]);case 19:return this.za(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19]);case 20:return this.$a(arguments[1],
  arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20]);case 21:return this.sc(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],
  arguments[18],arguments[19],arguments[20],arguments[21]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};$APP.g.v=function(){var a=this.val.v?this.val.v():this.val.call(null);return a.v?a.v():a.call(null)};$APP.g.h=function(a){var b=this.val.v?this.val.v():this.val.call(null);return b.h?b.h(a):b.call(null,a)};
  $APP.g.g=function(a,b){var c=this.val.v?this.val.v():this.val.call(null);return c.g?c.g(a,b):c.call(null,a,b)};$APP.g.j=function(a,b,c){var d=this.val.v?this.val.v():this.val.call(null);return d.j?d.j(a,b,c):d.call(null,a,b,c)};$APP.g.A=function(a,b,c,d){var e=this.val.v?this.val.v():this.val.call(null);return e.A?e.A(a,b,c,d):e.call(null,a,b,c,d)};$APP.g.J=function(a,b,c,d,e){var f=this.val.v?this.val.v():this.val.call(null);return f.J?f.J(a,b,c,d,e):f.call(null,a,b,c,d,e)};
  $APP.g.fa=function(a,b,c,d,e,f){var k=this.val.v?this.val.v():this.val.call(null);return k.fa?k.fa(a,b,c,d,e,f):k.call(null,a,b,c,d,e,f)};$APP.g.Aa=function(a,b,c,d,e,f,k){var l=this.val.v?this.val.v():this.val.call(null);return l.Aa?l.Aa(a,b,c,d,e,f,k):l.call(null,a,b,c,d,e,f,k)};$APP.g.oa=function(a,b,c,d,e,f,k,l){var m=this.val.v?this.val.v():this.val.call(null);return m.oa?m.oa(a,b,c,d,e,f,k,l):m.call(null,a,b,c,d,e,f,k,l)};
  $APP.g.Ba=function(a,b,c,d,e,f,k,l,m){var h=this.val.v?this.val.v():this.val.call(null);return h.Ba?h.Ba(a,b,c,d,e,f,k,l,m):h.call(null,a,b,c,d,e,f,k,l,m)};$APP.g.qa=function(a,b,c,d,e,f,k,l,m,h){var q=this.val.v?this.val.v():this.val.call(null);return q.qa?q.qa(a,b,c,d,e,f,k,l,m,h):q.call(null,a,b,c,d,e,f,k,l,m,h)};$APP.g.ra=function(a,b,c,d,e,f,k,l,m,h,q){var p=this.val.v?this.val.v():this.val.call(null);return p.ra?p.ra(a,b,c,d,e,f,k,l,m,h,q):p.call(null,a,b,c,d,e,f,k,l,m,h,q)};
  $APP.g.sa=function(a,b,c,d,e,f,k,l,m,h,q,p){var v=this.val.v?this.val.v():this.val.call(null);return v.sa?v.sa(a,b,c,d,e,f,k,l,m,h,q,p):v.call(null,a,b,c,d,e,f,k,l,m,h,q,p)};$APP.g.ta=function(a,b,c,d,e,f,k,l,m,h,q,p,v){var D=this.val.v?this.val.v():this.val.call(null);return D.ta?D.ta(a,b,c,d,e,f,k,l,m,h,q,p,v):D.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v)};
  $APP.g.ua=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D){var H=this.val.v?this.val.v():this.val.call(null);return H.ua?H.ua(a,b,c,d,e,f,k,l,m,h,q,p,v,D):H.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D)};$APP.g.va=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H){var O=this.val.v?this.val.v():this.val.call(null);return O.va?O.va(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H):O.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H)};
  $APP.g.wa=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O){var P=this.val.v?this.val.v():this.val.call(null);return P.wa?P.wa(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O):P.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O)};$APP.g.xa=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P){var W=this.val.v?this.val.v():this.val.call(null);return W.xa?W.xa(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P):W.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P)};
  $APP.g.ya=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W){var ca=this.val.v?this.val.v():this.val.call(null);return ca.ya?ca.ya(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W):ca.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W)};$APP.g.za=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca){var ha=this.val.v?this.val.v():this.val.call(null);return ha.za?ha.za(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca):ha.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca)};
  $APP.g.$a=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha){var oa=this.val.v?this.val.v():this.val.call(null);return oa.$a?oa.$a(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha):oa.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha)};$APP.g.sc=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha,oa){var pa=this.val.v?this.val.v():this.val.call(null);return $APP.Gf.Vd?$APP.Gf.Vd(pa,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha,oa):$APP.Gf.call(null,pa,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha,oa)};
  $APP.A=function A(a){switch(arguments.length){case 1:return A.h(arguments[0]);case 2:return A.g(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return A.l(arguments[0],arguments[1],new $APP.Xc(c.slice(2),0,null))}};$APP.A.h=function(){return  true};$APP.A.g=function(a,b){return null==a?null==b:a===b||$b(a,b)};$APP.A.l=function(a,b,c){for(;;)if($APP.A.g(a,b))if($APP.z(c))a=b,b=$APP.y(c),c=$APP.z(c);else return $APP.A.g(b,$APP.y(c));else return  false};
  $APP.A.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};$APP.A.m=2;dd.prototype.next=function(){if(null!=this.ga){var a=$APP.y(this.ga);this.ga=$APP.z(this.ga);return {value:a,done:false}}return {value:null,done:true}};fd.prototype.Y=function(){return this};fd.prototype.Fa=function(){return this.value};fd.prototype.Ja=function(){null==this.Pd&&(this.Pd=$c.h?$c.h(this.gd):$c.call(null,this.gd));return this.Pd};var Uu=Kc(Hc(0,Gc(1)),0),Vu=Kc(Hc(0,Gc(0)),0);
  jb["null"]=true;kb["null"]=function(){return 0};$APP.g=Date.prototype;$APP.g.Z=function(a,b){return b instanceof Date&&this.valueOf()===b.valueOf()};$APP.g.Gc=$APP.Oc;$APP.g.cc=function(a,b){if(b instanceof Date)return $APP.Ba(this.valueOf(),b.valueOf());throw Error(["Cannot compare ",$APP.t.h(this)," to ",$APP.t.h(b)].join(""));};$APP.g.lf=$APP.Oc;$APP.g.He=function(){return this.getTime()};$b.number=function(a,b){return a===b};ib["function"]=true;Pb["function"]=true;Qb["function"]=function(){return null};
  ac._=function(a){return $APP.na(a)};kd.prototype.nb=function(){return this.val};Ad.prototype.pa=function(){return this.K<this.C.length};Ad.prototype.next=function(){var a=this.C[this.K];this.K+=1;return a};$APP.g=$APP.Xc.prototype;$APP.g.toString=function(){return $APP.Dc(this)};
  $APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd.h?$APP.xd.h(this):$APP.xd.call(null,this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.ba=function(a,b){a=b+this.K;if(0<=a&&a<this.C.length)return this.C[a];throw Error("Index out of bounds");};
  $APP.g.ab=function(a,b,c){a=b+this.K;return 0<=a&&a<this.C.length?this.C[a]:c};$APP.g.Da=function(){return new Ad(this.C,this.K)};$APP.g.V=function(){return this.I};$APP.g.Ga=function(){return this.K+1<this.C.length?new $APP.Xc(this.C,this.K+1,null):null};$APP.g.aa=function(){var a=this.C.length-this.K;return 0>a?0:a};$APP.g.tc=function(){var a=this.aa(null);return 0<a?new Bd(this,a-1,null):null};$APP.g.$=function(){return gd(this)};
  $APP.g.Z=function(a,b){return ze.g?ze.g(this,b):ze.call(null,this,b)};$APP.g.na=function(){return $APP.bd};$APP.g.Ha=function(a,b){return ud(this.C,b,this.C[this.K],this.K+1)};$APP.g.Ia=function(a,b,c){return ud(this.C,b,c,this.K)};$APP.g.Fa=function(){return this.C[this.K]};$APP.g.Ja=function(){return this.K+1<this.C.length?new $APP.Xc(this.C,this.K+1,null):$APP.bd};$APP.g.Y=function(){return this.K<this.C.length?this:null};
  $APP.g.W=function(a,b){return b===this.I?this:new $APP.Xc(this.C,this.K,b)};$APP.g.ea=function(a,b){return $APP.He.g?$APP.He.g(b,this):$APP.He.call(null,b,this)};$APP.Xc.prototype[Yc]=function(){return ed(this)};$APP.g=Bd.prototype;$APP.g.toString=function(){return $APP.Dc(this)};
  $APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd.h?$APP.xd.h(this):$APP.xd.call(null,this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.V=function(){return this.I};$APP.g.Ga=function(){return 0<this.K?new Bd(this.Id,this.K-1,null):null};$APP.g.aa=function(){return this.K+1};$APP.g.$=function(){return gd(this)};
  $APP.g.Z=function(a,b){return ze.g?ze.g(this,b):ze.call(null,this,b)};$APP.g.na=function(){return $APP.bd};$APP.g.Ha=function(a,b){return ke?ke(b,this):me.call(null,b,this)};$APP.g.Ia=function(a,b,c){return le?le(b,c,this):me.call(null,b,c,this)};$APP.g.Fa=function(){return $APP.Id(this.Id,this.K)};$APP.g.Ja=function(){return 0<this.K?new Bd(this.Id,this.K-1,null):$APP.bd};$APP.g.Y=function(){return this};$APP.g.W=function(a,b){return b===this.I?this:new Bd(this.Id,this.K,b)};
  $APP.g.ea=function(a,b){return $APP.He.g?$APP.He.g(b,this):$APP.He.call(null,b,this)};Bd.prototype[Yc]=function(){return ed(this)};$b._=function(a,b){return a===b};$APP.De=function De(a){switch(arguments.length){case 0:return De.v();case 1:return De.h(arguments[0]);case 2:return De.g(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return De.l(arguments[0],arguments[1],new $APP.Xc(c.slice(2),0,null))}};$APP.De.v=function(){return $APP.kg};
  $APP.De.h=function(a){return a};$APP.De.g=function(a,b){return null!=a?$APP.ob(a,b):new $APP.G(null,b,null,1,null)};$APP.De.l=function(a,b,c){for(;;)if($APP.r(c))a=$APP.De.g(a,b),b=$APP.y(c),c=$APP.z(c);else return $APP.De.g(a,b)};$APP.De.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};$APP.De.m=2;
  $APP.B=function B(a){switch(arguments.length){case 2:return B.g(arguments[0],arguments[1]);case 3:return B.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};
  $APP.B.g=function(a,b){if("number"!==typeof b)throw Error("Index argument to nth must be a number");if(null==a)return a;if(null!=a&&(a.D&16||$APP.Oc===a.De))return a.ba(null,b);if($APP.Xa(a)){if(-1<b&&b<a.length)return a[b|0];throw Error("Index out of bounds");}if("string"===typeof a){if(-1<b&&b<a.length)return a.charAt(b|0);throw Error("Index out of bounds");}if(null!=a&&(a.D&64||$APP.Oc===a.ad)||null!=a&&(a.D&16777216||$APP.Oc===a.Fe)){if(0>b)throw Error("Index out of bounds");a:for(;;){if(null==
  a)throw Error("Index out of bounds");if(0===b){if($APP.x(a)){a=$APP.y(a);break a}throw Error("Index out of bounds");}if($APP.wd(a)){a=$APP.Id(a,b);break a}if($APP.x(a))a=$APP.z(a),--b;else throw Error("Index out of bounds");}return a}if($APP.cb(pb,a))return $APP.Id(a,b);throw Error(["nth not supported on this type ",$APP.t.h(gb($APP.eb(a)))].join(""));};
  $APP.B.j=function(a,b,c){if("number"!==typeof b)throw Error("Index argument to nth must be a number.");if(null==a)return c;if(null!=a&&(a.D&16||$APP.Oc===a.De))return a.ab(null,b,c);if($APP.Xa(a))return  -1<b&&b<a.length?a[b|0]:c;if("string"===typeof a)return  -1<b&&b<a.length?a.charAt(b|0):c;if(null!=a&&(a.D&64||$APP.Oc===a.ad)||null!=a&&(a.D&16777216||$APP.Oc===a.Fe))return 0>b?c:Jd(a,b,c);if($APP.cb(pb,a))return $APP.Id(a,b,c);throw Error(["nth not supported on this type ",$APP.t.h(gb($APP.eb(a)))].join(""));
  };$APP.B.m=3;$APP.fe=function fe(a){switch(arguments.length){case 2:return fe.g(arguments[0],arguments[1]);case 3:return fe.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.fe.g=function(a,b){return null==a?null:null!=a&&(a.D&256||$APP.Oc===a.cf)?a.ia(null,b):$APP.Xa(a)?null!=b&&b<a.length?a[b|0]:null:"string"===typeof a?null!=b&&-1<b&&b<a.length?a.charAt(b|0):null:$APP.cb(xb,a)?$APP.Ou(a,b):null};
  $APP.fe.j=function(a,b,c){return null!=a?null!=a&&(a.D&256||$APP.Oc===a.cf)?a.O(null,b,c):$APP.Xa(a)?null!=b&&-1<b&&b<a.length?a[b|0]:c:"string"===typeof a?null!=b&&-1<b&&b<a.length?a.charAt(b|0):c:$APP.cb(xb,a)?$APP.Ou(a,b,c):c:c};$APP.fe.m=3;
  $APP.Rh=function Rh(a){switch(arguments.length){case 3:return Rh.j(arguments[0],arguments[1],arguments[2]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Rh.l(arguments[0],arguments[1],arguments[2],new $APP.Xc(c.slice(3),0,null))}};$APP.Rh.j=function(a,b,c){return null!=a&&(a.D&512||$APP.Oc===a.Ce)?a.ha(null,b,c):null!=a?Cb(a,b,c):$APP.gf([b,c])};
  $APP.Rh.l=function(a,b,c,d){for(;;)if(a=$APP.Rh.j(a,b,c),$APP.r(d))b=$APP.y(d),c=$APP.Cd(d),d=$APP.Fd(d);else return a};$APP.Rh.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};$APP.Rh.m=3;
  $APP.Rk=function Rk(a){switch(arguments.length){case 1:return Rk.h(arguments[0]);case 2:return Rk.g(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Rk.l(arguments[0],arguments[1],new $APP.Xc(c.slice(2),0,null))}};$APP.Rk.h=function(a){return a};$APP.Rk.g=function(a,b){return null==a?null:Fb(a,b)};$APP.Rk.l=function(a,b,c){for(;;){if(null==a)return null;a=$APP.Rk.g(a,b);if($APP.r(c))b=$APP.y(c),c=$APP.z(c);else return a}};
  $APP.Rk.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};$APP.Rk.m=2;$APP.g=Ld.prototype;$APP.g.V=function(){return this.I};$APP.g.W=function(a,b){return new Ld(this.afn,b)};$APP.g.Be=$APP.Oc;
  $APP.g.call=function(a){switch(arguments.length-1){case 0:return this.v();case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);case 3:return this.j(arguments[1],arguments[2],arguments[3]);case 4:return this.A(arguments[1],arguments[2],arguments[3],arguments[4]);case 5:return this.J(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);case 6:return this.fa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6]);case 7:return this.Aa(arguments[1],
  arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7]);case 8:return this.oa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8]);case 9:return this.Ba(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9]);case 10:return this.qa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10]);
  case 11:return this.ra(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11]);case 12:return this.sa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12]);case 13:return this.ta(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],
  arguments[11],arguments[12],arguments[13]);case 14:return this.ua(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14]);case 15:return this.va(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15]);case 16:return this.wa(arguments[1],
  arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16]);case 17:return this.xa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17]);case 18:return this.ya(arguments[1],arguments[2],
  arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18]);case 19:return this.za(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19]);case 20:return this.$a(arguments[1],
  arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20]);case 21:return this.sc(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],
  arguments[18],arguments[19],arguments[20],arguments[21]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};$APP.g.v=function(){return this.afn.v?this.afn.v():this.afn.call(null)};$APP.g.h=function(a){return this.afn.h?this.afn.h(a):this.afn.call(null,a)};$APP.g.g=function(a,b){return this.afn.g?this.afn.g(a,b):this.afn.call(null,a,b)};
  $APP.g.j=function(a,b,c){return this.afn.j?this.afn.j(a,b,c):this.afn.call(null,a,b,c)};$APP.g.A=function(a,b,c,d){return this.afn.A?this.afn.A(a,b,c,d):this.afn.call(null,a,b,c,d)};$APP.g.J=function(a,b,c,d,e){return this.afn.J?this.afn.J(a,b,c,d,e):this.afn.call(null,a,b,c,d,e)};$APP.g.fa=function(a,b,c,d,e,f){return this.afn.fa?this.afn.fa(a,b,c,d,e,f):this.afn.call(null,a,b,c,d,e,f)};
  $APP.g.Aa=function(a,b,c,d,e,f,k){return this.afn.Aa?this.afn.Aa(a,b,c,d,e,f,k):this.afn.call(null,a,b,c,d,e,f,k)};$APP.g.oa=function(a,b,c,d,e,f,k,l){return this.afn.oa?this.afn.oa(a,b,c,d,e,f,k,l):this.afn.call(null,a,b,c,d,e,f,k,l)};$APP.g.Ba=function(a,b,c,d,e,f,k,l,m){return this.afn.Ba?this.afn.Ba(a,b,c,d,e,f,k,l,m):this.afn.call(null,a,b,c,d,e,f,k,l,m)};$APP.g.qa=function(a,b,c,d,e,f,k,l,m,h){return this.afn.qa?this.afn.qa(a,b,c,d,e,f,k,l,m,h):this.afn.call(null,a,b,c,d,e,f,k,l,m,h)};
  $APP.g.ra=function(a,b,c,d,e,f,k,l,m,h,q){return this.afn.ra?this.afn.ra(a,b,c,d,e,f,k,l,m,h,q):this.afn.call(null,a,b,c,d,e,f,k,l,m,h,q)};$APP.g.sa=function(a,b,c,d,e,f,k,l,m,h,q,p){return this.afn.sa?this.afn.sa(a,b,c,d,e,f,k,l,m,h,q,p):this.afn.call(null,a,b,c,d,e,f,k,l,m,h,q,p)};$APP.g.ta=function(a,b,c,d,e,f,k,l,m,h,q,p,v){return this.afn.ta?this.afn.ta(a,b,c,d,e,f,k,l,m,h,q,p,v):this.afn.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v)};
  $APP.g.ua=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D){return this.afn.ua?this.afn.ua(a,b,c,d,e,f,k,l,m,h,q,p,v,D):this.afn.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D)};$APP.g.va=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H){return this.afn.va?this.afn.va(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H):this.afn.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H)};$APP.g.wa=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O){return this.afn.wa?this.afn.wa(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O):this.afn.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O)};
  $APP.g.xa=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P){return this.afn.xa?this.afn.xa(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P):this.afn.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P)};$APP.g.ya=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W){return this.afn.ya?this.afn.ya(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W):this.afn.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W)};
  $APP.g.za=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca){return this.afn.za?this.afn.za(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca):this.afn.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca)};$APP.g.$a=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha){return this.afn.$a?this.afn.$a(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha):this.afn.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha)};
  $APP.g.sc=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha,oa){return $APP.Gf.Vd?$APP.Gf.Vd(this.afn,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha,oa):$APP.Gf.call(null,this.afn,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha,oa)};
  $APP.Au=function Au(a){switch(arguments.length){case 1:return Au.h(arguments[0]);case 2:return Au.g(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Au.l(arguments[0],arguments[1],new $APP.Xc(c.slice(2),0,null))}};$APP.Au.h=function(a){return a};$APP.Au.g=function(a,b){return null==a?null:Jb(a,b)};$APP.Au.l=function(a,b,c){for(;;){if(null==a)return null;a=$APP.Au.g(a,b);if($APP.r(c))b=$APP.y(c),c=$APP.z(c);else return a}};
  $APP.Au.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};$APP.Au.m=2;ge={};$APP.Eo=function Eo(a){switch(arguments.length){case 1:return Eo.h(arguments[0]);case 2:return Eo.g(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Eo.l(arguments[0],arguments[1],new $APP.Xc(c.slice(2),0,null))}};$APP.Eo.h=function(){return  true};$APP.Eo.g=function(a,b){return !$APP.A.g(a,b)};
  $APP.Eo.l=function(a,b,c){if($APP.A.g(a,b))return  false;a=$APP.Wh([a,b]);for(b=c;;){var d=$APP.y(b);c=$APP.z(b);if($APP.r(b)){if($APP.he(a,d))return  false;a=$APP.De.g(a,d);b=c;}else return  true}};$APP.Eo.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};$APP.Eo.m=2;
  $APP.ne=function ne(a){switch(arguments.length){case 2:return ne.g(arguments[0],arguments[1]);case 3:return ne.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.ne.g=function(a,b){return null!=b&&(b.D&524288||$APP.Oc===b.ef)?b.Ha(null,a):$APP.Xa(b)?sd(b,a):"string"===typeof b?sd(b,a):$APP.cb(Ub,b)?Qu(b,a):Wc(b)?pe(b,a):ke(a,b)};
  $APP.ne.j=function(a,b,c){return null!=c&&(c.D&524288||$APP.Oc===c.ef)?c.Ia(null,a,b):$APP.Xa(c)?td(c,a,b):"string"===typeof c?td(c,a,b):$APP.cb(Ub,c)?Qu(c,a,b):Wc(c)?qe(c,a,b):le(a,b,c)};$APP.ne.m=3;$APP.Wu=function Wu(a){switch(arguments.length){case 1:return Wu.h(arguments[0]);case 2:return Wu.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.Wu.h=function(a){return $APP.Wu.g(a,$APP.se)};
  $APP.Wu.g=function(a,b){return function(){function c(k,l){return a.g?a.g(k,l):a.call(null,k,l)}function d(k){return b.h?b.h(k):b.call(null,k)}function e(){return a.v?a.v():a.call(null)}var f=null;f=function(k,l){switch(arguments.length){case 0:return e.call(this);case 1:return d.call(this,k);case 2:return c.call(this,k,l)}throw Error("Invalid arity: "+arguments.length);};f.v=e;f.h=d;f.g=c;return f}()};$APP.Wu.m=2;
  $APP.Xu=function Xu(a){switch(arguments.length){case 3:return Xu.j(arguments[0],arguments[1],arguments[2]);case 4:return Xu.A(arguments[0],arguments[1],arguments[2],arguments[3]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.Xu.j=function(a,b,c){return $APP.Xu.A(a,b,b.v?b.v():b.call(null),c)};$APP.Xu.A=function(a,b,c,d){a=a.h?a.h(b):a.call(null,b);c=$APP.ne.j(a,c,d);return a.h?a.h(c):a.call(null,c)};$APP.Xu.m=4;
  $APP.Yu=function Yu(a){switch(arguments.length){case 0:return Yu.v();case 1:return Yu.h(arguments[0]);case 2:return Yu.g(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Yu.l(arguments[0],arguments[1],new $APP.Xc(c.slice(2),0,null))}};$APP.Yu.v=function(){return 0};$APP.Yu.h=function(a){return a};$APP.Yu.g=function(a,b){return a+b};$APP.Yu.l=function(a,b,c){return $APP.ne.j($APP.Yu,a+b,c)};
  $APP.Yu.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};$APP.Yu.m=2;$APP.ro=function ro(a){switch(arguments.length){case 1:return ro.h(arguments[0]);case 2:return ro.g(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return ro.l(arguments[0],arguments[1],new $APP.Xc(c.slice(2),0,null))}};$APP.ro.h=function(a){return -a};$APP.ro.g=function(a,b){return a-b};
  $APP.ro.l=function(a,b,c){return $APP.ne.j($APP.ro,a-b,c)};$APP.ro.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};$APP.ro.m=2;$APP.Um=function Um(a){switch(arguments.length){case 1:return Um.h(arguments[0]);case 2:return Um.g(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Um.l(arguments[0],arguments[1],new $APP.Xc(c.slice(2),0,null))}};$APP.Um.h=function(a){return a};
  $APP.Um.g=function(a,b){return a>b?a:b};$APP.Um.l=function(a,b,c){return $APP.ne.j($APP.Um,a>b?a:b,c)};$APP.Um.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};$APP.Um.m=2;$APP.Ks=function Ks(a){switch(arguments.length){case 2:return Ks.g(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Ks.l(arguments[0],arguments[1],new $APP.Xc(c.slice(2),0,null))}};$APP.Ks.g=function(a,b){return a|b};
  $APP.Ks.l=function(a,b,c){return $APP.ne.j($APP.Ks,a|b,c)};$APP.Ks.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};$APP.Ks.m=2;$APP.dk=function dk(a){switch(arguments.length){case 1:return dk.h(arguments[0]);case 2:return dk.g(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return dk.l(arguments[0],arguments[1],new $APP.Xc(c.slice(2),0,null))}};$APP.dk.h=function(){return  true};
  $APP.dk.g=function(a,b){return $b(a,b)};$APP.dk.l=function(a,b,c){for(;;)if(a===b)if($APP.z(c))a=b,b=$APP.y(c),c=$APP.z(c);else return b===$APP.y(c);else return  false};$APP.dk.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};$APP.dk.m=2;
  $APP.t=function t(a){switch(arguments.length){case 0:return t.v();case 1:return t.h(arguments[0]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return t.l(arguments[0],new $APP.Xc(c.slice(1),0,null))}};$APP.t.v=function(){return ""};$APP.t.h=function(a){return null==a?"":[a].join("")};$APP.t.l=function(a,b){for(a=new $APP.Fa($APP.t.h(a));;)if($APP.r(b))a=a.append($APP.t.h($APP.y(b))),b=$APP.z(b);else return a.toString()};
  $APP.t.o=function(a){var b=$APP.y(a);a=$APP.z(a);return this.l(b,a)};$APP.t.m=1;$APP.ji=function ji(a){switch(arguments.length){case 2:return ji.g(arguments[0],arguments[1]);case 3:return ji.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.ji.g=function(a,b){return a.substring(b)};$APP.ji.j=function(a,b,c){return a.substring(b,c)};$APP.ji.m=3;$APP.g=$APP.G.prototype;$APP.g.toString=function(){return $APP.Dc(this)};
  $APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,this.count)}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.V=function(){return this.I};$APP.g.Ga=function(){return 1===this.count?null:this.lb};$APP.g.aa=function(){return this.count};$APP.g.uc=function(){return this.first};$APP.g.vc=function(){return this.Ja(null)};
  $APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};$APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return $APP.Sb($APP.bd,this.I)};$APP.g.Ha=function(a,b){return ke(b,this)};$APP.g.Ia=function(a,b,c){return le(b,c,this)};$APP.g.Fa=function(){return this.first};$APP.g.Ja=function(){return 1===this.count?$APP.bd:this.lb};$APP.g.Y=function(){return this};$APP.g.W=function(a,b){return b===this.I?this:new $APP.G(b,this.first,this.lb,this.count,this.F)};
  $APP.g.ea=function(a,b){return new $APP.G(this.I,b,this,this.count+1,null)};$APP.G.prototype[Yc]=function(){return ed(this)};$APP.g=Be.prototype;$APP.g.toString=function(){return $APP.Dc(this)};$APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.V=function(){return this.I};$APP.g.Ga=function(){return null};$APP.g.aa=function(){return 0};$APP.g.uc=function(){return null};$APP.g.vc=function(){throw Error("Can't pop empty list");};$APP.g.$=function(){return Uu};
  $APP.g.Z=function(a,b){return $APP.Ae(b)||$APP.Ud(b)?null==$APP.x(b):false};$APP.g.na=function(){return this};$APP.g.Ha=function(a,b){return ke(b,this)};$APP.g.Ia=function(a,b,c){return le(b,c,this)};$APP.g.Fa=function(){return null};$APP.g.Ja=function(){return $APP.bd};$APP.g.Y=function(){return null};$APP.g.W=function(a,b){return b===this.I?this:new Be(b)};$APP.g.ea=function(a,b){return new $APP.G(this.I,b,null,1,null)};$APP.bd=new Be(null);Be.prototype[Yc]=function(){return ed(this)};
  $APP.Q=function Q(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Q.l(0<c.length?new $APP.Xc(c.slice(0),0,null):null)};$APP.Q.l=function(a){if(a instanceof $APP.Xc&&0===a.K)var b=a.C;else a:for(b=[];;)if(null!=a)b.push(rb(a)),a=wb(a);else break a;a=b.length;for(var c=$APP.bd;;)if(0<a){var d=a-1;c=$APP.ob(c,b[a-1]);a=d;}else return c};$APP.Q.m=0;$APP.Q.o=function(a){return this.l($APP.x(a))};$APP.g=Ge.prototype;$APP.g.toString=function(){return $APP.Dc(this)};
  $APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.V=function(){return this.I};$APP.g.Ga=function(){return null==this.lb?null:$APP.x(this.lb)};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};$APP.g.Z=function(a,b){return ze(this,b)};
  $APP.g.na=function(){return $APP.bd};$APP.g.Ha=function(a,b){return ke(b,this)};$APP.g.Ia=function(a,b,c){return le(b,c,this)};$APP.g.Fa=function(){return this.first};$APP.g.Ja=function(){return null==this.lb?$APP.bd:this.lb};$APP.g.Y=function(){return this};$APP.g.W=function(a,b){return b===this.I?this:new Ge(b,this.first,this.lb,this.F)};$APP.g.ea=function(a,b){return new Ge(null,b,this,null)};Ge.prototype[Yc]=function(){return ed(this)};$APP.g=$APP.I.prototype;
  $APP.g.toString=function(){return [":",$APP.t.h(this.da)].join("")};$APP.g.Z=function(a,b){return b instanceof $APP.I?this.da===b.da:false};$APP.g.call=function(a){switch(arguments.length-1){case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};$APP.g.h=function(a){return $APP.fe.g(a,this)};
  $APP.g.g=function(a,b){return $APP.fe.j(a,this,b)};$APP.g.$=function(){var a=this.Wc;return null!=a?a:this.Wc=a=Sc(this)+2654435769|0};$APP.g.Yc=function(){return this.name};$APP.g.Zc=function(){return this.xb};$APP.g.R=function(a,b){return $APP.ic(b,[":",$APP.t.h(this.da)].join(""))};$APP.vi=function vi(a){switch(arguments.length){case 1:return vi.h(arguments[0]);case 2:return vi.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};
  $APP.vi.h=function(a){if(a instanceof $APP.I)return a;if(a instanceof $APP.w)return new $APP.I($APP.Le(a),$APP.ai.h?$APP.ai.h(a):$APP.ai.call(null,a),a.mc,null);if($APP.A.g("/",a))return new $APP.I(null,a,a,null);if("string"===typeof a){var b=a.split("/");return 2===b.length?new $APP.I(b[0],b[1],a,null):new $APP.I(null,b[0],a,null)}return null};
  $APP.vi.g=function(a,b){a=a instanceof $APP.I?$APP.ai.h?$APP.ai.h(a):$APP.ai.call(null,a):a instanceof $APP.w?$APP.ai.h?$APP.ai.h(a):$APP.ai.call(null,a):a;b=b instanceof $APP.I?$APP.ai.h?$APP.ai.h(b):$APP.ai.call(null,b):b instanceof $APP.w?$APP.ai.h?$APP.ai.h(b):$APP.ai.call(null,b):b;return new $APP.I(a,b,[$APP.r(a)?[$APP.t.h(a),"/"].join(""):null,$APP.t.h(b)].join(""),null)};$APP.vi.m=2;$APP.g=$APP.Ne.prototype;$APP.g.toString=function(){return $APP.Dc(this)};
  $APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.V=function(){return this.I};$APP.g.Ga=function(){this.Y(null);return null==this.ga?null:$APP.z(this.ga)};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};
  $APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return $APP.Sb($APP.bd,this.I)};$APP.g.$c=function(){return $APP.Za(this.Ca)};$APP.g.Ha=function(a,b){return ke(b,this)};$APP.g.Ia=function(a,b,c){return le(b,c,this)};$APP.g.Fa=function(){this.Y(null);return null==this.ga?null:$APP.y(this.ga)};$APP.g.Ja=function(){this.Y(null);return null!=this.ga?$APP.cd(this.ga):$APP.bd};
  $APP.g.Y=function(){Oe(this);if(null==this.ga)return null;for(var a=this.ga;;)if(a instanceof $APP.Ne)a=Oe(a);else return this.ga=a,$APP.x(this.ga)};$APP.g.W=function(a,b){var c=this;return b===this.I?c:new $APP.Ne(b,function(){return c.Y(null)},null,this.F)};$APP.g.ea=function(a,b){return $APP.He(b,this)};$APP.Ne.prototype[Yc]=function(){return ed(this)};Se.prototype.add=function(a){this.Mc[this.end]=a;return this.end+=1};Se.prototype.gb=function(){var a=new Ue(this.Mc,0,this.end);this.Mc=null;return a};
  Se.prototype.aa=function(){return this.end};$APP.g=Ue.prototype;$APP.g.aa=function(){return this.end-this.kb};$APP.g.ba=function(a,b){return this.C[this.kb+b]};$APP.g.ab=function(a,b,c){return 0<=b&&b<this.end-this.kb?this.C[this.kb+b]:c};$APP.g.Td=function(){if(this.kb===this.end)throw Error("-drop-first of empty chunk");return new Ue(this.C,this.kb+1,this.end)};$APP.g.Ha=function(a,b){return ud(this.C,b,this.C[this.kb],this.kb+1)};$APP.g.Ia=function(a,b,c){return ud(this.C,b,c,this.kb)};
  $APP.g=Ve.prototype;$APP.g.toString=function(){return $APP.Dc(this)};$APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.V=function(){return this.I};$APP.g.Ga=function(){return 1<kb(this.gb)?new Ve(tc(this.gb),this.Yb,null,null):null==this.Yb?null:$APP.cc(this.Yb)};
  $APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};$APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return $APP.bd};$APP.g.Fa=function(){return $APP.Id(this.gb,0)};$APP.g.Ja=function(){return 1<kb(this.gb)?new Ve(tc(this.gb),this.Yb,null,null):null==this.Yb?$APP.bd:this.Yb};$APP.g.Y=function(){return this};$APP.g.od=function(){return this.gb};$APP.g.Fc=function(){return null==this.Yb?$APP.bd:this.Yb};
  $APP.g.W=function(a,b){return b===this.I?this:new Ve(this.gb,this.Yb,b,this.F)};$APP.g.ea=function(a,b){return $APP.He(b,this)};$APP.g.nd=function(){return null==this.Yb?null:this.Yb};Ve.prototype[Yc]=function(){return ed(this)};$APP.Fk=function Fk(a){switch(arguments.length){case 1:return Fk.h(arguments[0]);case 2:return Fk.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};
  $APP.Fk.h=function(a){return "number"===typeof a?$APP.Fk.g(a,null):$APP.Mu.h(a)};$APP.Fk.g=function(a,b){var c=Array(a);if($APP.be(b)){var d=0;for(b=$APP.x(b);;)if(b&&d<a)c[d]=$APP.y(b),d+=1,b=$APP.z(b);else return c}else {for(d=0;;)if(d<a)c[d]=b,d+=1;else break;return c}};$APP.Fk.m=2;Zu=function Zu(a){if(null==a)return null;var c=$APP.z(a);return null==c?$APP.x($APP.y(a)):$APP.He($APP.y(a),Zu.h?Zu.h(c):Zu.call(null,c))};
  $APP.R=function R(a){switch(arguments.length){case 0:return R.v();case 1:return R.h(arguments[0]);case 2:return R.g(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return R.l(arguments[0],arguments[1],new $APP.Xc(c.slice(2),0,null))}};$APP.R.v=function(){return new $APP.Ne(null,function(){return null},null,null)};$APP.R.h=function(a){return new $APP.Ne(null,function(){return a},null,null)};
  $APP.R.g=function(a,b){return new $APP.Ne(null,function(){var c=$APP.x(a);return c?$APP.Zd(c)?$APP.We($APP.uc(c),$APP.R.g($APP.vc(c),b)):$APP.He($APP.y(c),$APP.R.g($APP.cd(c),b)):b},null,null)};$APP.R.l=function(a,b,c){return function k(e,f){return new $APP.Ne(null,function(){var l=$APP.x(e);return l?$APP.Zd(l)?$APP.We($APP.uc(l),k($APP.vc(l),f)):$APP.He($APP.y(l),k($APP.cd(l),f)):$APP.r(f)?k($APP.y(f),$APP.z(f)):null},null,null)}($APP.R.g(a,b),c)};
  $APP.R.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};$APP.R.m=2;
  $APP.Jq=function Jq(a){switch(arguments.length){case 1:return Jq.h(arguments[0]);case 2:return Jq.g(arguments[0],arguments[1]);case 3:return Jq.j(arguments[0],arguments[1],arguments[2]);case 4:return Jq.A(arguments[0],arguments[1],arguments[2],arguments[3]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Jq.l(arguments[0],arguments[1],arguments[2],arguments[3],new $APP.Xc(c.slice(4),0,null))}};$APP.Jq.h=function(a){return $APP.x(a)};
  $APP.Jq.g=function(a,b){return $APP.He(a,b)};$APP.Jq.j=function(a,b,c){return $APP.He(a,$APP.He(b,c))};$APP.Jq.A=function(a,b,c,d){return $APP.He(a,$APP.He(b,$APP.He(c,d)))};$APP.Jq.l=function(a,b,c,d,e){return $APP.He(a,$APP.He(b,$APP.He(c,$APP.He(d,Zu(e)))))};$APP.Jq.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);e=$APP.z(e);return this.l(b,a,c,d,e)};$APP.Jq.m=4;
  $APP.fg=function fg(a){switch(arguments.length){case 0:return fg.v();case 1:return fg.h(arguments[0]);case 2:return fg.g(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return fg.l(arguments[0],arguments[1],new $APP.Xc(c.slice(2),0,null))}};$APP.fg.v=function(){return $APP.mc($APP.kg)};$APP.fg.h=function(a){return a};$APP.fg.g=function(a,b){return nc(a,b)};
  $APP.fg.l=function(a,b,c){for(;;)if(a=nc(a,b),$APP.r(c))b=$APP.y(c),c=$APP.z(c);else return a};$APP.fg.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};$APP.fg.m=2;$APP.Ug=function Ug(a){switch(arguments.length){case 3:return Ug.j(arguments[0],arguments[1],arguments[2]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Ug.l(arguments[0],arguments[1],arguments[2],new $APP.Xc(c.slice(3),0,null))}};
  $APP.Ug.j=function(a,b,c){return pc(a,b,c)};$APP.Ug.l=function(a,b,c,d){for(;;)if(a=pc(a,b,c),$APP.r(d))b=$APP.y(d),c=$APP.Cd(d),d=$APP.Fd(d);else return a};$APP.Ug.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};$APP.Ug.m=3;
  $APP.Gf=function Gf(a){switch(arguments.length){case 2:return Gf.g(arguments[0],arguments[1]);case 3:return Gf.j(arguments[0],arguments[1],arguments[2]);case 4:return Gf.A(arguments[0],arguments[1],arguments[2],arguments[3]);case 5:return Gf.J(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Gf.l(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],new $APP.Xc(c.slice(5),0,
  null))}};$APP.Gf.g=function(a,b){if(a.o){var c=a.m,d=$APP.$e(c+1,b);return d<=c?af(a,d,b):a.o(b)}b=$APP.x(b);return null==b?a.v?a.v():a.call(a):df(a,rb(b),bf(b))};$APP.Gf.j=function(a,b,c){if(a.o){b=$APP.Jq.g(b,c);var d=a.m;c=$APP.$e(d,c)+1;return c<=d?af(a,c,b):a.o(b)}return df(a,b,$APP.x(c))};$APP.Gf.A=function(a,b,c,d){return a.o?(b=$APP.Jq.j(b,c,d),c=a.m,d=2+$APP.$e(c-1,d),d<=c?af(a,d,b):a.o(b)):cf(a,b,c,$APP.x(d))};
  $APP.Gf.J=function(a,b,c,d,e){return a.o?(b=$APP.Jq.A(b,c,d,e),c=a.m,e=3+$APP.$e(c-2,e),e<=c?af(a,e,b):a.o(b)):ef(a,b,c,d,$APP.x(e))};$APP.Gf.l=function(a,b,c,d,e,f){return a.o?(f=Zu(f),b=$APP.He(b,$APP.He(c,$APP.He(d,$APP.He(e,f)))),c=a.m,f=4+$APP.$e(c-3,f),f<=c?af(a,f,b):a.o(b)):ff(a,b,c,d,e,Zu(f))};$APP.Gf.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);var f=$APP.z(e);e=$APP.y(f);f=$APP.z(f);return this.l(b,a,c,d,e,f)};$APP.Gf.m=5;
  $APP.jo=function jo(a){switch(arguments.length){case 2:return jo.g(arguments[0],arguments[1]);case 3:return jo.j(arguments[0],arguments[1],arguments[2]);case 4:return jo.A(arguments[0],arguments[1],arguments[2],arguments[3]);case 5:return jo.J(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);case 6:return jo.fa(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return jo.l(arguments[0],
  arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],new $APP.Xc(c.slice(6),0,null))}};$APP.jo.g=function(a,b){var c=$APP.Nd(a);b=b.h?b.h(c):b.call(null,c);return $APP.Md(a,b)};$APP.jo.j=function(a,b,c){var d=$APP.Nd(a);b=b.g?b.g(d,c):b.call(null,d,c);return $APP.Md(a,b)};$APP.jo.A=function(a,b,c,d){var e=$APP.Nd(a);b=b.j?b.j(e,c,d):b.call(null,e,c,d);return $APP.Md(a,b)};$APP.jo.J=function(a,b,c,d,e){var f=$APP.Nd(a);b=b.A?b.A(f,c,d,e):b.call(null,f,c,d,e);return $APP.Md(a,b)};
  $APP.jo.fa=function(a,b,c,d,e,f){var k=$APP.Nd(a);b=b.J?b.J(k,c,d,e,f):b.call(null,k,c,d,e,f);return $APP.Md(a,b)};$APP.jo.l=function(a,b,c,d,e,f,k){return $APP.Md(a,$APP.Gf.l(b,$APP.Nd(a),c,d,e,$APP.F([f,k])))};$APP.jo.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);var f=$APP.z(e);e=$APP.y(f);var k=$APP.z(f);f=$APP.y(k);k=$APP.z(k);return this.l(b,a,c,d,e,f,k)};$APP.jo.m=6;
  $APP.Qh=function Qh(a){switch(arguments.length){case 1:return Qh.h(arguments[0]);case 2:return Qh.g(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Qh.l(arguments[0],arguments[1],new $APP.Xc(c.slice(2),0,null))}};$APP.Qh.h=function(){return  false};$APP.Qh.g=function(a,b){return !$APP.A.g(a,b)};$APP.Qh.l=function(a,b,c){return $APP.Za($APP.Gf.A($APP.A,a,b,c))};
  $APP.Qh.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};$APP.Qh.m=2;$APP.g=lf.prototype;$APP.g.W=function(a,b){return new lf(b)};$APP.g.V=function(){return this.qf};$APP.g.pa=function(){return  false};$APP.g.next=function(){return Error("No such element")};$APP.g.remove=function(){return Error("Unsupported operation")};nf.prototype.pa=function(){return this.K<this.ga.length};nf.prototype.next=function(){var a=this.ga.charAt(this.K);this.K+=1;return a};
  nf.prototype.remove=function(){return Error("Unsupported operation")};of.prototype.pa=function(){return this.K<this.C.length};of.prototype.next=function(){var a=this.C[this.K];this.K+=1;return a};of.prototype.remove=function(){return Error("Unsupported operation")};var qf={},$u={};rf.prototype.pa=function(){this.ld===qf?(this.ld=$u,this.pb=$APP.x(this.pb)):this.ld===this.pb&&(this.pb=$APP.z(this.ld));return null!=this.pb};
  rf.prototype.next=function(){if(this.pa())return this.ld=this.pb,$APP.y(this.pb);throw Error("No such element");};rf.prototype.remove=function(){return Error("Unsupported operation")};tf.prototype.add=function(a){this.Nd.push(a);return this};tf.prototype.remove=function(){return this.Nd.shift()};tf.prototype.fd=function(){return 0===this.Nd.length};tf.prototype.toString=function(){return ["Many: ",$APP.t.h(this.Nd)].join("")};var yf={};
  uf.prototype.add=function(a){return this.val===yf?(this.val=a,this):new tf([this.val,a])};uf.prototype.remove=function(){if(this.val===yf)throw Error("Removing object from empty buffer");var a=this.val;this.val=yf;return a};uf.prototype.fd=function(){return this.val===yf};uf.prototype.toString=function(){return ["Single: ",$APP.t.h(this.val)].join("")};vf.prototype.add=function(a){return new uf(a)};vf.prototype.remove=function(){throw Error("Removing object from empty buffer");};vf.prototype.fd=function(){return  true};
  vf.prototype.toString=function(){return "Empty"};var xf=new vf;wf.prototype.pa=function(){for(var a=$APP.x(this.ne);;)if(null!=a)if($APP.y(a).pa())a=$APP.z(a);else return  false;else return  true};wf.prototype.next=function(){for(var a=[],b=this.ne.length,c=0;;)if(c<b)a[c]=this.ne[c].next(),c+=1;else break;return $APP.F(a)};
  var av=function av(a){return new $APP.Ne(null,function(){if(a.pa())for(var c=[],d=0;;){var e=a.pa();if($APP.r($APP.r(e)?32>d:e))c[d]=a.next(),d+=1;else return $APP.We(new Ue(c,0,d),av.h?av.h(a):av.call(null,a))}else return null},null,null)};
  zf.prototype.step=function(){if(this.pb!==yf)return  true;for(;;)if(this.pb===yf)if(this.buffer.fd()){if(this.me)return  false;if(this.ue.pa()){if(this.yf)var a=$APP.Gf.g(this.bc,$APP.He(null,this.ue.next()));else a=this.ue.next(),a=this.bc.g?this.bc.g(null,a):this.bc.call(null,null,a);$APP.md(a)&&(this.bc.h?this.bc.h(null):this.bc.call(null,null),this.me=true);}else this.bc.h?this.bc.h(null):this.bc.call(null,null),this.me=true;}else this.pb=this.buffer.remove();else return  true};zf.prototype.pa=function(){return this.step()};
  zf.prototype.next=function(){if(this.pa()){var a=this.pb;this.pb=yf;return a}throw Error("No such element");};zf.prototype.remove=function(){return Error("Unsupported operation")};zf.prototype[Yc]=function(){return ed(this)};$APP.S=function S(a){switch(arguments.length){case 1:return S.h(arguments[0]);case 2:return S.g(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return S.l(arguments[0],arguments[1],new $APP.Xc(c.slice(2),0,null))}};
  $APP.S.h=function(a){return $APP.be(a)?a:(a=$APP.x(a))?a:$APP.bd};$APP.S.g=function(a,b){b=sf(b);a=Cf(a,b,false);a=av(a);return $APP.r(a)?a:$APP.bd};$APP.S.l=function(a,b,c){b=$APP.He(b,c);b=$APP.ui.g?$APP.ui.g(sf,b):$APP.ui.call(null,sf,b);a=av(Cf(a,new wf($APP.Ze(b)),true));return $APP.r(a)?a:$APP.bd};$APP.S.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};$APP.S.m=2;
  $APP.Js=function Js(a){switch(arguments.length){case 0:return Js.v();case 1:return Js.h(arguments[0]);case 2:return Js.g(arguments[0],arguments[1]);case 3:return Js.j(arguments[0],arguments[1],arguments[2]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Js.l(arguments[0],arguments[1],arguments[2],new $APP.Xc(c.slice(3),0,null))}};$APP.Js.v=function(){return $APP.se};$APP.Js.h=function(a){return a};
  $APP.Js.g=function(a,b){return function(){function c(m,h,q){m=b.j?b.j(m,h,q):b.call(null,m,h,q);return a.h?a.h(m):a.call(null,m)}function d(m,h){m=b.g?b.g(m,h):b.call(null,m,h);return a.h?a.h(m):a.call(null,m)}function e(m){m=b.h?b.h(m):b.call(null,m);return a.h?a.h(m):a.call(null,m)}function f(){var m=b.v?b.v():b.call(null);return a.h?a.h(m):a.call(null,m)}var k=null,l=function(){function m(q,p,v,D){var H=null;if(3<arguments.length){H=0;for(var O=Array(arguments.length-3);H<O.length;)O[H]=arguments[H+
  3],++H;H=new $APP.Xc(O,0,null);}return h.call(this,q,p,v,H)}function h(q,p,v,D){q=$APP.Gf.J(b,q,p,v,D);return a.h?a.h(q):a.call(null,q)}m.m=3;m.o=function(q){var p=$APP.y(q);q=$APP.z(q);var v=$APP.y(q);q=$APP.z(q);var D=$APP.y(q);q=$APP.cd(q);return h(p,v,D,q)};m.l=h;return m}();k=function(m,h,q,p){switch(arguments.length){case 0:return f.call(this);case 1:return e.call(this,m);case 2:return d.call(this,m,h);case 3:return c.call(this,m,h,q);default:var v=null;if(3<arguments.length){v=0;for(var D=Array(arguments.length-
  3);v<D.length;)D[v]=arguments[v+3],++v;v=new $APP.Xc(D,0,null);}return l.l(m,h,q,v)}};k.m=3;k.o=l.o;k.v=f;k.h=e;k.g=d;k.j=c;k.l=l.l;return k}()};
  $APP.Js.j=function(a,b,c){return function(){function d(h,q,p){h=c.j?c.j(h,q,p):c.call(null,h,q,p);h=b.h?b.h(h):b.call(null,h);return a.h?a.h(h):a.call(null,h)}function e(h,q){h=c.g?c.g(h,q):c.call(null,h,q);h=b.h?b.h(h):b.call(null,h);return a.h?a.h(h):a.call(null,h)}function f(h){h=c.h?c.h(h):c.call(null,h);h=b.h?b.h(h):b.call(null,h);return a.h?a.h(h):a.call(null,h)}function k(){var h=c.v?c.v():c.call(null);h=b.h?b.h(h):b.call(null,h);return a.h?a.h(h):a.call(null,h)}var l=null,m=function(){function h(p,
  v,D,H){var O=null;if(3<arguments.length){O=0;for(var P=Array(arguments.length-3);O<P.length;)P[O]=arguments[O+3],++O;O=new $APP.Xc(P,0,null);}return q.call(this,p,v,D,O)}function q(p,v,D,H){p=$APP.Gf.J(c,p,v,D,H);p=b.h?b.h(p):b.call(null,p);return a.h?a.h(p):a.call(null,p)}h.m=3;h.o=function(p){var v=$APP.y(p);p=$APP.z(p);var D=$APP.y(p);p=$APP.z(p);var H=$APP.y(p);p=$APP.cd(p);return q(v,D,H,p)};h.l=q;return h}();l=function(h,q,p,v){switch(arguments.length){case 0:return k.call(this);case 1:return f.call(this,
  h);case 2:return e.call(this,h,q);case 3:return d.call(this,h,q,p);default:var D=null;if(3<arguments.length){D=0;for(var H=Array(arguments.length-3);D<H.length;)H[D]=arguments[D+3],++D;D=new $APP.Xc(H,0,null);}return m.l(h,q,p,D)}};l.m=3;l.o=m.o;l.v=k;l.h=f;l.g=e;l.j=d;l.l=m.l;return l}()};
  $APP.Js.l=function(a,b,c,d){var e=$APP.Fe($APP.Jq.A(a,b,c,d));return function(){function f(l){var m=null;if(0<arguments.length){m=0;for(var h=Array(arguments.length-0);m<h.length;)h[m]=arguments[m+0],++m;m=new $APP.Xc(h,0,null);}return k.call(this,m)}function k(l){l=$APP.Gf.g($APP.y(e),l);for(var m=$APP.z(e);;)if(m){var h=$APP.y(m);l=h.h?h.h(l):h.call(null,l);m=$APP.z(m);}else return l}f.m=0;f.o=function(l){l=$APP.x(l);return k(l)};f.l=k;return f}()};
  $APP.Js.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};$APP.Js.m=3;
  $APP.Tk=function Tk(a){switch(arguments.length){case 1:return Tk.h(arguments[0]);case 2:return Tk.g(arguments[0],arguments[1]);case 3:return Tk.j(arguments[0],arguments[1],arguments[2]);case 4:return Tk.A(arguments[0],arguments[1],arguments[2],arguments[3]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Tk.l(arguments[0],arguments[1],arguments[2],arguments[3],new $APP.Xc(c.slice(4),0,null))}};$APP.Tk.h=function(a){return a};
  $APP.Tk.g=function(a,b){return function(){function c(m,h,q){return a.A?a.A(b,m,h,q):a.call(null,b,m,h,q)}function d(m,h){return a.j?a.j(b,m,h):a.call(null,b,m,h)}function e(m){return a.g?a.g(b,m):a.call(null,b,m)}function f(){return a.h?a.h(b):a.call(null,b)}var k=null,l=function(){function m(q,p,v,D){var H=null;if(3<arguments.length){H=0;for(var O=Array(arguments.length-3);H<O.length;)O[H]=arguments[H+3],++H;H=new $APP.Xc(O,0,null);}return h.call(this,q,p,v,H)}function h(q,p,v,D){return $APP.Gf.l(a,
  b,q,p,v,$APP.F([D]))}m.m=3;m.o=function(q){var p=$APP.y(q);q=$APP.z(q);var v=$APP.y(q);q=$APP.z(q);var D=$APP.y(q);q=$APP.cd(q);return h(p,v,D,q)};m.l=h;return m}();k=function(m,h,q,p){switch(arguments.length){case 0:return f.call(this);case 1:return e.call(this,m);case 2:return d.call(this,m,h);case 3:return c.call(this,m,h,q);default:var v=null;if(3<arguments.length){v=0;for(var D=Array(arguments.length-3);v<D.length;)D[v]=arguments[v+3],++v;v=new $APP.Xc(D,0,null);}return l.l(m,h,q,v)}};k.m=3;k.o=l.o;k.v=f;k.h=e;k.g=d;k.j=c;k.l=l.l;return k}()};
  $APP.Tk.j=function(a,b,c){return function(){function d(h,q,p){return a.J?a.J(b,c,h,q,p):a.call(null,b,c,h,q,p)}function e(h,q){return a.A?a.A(b,c,h,q):a.call(null,b,c,h,q)}function f(h){return a.j?a.j(b,c,h):a.call(null,b,c,h)}function k(){return a.g?a.g(b,c):a.call(null,b,c)}var l=null,m=function(){function h(p,v,D,H){var O=null;if(3<arguments.length){O=0;for(var P=Array(arguments.length-3);O<P.length;)P[O]=arguments[O+3],++O;O=new $APP.Xc(P,0,null);}return q.call(this,p,v,D,O)}function q(p,v,D,H){return $APP.Gf.l(a,
  b,c,p,v,$APP.F([D,H]))}h.m=3;h.o=function(p){var v=$APP.y(p);p=$APP.z(p);var D=$APP.y(p);p=$APP.z(p);var H=$APP.y(p);p=$APP.cd(p);return q(v,D,H,p)};h.l=q;return h}();l=function(h,q,p,v){switch(arguments.length){case 0:return k.call(this);case 1:return f.call(this,h);case 2:return e.call(this,h,q);case 3:return d.call(this,h,q,p);default:var D=null;if(3<arguments.length){D=0;for(var H=Array(arguments.length-3);D<H.length;)H[D]=arguments[D+3],++D;D=new $APP.Xc(H,0,null);}return m.l(h,q,p,D)}};l.m=3;l.o=m.o;l.v=k;l.h=f;l.g=e;l.j=d;l.l=m.l;return l}()};
  $APP.Tk.A=function(a,b,c,d){return function(){function e(q,p,v){return a.fa?a.fa(b,c,d,q,p,v):a.call(null,b,c,d,q,p,v)}function f(q,p){return a.J?a.J(b,c,d,q,p):a.call(null,b,c,d,q,p)}function k(q){return a.A?a.A(b,c,d,q):a.call(null,b,c,d,q)}function l(){return a.j?a.j(b,c,d):a.call(null,b,c,d)}var m=null,h=function(){function q(v,D,H,O){var P=null;if(3<arguments.length){P=0;for(var W=Array(arguments.length-3);P<W.length;)W[P]=arguments[P+3],++P;P=new $APP.Xc(W,0,null);}return p.call(this,v,D,H,P)}
  function p(v,D,H,O){return $APP.Gf.l(a,b,c,d,v,$APP.F([D,H,O]))}q.m=3;q.o=function(v){var D=$APP.y(v);v=$APP.z(v);var H=$APP.y(v);v=$APP.z(v);var O=$APP.y(v);v=$APP.cd(v);return p(D,H,O,v)};q.l=p;return q}();m=function(q,p,v,D){switch(arguments.length){case 0:return l.call(this);case 1:return k.call(this,q);case 2:return f.call(this,q,p);case 3:return e.call(this,q,p,v);default:var H=null;if(3<arguments.length){H=0;for(var O=Array(arguments.length-3);H<O.length;)O[H]=arguments[H+3],++H;H=new $APP.Xc(O,
  0,null);}return h.l(q,p,v,H)}};m.m=3;m.o=h.o;m.v=l;m.h=k;m.g=f;m.j=e;m.l=h.l;return m}()};$APP.Tk.l=function(a,b,c,d,e){return function(){function f(l){var m=null;if(0<arguments.length){m=0;for(var h=Array(arguments.length-0);m<h.length;)h[m]=arguments[m+0],++m;m=new $APP.Xc(h,0,null);}return k.call(this,m)}function k(l){return $APP.Gf.J(a,b,c,d,$APP.R.g(e,l))}f.m=0;f.o=function(l){l=$APP.x(l);return k(l)};f.l=k;return f}()};
  $APP.Tk.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);e=$APP.z(e);return this.l(b,a,c,d,e)};$APP.Tk.m=4;$APP.Yq=function Yq(a){switch(arguments.length){case 2:return Yq.g(arguments[0],arguments[1]);case 3:return Yq.j(arguments[0],arguments[1],arguments[2]);case 4:return Yq.A(arguments[0],arguments[1],arguments[2],arguments[3]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};
  $APP.Yq.g=function(a,b){return function(){function c(l,m,h){l=null==l?b:l;return a.j?a.j(l,m,h):a.call(null,l,m,h)}function d(l,m){l=null==l?b:l;return a.g?a.g(l,m):a.call(null,l,m)}function e(l){l=null==l?b:l;return a.h?a.h(l):a.call(null,l)}var f=null,k=function(){function l(h,q,p,v){var D=null;if(3<arguments.length){D=0;for(var H=Array(arguments.length-3);D<H.length;)H[D]=arguments[D+3],++D;D=new $APP.Xc(H,0,null);}return m.call(this,h,q,p,D)}function m(h,q,p,v){return $APP.Gf.J(a,null==h?b:h,q,
  p,v)}l.m=3;l.o=function(h){var q=$APP.y(h);h=$APP.z(h);var p=$APP.y(h);h=$APP.z(h);var v=$APP.y(h);h=$APP.cd(h);return m(q,p,v,h)};l.l=m;return l}();f=function(l,m,h,q){switch(arguments.length){case 1:return e.call(this,l);case 2:return d.call(this,l,m);case 3:return c.call(this,l,m,h);default:var p=null;if(3<arguments.length){p=0;for(var v=Array(arguments.length-3);p<v.length;)v[p]=arguments[p+3],++p;p=new $APP.Xc(v,0,null);}return k.l(l,m,h,p)}};f.m=
  3;f.o=k.o;f.h=e;f.g=d;f.j=c;f.l=k.l;return f}()};
  $APP.Yq.j=function(a,b,c){return function(){function d(l,m,h){l=null==l?b:l;m=null==m?c:m;return a.j?a.j(l,m,h):a.call(null,l,m,h)}function e(l,m){l=null==l?b:l;m=null==m?c:m;return a.g?a.g(l,m):a.call(null,l,m)}var f=null,k=function(){function l(h,q,p,v){var D=null;if(3<arguments.length){D=0;for(var H=Array(arguments.length-3);D<H.length;)H[D]=arguments[D+3],++D;D=new $APP.Xc(H,0,null);}return m.call(this,h,q,p,D)}function m(h,q,p,v){return $APP.Gf.J(a,null==h?b:h,null==q?c:q,p,v)}l.m=3;l.o=function(h){var q=
  $APP.y(h);h=$APP.z(h);var p=$APP.y(h);h=$APP.z(h);var v=$APP.y(h);h=$APP.cd(h);return m(q,p,v,h)};l.l=m;return l}();f=function(l,m,h,q){switch(arguments.length){case 2:return e.call(this,l,m);case 3:return d.call(this,l,m,h);default:var p=null;if(3<arguments.length){p=0;for(var v=Array(arguments.length-3);p<v.length;)v[p]=arguments[p+3],++p;p=new $APP.Xc(v,0,null);}return k.l(l,m,h,p)}};f.m=3;f.o=k.o;f.g=e;f.j=d;f.l=k.l;return f}()};
  $APP.Yq.A=function(a,b,c,d){return function(){function e(m,h,q){m=null==m?b:m;h=null==h?c:h;q=null==q?d:q;return a.j?a.j(m,h,q):a.call(null,m,h,q)}function f(m,h){m=null==m?b:m;h=null==h?c:h;return a.g?a.g(m,h):a.call(null,m,h)}var k=null,l=function(){function m(q,p,v,D){var H=null;if(3<arguments.length){H=0;for(var O=Array(arguments.length-3);H<O.length;)O[H]=arguments[H+3],++H;H=new $APP.Xc(O,0,null);}return h.call(this,q,p,v,H)}function h(q,p,v,D){return $APP.Gf.J(a,null==q?b:q,null==p?c:p,null==
  v?d:v,D)}m.m=3;m.o=function(q){var p=$APP.y(q);q=$APP.z(q);var v=$APP.y(q);q=$APP.z(q);var D=$APP.y(q);q=$APP.cd(q);return h(p,v,D,q)};m.l=h;return m}();k=function(m,h,q,p){switch(arguments.length){case 2:return f.call(this,m,h);case 3:return e.call(this,m,h,q);default:var v=null;if(3<arguments.length){v=0;for(var D=Array(arguments.length-3);v<D.length;)D[v]=arguments[v+3],++v;v=new $APP.Xc(D,0,null);}return l.l(m,h,q,v)}};k.m=3;k.o=l.o;k.g=f;k.j=e;k.l=
  l.l;return k}()};$APP.Yq.m=4;$APP.Gs=function Gs(a){switch(arguments.length){case 1:return Gs.h(arguments[0]);case 2:return Gs.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};
  $APP.Gs.h=function(a){return function(b){return function(){function c(k,l){l=a.h?a.h(l):a.call(null,l);return null==l?k:b.g?b.g(k,l):b.call(null,k,l)}function d(k){return b.h?b.h(k):b.call(null,k)}function e(){return b.v?b.v():b.call(null)}var f=null;f=function(k,l){switch(arguments.length){case 0:return e.call(this);case 1:return d.call(this,k);case 2:return c.call(this,k,l)}throw Error("Invalid arity: "+arguments.length);};f.v=e;f.h=d;f.g=c;return f}()}};
  $APP.Gs.g=function(a,b){return new $APP.Ne(null,function(){var c=$APP.x(b);if(c){if($APP.Zd(c)){for(var d=$APP.uc(c),e=$APP.xd(d),f=$APP.Te(e),k=0;;)if(k<e){var l=function(){var m=$APP.Id(d,k);return a.h?a.h(m):a.call(null,m)}();null!=l&&f.add(l);k+=1;}else break;return $APP.We($APP.Ye(f),$APP.Gs.g(a,$APP.vc(c)))}e=function(){var m=$APP.y(c);return a.h?a.h(m):a.call(null,m)}();return null==e?$APP.Gs.g(a,$APP.cd(c)):$APP.He(e,$APP.Gs.g(a,$APP.cd(c)))}return null},null,null)};$APP.Gs.m=2;$APP.g=$APP.If.prototype;
  $APP.g.Z=function(a,b){return this===b};$APP.g.nb=function(){return this.state};$APP.g.V=function(){return this.I};$APP.g.he=ba(6);$APP.g.ie=ba(7);$APP.g.$=function(){return $APP.na(this)};$APP.Vi=function Vi(a){switch(arguments.length){case 1:return Vi.h(arguments[0]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Vi.l(arguments[0],new $APP.Xc(c.slice(1),0,null))}};$APP.Vi.h=function(a){return new $APP.If(a,null,null)};
  $APP.Vi.l=function(a,b){var c=$APP.jf(b);b=$APP.fe.g(c,Ka);c=$APP.fe.g(c,bv);return new $APP.If(a,b,c)};$APP.Vi.o=function(a){var b=$APP.y(a);a=$APP.z(a);return this.l(b,a)};$APP.Vi.m=1;
  $APP.Wi=function Wi(a){switch(arguments.length){case 2:return Wi.g(arguments[0],arguments[1]);case 3:return Wi.j(arguments[0],arguments[1],arguments[2]);case 4:return Wi.A(arguments[0],arguments[1],arguments[2],arguments[3]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Wi.l(arguments[0],arguments[1],arguments[2],arguments[3],new $APP.Xc(c.slice(4),0,null))}};
  $APP.Wi.g=function(a,b){if(a instanceof $APP.If){var c=a.state;b=b.h?b.h(c):b.call(null,c);a=$APP.Jf(a,b);}else a=Su(a,b);return a};$APP.Wi.j=function(a,b,c){if(a instanceof $APP.If){var d=a.state;b=b.g?b.g(d,c):b.call(null,d,c);a=$APP.Jf(a,b);}else a=Su(a,b,c);return a};$APP.Wi.A=function(a,b,c,d){if(a instanceof $APP.If){var e=a.state;b=b.j?b.j(e,c,d):b.call(null,e,c,d);a=$APP.Jf(a,b);}else a=Su(a,b,c,d);return a};
  $APP.Wi.l=function(a,b,c,d,e){return a instanceof $APP.If?$APP.Jf(a,$APP.Gf.J(b,a.state,c,d,e)):Su(a,b,c,d,e)};$APP.Wi.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);e=$APP.z(e);return this.l(b,a,c,d,e)};$APP.Wi.m=4;Kf.prototype.Rb=function(a,b){return this.state=b};Kf.prototype.nb=function(){return this.state};
  $APP.cv=function cv(a){switch(arguments.length){case 1:return cv.h(arguments[0]);case 2:return cv.g(arguments[0],arguments[1]);case 3:return cv.j(arguments[0],arguments[1],arguments[2]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return cv.l(arguments[0],arguments[1],arguments[2],new $APP.Xc(c.slice(3),0,null))}};
  $APP.cv.h=function(a){return function(){function b(k,l,m){k=a.h?a.h(k):a.call(null,k);if($APP.r(k))return k;l=a.h?a.h(l):a.call(null,l);return $APP.r(l)?l:a.h?a.h(m):a.call(null,m)}function c(k,l){k=a.h?a.h(k):a.call(null,k);return $APP.r(k)?k:a.h?a.h(l):a.call(null,l)}function d(k){return a.h?a.h(k):a.call(null,k)}var e=null,f=function(){function k(m,h,q,p){var v=null;if(3<arguments.length){v=0;for(var D=Array(arguments.length-3);v<D.length;)D[v]=arguments[v+3],++v;v=new $APP.Xc(D,0,null);}return l.call(this,
  m,h,q,v)}function l(m,h,q,p){m=e.j(m,h,q);return $APP.r(m)?m:$APP.Ef(a,p)}k.m=3;k.o=function(m){var h=$APP.y(m);m=$APP.z(m);var q=$APP.y(m);m=$APP.z(m);var p=$APP.y(m);m=$APP.cd(m);return l(h,q,p,m)};k.l=l;return k}();e=function(k,l,m,h){switch(arguments.length){case 0:return null;case 1:return d.call(this,k);case 2:return c.call(this,k,l);case 3:return b.call(this,k,l,m);default:var q=null;if(3<arguments.length){q=0;for(var p=Array(arguments.length-3);q<p.length;)p[q]=arguments[q+3],++q;q=new $APP.Xc(p,
  0,null);}return f.l(k,l,m,q)}};e.m=3;e.o=f.o;e.v=function(){return null};e.h=d;e.g=c;e.j=b;e.l=f.l;return e}()};
  $APP.cv.g=function(a,b){return function(){function c(l,m,h){var q=a.h?a.h(l):a.call(null,l);if($APP.r(q))return q;q=a.h?a.h(m):a.call(null,m);if($APP.r(q))return q;q=a.h?a.h(h):a.call(null,h);if($APP.r(q))return q;l=b.h?b.h(l):b.call(null,l);if($APP.r(l))return l;m=b.h?b.h(m):b.call(null,m);return $APP.r(m)?m:b.h?b.h(h):b.call(null,h)}function d(l,m){var h=a.h?a.h(l):a.call(null,l);if($APP.r(h))return h;h=a.h?a.h(m):a.call(null,m);if($APP.r(h))return h;l=b.h?b.h(l):b.call(null,l);return $APP.r(l)?
  l:b.h?b.h(m):b.call(null,m)}function e(l){var m=a.h?a.h(l):a.call(null,l);return $APP.r(m)?m:b.h?b.h(l):b.call(null,l)}var f=null,k=function(){function l(h,q,p,v){var D=null;if(3<arguments.length){D=0;for(var H=Array(arguments.length-3);D<H.length;)H[D]=arguments[D+3],++D;D=new $APP.Xc(H,0,null);}return m.call(this,h,q,p,D)}function m(h,q,p,v){h=f.j(h,q,p);return $APP.r(h)?h:$APP.Ef(function(D){var H=a.h?a.h(D):a.call(null,D);return $APP.r(H)?H:b.h?b.h(D):b.call(null,D)},v)}l.m=3;l.o=function(h){var q=
  $APP.y(h);h=$APP.z(h);var p=$APP.y(h);h=$APP.z(h);var v=$APP.y(h);h=$APP.cd(h);return m(q,p,v,h)};l.l=m;return l}();f=function(l,m,h,q){switch(arguments.length){case 0:return null;case 1:return e.call(this,l);case 2:return d.call(this,l,m);case 3:return c.call(this,l,m,h);default:var p=null;if(3<arguments.length){p=0;for(var v=Array(arguments.length-3);p<v.length;)v[p]=arguments[p+3],++p;p=new $APP.Xc(v,0,null);}return k.l(l,m,h,p)}};f.m=3;f.o=k.o;f.v=
  function(){return null};f.h=e;f.g=d;f.j=c;f.l=k.l;return f}()};
  $APP.cv.j=function(a,b,c){return function(){function d(m,h,q){var p=a.h?a.h(m):a.call(null,m);if($APP.r(p))return p;p=a.h?a.h(h):a.call(null,h);if($APP.r(p))return p;p=a.h?a.h(q):a.call(null,q);if($APP.r(p))return p;p=b.h?b.h(m):b.call(null,m);if($APP.r(p))return p;p=b.h?b.h(h):b.call(null,h);if($APP.r(p))return p;p=b.h?b.h(q):b.call(null,q);if($APP.r(p))return p;m=c.h?c.h(m):c.call(null,m);if($APP.r(m))return m;h=c.h?c.h(h):c.call(null,h);return $APP.r(h)?h:c.h?c.h(q):c.call(null,q)}function e(m,
  h){var q=a.h?a.h(m):a.call(null,m);if($APP.r(q))return q;q=a.h?a.h(h):a.call(null,h);if($APP.r(q))return q;q=b.h?b.h(m):b.call(null,m);if($APP.r(q))return q;q=b.h?b.h(h):b.call(null,h);if($APP.r(q))return q;m=c.h?c.h(m):c.call(null,m);return $APP.r(m)?m:c.h?c.h(h):c.call(null,h)}function f(m){var h=a.h?a.h(m):a.call(null,m);if($APP.r(h))return h;h=b.h?b.h(m):b.call(null,m);return $APP.r(h)?h:c.h?c.h(m):c.call(null,m)}var k=null,l=function(){function m(q,p,v,D){var H=null;if(3<arguments.length){H=
  0;for(var O=Array(arguments.length-3);H<O.length;)O[H]=arguments[H+3],++H;H=new $APP.Xc(O,0,null);}return h.call(this,q,p,v,H)}function h(q,p,v,D){q=k.j(q,p,v);return $APP.r(q)?q:$APP.Ef(function(H){var O=a.h?a.h(H):a.call(null,H);if($APP.r(O))return O;O=b.h?b.h(H):b.call(null,H);return $APP.r(O)?O:c.h?c.h(H):c.call(null,H)},D)}m.m=3;m.o=function(q){var p=$APP.y(q);q=$APP.z(q);var v=$APP.y(q);q=$APP.z(q);var D=$APP.y(q);q=$APP.cd(q);return h(p,v,D,q)};m.l=h;return m}();k=function(m,h,q,p){switch(arguments.length){case 0:return null;
  case 1:return f.call(this,m);case 2:return e.call(this,m,h);case 3:return d.call(this,m,h,q);default:var v=null;if(3<arguments.length){v=0;for(var D=Array(arguments.length-3);v<D.length;)D[v]=arguments[v+3],++v;v=new $APP.Xc(D,0,null);}return l.l(m,h,q,v)}};k.m=3;k.o=l.o;k.v=function(){return null};k.h=f;k.g=e;k.j=d;k.l=l.l;return k}()};
  $APP.cv.l=function(a,b,c,d){var e=$APP.Jq.A(a,b,c,d);return function(){function f(q,p,v){return $APP.Ef(function(D){var H=D.h?D.h(q):D.call(null,q);if($APP.r(H))return H;H=D.h?D.h(p):D.call(null,p);return $APP.r(H)?H:D.h?D.h(v):D.call(null,v)},e)}function k(q,p){return $APP.Ef(function(v){var D=v.h?v.h(q):v.call(null,q);return $APP.r(D)?D:v.h?v.h(p):v.call(null,p)},e)}function l(q){return $APP.Ef(function(p){return p.h?p.h(q):p.call(null,q)},e)}var m=null,h=function(){function q(v,D,H,O){var P=null;
  if(3<arguments.length){P=0;for(var W=Array(arguments.length-3);P<W.length;)W[P]=arguments[P+3],++P;P=new $APP.Xc(W,0,null);}return p.call(this,v,D,H,P)}function p(v,D,H,O){v=m.j(v,D,H);return $APP.r(v)?v:$APP.Ef(function(P){return $APP.Ef(P,O)},e)}q.m=3;q.o=function(v){var D=$APP.y(v);v=$APP.z(v);var H=$APP.y(v);v=$APP.z(v);var O=$APP.y(v);v=$APP.cd(v);return p(D,H,O,v)};q.l=p;return q}();m=function(q,p,v,D){switch(arguments.length){case 0:return null;case 1:return l.call(this,q);case 2:return k.call(this,
  q,p);case 3:return f.call(this,q,p,v);default:var H=null;if(3<arguments.length){H=0;for(var O=Array(arguments.length-3);H<O.length;)O[H]=arguments[H+3],++H;H=new $APP.Xc(O,0,null);}return h.l(q,p,v,H)}};m.m=3;m.o=h.o;m.v=function(){return null};m.h=l;m.g=k;m.j=f;m.l=h.l;return m}()};$APP.cv.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};$APP.cv.m=3;
  $APP.ui=function ui(a){switch(arguments.length){case 1:return ui.h(arguments[0]);case 2:return ui.g(arguments[0],arguments[1]);case 3:return ui.j(arguments[0],arguments[1],arguments[2]);case 4:return ui.A(arguments[0],arguments[1],arguments[2],arguments[3]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return ui.l(arguments[0],arguments[1],arguments[2],arguments[3],new $APP.Xc(c.slice(4),0,null))}};
  $APP.ui.h=function(a){return function(b){return function(){function c(l,m){m=a.h?a.h(m):a.call(null,m);return b.g?b.g(l,m):b.call(null,l,m)}function d(l){return b.h?b.h(l):b.call(null,l)}function e(){return b.v?b.v():b.call(null)}var f=null,k=function(){function l(h,q,p){var v=null;if(2<arguments.length){v=0;for(var D=Array(arguments.length-2);v<D.length;)D[v]=arguments[v+2],++v;v=new $APP.Xc(D,0,null);}return m.call(this,h,q,v)}function m(h,q,p){q=$APP.Gf.j(a,q,p);return b.g?b.g(h,q):b.call(null,
  h,q)}l.m=2;l.o=function(h){var q=$APP.y(h);h=$APP.z(h);var p=$APP.y(h);h=$APP.cd(h);return m(q,p,h)};l.l=m;return l}();f=function(l,m,h){switch(arguments.length){case 0:return e.call(this);case 1:return d.call(this,l);case 2:return c.call(this,l,m);default:var q=null;if(2<arguments.length){q=0;for(var p=Array(arguments.length-2);q<p.length;)p[q]=arguments[q+2],++q;q=new $APP.Xc(p,0,null);}return k.l(l,m,q)}};f.m=2;f.o=k.o;f.v=e;f.h=d;f.g=c;f.l=k.l;return f}()}};
  $APP.ui.g=function(a,b){return new $APP.Ne(null,function(){var c=$APP.x(b);if(c){if($APP.Zd(c)){for(var d=$APP.uc(c),e=$APP.xd(d),f=$APP.Te(e),k=0;;)if(k<e)$APP.Xe(f,function(){var l=$APP.Id(d,k);return a.h?a.h(l):a.call(null,l)}()),k+=1;else break;return $APP.We($APP.Ye(f),$APP.ui.g(a,$APP.vc(c)))}return $APP.He(function(){var l=$APP.y(c);return a.h?a.h(l):a.call(null,l)}(),$APP.ui.g(a,$APP.cd(c)))}return null},null,null)};
  $APP.ui.j=function(a,b,c){return new $APP.Ne(null,function(){var d=$APP.x(b),e=$APP.x(c);if(d&&e){var f=$APP.y(d);var k=$APP.y(e);f=a.g?a.g(f,k):a.call(null,f,k);d=$APP.He(f,$APP.ui.j(a,$APP.cd(d),$APP.cd(e)));}else d=null;return d},null,null)};
  $APP.ui.A=function(a,b,c,d){return new $APP.Ne(null,function(){var e=$APP.x(b),f=$APP.x(c),k=$APP.x(d);if(e&&f&&k){var l=$APP.y(e);var m=$APP.y(f),h=$APP.y(k);l=a.j?a.j(l,m,h):a.call(null,l,m,h);e=$APP.He(l,$APP.ui.A(a,$APP.cd(e),$APP.cd(f),$APP.cd(k)));}else e=null;return e},null,null)};
  $APP.ui.l=function(a,b,c,d,e){return $APP.ui.g(function(f){return $APP.Gf.g(a,f)},function l(k){return new $APP.Ne(null,function(){var m=$APP.ui.g($APP.x,k);return $APP.Df($APP.se,m)?$APP.He($APP.ui.g($APP.y,m),l($APP.ui.g($APP.cd,m))):null},null,null)}($APP.De.l(e,d,$APP.F([c,b]))))};$APP.ui.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);e=$APP.z(e);return this.l(b,a,c,d,e)};$APP.ui.m=4;
  $APP.Mf=function Mf(a){switch(arguments.length){case 1:return Mf.h(arguments[0]);case 2:return Mf.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};
  $APP.Mf.h=function(a){return function(b){var c=$APP.Lf(a);return function(){function d(l,m){var h=$APP.u(c),q=c.Rb(null,c.nb(null)-1);l=0<h?b.g?b.g(l,m):b.call(null,l,m):l;return 0<q?l:$APP.nd(l)}function e(l){return b.h?b.h(l):b.call(null,l)}function f(){return b.v?b.v():b.call(null)}var k=null;k=function(l,m){switch(arguments.length){case 0:return f.call(this);case 1:return e.call(this,l);case 2:return d.call(this,l,m)}throw Error("Invalid arity: "+arguments.length);};k.v=f;k.h=e;k.g=d;return k}()}};
  $APP.Mf.g=function(a,b){return new $APP.Ne(null,function(){if(0<a){var c=$APP.x(b);return c?$APP.He($APP.y(c),$APP.Mf.g(a-1,$APP.cd(c))):null}return null},null,null)};$APP.Mf.m=2;$APP.Nf=function Nf(a){switch(arguments.length){case 1:return Nf.h(arguments[0]);case 2:return Nf.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};
  $APP.Nf.h=function(a){return function(b){var c=$APP.Lf(a);return function(){function d(l,m){var h=$APP.u(c);c.Rb(null,c.nb(null)-1);return 0<h?l:b.g?b.g(l,m):b.call(null,l,m)}function e(l){return b.h?b.h(l):b.call(null,l)}function f(){return b.v?b.v():b.call(null)}var k=null;k=function(l,m){switch(arguments.length){case 0:return f.call(this);case 1:return e.call(this,l);case 2:return d.call(this,l,m)}throw Error("Invalid arity: "+arguments.length);};k.v=f;k.h=e;k.g=d;return k}()}};
  $APP.Nf.g=function(a,b){return new $APP.Ne(null,function(){a:for(var c=a,d=b;;)if(d=$APP.x(d),0<c&&d)--c,d=$APP.cd(d);else break a;return d},null,null)};$APP.Nf.m=2;$APP.Xj=function Xj(a){switch(arguments.length){case 1:return Xj.h(arguments[0]);case 2:return Xj.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.Xj.h=function(a){return $APP.Xj.g(1,a)};$APP.Xj.g=function(a,b){return $APP.ui.j(function(c){return c},b,$APP.Nf.g(a,b))};
  $APP.Xj.m=2;$APP.us=function us(a){switch(arguments.length){case 1:return us.h(arguments[0]);case 2:return us.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};
  $APP.us.h=function(a){return function(b){var c=$APP.Lf(true);return function(){function d(l,m){var h=$APP.u(c);if($APP.r($APP.r(h)?a.h?a.h(m):a.call(null,m):h))return l;$APP.zc(c,null);return b.g?b.g(l,m):b.call(null,l,m)}function e(l){return b.h?b.h(l):b.call(null,l)}function f(){return b.v?b.v():b.call(null)}var k=null;k=function(l,m){switch(arguments.length){case 0:return f.call(this);case 1:return e.call(this,l);case 2:return d.call(this,l,m)}throw Error("Invalid arity: "+arguments.length);};k.v=
  f;k.h=e;k.g=d;return k}()}};$APP.us.g=function(a,b){return new $APP.Ne(null,function(){a:for(var c=a,d=b;;){d=$APP.x(d);var e;if(e=d)e=$APP.y(d),e=c.h?c.h(e):c.call(null,e);if($APP.r(e))d=$APP.cd(d);else break a}return d},null,null)};$APP.us.m=2;$APP.g=Pf.prototype;$APP.g.toString=function(){return $APP.Dc(this)};
  $APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,this.count)}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.V=function(){return this.I};$APP.g.Ga=function(){return null==this.next?1<this.count?this.next=new Pf(null,this.count-1,this.val,null):-1===this.count?this:null:this.next};
  $APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};$APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return $APP.bd};$APP.g.$c=function(){return  false};$APP.g.Ha=function(a,b){if(-1===this.count)for(var c=b.g?b.g(this.val,this.val):b.call(null,this.val,this.val);;){if($APP.md(c))return $APP.u(c);c=b.g?b.g(c,this.val):b.call(null,c,this.val);}else for(a=1,c=this.val;;)if(a<this.count){c=b.g?b.g(c,this.val):b.call(null,c,this.val);if($APP.md(c))return $APP.u(c);a+=1;}else return c};
  $APP.g.Ia=function(a,b,c){if(-1===this.count)for(c=b.g?b.g(c,this.val):b.call(null,c,this.val);;){if($APP.md(c))return $APP.u(c);c=b.g?b.g(c,this.val):b.call(null,c,this.val);}else for(a=0;;)if(a<this.count){c=b.g?b.g(c,this.val):b.call(null,c,this.val);if($APP.md(c))return $APP.u(c);a+=1;}else return c};$APP.g.Fa=function(){return this.val};$APP.g.Ja=function(){return null==this.next?1<this.count?this.next=new Pf(null,this.count-1,this.val,null):-1===this.count?this:$APP.bd:this.next};$APP.g.Y=function(){return this};
  $APP.g.W=function(a,b){return b===this.I?this:new Pf(b,this.count,this.val,this.next)};$APP.g.ea=function(a,b){return $APP.He(b,this)};$APP.Jr=function Jr(a){switch(arguments.length){case 1:return Jr.h(arguments[0]);case 2:return Jr.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.Jr.h=function(a){return new Pf(null,-1,a,null)};$APP.Jr.g=function(a,b){return 0<a?new Pf(null,a,b,null):$APP.bd};$APP.Jr.m=2;
  $APP.mt=function mt(a){switch(arguments.length){case 1:return mt.h(arguments[0]);case 2:return mt.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.mt.h=function(a){return new $APP.Ne(null,function(){return $APP.He(a.v?a.v():a.call(null),$APP.mt.h(a))},null,null)};$APP.mt.g=function(a,b){return $APP.Mf.g(a,$APP.mt.h(b))};$APP.mt.m=2;var dv={};$APP.g=Qf.prototype;$APP.g.toString=function(){return $APP.Dc(this)};$APP.g.V=function(){return this.I};
  $APP.g.Ga=function(){return this.Ja(null)};$APP.g.na=function(){return $APP.bd};$APP.g.$c=function(){return this.seed!==dv};$APP.g.Ha=function(a,b){a=this.Fa(null);var c=this.f.h?this.f.h(a):this.f.call(null,a);for(a=b.g?b.g(a,c):b.call(null,a,c);;){if($APP.md(a))return $APP.u(a);c=this.f.h?this.f.h(c):this.f.call(null,c);a=b.g?b.g(a,c):b.call(null,a,c);}};
  $APP.g.Ia=function(a,b,c){a=this.Fa(null);for(c=b.g?b.g(c,a):b.call(null,c,a);;){if($APP.md(c))return $APP.u(c);a=this.f.h?this.f.h(a):this.f.call(null,a);c=b.g?b.g(c,a):b.call(null,c,a);}};$APP.g.Fa=function(){dv===this.seed&&(this.seed=this.f.h?this.f.h(this.re):this.f.call(null,this.re));return this.seed};$APP.g.Ja=function(){null==this.next&&(this.next=new Qf(null,this.f,this.Fa(null),dv,null));return this.next};$APP.g.Y=function(){return this};
  $APP.g.W=function(a,b){return b===this.I?this:new Qf(b,this.f,this.re,this.seed,this.next)};$APP.g.ea=function(a,b){return $APP.He(b,this)};$APP.ev=function ev(a){switch(arguments.length){case 0:return ev.v();case 1:return ev.h(arguments[0]);case 2:return ev.g(arguments[0],arguments[1]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return ev.l(arguments[0],arguments[1],new $APP.Xc(c.slice(2),0,null))}};$APP.ev.v=function(){return $APP.bd};
  $APP.ev.h=function(a){return new $APP.Ne(null,function(){return a},null,null)};$APP.ev.g=function(a,b){return new $APP.Ne(null,function(){var c=$APP.x(a),d=$APP.x(b);return c&&d?$APP.He($APP.y(c),$APP.He($APP.y(d),$APP.ev.g($APP.cd(c),$APP.cd(d)))):null},null,null)};$APP.ev.l=function(a,b,c){return new $APP.Ne(null,function(){var d=$APP.ui.g($APP.x,$APP.De.l(c,b,$APP.F([a])));return $APP.Df($APP.se,d)?$APP.R.g($APP.ui.g($APP.y,d),$APP.Gf.g($APP.ev,$APP.ui.g($APP.cd,d))):null},null,null)};
  $APP.ev.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};$APP.ev.m=2;$APP.Vk=function Vk(a){switch(arguments.length){case 1:return Vk.h(arguments[0]);case 2:return Vk.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};
  $APP.Vk.h=function(a){return function(b){var c=$APP.Lf(false);return function(){function d(l,m){if($APP.r($APP.u(c)))return l=b.g?b.g(l,a):b.call(null,l,a),$APP.md(l)?l:b.g?b.g(l,m):b.call(null,l,m);$APP.zc(c,true);return b.g?b.g(l,m):b.call(null,l,m)}function e(l){return b.h?b.h(l):b.call(null,l)}function f(){return b.v?b.v():b.call(null)}var k=null;k=function(l,m){switch(arguments.length){case 0:return f.call(this);case 1:return e.call(this,l);case 2:return d.call(this,l,m)}throw Error("Invalid arity: "+
  arguments.length);};k.v=f;k.h=e;k.g=d;return k}()}};$APP.Vk.g=function(a,b){return $APP.Nf.g(1,$APP.ev.g($APP.Jr.h(a),b))};$APP.Vk.m=2;$APP.Zp=function Zp(a){switch(arguments.length){case 1:return Zp.h(arguments[0]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Zp.l(arguments[0],new $APP.Xc(c.slice(1),0,null))}};$APP.Zp.h=function(a){return $APP.Js.g($APP.ui.h(a),$APP.Ni)};$APP.Zp.l=function(a,b){return $APP.Gf.g($APP.R,$APP.Gf.j($APP.ui,a,b))};
  $APP.Zp.o=function(a){var b=$APP.y(a);a=$APP.z(a);return this.l(b,a)};$APP.Zp.m=1;$APP.Is=function Is(a){switch(arguments.length){case 1:return Is.h(arguments[0]);case 2:return Is.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};
  $APP.Is.h=function(a){return function(b){return function(){function c(k,l){return $APP.r(a.h?a.h(l):a.call(null,l))?b.g?b.g(k,l):b.call(null,k,l):k}function d(k){return b.h?b.h(k):b.call(null,k)}function e(){return b.v?b.v():b.call(null)}var f=null;f=function(k,l){switch(arguments.length){case 0:return e.call(this);case 1:return d.call(this,k);case 2:return c.call(this,k,l)}throw Error("Invalid arity: "+arguments.length);};f.v=e;f.h=d;f.g=c;return f}()}};
  $APP.Is.g=function(a,b){return new $APP.Ne(null,function(){var c=$APP.x(b);if(c){if($APP.Zd(c)){for(var d=$APP.uc(c),e=$APP.xd(d),f=$APP.Te(e),k=0;;)if(k<e){var l=$APP.Id(d,k);l=a.h?a.h(l):a.call(null,l);$APP.r(l)&&$APP.Xe(f,$APP.Id(d,k));k+=1;}else break;return $APP.We($APP.Ye(f),$APP.Is.g(a,$APP.vc(c)))}d=$APP.y(c);c=$APP.cd(c);return $APP.r(a.h?a.h(d):a.call(null,d))?$APP.He(d,$APP.Is.g(a,c)):$APP.Is.g(a,c)}return null},null,null)};$APP.Is.m=2;
  $APP.ht=function ht(a){switch(arguments.length){case 1:return ht.h(arguments[0]);case 2:return ht.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.ht.h=function(a){return $APP.Is.h($APP.Hf(a))};$APP.ht.g=function(a,b){return $APP.Is.g($APP.Hf(a),b)};$APP.ht.m=2;
  $APP.Rg=function Rg(a){switch(arguments.length){case 0:return Rg.v();case 1:return Rg.h(arguments[0]);case 2:return Rg.g(arguments[0],arguments[1]);case 3:return Rg.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.Rg.v=function(){return $APP.kg};$APP.Rg.h=function(a){return a};
  $APP.Rg.g=function(a,b){return null!=a?null!=a&&(a.M&4||$APP.Oc===a.Ye)?$APP.Sb($APP.oc($APP.ne.j(nc,$APP.mc(a),b)),$APP.Nd(a)):$APP.ne.j($APP.ob,a,b):$APP.ne.j($APP.De,a,b)};
  $APP.Rg.j=function(a,b,c){if(null!=a&&(a.M&4||$APP.Oc===a.Ye)){var d=$APP.Nd(a);return $APP.Xu.A(b,function(){function e(l,m){return $APP.fg.g(l,m)}function f(l){return $APP.Sb($APP.oc(l),d)}var k=null;k=function(l,m){switch(arguments.length){case 1:return f.call(this,l);case 2:return e.call(this,l,m)}throw Error("Invalid arity: "+arguments.length);};k.h=f;k.g=e;return k}(),$APP.mc(a),c)}return $APP.Xu.A(b,$APP.De,a,c)};$APP.Rg.m=3;
  $APP.fv=function fv(a){switch(arguments.length){case 2:return fv.g(arguments[0],arguments[1]);case 3:return fv.j(arguments[0],arguments[1],arguments[2]);case 4:return fv.A(arguments[0],arguments[1],arguments[2],arguments[3]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return fv.l(arguments[0],arguments[1],arguments[2],arguments[3],new $APP.Xc(c.slice(4),0,null))}};
  $APP.fv.g=function(a,b){return $APP.oc($APP.ne.j(function(c,d){return $APP.fg.g(c,a.h?a.h(d):a.call(null,d))},$APP.mc($APP.kg),b))};$APP.fv.j=function(a,b,c){return $APP.Rg.g($APP.kg,$APP.ui.j(a,b,c))};$APP.fv.A=function(a,b,c,d){return $APP.Rg.g($APP.kg,$APP.ui.A(a,b,c,d))};$APP.fv.l=function(a,b,c,d,e){return $APP.Rg.g($APP.kg,$APP.Gf.l($APP.ui,a,b,c,d,$APP.F([e])))};
  $APP.fv.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);e=$APP.z(e);return this.l(b,a,c,d,e)};$APP.fv.m=4;$APP.ir=function ir(a){switch(arguments.length){case 2:return ir.g(arguments[0],arguments[1]);case 3:return ir.j(arguments[0],arguments[1],arguments[2]);case 4:return ir.A(arguments[0],arguments[1],arguments[2],arguments[3]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};
  $APP.ir.g=function(a,b){return $APP.ir.j(a,a,b)};$APP.ir.j=function(a,b,c){return new $APP.Ne(null,function(){var d=$APP.x(c);if(d){var e=$APP.Mf.g(a,d);return a===$APP.xd(e)?$APP.He(e,$APP.ir.j(a,b,$APP.Nf.g(b,d))):null}return null},null,null)};$APP.ir.A=function(a,b,c,d){return new $APP.Ne(null,function(){var e=$APP.x(d);if(e){var f=$APP.Mf.g(a,e);return a===$APP.xd(f)?$APP.He(f,$APP.ir.A(a,b,c,$APP.Nf.g(b,e))):new $APP.G(null,$APP.Mf.g(a,$APP.R.g(f,c)),null,1,null)}return null},null,null)};
  $APP.ir.m=4;$APP.cp=function cp(a){switch(arguments.length){case 2:return cp.g(arguments[0],arguments[1]);case 3:return cp.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.cp.g=function(a,b){return $APP.ne.j($APP.fe,a,b)};$APP.cp.j=function(a,b,c){var d=ge;for(b=$APP.x(b);;)if(null!=b){a=$APP.fe.j(a,$APP.y(b),d);if(d===a)return c;b=$APP.z(b);}else return a};$APP.cp.m=3;
  $APP.gv=function gv(a,b,c){var e=$APP.x(b);b=$APP.y(e);var f=$APP.z(e);if(f){e=$APP.Rh.j;var k=$APP.fe.g(a,b);c=gv.j?gv.j(k,f,c):gv.call(null,k,f,c);a=e.call($APP.Rh,a,b,c);}else a=$APP.Rh.j(a,b,c);return a};
  $APP.Nk=function Nk(a){switch(arguments.length){case 3:return Nk.j(arguments[0],arguments[1],arguments[2]);case 4:return Nk.A(arguments[0],arguments[1],arguments[2],arguments[3]);case 5:return Nk.J(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);case 6:return Nk.fa(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Nk.l(arguments[0],arguments[1],arguments[2],
  arguments[3],arguments[4],arguments[5],new $APP.Xc(c.slice(6),0,null))}};$APP.Nk.j=function(a,b,c){var d=$APP.x(b);b=$APP.y(d);if(d=$APP.z(d))a=$APP.Rh.j(a,b,$APP.Nk.j($APP.fe.g(a,b),d,c));else {d=$APP.Rh.j;var e=$APP.fe.g(a,b);c=c.h?c.h(e):c.call(null,e);a=d.call($APP.Rh,a,b,c);}return a};$APP.Nk.A=function(a,b,c,d){var e=$APP.x(b);b=$APP.y(e);if(e=$APP.z(e))a=$APP.Rh.j(a,b,$APP.Nk.A($APP.fe.g(a,b),e,c,d));else {e=$APP.Rh.j;var f=$APP.fe.g(a,b);c=c.g?c.g(f,d):c.call(null,f,d);a=e.call($APP.Rh,a,b,c);}return a};
  $APP.Nk.J=function(a,b,c,d,e){var f=$APP.x(b);b=$APP.y(f);if(f=$APP.z(f))a=$APP.Rh.j(a,b,$APP.Nk.J($APP.fe.g(a,b),f,c,d,e));else {f=$APP.Rh.j;var k=$APP.fe.g(a,b);c=c.j?c.j(k,d,e):c.call(null,k,d,e);a=f.call($APP.Rh,a,b,c);}return a};$APP.Nk.fa=function(a,b,c,d,e,f){var k=$APP.x(b);b=$APP.y(k);if(k=$APP.z(k))a=$APP.Rh.j(a,b,$APP.Nk.fa($APP.fe.g(a,b),k,c,d,e,f));else {k=$APP.Rh.j;var l=$APP.fe.g(a,b);c=c.A?c.A(l,d,e,f):c.call(null,l,d,e,f);a=k.call($APP.Rh,a,b,c);}return a};
  $APP.Nk.l=function(a,b,c,d,e,f,k){var l=$APP.x(b);b=$APP.y(l);return (l=$APP.z(l))?$APP.Rh.j(a,b,$APP.Gf.l($APP.Nk,$APP.fe.g(a,b),l,c,d,$APP.F([e,f,k]))):$APP.Rh.j(a,b,$APP.Gf.l(c,$APP.fe.g(a,b),d,e,f,$APP.F([k])))};$APP.Nk.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);var f=$APP.z(e);e=$APP.y(f);var k=$APP.z(f);f=$APP.y(k);k=$APP.z(k);return this.l(b,a,c,d,e,f,k)};$APP.Nk.m=6;
  $APP.Tm=function Tm(a){switch(arguments.length){case 3:return Tm.j(arguments[0],arguments[1],arguments[2]);case 4:return Tm.A(arguments[0],arguments[1],arguments[2],arguments[3]);case 5:return Tm.J(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);case 6:return Tm.fa(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Tm.l(arguments[0],arguments[1],arguments[2],
  arguments[3],arguments[4],arguments[5],new $APP.Xc(c.slice(6),0,null))}};$APP.Tm.j=function(a,b,c){var d=$APP.Rh.j,e=$APP.fe.g(a,b);c=c.h?c.h(e):c.call(null,e);return d.call($APP.Rh,a,b,c)};$APP.Tm.A=function(a,b,c,d){var e=$APP.Rh.j,f=$APP.fe.g(a,b);c=c.g?c.g(f,d):c.call(null,f,d);return e.call($APP.Rh,a,b,c)};$APP.Tm.J=function(a,b,c,d,e){var f=$APP.Rh.j,k=$APP.fe.g(a,b);c=c.j?c.j(k,d,e):c.call(null,k,d,e);return f.call($APP.Rh,a,b,c)};
  $APP.Tm.fa=function(a,b,c,d,e,f){var k=$APP.Rh.j,l=$APP.fe.g(a,b);c=c.A?c.A(l,d,e,f):c.call(null,l,d,e,f);return k.call($APP.Rh,a,b,c)};$APP.Tm.l=function(a,b,c,d,e,f,k){return $APP.Rh.j(a,b,$APP.Gf.l(c,$APP.fe.g(a,b),d,e,f,$APP.F([k])))};$APP.Tm.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);var f=$APP.z(e);e=$APP.y(f);var k=$APP.z(f);f=$APP.y(k);k=$APP.z(k);return this.l(b,a,c,d,e,f,k)};$APP.Tm.m=6;
  var hv=function hv(a,b,c,d){var f=Uf(c),k=a.G-1>>>b&31;5===b?f.C[k]=d:(c=c.C[k],null!=c?(b-=5,a=hv.A?hv.A(a,b,c,d):hv.call(null,a,b,c,d)):a=Yf(null,b-5,d),f.C[k]=a);return f},iv=function iv(a,b,c,d,e){var k=Uf(c);if(0===b)k.C[d&31]=e;else {var l=d>>>b&31;b-=5;c=c.C[l];a=iv.J?iv.J(a,b,c,d,e):iv.call(null,a,b,c,d,e);k.C[l]=a;}return k},jv=function jv(a,b,c){var e=a.G-2>>>b&31;if(5<b){b-=5;var f=c.C[e];a=jv.j?jv.j(a,b,f):jv.call(null,a,b,f);if(null==a&&0===e)return null;c=Uf(c);c.C[e]=a;return c}if(0===
  e)return null;c=Uf(c);c.C[e]=null;return c};bg.prototype.pa=function(){return this.K<this.end};bg.prototype.next=function(){32===this.K-this.Qd&&(this.C=$f(this.fb,this.K),this.Qd+=32);var a=this.C[this.K&31];this.K+=1;return a};$APP.g=$APP.J.prototype;$APP.g.Hc=$APP.Oc;$APP.g.rc=function(a,b){return 0<=b&&b<this.G?new $APP.Ig(b,$f(this,b)[b&31],null):null};$APP.g.toString=function(){return $APP.Dc(this)};
  $APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.ia=function(a,b){return this.O(null,b,null)};$APP.g.O=function(a,b,c){return "number"===typeof b?this.ab(null,b,c):c};
  $APP.g.hb=function(a,b,c){a=0;for(var d=c;;)if(a<this.G){var e=$f(this,a);c=e.length;a:for(var f=0;;)if(f<c){var k=f+a,l=e[f];d=b.j?b.j(d,k,l):b.call(null,d,k,l);if($APP.md(d)){e=d;break a}f+=1;}else {e=d;break a}if($APP.md(e))return $APP.u(e);a+=c;d=e;}else return d};$APP.g.Sd=$APP.Oc;$APP.g.ba=function(a,b){return ag(this,b)[b&31]};$APP.g.ab=function(a,b,c){return 0<=b&&b<this.G?$f(this,b)[b&31]:c};
  $APP.g.Qb=function(a,b,c){if(0<=b&&b<this.G)return $APP.Xf(this)<=b?(a=$APP.hb(this.mb),a[b&31]=c,new $APP.J(this.I,this.G,this.shift,this.root,a,null)):new $APP.J(this.I,this.G,this.shift,iv(this,this.shift,this.root,b,c),this.mb,null);if(b===this.G)return this.ea(null,c);throw Error(["Index ",$APP.t.h(b)," out of bounds  [0,",$APP.t.h(this.G),"]"].join(""));};$APP.g.Da=function(){return cg(this,0,this.G)};$APP.g.V=function(){return this.I};$APP.g.aa=function(){return this.G};
  $APP.g.uc=function(){return 0<this.G?this.ba(null,this.G-1):null};$APP.g.vc=function(){if(0===this.G)throw Error("Can't pop empty vector");if(1===this.G)return $APP.Sb($APP.kg,this.I);if(1<this.G-$APP.Xf(this))return new $APP.J(this.I,this.G-1,this.shift,this.root,this.mb.slice(0,-1),null);var a=$f(this,this.G-2),b=jv(this,this.shift,this.root);b=null==b?$APP.N:b;var c=this.G-1;return 5<this.shift&&null==b.C[1]?new $APP.J(this.I,c,this.shift-5,b.C[0],a,null):new $APP.J(this.I,c,this.shift,b,a,null)};
  $APP.g.tc=function(){return 0<this.G?new Bd(this,this.G-1,null):null};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};$APP.g.Z=function(a,b){if(b instanceof $APP.J)if(this.G===$APP.xd(b))for(a=this.Da(null),b=b.Da(null);;)if(a.pa()){var c=a.next(),d=b.next();if(!$APP.A.g(c,d))return  false}else return  true;else return  false;else return ze(this,b)};$APP.g.Xc=function(){return new $APP.wg(this.G,this.shift,ug.h?ug.h(this.root):ug.call(null,this.root),vg.h?vg.h(this.mb):vg.call(null,this.mb))};
  $APP.g.na=function(){return $APP.Sb($APP.kg,this.I)};$APP.g.Ha=function(a,b){return eg(this,b,0,this.G)};$APP.g.Ia=function(a,b,c){a=0;for(var d=c;;)if(a<this.G){var e=$f(this,a);c=e.length;a:for(var f=0;;)if(f<c){var k=e[f];d=b.g?b.g(d,k):b.call(null,d,k);if($APP.md(d)){e=d;break a}f+=1;}else {e=d;break a}if($APP.md(e))return $APP.u(e);a+=c;d=e;}else return d};$APP.g.ha=function(a,b,c){if("number"===typeof b)return this.Qb(null,b,c);throw Error("Vector's key for assoc must be a number.");};
  $APP.g.Za=function(a,b){return $APP.ee(b)?0<=b&&b<this.G:false};$APP.g.Y=function(){if(0===this.G)return null;if(32>=this.G)return new $APP.Xc(this.mb,0,null);a:{var a=this.root;for(var b=this.shift;;)if(0<b)b-=5,a=a.C[0];else {a=a.C;break a}}return ng?ng(this,a,0,0):qg.call(null,this,a,0,0)};$APP.g.W=function(a,b){return b===this.I?this:new $APP.J(b,this.G,this.shift,this.root,this.mb,this.F)};
  $APP.g.ea=function(a,b){if(32>this.G-$APP.Xf(this)){a=this.mb.length;for(var c=Array(a+1),d=0;;)if(d<a)c[d]=this.mb[d],d+=1;else break;c[a]=b;return new $APP.J(this.I,this.G+1,this.shift,this.root,c,null)}a=(c=this.G>>>5>1<<this.shift)?this.shift+5:this.shift;c?(c=Tf(null),c.C[0]=this.root,d=Yf(null,this.shift,new $APP.Sf(null,this.mb)),c.C[1]=d):c=hv(this,this.shift,this.root,new $APP.Sf(null,this.mb));return new $APP.J(this.I,this.G+1,a,c,[b],null)};
  $APP.g.call=function(a){switch(arguments.length-1){case 1:return this.h(arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};$APP.g.h=function(a){if("number"===typeof a)return this.ba(null,a);throw Error("Key must be integer");};
  $APP.N=new $APP.Sf(null,[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]);$APP.kg=new $APP.J(null,0,5,$APP.N,[],Uu);$APP.J.prototype[Yc]=function(){return ed(this)};$APP.kv=function kv(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return kv.l(0<c.length?new $APP.Xc(c.slice(0),0,null):null)};
  $APP.kv.l=function(a){return a instanceof $APP.Xc&&0===a.K?gg(a.C,!$APP.Xa(a.C)):$APP.lg(a)};$APP.kv.m=0;$APP.kv.o=function(a){return this.l($APP.x(a))};$APP.g=mg.prototype;$APP.g.toString=function(){return $APP.Dc(this)};$APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.V=function(){return this.I};$APP.g.Ga=function(){if(this.kb+1<this.node.length){var a=this.Fb;var b=this.node,c=this.K,d=this.kb+1;a=ng?ng(a,b,c,d):qg.call(null,a,b,c,d);return null==a?null:a}return this.nd()};
  $APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};$APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return $APP.bd};$APP.g.Ha=function(a,b){return eg(this.Fb,b,this.K+this.kb,$APP.xd(this.Fb))};$APP.g.Ia=function(a,b,c){return dg(this.Fb,b,c,this.K+this.kb,$APP.xd(this.Fb))};$APP.g.Fa=function(){return this.node[this.kb]};
  $APP.g.Ja=function(){if(this.kb+1<this.node.length){var a=this.Fb;var b=this.node,c=this.K,d=this.kb+1;a=ng?ng(a,b,c,d):qg.call(null,a,b,c,d);return null==a?$APP.bd:a}return this.Fc(null)};$APP.g.Y=function(){return this};$APP.g.od=function(){var a=this.node;return new Ue(a,this.kb,a.length)};$APP.g.Fc=function(){var a=this.K+this.node.length;if(a<kb(this.Fb)){var b=this.Fb,c=$f(this.Fb,a);return ng?ng(b,c,a,0):qg.call(null,b,c,a,0)}return $APP.bd};
  $APP.g.W=function(a,b){return b===this.I?this:pg?pg(this.Fb,this.node,this.K,this.kb,b):qg.call(null,this.Fb,this.node,this.K,this.kb,b)};$APP.g.ea=function(a,b){return $APP.He(b,this)};$APP.g.nd=function(){var a=this.K+this.node.length;if(a<kb(this.Fb)){var b=this.Fb,c=$f(this.Fb,a);return ng?ng(b,c,a,0):qg.call(null,b,c,a,0)}return null};mg.prototype[Yc]=function(){return ed(this)};$APP.g=rg.prototype;$APP.g.Hc=$APP.Oc;
  $APP.g.rc=function(a,b){if(0>b)return null;a=this.start+b;return a<this.end?new $APP.Ig(b,$APP.Ou(this.fb,a),null):null};$APP.g.toString=function(){return $APP.Dc(this)};$APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.ia=function(a,b){return this.O(null,b,null)};$APP.g.O=function(a,b,c){return "number"===typeof b?this.ab(null,b,c):c};
  $APP.g.hb=function(a,b,c){a=this.start;for(var d=0;;)if(a<this.end){var e=d,f=$APP.Id(this.fb,a);c=b.j?b.j(c,e,f):b.call(null,c,e,f);if($APP.md(c))return $APP.u(c);d+=1;a+=1;}else return c};$APP.g.ba=function(a,b){return 0>b||this.end<=this.start+b?Zf(b,this.end-this.start):$APP.Id(this.fb,this.start+b)};$APP.g.ab=function(a,b,c){return 0>b||this.end<=this.start+b?c:$APP.Id(this.fb,this.start+b,c)};
  $APP.g.Qb=function(a,b,c){a=this.start+b;if(0>b||this.end+1<=a)throw Error(["Index ",$APP.t.h(b)," out of bounds [0,",$APP.t.h(this.aa(null)),"]"].join(""));b=this.I;c=$APP.Rh.j(this.fb,a,c);var d=this.start,e=this.end;a+=1;a=e>a?e:a;return sg.J?sg.J(b,c,d,a,null):sg.call(null,b,c,d,a,null)};$APP.g.Da=function(){return null!=this.fb&&$APP.Oc===this.fb.Sd?cg(this.fb,this.start,this.end):new rf(this)};$APP.g.V=function(){return this.I};$APP.g.aa=function(){return this.end-this.start};
  $APP.g.uc=function(){return this.start===this.end?null:$APP.Id(this.fb,this.end-1)};$APP.g.vc=function(){if(this.start===this.end)throw Error("Can't pop empty vector");var a=this.I,b=this.fb,c=this.start,d=this.end-1;return sg.J?sg.J(a,b,c,d,null):sg.call(null,a,b,c,d,null)};$APP.g.tc=function(){return this.start!==this.end?new Bd(this,this.end-this.start-1,null):null};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};$APP.g.Z=function(a,b){return ze(this,b)};
  $APP.g.na=function(){return $APP.Sb($APP.kg,this.I)};$APP.g.Ha=function(a,b){return null!=this.fb&&$APP.Oc===this.fb.Sd?eg(this.fb,b,this.start,this.end):qd(this,b)};$APP.g.Ia=function(a,b,c){return null!=this.fb&&$APP.Oc===this.fb.Sd?dg(this.fb,b,c,this.start,this.end):rd(this,b,c)};$APP.g.ha=function(a,b,c){if("number"===typeof b)return this.Qb(null,b,c);throw Error("Subvec's key for assoc must be a number.");};$APP.g.Za=function(a,b){return $APP.ee(b)?0<=b&&b<this.end-this.start:false};
  $APP.g.Y=function(){var a=this;return function d(c){return c===a.end?null:$APP.He($APP.Id(a.fb,c),new $APP.Ne(null,function(){return d(c+1)},null,null))}(a.start)};$APP.g.W=function(a,b){return b===this.I?this:sg.J?sg.J(b,this.fb,this.start,this.end,this.F):sg.call(null,b,this.fb,this.start,this.end,this.F)};$APP.g.ea=function(a,b){a=this.I;b=Nb(this.fb,this.end,b);var c=this.start,d=this.end+1;return sg.J?sg.J(a,b,c,d,null):sg.call(null,a,b,c,d,null)};
  $APP.g.call=function(a){switch(arguments.length-1){case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};$APP.g.h=function(a){return this.ba(null,a)};$APP.g.g=function(a,b){return this.ab(null,a,b)};rg.prototype[Yc]=function(){return ed(this)};
  $APP.ek=function ek(a){switch(arguments.length){case 2:return ek.g(arguments[0],arguments[1]);case 3:return ek.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.ek.g=function(a,b){return $APP.ek.j(a,b,$APP.xd(a))};$APP.ek.j=function(a,b,c){return sg(null,a,b|0,c|0,null)};$APP.ek.m=3;
  var lv=function lv(a,b,c,d){c=$APP.tg(a.root.ka,c);var f=a.G-1>>>b&31;if(5===b)a=d;else {var k=c.C[f];null!=k?(b-=5,a=lv.A?lv.A(a,b,k,d):lv.call(null,a,b,k,d)):a=Yf(a.root.ka,b-5,d);}c.C[f]=a;return c};$APP.g=$APP.wg.prototype;
  $APP.g.cd=function(a,b){if(this.root.ka){if(32>this.G-$APP.Xf(this))this.mb[this.G&31]=b;else {a=new $APP.Sf(this.root.ka,this.mb);var c=[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];c[0]=b;this.mb=c;this.G>>>5>1<<this.shift?(b=[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
  c=this.shift+5,b[0]=this.root,b[1]=Yf(this.root.ka,this.shift,a),this.root=new $APP.Sf(this.root.ka,b),this.shift=c):this.root=lv(this,this.shift,this.root,a);}this.G+=1;return this}throw Error("conj! after persistent!");};$APP.g.ud=function(){if(this.root.ka){this.root.ka=null;var a=this.G-$APP.Xf(this),b=Array(a);$APP.$d(this.mb,0,b,0,a);return new $APP.J(null,this.G,this.shift,this.root,b,null)}throw Error("persistent! called twice");};
  $APP.g.bd=function(a,b,c){if("number"===typeof b)return xg(this,b,c);throw Error("TransientVector's key for assoc! must be a number.");};$APP.g.ge=ba(8);$APP.g.aa=function(){if(this.root.ka)return this.G;throw Error("count after persistent!");};$APP.g.ba=function(a,b){if(this.root.ka)return ag(this,b)[b&31];throw Error("nth after persistent!");};$APP.g.ab=function(a,b,c){return 0<=b&&b<this.G?this.ba(null,b):c};$APP.g.ia=function(a,b){return this.O(null,b,null)};
  $APP.g.O=function(a,b,c){if(this.root.ka)return "number"===typeof b?this.ab(null,b,c):c;throw Error("lookup after persistent!");};$APP.g.call=function(a){switch(arguments.length-1){case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};$APP.g.h=function(a){return this.ia(null,a)};
  $APP.g.g=function(a,b){return this.O(null,a,b)};yg.prototype.pa=function(){var a=null!=this.dd&&$APP.x(this.dd);return a?a:(a=null!=this.Gd)?this.Gd.pa():a};yg.prototype.next=function(){if(null!=this.dd){var a=$APP.y(this.dd);this.dd=$APP.z(this.dd);return a}if(null!=this.Gd&&this.Gd.pa())return this.Gd.next();throw Error("No such element");};yg.prototype.remove=function(){return Error("Unsupported operation")};$APP.g=zg.prototype;$APP.g.toString=function(){return $APP.Dc(this)};
  $APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.V=function(){return this.I};$APP.g.Ga=function(){var a=$APP.z(this.Cb);return a?new zg(this.I,a,this.Eb,null):null!=this.Eb?new zg(this.I,this.Eb,null,null):null};
  $APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};$APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return $APP.Sb($APP.bd,this.I)};$APP.g.Fa=function(){return $APP.y(this.Cb)};$APP.g.Ja=function(){var a=$APP.z(this.Cb);return a?new zg(this.I,a,this.Eb,null):null==this.Eb?this.na(null):new zg(this.I,this.Eb,null,null)};$APP.g.Y=function(){return this};$APP.g.W=function(a,b){return b===this.I?this:new zg(b,this.Cb,this.Eb,this.F)};
  $APP.g.ea=function(a,b){return $APP.He(b,this)};zg.prototype[Yc]=function(){return ed(this)};$APP.g=$APP.Ag.prototype;$APP.g.toString=function(){return $APP.Dc(this)};$APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,this.count.h?this.count.h(this):this.count.call(null,this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.Da=function(){return new yg(this.Cb,$APP.Bc(this.Eb))};$APP.g.V=function(){return this.I};$APP.g.aa=function(){return this.count};$APP.g.uc=function(){return $APP.y(this.Cb)};
  $APP.g.vc=function(){if($APP.r(this.Cb)){var a=$APP.z(this.Cb);return a?new $APP.Ag(this.I,this.count-1,a,this.Eb,null):new $APP.Ag(this.I,this.count-1,$APP.x(this.Eb),$APP.kg,null)}return this};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};$APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return $APP.Sb($APP.mv,this.I)};$APP.g.Fa=function(){return $APP.y(this.Cb)};$APP.g.Ja=function(){return $APP.cd($APP.x(this))};
  $APP.g.Y=function(){var a=$APP.x(this.Eb),b=this.Cb;return $APP.r($APP.r(b)?b:a)?new zg(null,this.Cb,$APP.x(a),null):null};$APP.g.W=function(a,b){return b===this.I?this:new $APP.Ag(b,this.count,this.Cb,this.Eb,this.F)};$APP.g.ea=function(a,b){$APP.r(this.Cb)?(a=this.Eb,b=new $APP.Ag(this.I,this.count+1,this.Cb,$APP.De.g($APP.r(a)?a:$APP.kg,b),null)):b=new $APP.Ag(this.I,this.count+1,$APP.De.g(this.Cb,b),$APP.kg,null);return b};$APP.mv=new $APP.Ag(null,0,null,$APP.kg,Uu);$APP.Ag.prototype[Yc]=function(){return ed(this)};
  Bg.prototype.Z=function(){return  false};var Cg=new Bg;$APP.Eg.prototype.pa=function(){var a=this.K<this.Ae;return a?a:this.Ke.pa()};$APP.Eg.prototype.next=function(){if(this.K<this.Ae){var a=$APP.B.g(this.Rc,this.K);this.K+=1;return new $APP.Ig(a,$APP.Ou(this.Af,a),null)}return this.Ke.next()};$APP.Eg.prototype.remove=function(){return Error("Unsupported operation")};
  Fg.prototype.next=function(){if(null!=this.ga){var a=$APP.y(this.ga),b=$APP.B.j(a,0,null);a=$APP.B.j(a,1,null);this.ga=$APP.z(this.ga);return {value:[b,a],done:false}}return {value:null,done:true}};Gg.prototype.next=function(){if(null!=this.ga){var a=$APP.y(this.ga);this.ga=$APP.z(this.ga);return {value:[a,a],done:false}}return {value:null,done:true}};$APP.g=$APP.Ig.prototype;$APP.g.Hc=$APP.Oc;
  $APP.g.rc=function(a,b){switch(b){case 0:return new $APP.Ig(0,this.key,null);case 1:return new $APP.Ig(1,this.val,null);default:return null}};$APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.ia=function(a,b){return this.ab(null,b,null)};$APP.g.O=function(a,b,c){return this.ab(null,b,c)};
  $APP.g.ba=function(a,b){if(0===b)return this.key;if(1===b)return this.val;throw Error("Index out of bounds");};$APP.g.ab=function(a,b,c){return 0===b?this.key:1===b?this.val:c};$APP.g.Qb=function(a,b,c){return (new $APP.J(null,2,5,$APP.N,[this.key,this.val],null)).Qb(null,b,c)};$APP.g.V=function(){return null};$APP.g.aa=function(){return 2};$APP.g.Wd=function(){return this.key};$APP.g.Xd=function(){return this.val};$APP.g.uc=function(){return this.val};
  $APP.g.vc=function(){return new $APP.J(null,1,5,$APP.N,[this.key],null)};$APP.g.tc=function(){return new $APP.Xc([this.val,this.key],0,null)};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};$APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return null};$APP.g.Ha=function(a,b){return qd(this,b)};$APP.g.Ia=function(a,b,c){return rd(this,b,c)};$APP.g.ha=function(a,b,c){return $APP.Rh.j(new $APP.J(null,2,5,$APP.N,[this.key,this.val],null),b,c)};
  $APP.g.Za=function(a,b){return 0===b||1===b};$APP.g.Y=function(){return new $APP.Xc([this.key,this.val],0,null)};$APP.g.W=function(a,b){return $APP.Md(new $APP.J(null,2,5,$APP.N,[this.key,this.val],null),b)};$APP.g.ea=function(a,b){return new $APP.J(null,3,5,$APP.N,[this.key,this.val,b],null)};
  $APP.g.call=function(a){switch(arguments.length-1){case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};$APP.g.h=function(a){return this.ba(null,a)};$APP.g.g=function(a,b){return this.ab(null,a,b)};$APP.g=Jg.prototype;$APP.g.toString=function(){return $APP.Dc(this)};
  $APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.V=function(){return this.Mb};$APP.g.Ga=function(){return this.K<this.C.length-2?new Jg(this.C,this.K+2,null):null};$APP.g.aa=function(){return (this.C.length-this.K)/2};$APP.g.$=function(){return gd(this)};
  $APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return $APP.bd};$APP.g.Ha=function(a,b){return ke(b,this)};$APP.g.Ia=function(a,b,c){return le(b,c,this)};$APP.g.Fa=function(){return new $APP.Ig(this.C[this.K],this.C[this.K+1],null)};$APP.g.Ja=function(){return this.K<this.C.length-2?new Jg(this.C,this.K+2,null):$APP.bd};$APP.g.Y=function(){return this};$APP.g.W=function(a,b){return b===this.Mb?this:new Jg(this.C,this.K,b)};$APP.g.ea=function(a,b){return $APP.He(b,this)};
  Jg.prototype[Yc]=function(){return ed(this)};Mg.prototype.pa=function(){return this.K<this.G};Mg.prototype.next=function(){var a=new $APP.Ig(this.C[this.K],this.C[this.K+1],null);this.K+=2;return a};$APP.g=$APP.n.prototype;$APP.g.Hc=$APP.Oc;$APP.g.rc=function(a,b){a=$APP.Hg(this.C,b);return  -1===a?null:new $APP.Ig(this.C[a],this.C[a+1],null)};$APP.g.toString=function(){return $APP.Dc(this)};$APP.g.keys=function(){return ed($APP.Kh.h?$APP.Kh.h(this):$APP.Kh.call(null,this))};$APP.g.entries=function(){return new Fg($APP.x($APP.x(this)))};
  $APP.g.values=function(){return ed($APP.Mh.h?$APP.Mh.h(this):$APP.Mh.call(null,this))};$APP.g.has=function(a){return $APP.he(this,a)};$APP.g.get=function(a,b){return this.O(null,a,b)};
  $APP.g.forEach=function(a){for(var b=$APP.x(this),c=null,d=0,e=0;;)if(e<d){var f=c.ba(null,e),k=$APP.B.j(f,0,null);f=$APP.B.j(f,1,null);a.g?a.g(f,k):a.call(null,f,k);e+=1;}else if(b=$APP.x(b))$APP.Zd(b)?(c=$APP.uc(b),b=$APP.vc(b),k=c,d=$APP.xd(c),c=k):(c=$APP.y(b),k=$APP.B.j(c,0,null),f=$APP.B.j(c,1,null),a.g?a.g(f,k):a.call(null,f,k),b=$APP.z(b),c=null,d=0),e=0;else return null};$APP.g.ia=function(a,b){return this.O(null,b,null)};
  $APP.g.O=function(a,b,c){a=$APP.Hg(this.C,b);return  -1===a?c:this.C[a+1]};$APP.g.hb=function(a,b,c){a=this.C.length;for(var d=0;;)if(d<a){var e=this.C[d],f=this.C[d+1];c=b.j?b.j(c,e,f):b.call(null,c,e,f);if($APP.md(c))return $APP.u(c);d+=2;}else return c};$APP.g.Da=function(){return new Mg(this.C,2*this.G)};$APP.g.V=function(){return this.I};$APP.g.aa=function(){return this.G};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=$APP.id(this)};
  $APP.g.Z=function(a,b){if($APP.Vd(b)&&!$APP.Wd(b))if(a=this.C.length,this.G===b.aa(null))for(var c=0;;)if(c<a){var d=b.O(null,this.C[c],ge);if(d!==ge)if($APP.A.g(this.C[c+1],d))c+=2;else return  false;else return  false}else return  true;else return  false;else return  false};$APP.g.Xc=function(){return new $APP.Sg(this.C.length,$APP.hb(this.C))};$APP.g.na=function(){return $APP.Sb($APP.hf,this.I)};$APP.g.Ha=function(a,b){return pe(this,b)};$APP.g.Ia=function(a,b,c){return qe(this,b,c)};
  $APP.g.ob=function(a,b){if(0<=$APP.Hg(this.C,b)){a=this.C.length;var c=a-2;if(0===c)return this.na(null);c=Array(c);for(var d=0,e=0;;){if(d>=a)return new $APP.n(this.I,this.G-1,c,null);$APP.A.g(b,this.C[d])?d+=2:(c[e]=this.C[d],c[e+1]=this.C[d+1],e+=2,d+=2);}}else return this};
  $APP.g.ha=function(a,b,c){a=$APP.Hg(this.C,b);if(-1===a){if(this.G<gm){a=this.C;for(var d=a.length,e=Array(d+2),f=0;;)if(f<d)e[f]=a[f],f+=1;else break;e[d]=b;e[d+1]=c;return new $APP.n(this.I,this.G+1,e,null)}return $APP.Sb(Cb($APP.Rg.g(Tg,this),b,c),this.I)}if(c===this.C[a+1])return this;b=$APP.hb(this.C);b[a+1]=c;return new $APP.n(this.I,this.G,b,null)};$APP.g.Za=function(a,b){return  -1!==$APP.Hg(this.C,b)};$APP.g.Y=function(){var a=this.C;return 0<=a.length-2?new Jg(a,0,null):null};
  $APP.g.W=function(a,b){return b===this.I?this:new $APP.n(b,this.G,this.C,this.F)};$APP.g.ea=function(a,b){if($APP.Xd(b))return this.ha(null,$APP.Id(b,0),$APP.Id(b,1));a=this;for(b=$APP.x(b);;){if(null==b)return a;var c=$APP.y(b);if($APP.Xd(c))a=Cb(a,$APP.Id(c,0),$APP.Id(c,1)),b=$APP.z(b);else throw Error("conj on a map takes map entries or seqables of map entries");}};
  $APP.g.call=function(a){switch(arguments.length-1){case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};$APP.g.h=function(a){return this.ia(null,a)};$APP.g.g=function(a,b){return this.O(null,a,b)};$APP.hf=new $APP.n(null,0,[],Vu);gm=8;$APP.n.prototype[Yc]=function(){return ed(this)};$APP.g=$APP.Sg.prototype;
  $APP.g.aa=function(){if(this.Qc)return $APP.we(this.Wb,2);throw Error("count after persistent!");};$APP.g.ia=function(a,b){return this.O(null,b,null)};$APP.g.O=function(a,b,c){if(this.Qc)return a=$APP.Hg(this.C,b),-1===a?c:this.C[a+1];throw Error("lookup after persistent!");};
  $APP.g.cd=function(a,b){if(this.Qc){if($APP.hg(b))return this.bd(null,$APP.ig.h?$APP.ig.h(b):$APP.ig.call(null,b),$APP.jg.h?$APP.jg.h(b):$APP.jg.call(null,b));if($APP.Xd(b))return this.bd(null,b.h?b.h(0):b.call(null,0),b.h?b.h(1):b.call(null,1));a=$APP.x(b);for(b=this;;){var c=$APP.y(a);if($APP.r(c))a=$APP.z(a),b=pc(b,$APP.ig.h?$APP.ig.h(c):$APP.ig.call(null,c),$APP.jg.h?$APP.jg.h(c):$APP.jg.call(null,c));else return b}}else throw Error("conj! after persistent!");};
  $APP.g.ud=function(){if(this.Qc)return this.Qc=false,new $APP.n(null,$APP.we(this.Wb,2),this.C,null);throw Error("persistent! called twice");};$APP.g.bd=function(a,b,c){if(this.Qc){a=$APP.Hg(this.C,b);if(-1===a)return this.Wb+2<=2*gm?(this.Wb+=2,this.C.push(b),this.C.push(c),this):$APP.Ug.j(Vg.g?Vg.g(this.Wb,this.C):Vg.call(null,this.Wb,this.C),b,c);c!==this.C[a+1]&&(this.C[a+1]=c);return this}throw Error("assoc! after persistent!");};$APP.g.vd=ba(18);
  $APP.g.call=function(a){switch(arguments.length-1){case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};$APP.g.h=function(a){return this.O(null,a,null)};$APP.g.g=function(a,b){return this.O(null,a,b)};
  ah.prototype.advance=function(){for(var a=this.C.length;;)if(this.K<a){var b=this.C[this.K],c=this.C[this.K+1];null!=b?b=this.Cd=new $APP.Ig(b,c,null):null!=c?(b=$APP.Bc(c),b=b.pa()?this.Zb=b:false):b=false;this.K+=2;if(b)return  true}else return  false};ah.prototype.pa=function(){var a=null!=this.Cd;return a?a:(a=null!=this.Zb)?a:this.advance()};
  ah.prototype.next=function(){if(null!=this.Cd){var a=this.Cd;this.Cd=null;return a}if(null!=this.Zb)return a=this.Zb.next(),this.Zb.pa()||(this.Zb=null),a;if(this.advance())return this.next();throw Error("No such element");};ah.prototype.remove=function(){return Error("Unsupported operation")};$APP.g=$APP.bh.prototype;$APP.g.yc=function(a){if(a===this.ka)return this;var b=$APP.ye(this.ma),c=Array(0>b?4:2*(b+1));$APP.$d(this.C,0,c,0,2*b);return new $APP.bh(a,this.ma,c)};$APP.g.Kc=ba(21);
  $APP.g.zd=function(){return mh?mh(this.C):oh.call(null,this.C)};$APP.g.Sc=function(a,b){return $g(this.C,a,b)};$APP.g.Jc=function(a,b,c,d){var e=1<<(b>>>a&31);if(0===(this.ma&e))return d;var f=$APP.ye(this.ma&e-1);e=this.C[2*f];f=this.C[2*f+1];return null==e?f.Jc(a+5,b,c,d):$APP.Ng(c,e)?f:d};
  $APP.g.Vb=function(a,b,c,d,e,f){var k=1<<(c>>>b&31),l=$APP.ye(this.ma&k-1);if(0===(this.ma&k)){var m=$APP.ye(this.ma);if(2*m<this.C.length){a=this.yc(a);b=a.C;f.val=true;c=2*(m-l);f=2*l+(c-1);for(m=2*(l+1)+(c-1);0!==c;)b[m]=b[f],--m,--c,--f;b[2*l]=d;b[2*l+1]=e;a.ma|=k;return a}if(16<=m){l=[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];l[c>>>b&31]=kh.Vb(a,b+5,c,d,e,f);for(e=d=0;;)if(32>
  d)0===(this.ma>>>d&1)?d+=1:(l[d]=null!=this.C[e]?kh.Vb(a,b+5,$APP.Pc(this.C[e]),this.C[e],this.C[e+1],f):this.C[e+1],e+=2,d+=1);else break;return new $APP.eh(a,m+1,l)}b=Array(2*(m+4));$APP.$d(this.C,0,b,0,2*l);b[2*l]=d;b[2*l+1]=e;$APP.$d(this.C,2*l,b,2*(l+1),2*(m-l));f.val=true;a=this.yc(a);a.C=b;a.ma|=k;return a}m=this.C[2*l];k=this.C[2*l+1];if(null==m)return m=k.Vb(a,b+5,c,d,e,f),m===k?this:$APP.Zg(this,a,2*l+1,m);if($APP.Ng(d,m))return e===k?this:$APP.Zg(this,a,2*l+1,e);f.val=true;f=b+5;d=ih?ih(a,
  f,m,k,c,d,e):jh.call(null,a,f,m,k,c,d,e);e=2*l;l=2*l+1;a=this.yc(a);a.C[e]=null;a.C[l]=d;return a};
  $APP.g.Ub=function(a,b,c,d,e){var f=1<<(b>>>a&31),k=$APP.ye(this.ma&f-1);if(0===(this.ma&f)){var l=$APP.ye(this.ma);if(16<=l){k=[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];k[b>>>a&31]=kh.Ub(a+5,b,c,d,e);for(d=c=0;;)if(32>c)0===(this.ma>>>c&1)?c+=1:(k[c]=null!=this.C[d]?kh.Ub(a+5,$APP.Pc(this.C[d]),this.C[d],this.C[d+1],e):this.C[d+1],d+=2,c+=1);else break;return new $APP.eh(null,l+
  1,k)}a=Array(2*(l+1));$APP.$d(this.C,0,a,0,2*k);a[2*k]=c;a[2*k+1]=d;$APP.$d(this.C,2*k,a,2*(k+1),2*(l-k));e.val=true;return new $APP.bh(null,this.ma|f,a)}var m=this.C[2*k];f=this.C[2*k+1];if(null==m)return l=f.Ub(a+5,b,c,d,e),l===f?this:new $APP.bh(null,this.ma,Xg(this.C,2*k+1,l));if($APP.Ng(c,m))return d===f?this:new $APP.bh(null,this.ma,Xg(this.C,2*k+1,d));e.val=true;e=this.ma;l=this.C;a+=5;a=hh?hh(a,m,f,b,c,d):jh.call(null,a,m,f,b,c,d);c=2*k;k=2*k+1;d=$APP.hb(l);d[c]=null;d[k]=a;return new $APP.bh(null,
  e,d)};$APP.g.yd=function(a,b,c,d){var e=1<<(b>>>a&31);if(0===(this.ma&e))return d;var f=$APP.ye(this.ma&e-1);e=this.C[2*f];f=this.C[2*f+1];return null==e?f.yd(a+5,b,c,d):$APP.Ng(c,e)?new $APP.Ig(e,f,null):d};
  $APP.g.Ad=function(a,b,c){var d=1<<(b>>>a&31);if(0===(this.ma&d))return this;var e=$APP.ye(this.ma&d-1),f=this.C[2*e],k=this.C[2*e+1];return null==f?(a=k.Ad(a+5,b,c),a===k?this:null!=a?new $APP.bh(null,this.ma,Xg(this.C,2*e+1,a)):this.ma===d?null:new $APP.bh(null,this.ma^d,Yg(this.C,e))):$APP.Ng(c,f)?this.ma===d?null:new $APP.bh(null,this.ma^d,Yg(this.C,e)):this};$APP.g.Da=function(){return new ah(this.C)};var kh=new $APP.bh(null,0,[]);
  dh.prototype.pa=function(){for(var a=this.C.length;;){if(null!=this.Zb&&this.Zb.pa())return  true;if(this.K<a){var b=this.C[this.K];this.K+=1;null!=b&&(this.Zb=$APP.Bc(b));}else return  false}};dh.prototype.next=function(){if(this.pa())return this.Zb.next();throw Error("No such element");};dh.prototype.remove=function(){return Error("Unsupported operation")};$APP.g=$APP.eh.prototype;$APP.g.yc=function(a){return a===this.ka?this:new $APP.eh(a,this.G,$APP.hb(this.C))};$APP.g.Kc=ba(20);
  $APP.g.zd=function(){return qh?qh(this.C):sh.call(null,this.C)};$APP.g.Sc=function(a,b){for(var c=this.C.length,d=0;;)if(d<c){var e=this.C[d];if(null!=e){b=e.Sc(a,b);if($APP.md(b))return b;d+=1;}else d+=1;}else return b};$APP.g.Jc=function(a,b,c,d){var e=this.C[b>>>a&31];return null!=e?e.Jc(a+5,b,c,d):d};$APP.g.Vb=function(a,b,c,d,e,f){var k=c>>>b&31,l=this.C[k];if(null==l)return a=$APP.Zg(this,a,k,kh.Vb(a,b+5,c,d,e,f)),a.G+=1,a;b=l.Vb(a,b+5,c,d,e,f);return b===l?this:$APP.Zg(this,a,k,b)};
  $APP.g.Ub=function(a,b,c,d,e){var f=b>>>a&31,k=this.C[f];if(null==k)return new $APP.eh(null,this.G+1,Xg(this.C,f,kh.Ub(a+5,b,c,d,e)));a=k.Ub(a+5,b,c,d,e);return a===k?this:new $APP.eh(null,this.G,Xg(this.C,f,a))};$APP.g.yd=function(a,b,c,d){var e=this.C[b>>>a&31];return null!=e?e.yd(a+5,b,c,d):d};
  $APP.g.Ad=function(a,b,c){var d=b>>>a&31,e=this.C[d];return null!=e?(a=e.Ad(a+5,b,c),a===e?this:null==a?8>=this.G?$APP.ch(this,null,d):new $APP.eh(null,this.G-1,Xg(this.C,d,a)):new $APP.eh(null,this.G,Xg(this.C,d,a))):this};$APP.g.Da=function(){return new dh(this.C)};$APP.g=$APP.gh.prototype;$APP.g.yc=function(a){if(a===this.ka)return this;var b=Array(2*(this.G+1));$APP.$d(this.C,0,b,0,2*this.G);return new $APP.gh(a,this.xc,this.G,b)};$APP.g.Kc=ba(19);
  $APP.g.zd=function(){return mh?mh(this.C):oh.call(null,this.C)};$APP.g.Sc=function(a,b){return $g(this.C,a,b)};$APP.g.Jc=function(a,b,c,d){a=$APP.fh(this.C,this.G,c);return 0>a?d:$APP.Ng(c,this.C[a])?this.C[a+1]:d};
  $APP.g.Vb=function(a,b,c,d,e,f){if(c===this.xc){b=$APP.fh(this.C,this.G,d);if(-1===b){if(this.C.length>2*this.G)return b=2*this.G,c=2*this.G+1,a=this.yc(a),a.C[b]=d,a.C[c]=e,f.val=true,a.G+=1,a;c=this.C.length;b=Array(c+2);$APP.$d(this.C,0,b,0,c);b[c]=d;b[c+1]=e;f.val=true;d=this.G+1;a===this.ka?(this.C=b,this.G=d,a=this):a=new $APP.gh(this.ka,this.xc,d,b);return a}return this.C[b+1]===e?this:$APP.Zg(this,a,b+1,e)}return (new $APP.bh(a,1<<(this.xc>>>b&31),[null,this,null,null])).Vb(a,b,c,d,e,f)};
  $APP.g.Ub=function(a,b,c,d,e){return b===this.xc?(a=$APP.fh(this.C,this.G,c),-1===a?(a=2*this.G,b=Array(a+2),$APP.$d(this.C,0,b,0,a),b[a]=c,b[a+1]=d,e.val=true,new $APP.gh(null,this.xc,this.G+1,b)):$APP.A.g(this.C[a+1],d)?this:new $APP.gh(null,this.xc,this.G,Xg(this.C,a+1,d))):(new $APP.bh(null,1<<(this.xc>>>a&31),[null,this])).Ub(a,b,c,d,e)};$APP.g.yd=function(a,b,c,d){a=$APP.fh(this.C,this.G,c);return 0>a?d:$APP.Ng(c,this.C[a])?new $APP.Ig(this.C[a],this.C[a+1],null):d};
  $APP.g.Ad=function(a,b,c){a=$APP.fh(this.C,this.G,c);return  -1===a?this:1===this.G?null:new $APP.gh(null,this.xc,this.G-1,Yg(this.C,$APP.we(a,2)))};$APP.g.Da=function(){return new ah(this.C)};$APP.g=lh.prototype;$APP.g.toString=function(){return $APP.Dc(this)};
  $APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.V=function(){return this.I};
  $APP.g.Ga=function(){if(null==this.ga){var a=this.$b,b=this.K+2;return nh?nh(a,b,null):oh.call(null,a,b,null)}a=this.$b;b=this.K;var c=$APP.z(this.ga);return nh?nh(a,b,c):oh.call(null,a,b,c)};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};$APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return $APP.bd};$APP.g.Ha=function(a,b){return ke(b,this)};$APP.g.Ia=function(a,b,c){return le(b,c,this)};
  $APP.g.Fa=function(){return null==this.ga?new $APP.Ig(this.$b[this.K],this.$b[this.K+1],null):$APP.y(this.ga)};$APP.g.Ja=function(){var a=this,b=null==a.ga?function(){var c=a.$b,d=a.K+2;return nh?nh(c,d,null):oh.call(null,c,d,null)}():function(){var c=a.$b,d=a.K,e=$APP.z(a.ga);return nh?nh(c,d,e):oh.call(null,c,d,e)}();return null!=b?b:$APP.bd};$APP.g.Y=function(){return this};$APP.g.W=function(a,b){return b===this.I?this:new lh(b,this.$b,this.K,this.ga,this.F)};
  $APP.g.ea=function(a,b){return $APP.He(b,this)};lh.prototype[Yc]=function(){return ed(this)};$APP.g=ph.prototype;$APP.g.toString=function(){return $APP.Dc(this)};$APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.V=function(){return this.I};$APP.g.Ga=function(){var a=this.$b,b=this.K,c=$APP.z(this.ga);return rh?rh(a,b,c):sh.call(null,a,b,c)};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};
  $APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return $APP.bd};$APP.g.Ha=function(a,b){return ke(b,this)};$APP.g.Ia=function(a,b,c){return le(b,c,this)};$APP.g.Fa=function(){return $APP.y(this.ga)};$APP.g.Ja=function(){var a=this.$b;var b=this.K,c=$APP.z(this.ga);a=rh?rh(a,b,c):sh.call(null,a,b,c);return null!=a?a:$APP.bd};$APP.g.Y=function(){return this};$APP.g.W=function(a,b){return b===this.I?this:new ph(b,this.$b,this.K,this.ga,this.F)};
  $APP.g.ea=function(a,b){return $APP.He(b,this)};ph.prototype[Yc]=function(){return ed(this)};th.prototype.pa=function(){return !this.te||this.Ne.pa()};th.prototype.next=function(){if(this.te)return this.Ne.next();this.te=true;return new $APP.Ig(null,this.jb,null)};th.prototype.remove=function(){return Error("Unsupported operation")};$APP.g=uh.prototype;$APP.g.Hc=$APP.Oc;
  $APP.g.rc=function(a,b){return null==b?this.ib?new $APP.Ig(null,this.jb,null):null:null==this.root?null:this.root.yd(0,$APP.Pc(b),b,null)};$APP.g.toString=function(){return $APP.Dc(this)};$APP.g.keys=function(){return ed($APP.Kh.h?$APP.Kh.h(this):$APP.Kh.call(null,this))};$APP.g.entries=function(){return new Fg($APP.x($APP.x(this)))};$APP.g.values=function(){return ed($APP.Mh.h?$APP.Mh.h(this):$APP.Mh.call(null,this))};$APP.g.has=function(a){return $APP.he(this,a)};
  $APP.g.get=function(a,b){return this.O(null,a,b)};$APP.g.forEach=function(a){for(var b=$APP.x(this),c=null,d=0,e=0;;)if(e<d){var f=c.ba(null,e),k=$APP.B.j(f,0,null);f=$APP.B.j(f,1,null);a.g?a.g(f,k):a.call(null,f,k);e+=1;}else if(b=$APP.x(b))$APP.Zd(b)?(c=$APP.uc(b),b=$APP.vc(b),k=c,d=$APP.xd(c),c=k):(c=$APP.y(b),k=$APP.B.j(c,0,null),f=$APP.B.j(c,1,null),a.g?a.g(f,k):a.call(null,f,k),b=$APP.z(b),c=null,d=0),e=0;else return null};$APP.g.ia=function(a,b){return this.O(null,b,null)};
  $APP.g.O=function(a,b,c){return null==b?this.ib?this.jb:c:null==this.root?c:this.root.Jc(0,$APP.Pc(b),b,c)};$APP.g.hb=function(a,b,c){a=this.ib?b.j?b.j(c,null,this.jb):b.call(null,c,null,this.jb):c;return $APP.md(a)?$APP.u(a):null!=this.root?$APP.pd(this.root.Sc(b,a)):a};$APP.g.Da=function(){var a=this.root?$APP.Bc(this.root):$APP.mf();return this.ib?new th(this.jb,a):a};$APP.g.V=function(){return this.I};$APP.g.aa=function(){return this.G};
  $APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=$APP.id(this)};$APP.g.Z=function(a,b){return Dg(this,b)};$APP.g.Xc=function(){return new $APP.wh(this.root,this.G,this.ib,this.jb)};$APP.g.na=function(){return $APP.Sb(Tg,this.I)};$APP.g.ob=function(a,b){if(null==b)return this.ib?new uh(this.I,this.G-1,this.root,false,null,null):this;if(null==this.root)return this;a=this.root.Ad(0,$APP.Pc(b),b);return a===this.root?this:new uh(this.I,this.G-1,a,this.ib,this.jb,null)};
  $APP.g.ha=function(a,b,c){if(null==b)return this.ib&&c===this.jb?this:new uh(this.I,this.ib?this.G:this.G+1,this.root,true,c,null);a=new $APP.Wg;b=(null==this.root?kh:this.root).Ub(0,$APP.Pc(b),b,c,a);return b===this.root?this:new uh(this.I,a.val?this.G+1:this.G,b,this.ib,this.jb,null)};$APP.g.Za=function(a,b){return null==b?this.ib:null==this.root?false:this.root.Jc(0,$APP.Pc(b),b,ge)!==ge};
  $APP.g.Y=function(){if(0<this.G){var a=null!=this.root?this.root.zd():null;return this.ib?$APP.He(new $APP.Ig(null,this.jb,null),a):a}return null};$APP.g.W=function(a,b){return b===this.I?this:new uh(b,this.G,this.root,this.ib,this.jb,this.F)};
  $APP.g.ea=function(a,b){if($APP.Xd(b))return this.ha(null,$APP.Id(b,0),$APP.Id(b,1));a=this;for(b=$APP.x(b);;){if(null==b)return a;var c=$APP.y(b);if($APP.Xd(c))a=Cb(a,$APP.Id(c,0),$APP.Id(c,1)),b=$APP.z(b);else throw Error("conj on a map takes map entries or seqables of map entries");}};
  $APP.g.call=function(a){switch(arguments.length-1){case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};$APP.g.h=function(a){return this.ia(null,a)};$APP.g.g=function(a,b){return this.O(null,a,b)};var Tg=new uh(null,0,null,false,null,Vu);uh.prototype[Yc]=function(){return ed(this)};$APP.g=$APP.wh.prototype;
  $APP.g.aa=function(){if(this.ka)return this.count;throw Error("count after persistent!");};$APP.g.ia=function(a,b){return null==b?this.ib?this.jb:null:null==this.root?null:this.root.Jc(0,$APP.Pc(b),b)};$APP.g.O=function(a,b,c){return null==b?this.ib?this.jb:c:null==this.root?c:this.root.Jc(0,$APP.Pc(b),b,c)};
  $APP.g.cd=function(a,b){a:if(this.ka)if($APP.hg(b))a=xh(this,$APP.ig.h?$APP.ig.h(b):$APP.ig.call(null,b),$APP.jg.h?$APP.jg.h(b):$APP.jg.call(null,b));else if($APP.Xd(b))a=xh(this,b.h?b.h(0):b.call(null,0),b.h?b.h(1):b.call(null,1));else for(a=$APP.x(b),b=this;;){var c=$APP.y(a);if($APP.r(c))a=$APP.z(a),b=xh(b,$APP.ig.h?$APP.ig.h(c):$APP.ig.call(null,c),$APP.jg.h?$APP.jg.h(c):$APP.jg.call(null,c));else {a=b;break a}}else throw Error("conj! after persistent");return a};
  $APP.g.ud=function(){if(this.ka){this.ka=null;var a=new uh(null,this.count,this.root,this.ib,this.jb,null);}else throw Error("persistent! called twice");return a};$APP.g.bd=function(a,b,c){return xh(this,b,c)};$APP.g.vd=ba(17);$APP.g.call=function(a){switch(arguments.length-1){case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};
  $APP.g.h=function(a){return this.ia(null,a)};$APP.g.g=function(a,b){return this.O(null,a,b)};$APP.g=$APP.zh.prototype;$APP.g.toString=function(){return $APP.Dc(this)};$APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.V=function(){return this.I};$APP.g.Ga=function(){var a=$APP.y(this.stack);a=yh(this.Lc?a.right:a.left,$APP.z(this.stack),this.Lc);return null==a?null:new $APP.zh(null,a,this.Lc,this.G-1,null)};
  $APP.g.aa=function(){return 0>this.G?$APP.xd($APP.z(this))+1:this.G};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};$APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return $APP.bd};$APP.g.Ha=function(a,b){return ke(b,this)};$APP.g.Ia=function(a,b,c){return le(b,c,this)};$APP.g.Fa=function(){return $APP.Od(this.stack)};
  $APP.g.Ja=function(){var a=$APP.y(this.stack);a=yh(this.Lc?a.right:a.left,$APP.z(this.stack),this.Lc);return null!=a?new $APP.zh(null,a,this.Lc,this.G-1,null):$APP.bd};$APP.g.Y=function(){return this};$APP.g.W=function(a,b){return b===this.I?this:new $APP.zh(b,this.stack,this.Lc,this.G,this.F)};$APP.g.ea=function(a,b){return $APP.He(b,this)};$APP.zh.prototype[Yc]=function(){return ed(this)};
  var nv=function nv(a,b,c){var e=null!=a.left?function(){var l=a.left;return nv.j?nv.j(l,b,c):nv.call(null,l,b,c)}():c;if($APP.md(e))return e;var f=function(){var l=a.key,m=a.val;return b.j?b.j(e,l,m):b.call(null,e,l,m)}();if($APP.md(f))return f;if(null!=a.right){var k=a.right;return nv.j?nv.j(k,b,f):nv.call(null,k,b,f)}return f};$APP.g=Ch.prototype;$APP.g.Hc=$APP.Oc;$APP.g.rc=function(a,b){switch(b){case 0:return new $APP.Ig(0,this.key,null);case 1:return new $APP.Ig(1,this.val,null);default:return null}};
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();
  $APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();$APP.g.we=function(a){return a.ze(this)};$APP.g.Fd=function(){return new Bh(this.key,this.val,this.left,this.right)};$APP.g.oc=function(){return this};$APP.g.ve=function(a){return a.ye(this)};
  $APP.g.replace=function(a,b,c,d){return new Ch(a,b,c,d)};$APP.g.ye=function(a){return new Ch(a.key,a.val,this,a.right)};$APP.g.ze=function(a){return new Ch(a.key,a.val,a.left,this)};$APP.g.Sc=function(a,b){return nv(this,a,b)};$APP.g.ia=function(a,b){return this.ab(null,b,null)};$APP.g.O=function(a,b,c){return this.ab(null,b,c)};$APP.g.ba=function(a,b){if(0===b)return this.key;if(1===b)return this.val;throw Error("Index out of bounds");};
  $APP.g.ab=function(a,b,c){return 0===b?this.key:1===b?this.val:c};$APP.g.Qb=function(a,b,c){return (new $APP.J(null,2,5,$APP.N,[this.key,this.val],null)).Qb(null,b,c)};$APP.g.V=function(){return null};$APP.g.aa=function(){return 2};$APP.g.Wd=function(){return this.key};$APP.g.Xd=function(){return this.val};$APP.g.uc=function(){return this.val};$APP.g.vc=function(){return new $APP.J(null,1,5,$APP.N,[this.key],null)};$APP.g.tc=function(){return new $APP.Xc([this.val,this.key],0,null)};
  $APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};$APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return null};$APP.g.Ha=function(a,b){return qd(this,b)};$APP.g.Ia=function(a,b,c){return rd(this,b,c)};$APP.g.ha=function(a,b,c){return $APP.Rh.j(new $APP.J(null,2,5,$APP.N,[this.key,this.val],null),b,c)};$APP.g.Za=function(a,b){return 0===b||1===b};$APP.g.Y=function(){return new $APP.Xc([this.key,this.val],0,null)};
  $APP.g.W=function(a,b){return $APP.Sb(new $APP.J(null,2,5,$APP.N,[this.key,this.val],null),b)};$APP.g.ea=function(a,b){return new $APP.J(null,3,5,$APP.N,[this.key,this.val,b],null)};$APP.g.call=function(a){switch(arguments.length-1){case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};
  $APP.g.h=function(a){return this.ba(null,a)};$APP.g.g=function(a,b){return this.ab(null,a,b)};Ch.prototype[Yc]=function(){return ed(this)};$APP.g=Bh.prototype;$APP.g.Hc=$APP.Oc;$APP.g.rc=function(a,b){switch(b){case 0:return new $APP.Ig(0,this.key,null);case 1:return new $APP.Ig(1,this.val,null);default:return null}};
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();
  $APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();$APP.g.we=function(a){return new Bh(this.key,this.val,this.left,a)};$APP.g.Fd=function(){throw Error("red-black tree invariant violation");};$APP.g.oc=function(){return new Ch(this.key,this.val,this.left,this.right)};
  $APP.g.ve=function(a){return new Bh(this.key,this.val,a,this.right)};$APP.g.replace=function(a,b,c,d){return new Bh(a,b,c,d)};$APP.g.ye=function(a){return this.left instanceof Bh?new Bh(this.key,this.val,this.left.oc(),new Ch(a.key,a.val,this.right,a.right)):this.right instanceof Bh?new Bh(this.right.key,this.right.val,new Ch(this.key,this.val,this.left,this.right.left),new Ch(a.key,a.val,this.right.right,a.right)):new Ch(a.key,a.val,this,a.right)};
  $APP.g.ze=function(a){return this.right instanceof Bh?new Bh(this.key,this.val,new Ch(a.key,a.val,a.left,this.left),this.right.oc()):this.left instanceof Bh?new Bh(this.left.key,this.left.val,new Ch(a.key,a.val,a.left,this.left.left),new Ch(this.key,this.val,this.left.right,this.right)):new Ch(a.key,a.val,a.left,this)};$APP.g.Sc=function(a,b){return nv(this,a,b)};$APP.g.ia=function(a,b){return this.ab(null,b,null)};$APP.g.O=function(a,b,c){return this.ab(null,b,c)};
  $APP.g.ba=function(a,b){if(0===b)return this.key;if(1===b)return this.val;throw Error("Index out of bounds");};$APP.g.ab=function(a,b,c){return 0===b?this.key:1===b?this.val:c};$APP.g.Qb=function(a,b,c){return (new $APP.J(null,2,5,$APP.N,[this.key,this.val],null)).Qb(null,b,c)};$APP.g.V=function(){return null};$APP.g.aa=function(){return 2};$APP.g.Wd=function(){return this.key};$APP.g.Xd=function(){return this.val};$APP.g.uc=function(){return this.val};
  $APP.g.vc=function(){return new $APP.J(null,1,5,$APP.N,[this.key],null)};$APP.g.tc=function(){return new $APP.Xc([this.val,this.key],0,null)};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};$APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return null};$APP.g.Ha=function(a,b){return qd(this,b)};$APP.g.Ia=function(a,b,c){return rd(this,b,c)};$APP.g.ha=function(a,b,c){return $APP.Rh.j(new $APP.J(null,2,5,$APP.N,[this.key,this.val],null),b,c)};
  $APP.g.Za=function(a,b){return 0===b||1===b};$APP.g.Y=function(){return new $APP.Xc([this.key,this.val],0,null)};$APP.g.W=function(a,b){return $APP.Sb(new $APP.J(null,2,5,$APP.N,[this.key,this.val],null),b)};$APP.g.ea=function(a,b){return new $APP.J(null,3,5,$APP.N,[this.key,this.val,b],null)};
  $APP.g.call=function(a){switch(arguments.length-1){case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};$APP.g.h=function(a){return this.ba(null,a)};$APP.g.g=function(a,b){return this.ab(null,a,b)};Bh.prototype[Yc]=function(){return ed(this)};
  var ov=function ov(a,b,c,d,e){if(null==b)return new Bh(c,d,null,null);var k=function(){var l=b.key;return a.g?a.g(c,l):a.call(null,c,l)}();if(0===k)return e[0]=b,null;if(0>k)return k=function(){var l=b.left;return ov.J?ov.J(a,l,c,d,e):ov.call(null,a,l,c,d,e)}(),null!=k?b.ve(k):null;k=function(){var l=b.right;return ov.J?ov.J(a,l,c,d,e):ov.call(null,a,l,c,d,e)}();return null!=k?b.we(k):null},pv=function pv(a,b){if(null==a)return b;if(null==b)return a;if(a instanceof Bh){if(b instanceof Bh){var d=function(){var e=
  a.right,f=b.left;return pv.g?pv.g(e,f):pv.call(null,e,f)}();return d instanceof Bh?new Bh(d.key,d.val,new Bh(a.key,a.val,a.left,d.left),new Bh(b.key,b.val,d.right,b.right)):new Bh(a.key,a.val,a.left,new Bh(b.key,b.val,d,b.right))}return new Bh(a.key,a.val,a.left,function(){var e=a.right;return pv.g?pv.g(e,b):pv.call(null,e,b)}())}if(b instanceof Bh)return new Bh(b.key,b.val,function(){var e=b.left;return pv.g?pv.g(a,e):pv.call(null,a,e)}(),b.right);d=function(){var e=a.right,f=b.left;return pv.g?
  pv.g(e,f):pv.call(null,e,f)}();return d instanceof Bh?new Bh(d.key,d.val,new Ch(a.key,a.val,a.left,d.left),new Ch(b.key,b.val,d.right,b.right)):Fh(a.key,a.val,a.left,new Ch(b.key,b.val,d,b.right))},qv=function qv(a,b,c,d){if(null!=b){var f=function(){var k=b.key;return a.g?a.g(c,k):a.call(null,c,k)}();if(0===f)return d[0]=b,pv(b.left,b.right);if(0>f)return f=function(){var k=b.left;return qv.A?qv.A(a,k,c,d):qv.call(null,a,k,c,d)}(),null!=f||null!=d[0]?b.left instanceof Ch?Fh(b.key,b.val,f,b.right):
  new Bh(b.key,b.val,f,b.right):null;f=function(){var k=b.right;return qv.A?qv.A(a,k,c,d):qv.call(null,a,k,c,d)}();return null!=f||null!=d[0]?b.right instanceof Ch?Gh(b.key,b.val,b.left,f):new Bh(b.key,b.val,b.left,f):null}return null},rv=function rv(a,b,c,d){var f=b.key,k=a.g?a.g(c,f):a.call(null,c,f);return 0===k?b.replace(f,d,b.left,b.right):0>k?b.replace(f,b.val,function(){var l=b.left;return rv.A?rv.A(a,l,c,d):rv.call(null,a,l,c,d)}(),b.right):b.replace(f,b.val,b.left,function(){var l=b.right;
  return rv.A?rv.A(a,l,c,d):rv.call(null,a,l,c,d)}())};$APP.g=$APP.Hh.prototype;$APP.g.Hc=$APP.Oc;$APP.g.rc=function(a,b){return Ih(this,b)};
  $APP.g.forEach=function(a){for(var b=$APP.x(this),c=null,d=0,e=0;;)if(e<d){var f=c.ba(null,e),k=$APP.B.j(f,0,null);f=$APP.B.j(f,1,null);a.g?a.g(f,k):a.call(null,f,k);e+=1;}else if(b=$APP.x(b))$APP.Zd(b)?(c=$APP.uc(b),b=$APP.vc(b),k=c,d=$APP.xd(c),c=k):(c=$APP.y(b),k=$APP.B.j(c,0,null),f=$APP.B.j(c,1,null),a.g?a.g(f,k):a.call(null,f,k),b=$APP.z(b),c=null,d=0),e=0;else return null};$APP.g.get=function(a,b){return this.O(null,a,b)};$APP.g.entries=function(){return new Fg($APP.x($APP.x(this)))};
  $APP.g.toString=function(){return $APP.Dc(this)};$APP.g.keys=function(){return ed($APP.Kh.h?$APP.Kh.h(this):$APP.Kh.call(null,this))};$APP.g.values=function(){return ed($APP.Mh.h?$APP.Mh.h(this):$APP.Mh.call(null,this))};$APP.g.has=function(a){return $APP.he(this,a)};$APP.g.ia=function(a,b){return this.O(null,b,null)};$APP.g.O=function(a,b,c){a=Ih(this,b);return null!=a?a.val:c};$APP.g.hb=function(a,b,c){return null!=this.ac?$APP.pd(nv(this.ac,b,c)):c};$APP.g.V=function(){return this.I};
  $APP.g.aa=function(){return this.G};$APP.g.tc=function(){return 0<this.G?$APP.Ah(this.ac,false,this.G):null};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=$APP.id(this)};$APP.g.Z=function(a,b){return Dg(this,b)};$APP.g.na=function(){return new $APP.Hh(this.Bb,null,0,this.I,0)};$APP.g.ob=function(a,b){a=[null];b=qv(this.Bb,this.ac,b,a);return null==b?null==$APP.B.g(a,0)?this:new $APP.Hh(this.Bb,null,0,this.I,null):new $APP.Hh(this.Bb,b.oc(),this.G-1,this.I,null)};
  $APP.g.ha=function(a,b,c){a=[null];var d=ov(this.Bb,this.ac,b,c,a);return null==d?(a=$APP.B.g(a,0),$APP.A.g(c,a.val)?this:new $APP.Hh(this.Bb,rv(this.Bb,this.ac,b,c),this.G,this.I,null)):new $APP.Hh(this.Bb,d.oc(),this.G+1,this.I,null)};$APP.g.Za=function(a,b){return null!=Ih(this,b)};$APP.g.Y=function(){return 0<this.G?$APP.Ah(this.ac,true,this.G):null};$APP.g.W=function(a,b){return b===this.I?this:new $APP.Hh(this.Bb,this.ac,this.G,b,this.F)};
  $APP.g.ea=function(a,b){if($APP.Xd(b))return this.ha(null,$APP.Id(b,0),$APP.Id(b,1));a=this;for(b=$APP.x(b);;){if(null==b)return a;var c=$APP.y(b);if($APP.Xd(c))a=Cb(a,$APP.Id(c,0),$APP.Id(c,1)),b=$APP.z(b);else throw Error("conj on a map takes map entries or seqables of map entries");}};
  $APP.g.call=function(a){switch(arguments.length-1){case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};$APP.g.h=function(a){return this.ia(null,a)};$APP.g.g=function(a,b){return this.O(null,a,b)};$APP.g.sd=ba(1);$APP.g.td=ba(3);$APP.g.rd=ba(10);$APP.g.qd=ba(5);$APP.sv=new $APP.Hh($APP.ie,null,0,null,Vu);
  $APP.Hh.prototype[Yc]=function(){return ed(this)};$APP.Go=function Go(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Go.l(0<c.length?new $APP.Xc(c.slice(0),0,null):null)};$APP.Go.l=function(a){a=$APP.x(a);for(var b=$APP.mc(Tg);;)if(a){var c=$APP.z(a);if(null==c)throw Error(["No value supplied for key: ",$APP.t.h($APP.y(a))].join(""));var d=$APP.z(c);b=$APP.Ug.j(b,$APP.y(a),$APP.y(c));a=d;}else return $APP.oc(b)};$APP.Go.m=0;$APP.Go.o=function(a){return this.l($APP.x(a))};
  $APP.Fo=function Fo(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Fo.l(0<c.length?new $APP.Xc(c.slice(0),0,null):null)};$APP.Fo.l=function(a){a=a instanceof $APP.Xc&&0===a.K?a.C:$APP.Mu.h(a);if(!$APP.Ff(a.length))throw Error(["No value supplied for key: ",$APP.t.h($APP.Gd(a))].join(""));return $APP.gf(a)};$APP.Fo.m=0;$APP.Fo.o=function(a){return this.l($APP.x(a))};$APP.g=Jh.prototype;$APP.g.toString=function(){return $APP.Dc(this)};
  $APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.V=function(){return this.Mb};
  $APP.g.Ga=function(){var a=(null!=this.la?this.la.D&128||$APP.Oc===this.la.pd||(this.la.D?0:$APP.cb(tb,this.la)):$APP.cb(tb,this.la))?this.la.Ga(null):$APP.z(this.la);return null==a?null:new Jh(a,null)};$APP.g.$=function(){return gd(this)};$APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return $APP.bd};$APP.g.Ha=function(a,b){return ke(b,this)};$APP.g.Ia=function(a,b,c){return le(b,c,this)};$APP.g.Fa=function(){return this.la.Fa(null).key};
  $APP.g.Ja=function(){var a=(null!=this.la?this.la.D&128||$APP.Oc===this.la.pd||(this.la.D?0:$APP.cb(tb,this.la)):$APP.cb(tb,this.la))?this.la.Ga(null):$APP.z(this.la);return null!=a?new Jh(a,null):$APP.bd};$APP.g.Y=function(){return this};$APP.g.W=function(a,b){return b===this.Mb?this:new Jh(this.la,b)};$APP.g.ea=function(a,b){return $APP.He(b,this)};Jh.prototype[Yc]=function(){return ed(this)};$APP.g=Lh.prototype;$APP.g.toString=function(){return $APP.Dc(this)};
  $APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.V=function(){return this.Mb};
  $APP.g.Ga=function(){var a=(null!=this.la?this.la.D&128||$APP.Oc===this.la.pd||(this.la.D?0:$APP.cb(tb,this.la)):$APP.cb(tb,this.la))?this.la.Ga(null):$APP.z(this.la);return null==a?null:new Lh(a,null)};$APP.g.$=function(){return gd(this)};$APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return $APP.bd};$APP.g.Ha=function(a,b){return ke(b,this)};$APP.g.Ia=function(a,b,c){return le(b,c,this)};$APP.g.Fa=function(){return this.la.Fa(null).val};
  $APP.g.Ja=function(){var a=(null!=this.la?this.la.D&128||$APP.Oc===this.la.pd||(this.la.D?0:$APP.cb(tb,this.la)):$APP.cb(tb,this.la))?this.la.Ga(null):$APP.z(this.la);return null!=a?new Lh(a,null):$APP.bd};$APP.g.Y=function(){return this};$APP.g.W=function(a,b){return b===this.Mb?this:new Lh(this.la,b)};$APP.g.ea=function(a,b){return $APP.He(b,this)};Lh.prototype[Yc]=function(){return ed(this)};
  $APP.Qk=function Qk(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Qk.l(0<c.length?new $APP.Xc(c.slice(0),0,null):null)};$APP.Qk.l=function(a){return $APP.r($APP.Ef($APP.se,a))?$APP.ne.g(function(b,c){return $APP.De.g($APP.r(b)?b:$APP.hf,c)},a):null};$APP.Qk.m=0;$APP.Qk.o=function(a){return this.l($APP.x(a))};
  $APP.tv=function tv(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return tv.l(arguments[0],1<c.length?new $APP.Xc(c.slice(1),0,null):null)};
  $APP.tv.l=function(a,b){if($APP.r($APP.Ef($APP.se,b))){var c=function(d,e){var f=$APP.Gb(e),k=$APP.Hb(e);if($APP.he(d,f)){e=$APP.Rh.j;var l=$APP.fe.g(d,f);k=a.g?a.g(l,k):a.call(null,l,k);d=e.call($APP.Rh,d,f,k);}else d=$APP.Rh.j(d,f,k);return d};return $APP.ne.g(function(d,e){return $APP.ne.j(c,$APP.r(d)?d:$APP.hf,$APP.x(e))},b)}return null};$APP.tv.m=1;$APP.tv.o=function(a){var b=$APP.y(a);a=$APP.z(a);return this.l(b,a)};Th.prototype.pa=function(){return this.gd.pa()};
  Th.prototype.next=function(){if(this.gd.pa())return this.gd.next().key;throw Error("No such element");};Th.prototype.remove=function(){return Error("Unsupported operation")};$APP.g=$APP.Uh.prototype;$APP.g.toString=function(){return $APP.Dc(this)};$APP.g.keys=function(){return ed($APP.x(this))};$APP.g.entries=function(){return new Gg($APP.x($APP.x(this)))};$APP.g.values=function(){return ed($APP.x(this))};$APP.g.has=function(a){return $APP.he(this,a)};
  $APP.g.forEach=function(a){for(var b=$APP.x(this),c=null,d=0,e=0;;)if(e<d){var f=c.ba(null,e),k=$APP.B.j(f,0,null);f=$APP.B.j(f,1,null);a.g?a.g(f,k):a.call(null,f,k);e+=1;}else if(b=$APP.x(b))$APP.Zd(b)?(c=$APP.uc(b),b=$APP.vc(b),k=c,d=$APP.xd(c),c=k):(c=$APP.y(b),k=$APP.B.j(c,0,null),f=$APP.B.j(c,1,null),a.g?a.g(f,k):a.call(null,f,k),b=$APP.z(b),c=null,d=0),e=0;else return null};$APP.g.ia=function(a,b){return this.O(null,b,null)};
  $APP.g.O=function(a,b,c){a=$APP.Db(this.zc,b);return $APP.r(a)?$APP.Gb(a):c};$APP.g.Da=function(){return new Th($APP.Bc(this.zc))};$APP.g.V=function(){return this.I};$APP.g.aa=function(){return kb(this.zc)};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=$APP.id(this)};$APP.g.Z=function(a,b){if(a=$APP.Sd(b))if(a=$APP.xd(this)===$APP.xd(b))try{return $APP.re(function(c,d){return (c=$APP.he(b,d))?c:$APP.ld(!1)},!0,this.zc)}catch(c){if(c instanceof Error)return  false;throw c;}else return a;else return a};
  $APP.g.Xc=function(){return new $APP.Xh($APP.mc(this.zc))};$APP.g.na=function(){return $APP.Sb($APP.Vh,this.I)};$APP.g.ee=function(a,b){return new $APP.Uh(this.I,Fb(this.zc,b),null)};$APP.g.Y=function(){return $APP.Kh(this.zc)};$APP.g.W=function(a,b){return b===this.I?this:new $APP.Uh(b,this.zc,this.F)};$APP.g.ea=function(a,b){return new $APP.Uh(this.I,$APP.Rh.j(this.zc,b,null),null)};
  $APP.g.call=function(a){switch(arguments.length-1){case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};$APP.g.h=function(a){return this.ia(null,a)};$APP.g.g=function(a,b){return this.O(null,a,b)};$APP.Vh=new $APP.Uh(null,$APP.hf,Vu);$APP.Uh.prototype[Yc]=function(){return ed(this)};$APP.g=$APP.Xh.prototype;
  $APP.g.cd=function(a,b){this.Dc=$APP.Ug.j(this.Dc,b,null);return this};$APP.g.ud=function(){return new $APP.Uh(null,$APP.oc(this.Dc),null)};$APP.g.fe=ba(11);$APP.g.aa=function(){return $APP.xd(this.Dc)};$APP.g.ia=function(a,b){return this.O(null,b,null)};$APP.g.O=function(a,b,c){return $APP.Ou(this.Dc,b,ge)===ge?c:b};
  $APP.g.call=function(a){switch(arguments.length-1){case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};$APP.g.h=function(a){return $APP.Ou(this.Dc,a,ge)===ge?null:a};$APP.g.g=function(a,b){return $APP.Ou(this.Dc,a,ge)===ge?b:a};$APP.g=$APP.Yh.prototype;$APP.g.toString=function(){return $APP.Dc(this)};
  $APP.g.keys=function(){return ed($APP.x(this))};$APP.g.entries=function(){return new Gg($APP.x($APP.x(this)))};$APP.g.values=function(){return ed($APP.x(this))};$APP.g.has=function(a){return $APP.he(this,a)};
  $APP.g.forEach=function(a){for(var b=$APP.x(this),c=null,d=0,e=0;;)if(e<d){var f=c.ba(null,e),k=$APP.B.j(f,0,null);f=$APP.B.j(f,1,null);a.g?a.g(f,k):a.call(null,f,k);e+=1;}else if(b=$APP.x(b))$APP.Zd(b)?(c=$APP.uc(b),b=$APP.vc(b),k=c,d=$APP.xd(c),c=k):(c=$APP.y(b),k=$APP.B.j(c,0,null),f=$APP.B.j(c,1,null),a.g?a.g(f,k):a.call(null,f,k),b=$APP.z(b),c=null,d=0),e=0;else return null};$APP.g.ia=function(a,b){return this.O(null,b,null)};$APP.g.O=function(a,b,c){a=Ih(this.Kb,b);return null!=a?a.key:c};
  $APP.g.V=function(){return this.I};$APP.g.aa=function(){return $APP.xd(this.Kb)};$APP.g.tc=function(){return 0<$APP.xd(this.Kb)?$APP.ui.g($APP.ig,$APP.hc(this.Kb)):null};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=$APP.id(this)};$APP.g.Z=function(a,b){if(a=$APP.Sd(b))if(a=$APP.xd(this)===$APP.xd(b))try{return $APP.re(function(c,d){return (c=$APP.he(b,d))?c:$APP.ld(!1)},!0,this.Kb)}catch(c){if(c instanceof Error)return  false;throw c;}else return a;else return a};
  $APP.g.na=function(){return new $APP.Yh(this.I,mb(this.Kb),0)};$APP.g.ee=function(a,b){return new $APP.Yh(this.I,$APP.Rk.g(this.Kb,b),null)};$APP.g.Y=function(){return $APP.Kh(this.Kb)};$APP.g.W=function(a,b){return b===this.I?this:new $APP.Yh(b,this.Kb,this.F)};$APP.g.ea=function(a,b){return new $APP.Yh(this.I,$APP.Rh.j(this.Kb,b,null),null)};
  $APP.g.call=function(a){switch(arguments.length-1){case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};$APP.g.h=function(a){return this.ia(null,a)};$APP.g.g=function(a,b){return this.O(null,a,b)};$APP.g.sd=ba(0);$APP.g.td=ba(2);$APP.g.rd=ba(9);$APP.g.qd=ba(4);$APP.uv=new $APP.Yh(null,$APP.sv,Vu);
  $APP.Yh.prototype[Yc]=function(){return ed(this)};$APP.ts=function ts(a){switch(arguments.length){case 1:return ts.h(arguments[0]);case 2:return ts.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};
  $APP.ts.h=function(a){return function(b){return function(){function c(k,l){return $APP.r(a.h?a.h(l):a.call(null,l))?b.g?b.g(k,l):b.call(null,k,l):$APP.ld(k)}function d(k){return b.h?b.h(k):b.call(null,k)}function e(){return b.v?b.v():b.call(null)}var f=null;f=function(k,l){switch(arguments.length){case 0:return e.call(this);case 1:return d.call(this,k);case 2:return c.call(this,k,l)}throw Error("Invalid arity: "+arguments.length);};f.v=e;f.h=d;f.g=c;return f}()}};
  $APP.ts.g=function(a,b){return new $APP.Ne(null,function(){var c=$APP.x(b);if(c){var d=$APP.y(c);d=a.h?a.h(d):a.call(null,d);c=$APP.r(d)?$APP.He($APP.y(c),$APP.ts.g(a,$APP.cd(c))):null;}else c=null;return c},null,null)};$APP.ts.m=2;$APP.g=ci.prototype;$APP.g.aa=function(){return this.count};$APP.g.Fa=function(){return this.start};$APP.g.ba=function(a,b){return this.start+b*this.step};$APP.g.ab=function(a,b,c){return 0<=b&&b<this.count?this.start+b*this.step:c};
  $APP.g.Td=function(){if(1>=this.count)throw Error("-drop-first of empty chunk");return new ci(this.start+this.step,this.step,this.count-1)};di.prototype.pa=function(){return 0<this.step?this.K<this.end:this.K>this.end};di.prototype.next=function(){var a=this.K;this.K+=this.step;return a};$APP.g=ei.prototype;$APP.g.toString=function(){return $APP.Dc(this)};
  $APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();
  $APP.g.xd=function(){if(null==this.gb){var a=this.aa(null);32<a?(this.qc=new ei(null,this.start+32*this.step,this.end,this.step,null,null,null),this.gb=new ci(this.start,this.step,32)):this.gb=new ci(this.start,this.step,a);}};$APP.g.ba=function(a,b){if(0<=b&&b<this.aa(null))return this.start+b*this.step;if(0<=b&&this.start>this.end&&0===this.step)return this.start;throw Error("Index out of bounds");};
  $APP.g.ab=function(a,b,c){return 0<=b&&b<this.aa(null)?this.start+b*this.step:0<=b&&this.start>this.end&&0===this.step?this.start:c};$APP.g.Da=function(){return new di(this.start,this.end,this.step)};$APP.g.V=function(){return this.I};$APP.g.Ga=function(){return 0<this.step?this.start+this.step<this.end?new ei(null,this.start+this.step,this.end,this.step,null,null,null):null:this.start+this.step>this.end?new ei(null,this.start+this.step,this.end,this.step,null,null,null):null};
  $APP.g.aa=function(){return Math.ceil((this.end-this.start)/this.step)};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};$APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return $APP.bd};$APP.g.Ha=function(a,b){return qd(this,b)};$APP.g.Ia=function(a,b,c){for(a=this.start;;)if(0<this.step?a<this.end:a>this.end){c=b.g?b.g(c,a):b.call(null,c,a);if($APP.md(c))return $APP.u(c);a+=this.step;}else return c};$APP.g.Fa=function(){return this.start};
  $APP.g.Ja=function(){var a=this.Ga(null);return null==a?$APP.bd:a};$APP.g.Y=function(){return this};$APP.g.od=function(){this.xd();return this.gb};$APP.g.Fc=function(){this.xd();return null==this.qc?$APP.bd:this.qc};$APP.g.W=function(a,b){return b===this.I?this:new ei(b,this.start,this.end,this.step,this.gb,this.qc,this.F)};$APP.g.ea=function(a,b){return $APP.He(b,this)};$APP.g.nd=function(){return $APP.x(this.Fc(null))};ei.prototype[Yc]=function(){return ed(this)};$APP.g=fi.prototype;
  $APP.g.toString=function(){return $APP.Dc(this)};$APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();
  $APP.g.xd=function(){if(null==this.gb){var a=[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];a:{var b=0;for(var c=this.start;;)if(32>b){if(a[b]=c,b+=1,c+=this.step,!(0<this.step?c<this.end:c>this.end)){b=this.gb=new Ue(a,0,b);break a}}else {b=c;break a}}null==this.gb&&(this.gb=new Ue(a,0,32),(0<this.step?b<this.end:b>this.end)&&(this.qc=new fi(null,b,this.end,this.step,null,null,null)));}};
  $APP.g.Da=function(){return new di(this.start,this.end,this.step)};$APP.g.V=function(){return this.I};$APP.g.Ga=function(){return 0<this.step?this.start+this.step<this.end?new fi(null,this.start+this.step,this.end,this.step,null,null,null):null:this.start+this.step>this.end?new fi(null,this.start+this.step,this.end,this.step,null,null,null):null};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=gd(this)};$APP.g.Z=function(a,b){return ze(this,b)};$APP.g.na=function(){return $APP.bd};
  $APP.g.Ha=function(a,b){return ke(b,this)};$APP.g.Ia=function(a,b,c){for(a=this.start;;)if(0<this.step?a<this.end:a>this.end){c=b.g?b.g(c,a):b.call(null,c,a);if($APP.md(c))return $APP.u(c);a+=this.step;}else return c};$APP.g.Fa=function(){return this.start};$APP.g.Ja=function(){var a=this.Ga(null);return null==a?$APP.bd:a};$APP.g.Y=function(){return this};$APP.g.od=function(){this.xd();return this.gb};$APP.g.Fc=function(){this.xd();return null==this.qc?$APP.bd:this.qc};
  $APP.g.W=function(a,b){return b===this.I?this:new fi(b,this.start,this.end,this.step,this.gb,this.qc,this.F)};$APP.g.ea=function(a,b){return $APP.He(b,this)};$APP.g.nd=function(){return $APP.x(this.Fc(null))};fi.prototype[Yc]=function(){return ed(this)};
  $APP.Wm=function Wm(a){switch(arguments.length){case 0:return Wm.v();case 1:return Wm.h(arguments[0]);case 2:return Wm.g(arguments[0],arguments[1]);case 3:return Wm.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.Wm.v=function(){return $APP.Wm.j(0,Number.MAX_VALUE,1)};$APP.Wm.h=function(a){return $APP.Wm.j(0,a,1)};$APP.Wm.g=function(a,b){return $APP.Wm.j(a,b,1)};
  $APP.Wm.j=function(a,b,c){return 0<c?b<=a?$APP.bd:$APP.ee(a)&&$APP.ee(b)&&$APP.ee(c)?new ei(null,a,b,c,null,null,null):new fi(null,a,b,c,null,null,null):0>c?b>=a?$APP.bd:$APP.ee(a)&&$APP.ee(b)&&$APP.ee(c)?new ei(null,a,b,c,null,null,null):new fi(null,a,b,c,null,null,null):b===a?$APP.bd:$APP.Jr.h(a)};$APP.Wm.m=3;
  $APP.fm=function fm(a){switch(arguments.length){case 1:return fm.h(arguments[0]);case 2:return fm.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};
  $APP.fm.h=function(a){return function(b){var c=$APP.Lf(-1);return function(){function d(l,m){var h=c.Rb(null,c.nb(null)+1);return 0===$APP.xe(h,a)?b.g?b.g(l,m):b.call(null,l,m):l}function e(l){return b.h?b.h(l):b.call(null,l)}function f(){return b.v?b.v():b.call(null)}var k=null;k=function(l,m){switch(arguments.length){case 0:return f.call(this);case 1:return e.call(this,l);case 2:return d.call(this,l,m)}throw Error("Invalid arity: "+arguments.length);};k.v=f;k.h=e;k.g=d;return k}()}};
  $APP.fm.g=function(a,b){return new $APP.Ne(null,function(){var c=$APP.x(b);return c?$APP.He($APP.y(c),$APP.fm.g(a,$APP.Nf.g(a,c))):null},null,null)};$APP.fm.m=2;
  $APP.vk=function vk(a){switch(arguments.length){case 1:return vk.h(arguments[0]);case 2:return vk.g(arguments[0],arguments[1]);case 3:return vk.j(arguments[0],arguments[1],arguments[2]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return vk.l(arguments[0],arguments[1],arguments[2],new $APP.Xc(c.slice(3),0,null))}};
  $APP.vk.h=function(a){return function(){function b(l,m,h){return new $APP.J(null,1,5,$APP.N,[a.j?a.j(l,m,h):a.call(null,l,m,h)],null)}function c(l,m){return new $APP.J(null,1,5,$APP.N,[a.g?a.g(l,m):a.call(null,l,m)],null)}function d(l){return new $APP.J(null,1,5,$APP.N,[a.h?a.h(l):a.call(null,l)],null)}function e(){return new $APP.J(null,1,5,$APP.N,[a.v?a.v():a.call(null)],null)}var f=null,k=function(){function l(h,q,p,v){var D=null;if(3<arguments.length){D=0;for(var H=Array(arguments.length-3);D<
  H.length;)H[D]=arguments[D+3],++D;D=new $APP.Xc(H,0,null);}return m.call(this,h,q,p,D)}function m(h,q,p,v){return new $APP.J(null,1,5,$APP.N,[$APP.Gf.J(a,h,q,p,v)],null)}l.m=3;l.o=function(h){var q=$APP.y(h);h=$APP.z(h);var p=$APP.y(h);h=$APP.z(h);var v=$APP.y(h);h=$APP.cd(h);return m(q,p,v,h)};l.l=m;return l}();f=function(l,m,h,q){switch(arguments.length){case 0:return e.call(this);case 1:return d.call(this,l);case 2:return c.call(this,l,m);case 3:return b.call(this,l,m,h);default:var p=null;if(3<
  arguments.length){p=0;for(var v=Array(arguments.length-3);p<v.length;)v[p]=arguments[p+3],++p;p=new $APP.Xc(v,0,null);}return k.l(l,m,h,p)}};f.m=3;f.o=k.o;f.v=e;f.h=d;f.g=c;f.j=b;f.l=k.l;return f}()};
  $APP.vk.g=function(a,b){return function(){function c(m,h,q){return new $APP.J(null,2,5,$APP.N,[a.j?a.j(m,h,q):a.call(null,m,h,q),b.j?b.j(m,h,q):b.call(null,m,h,q)],null)}function d(m,h){return new $APP.J(null,2,5,$APP.N,[a.g?a.g(m,h):a.call(null,m,h),b.g?b.g(m,h):b.call(null,m,h)],null)}function e(m){return new $APP.J(null,2,5,$APP.N,[a.h?a.h(m):a.call(null,m),b.h?b.h(m):b.call(null,m)],null)}function f(){return new $APP.J(null,2,5,$APP.N,[a.v?a.v():a.call(null),b.v?b.v():b.call(null)],null)}var k=
  null,l=function(){function m(q,p,v,D){var H=null;if(3<arguments.length){H=0;for(var O=Array(arguments.length-3);H<O.length;)O[H]=arguments[H+3],++H;H=new $APP.Xc(O,0,null);}return h.call(this,q,p,v,H)}function h(q,p,v,D){return new $APP.J(null,2,5,$APP.N,[$APP.Gf.J(a,q,p,v,D),$APP.Gf.J(b,q,p,v,D)],null)}m.m=3;m.o=function(q){var p=$APP.y(q);q=$APP.z(q);var v=$APP.y(q);q=$APP.z(q);var D=$APP.y(q);q=$APP.cd(q);return h(p,v,D,q)};m.l=h;return m}();k=function(m,h,q,p){switch(arguments.length){case 0:return f.call(this);
  case 1:return e.call(this,m);case 2:return d.call(this,m,h);case 3:return c.call(this,m,h,q);default:var v=null;if(3<arguments.length){v=0;for(var D=Array(arguments.length-3);v<D.length;)D[v]=arguments[v+3],++v;v=new $APP.Xc(D,0,null);}return l.l(m,h,q,v)}};k.m=3;k.o=l.o;k.v=f;k.h=e;k.g=d;k.j=c;k.l=l.l;return k}()};
  $APP.vk.j=function(a,b,c){return function(){function d(h,q,p){return new $APP.J(null,3,5,$APP.N,[a.j?a.j(h,q,p):a.call(null,h,q,p),b.j?b.j(h,q,p):b.call(null,h,q,p),c.j?c.j(h,q,p):c.call(null,h,q,p)],null)}function e(h,q){return new $APP.J(null,3,5,$APP.N,[a.g?a.g(h,q):a.call(null,h,q),b.g?b.g(h,q):b.call(null,h,q),c.g?c.g(h,q):c.call(null,h,q)],null)}function f(h){return new $APP.J(null,3,5,$APP.N,[a.h?a.h(h):a.call(null,h),b.h?b.h(h):b.call(null,h),c.h?c.h(h):c.call(null,h)],null)}function k(){return new $APP.J(null,
  3,5,$APP.N,[a.v?a.v():a.call(null),b.v?b.v():b.call(null),c.v?c.v():c.call(null)],null)}var l=null,m=function(){function h(p,v,D,H){var O=null;if(3<arguments.length){O=0;for(var P=Array(arguments.length-3);O<P.length;)P[O]=arguments[O+3],++O;O=new $APP.Xc(P,0,null);}return q.call(this,p,v,D,O)}function q(p,v,D,H){return new $APP.J(null,3,5,$APP.N,[$APP.Gf.J(a,p,v,D,H),$APP.Gf.J(b,p,v,D,H),$APP.Gf.J(c,p,v,D,H)],null)}h.m=3;h.o=function(p){var v=$APP.y(p);p=$APP.z(p);var D=$APP.y(p);p=$APP.z(p);var H=
  $APP.y(p);p=$APP.cd(p);return q(v,D,H,p)};h.l=q;return h}();l=function(h,q,p,v){switch(arguments.length){case 0:return k.call(this);case 1:return f.call(this,h);case 2:return e.call(this,h,q);case 3:return d.call(this,h,q,p);default:var D=null;if(3<arguments.length){D=0;for(var H=Array(arguments.length-3);D<H.length;)H[D]=arguments[D+3],++D;D=new $APP.Xc(H,0,null);}return m.l(h,q,p,D)}};l.m=3;l.o=m.o;l.v=k;l.h=f;l.g=e;l.j=d;l.l=m.l;return l}()};
  $APP.vk.l=function(a,b,c,d){var e=$APP.Jq.A(a,b,c,d);return function(){function f(p,v,D){return $APP.ne.j(function(H,O){return $APP.De.g(H,O.j?O.j(p,v,D):O.call(null,p,v,D))},$APP.kg,e)}function k(p,v){return $APP.ne.j(function(D,H){return $APP.De.g(D,H.g?H.g(p,v):H.call(null,p,v))},$APP.kg,e)}function l(p){return $APP.ne.j(function(v,D){return $APP.De.g(v,D.h?D.h(p):D.call(null,p))},$APP.kg,e)}function m(){return $APP.ne.j(function(p,v){return $APP.De.g(p,v.v?v.v():v.call(null))},$APP.kg,e)}var h=
  null,q=function(){function p(D,H,O,P){var W=null;if(3<arguments.length){W=0;for(var ca=Array(arguments.length-3);W<ca.length;)ca[W]=arguments[W+3],++W;W=new $APP.Xc(ca,0,null);}return v.call(this,D,H,O,W)}function v(D,H,O,P){return $APP.ne.j(function(W,ca){return $APP.De.g(W,$APP.Gf.J(ca,D,H,O,P))},$APP.kg,e)}p.m=3;p.o=function(D){var H=$APP.y(D);D=$APP.z(D);var O=$APP.y(D);D=$APP.z(D);var P=$APP.y(D);D=$APP.cd(D);return v(H,O,P,D)};p.l=v;return p}();h=function(p,v,D,H){switch(arguments.length){case 0:return m.call(this);
  case 1:return l.call(this,p);case 2:return k.call(this,p,v);case 3:return f.call(this,p,v,D);default:var O=null;if(3<arguments.length){O=0;for(var P=Array(arguments.length-3);O<P.length;)P[O]=arguments[O+3],++O;O=new $APP.Xc(P,0,null);}return q.l(p,v,D,O)}};h.m=3;h.o=q.o;h.v=m;h.h=l;h.g=k;h.j=f;h.l=q.l;return h}()};$APP.vk.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};$APP.vk.m=3;
  $APP.vv=function vv(a){switch(arguments.length){case 1:return vv.h(arguments[0]);case 2:return vv.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.vv.h=function(a){for(;;)if(a=$APP.x(a))a=$APP.z(a);else return null};$APP.vv.g=function(a,b){for(;;)if($APP.x(b)&&0<a)--a,b=$APP.z(b);else return null};$APP.vv.m=2;
  $APP.Om=function Om(a){switch(arguments.length){case 1:return Om.h(arguments[0]);case 2:return Om.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.Om.h=function(a){$APP.vv.h(a);return a};$APP.Om.g=function(a,b){$APP.vv.g(a,b);return b};$APP.Om.m=2;qi={'"':'\\"',"\\":"\\\\","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t"};
  $APP.Ri=function Ri(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Ri.l(0<c.length?new $APP.Xc(c.slice(0),0,null):null)};$APP.Ri.l=function(a){return Fi(a,$APP.Ra())};$APP.Ri.m=0;$APP.Ri.o=function(a){return this.l($APP.x(a))};
  $APP.wv=function(){function a(c){var d=null;if(0<arguments.length){d=0;for(var e=Array(arguments.length-0);d<e.length;)e[d]=arguments[d+0],++d;d=new $APP.Xc(e,0,null);}return b.call(this,d)}function b(c){return $APP.Gi(c,$APP.Rh.j($APP.Ra(),$APP.Ia,false))}a.m=0;a.o=function(c){c=$APP.x(c);return b(c)};a.l=b;return a}();$APP.xv=function xv(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return xv.l(0<c.length?new $APP.Xc(c.slice(0),0,null):null)};
  $APP.xv.l=function(a){return Fi(a,$APP.Rh.j($APP.Ra(),$APP.Ia,false))};$APP.xv.m=0;$APP.xv.o=function(a){return this.l($APP.x(a))};Kf.prototype.ja=$APP.Oc;Kf.prototype.R=function(a,b,c){$APP.ic(b,"#object[cljs.core.Volatile ");$APP.ti(new $APP.n(null,1,[$APP.yv,this.state],null),b,c);return $APP.ic(b,"]")};$APP.Vc.prototype.ja=$APP.Oc;$APP.Vc.prototype.R=function(a,b,c){$APP.ic(b,"#'");return $APP.ti(this.nc,b,c)};$APP.Xc.prototype.ja=$APP.Oc;
  $APP.Xc.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};$APP.Ne.prototype.ja=$APP.Oc;$APP.Ne.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};$APP.Ig.prototype.ja=$APP.Oc;$APP.Ig.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"["," ","]",c,this)};$APP.zh.prototype.ja=$APP.Oc;$APP.zh.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};lh.prototype.ja=$APP.Oc;
  lh.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};Ch.prototype.ja=$APP.Oc;Ch.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"["," ","]",c,this)};Jg.prototype.ja=$APP.Oc;Jg.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};fd.prototype.ja=$APP.Oc;fd.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};$APP.Yh.prototype.ja=$APP.Oc;$APP.Yh.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"#{"," ","}",c,this)};
  mg.prototype.ja=$APP.Oc;mg.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};Ge.prototype.ja=$APP.Oc;Ge.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};Qf.prototype.ja=$APP.Oc;Qf.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};Bd.prototype.ja=$APP.Oc;Bd.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};ei.prototype.ja=$APP.Oc;ei.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};
  uh.prototype.ja=$APP.Oc;uh.prototype.R=function(a,b,c){return wi(this,$APP.ti,b,c)};ph.prototype.ja=$APP.Oc;ph.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};rg.prototype.ja=$APP.Oc;rg.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"["," ","]",c,this)};$APP.Hh.prototype.ja=$APP.Oc;$APP.Hh.prototype.R=function(a,b,c){return wi(this,$APP.ti,b,c)};$APP.Uh.prototype.ja=$APP.Oc;$APP.Uh.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"#{"," ","}",c,this)};
  Ve.prototype.ja=$APP.Oc;Ve.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};$APP.If.prototype.ja=$APP.Oc;$APP.If.prototype.R=function(a,b,c){$APP.ic(b,"#object[cljs.core.Atom ");$APP.ti(new $APP.n(null,1,[$APP.yv,this.state],null),b,c);return $APP.ic(b,"]")};Lh.prototype.ja=$APP.Oc;Lh.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};Bh.prototype.ja=$APP.Oc;Bh.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"["," ","]",c,this)};
  Pf.prototype.ja=$APP.Oc;Pf.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};$APP.J.prototype.ja=$APP.Oc;$APP.J.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"["," ","]",c,this)};zg.prototype.ja=$APP.Oc;zg.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};Be.prototype.ja=$APP.Oc;Be.prototype.R=function(a,b){return $APP.ic(b,"()")};$APP.Ag.prototype.ja=$APP.Oc;$APP.Ag.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"#queue ["," ","]",c,$APP.x(this))};
  $APP.n.prototype.ja=$APP.Oc;$APP.n.prototype.R=function(a,b,c){return wi(this,$APP.ti,b,c)};fi.prototype.ja=$APP.Oc;fi.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};zf.prototype.ja=$APP.Oc;zf.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};Jh.prototype.ja=$APP.Oc;Jh.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};$APP.G.prototype.ja=$APP.Oc;$APP.G.prototype.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};
  $APP.w.prototype.Gc=$APP.Oc;$APP.w.prototype.cc=function(a,b){if(b instanceof $APP.w)return Tc(this,b);throw Error(["Cannot compare ",$APP.t.h(this)," to ",$APP.t.h(b)].join(""));};$APP.I.prototype.Gc=$APP.Oc;$APP.I.prototype.cc=function(a,b){if(b instanceof $APP.I)return Ie(this,b);throw Error(["Cannot compare ",$APP.t.h(this)," to ",$APP.t.h(b)].join(""));};rg.prototype.Gc=$APP.Oc;
  rg.prototype.cc=function(a,b){if($APP.Xd(b))return je(this,b);throw Error(["Cannot compare ",$APP.t.h(this)," to ",$APP.t.h(b)].join(""));};$APP.J.prototype.Gc=$APP.Oc;$APP.J.prototype.cc=function(a,b){if($APP.Xd(b))return je(this,b);throw Error(["Cannot compare ",$APP.t.h(this)," to ",$APP.t.h(b)].join(""));};$APP.Ig.prototype.Gc=$APP.Oc;$APP.Ig.prototype.cc=function(a,b){if($APP.Xd(b))return je(this,b);throw Error(["Cannot compare ",$APP.t.h(this)," to ",$APP.t.h(b)].join(""));};
  Ch.prototype.Gc=$APP.Oc;Ch.prototype.cc=function(a,b){if($APP.Xd(b))return je(this,b);throw Error(["Cannot compare ",$APP.t.h(this)," to ",$APP.t.h(b)].join(""));};Bh.prototype.Gc=$APP.Oc;Bh.prototype.cc=function(a,b){if($APP.Xd(b))return je(this,b);throw Error(["Cannot compare ",$APP.t.h(this)," to ",$APP.t.h(b)].join(""));};zv=null;
  $APP.kn=function kn(a){switch(arguments.length){case 0:return kn.v();case 1:return kn.h(arguments[0]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.kn.v=function(){return $APP.kn.h("G__")};$APP.kn.h=function(a){null==zv&&(zv=$APP.Vi.h(0));return $APP.Hi.h([$APP.t.h(a),$APP.t.h($APP.Wi.g(zv,$APP.jd))].join(""))};$APP.kn.m=1;$APP.g=$APP.Oi.prototype;
  $APP.g.indexOf=function(){var a=null;a=function(b,c){switch(arguments.length){case 1:return yd(this,b,0);case 2:return yd(this,b,c)}throw Error("Invalid arity: "+arguments.length);};a.h=function(b){return yd(this,b,0)};a.g=function(b,c){return yd(this,b,c)};return a}();
  $APP.g.lastIndexOf=function(){function a(c){return zd(this,c,$APP.xd(this))}var b=null;b=function(c,d){switch(arguments.length){case 1:return a.call(this,c);case 2:return zd(this,c,d)}throw Error("Invalid arity: "+arguments.length);};b.h=a;b.g=function(c,d){return zd(this,c,d)};return b}();$APP.g.Da=function(){var a=sf(this.Jd);return Cf(this.Od,a,false)};$APP.g.Y=function(){return $APP.x($APP.S.g(this.Od,this.Jd))};$APP.g.Ha=function(a,b){return $APP.Xu.j(this.Od,$APP.Wu.h(b),this.Jd)};
  $APP.g.Ia=function(a,b,c){return $APP.Xu.A(this.Od,$APP.Wu.h(b),c,this.Jd)};$APP.g.R=function(a,b,c){return $APP.ni(b,$APP.ti,"("," ",")",c,this)};$APP.Oi.prototype[Yc]=function(){return ed(this)};$APP.Av=function Av(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Av.l(arguments[0],1<c.length?new $APP.Xc(c.slice(1),0,null):null)};
  $APP.Av.l=function(a,b){b=$APP.jf(b);var c=$APP.fe.j(b,Bv,$APP.ai),d=function k(f){if(null==f)return null;if(null!=f?$APP.Oc===f.af||(f.wd?0:$APP.cb(Pi,f)):$APP.cb(Pi,f))return Qi(f);if(f instanceof $APP.I)return c.h?c.h(f):c.call(null,f);if(f instanceof $APP.w)return $APP.t.h(f);if($APP.Vd(f)){var l={};f=$APP.x(f);for(var m=null,h=0,q=0;;)if(q<h){var p=m.ba(null,q),v=$APP.B.j(p,0,null);p=$APP.B.j(p,1,null);v=Si(v,d);p=k(p);l[v]=p;q+=1;}else if(f=$APP.x(f))$APP.Zd(f)?(h=$APP.uc(f),f=$APP.vc(f),m=h,
  h=$APP.xd(h)):(h=$APP.y(f),m=$APP.B.j(h,0,null),h=$APP.B.j(h,1,null),m=Si(m,d),h=k(h),l[m]=h,f=$APP.z(f),m=null,h=0),q=0;else break;return l}if($APP.Rd(f)){l=[];f=$APP.x($APP.ui.g(k,f));m=null;for(q=h=0;;)if(q<h)v=m.ba(null,q),l.push(v),q+=1;else if(f=$APP.x(f))m=f,$APP.Zd(m)?(f=$APP.uc(m),q=$APP.vc(m),m=f,h=$APP.xd(f),f=q):(f=$APP.y(m),l.push(f),f=$APP.z(m),m=null,h=0),q=0;else break;return l}return f};return d(a)};$APP.Av.m=1;$APP.Av.o=function(a){var b=$APP.y(a);a=$APP.z(a);return this.l(b,a)};
  $APP.Fu=function Fu(a){switch(arguments.length){case 1:return Fu.h(arguments[0]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Fu.l(arguments[0],new $APP.Xc(c.slice(1),0,null))}};$APP.Fu.h=function(a){return $APP.Fu.l(a,$APP.F([$APP.Gu,false]))};
  $APP.Fu.l=function(a,b){var c=$APP.jf(b);c=$APP.fe.g(c,$APP.Gu);var d=$APP.r(c)?$APP.vi:$APP.t;return function k(f){return (null!=f?$APP.Oc===f.Mf||(f.wd?0:$APP.cb(Ti,f)):$APP.cb(Ti,f))?Ui(f,$APP.Gf.g($APP.Fo,b)):$APP.be(f)?$APP.Om.h($APP.ui.g(k,f)):$APP.hg(f)?new $APP.Ig(k($APP.Gb(f)),k($APP.Hb(f)),null):$APP.Rd(f)?$APP.Rg.j($APP.Hd(f),$APP.ui.h(k),f):$APP.Xa(f)?$APP.oc($APP.ne.j(function(l,m){return $APP.fg.g(l,k(m))},$APP.mc($APP.kg),f)):$APP.eb(f)===Object?$APP.oc($APP.ne.j(function(l,m){return $APP.Ug.j(l,
  d.h?d.h(m):d.call(null,m),k($APP.wa(f,m)))},$APP.mc($APP.hf),$APP.va(f))):f}(a)};$APP.Fu.o=function(a){var b=$APP.y(a);a=$APP.z(a);return this.l(b,a)};$APP.Fu.m=1;cj=null;$APP.Cv=function Cv(a){switch(arguments.length){case 2:return Cv.g(arguments[0],arguments[1]);case 3:return Cv.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.Cv.g=function(a,b){a=$APP.F([a,b]);$APP.Gf.A($APP.Wi,$APP.dj(),$APP.Cv,a);return null};
  $APP.Cv.j=function(a,b,c){function d(l,m,h,q,p){return $APP.ne.j(function(v,D){return $APP.Rh.j(v,D,$APP.ne.j($APP.De,$APP.fe.j(p,D,$APP.Vh),$APP.He(q,p.h?p.h(q):p.call(null,q))))},l,$APP.He(m,h.h?h.h(m):h.call(null,m)))}var e=$APP.Zi.h(a),f=$APP.$i.h(a),k=$APP.aj.h(a);if($APP.he(e.h?e.h(b):e.call(null,b),c))b=null;else {if($APP.he(k.h?k.h(b):k.call(null,b),c))throw Error([$APP.t.h(b),"already has",$APP.t.h(c),"as ancestor"].join(""));if($APP.he(k.h?k.h(c):k.call(null,c),b))throw Error(["Cyclic derivation:",
  $APP.t.h(c),"has",$APP.t.h(b),"as ancestor"].join(""));b=new $APP.n(null,3,[$APP.Zi,$APP.Rh.j($APP.Zi.h(a),b,$APP.De.g($APP.fe.j(e,b,$APP.Vh),c)),$APP.aj,d($APP.aj.h(a),b,f,c,k),$APP.$i,d($APP.$i.h(a),c,k,b,f)],null);}return $APP.r(b)?b:a};$APP.Cv.m=3;
  $APP.ij=function ij(a,b,c){var e=function(){var f=$APP.u(c);return f.h?f.h(a):f.call(null,a)}();e=$APP.r($APP.r(e)?e.h?e.h(b):e.call(null,b):e)?true:null;if($APP.r(e))return e;e=function(){for(var f=gj(b);;)if(0<$APP.xd(f)){var k=$APP.y(f);ij.j?ij.j(a,k,c):ij.call(null,a,k,c);f=$APP.cd(f);}else return null}();if($APP.r(e))return e;e=function(){for(var f=gj(a);;)if(0<$APP.xd(f)){var k=$APP.y(f);ij.j?ij.j(k,b,c):ij.call(null,k,b,c);f=$APP.cd(f);}else return null}();return $APP.r(e)?e:false};
  Dv=function Dv(a,b,c,d,e,f,k,l){var h=$APP.ne.j(function(p,v){var D=$APP.B.j(v,0,null);$APP.B.j(v,1,null);if($APP.ej($APP.u(c),b,D)){p=null==p||jj(D,$APP.y(p),e,$APP.u(c))?v:p;if(!jj($APP.y(p),D,e,$APP.u(c)))throw Error(["Multiple methods in multimethod '",$APP.t.h(a),"' match dispatch value: ",$APP.t.h(b)," -\x3e ",$APP.t.h(D)," and ",$APP.t.h($APP.y(p)),", and neither is preferred"].join(""));return p}return p},null,$APP.u(d)),q=function(){var p;if(p=null==h)p=$APP.u(d),p=p.h?p.h(l):p.call(null,
  l);return $APP.r(p)?new $APP.J(null,2,5,$APP.N,[l,p],null):h}();if($APP.r(q)){if($APP.A.g($APP.u(k),$APP.u(c)))return $APP.Wi.A(f,$APP.Rh,b,$APP.Cd(q)),$APP.Cd(q);$APP.hj(f,d,k,c);return Dv.oa?Dv.oa(a,b,c,d,e,f,k,l):Dv.call(null,a,b,c,d,e,f,k,l)}return null};$APP.g=$APP.mj.prototype;
  $APP.g.call=function(a){switch(arguments.length-1){case 0:return this.v();case 1:return this.h(arguments[1]);case 2:return this.g(arguments[1],arguments[2]);case 3:return this.j(arguments[1],arguments[2],arguments[3]);case 4:return this.A(arguments[1],arguments[2],arguments[3],arguments[4]);case 5:return this.J(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);case 6:return this.fa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6]);case 7:return this.Aa(arguments[1],
  arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7]);case 8:return this.oa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8]);case 9:return this.Ba(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9]);case 10:return this.qa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10]);
  case 11:return this.ra(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11]);case 12:return this.sa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12]);case 13:return this.ta(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],
  arguments[11],arguments[12],arguments[13]);case 14:return this.ua(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14]);case 15:return this.va(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15]);case 16:return this.wa(arguments[1],
  arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16]);case 17:return this.xa(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17]);case 18:return this.ya(arguments[1],arguments[2],
  arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18]);case 19:return this.za(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19]);case 20:return this.$a(arguments[1],
  arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],arguments[18],arguments[19],arguments[20]);case 21:return this.sc(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15],arguments[16],arguments[17],
  arguments[18],arguments[19],arguments[20],arguments[21]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length-1)].join(""));}};$APP.g.apply=function(a,b){return this.call.apply(this,[this].concat($APP.hb(b)))};$APP.g.v=function(){var a=this.P.v?this.P.v():this.P.call(null),b=this.cb(null,a);$APP.r(b)||lj(this.name,a);return b.v?b.v():b.call(null)};
  $APP.g.h=function(a){var b=this.P.h?this.P.h(a):this.P.call(null,a),c=this.cb(null,b);$APP.r(c)||lj(this.name,b);return c.h?c.h(a):c.call(null,a)};$APP.g.g=function(a,b){var c=this.P.g?this.P.g(a,b):this.P.call(null,a,b),d=this.cb(null,c);$APP.r(d)||lj(this.name,c);return d.g?d.g(a,b):d.call(null,a,b)};$APP.g.j=function(a,b,c){var d=this.P.j?this.P.j(a,b,c):this.P.call(null,a,b,c),e=this.cb(null,d);$APP.r(e)||lj(this.name,d);return e.j?e.j(a,b,c):e.call(null,a,b,c)};
  $APP.g.A=function(a,b,c,d){var e=this.P.A?this.P.A(a,b,c,d):this.P.call(null,a,b,c,d),f=this.cb(null,e);$APP.r(f)||lj(this.name,e);return f.A?f.A(a,b,c,d):f.call(null,a,b,c,d)};$APP.g.J=function(a,b,c,d,e){var f=this.P.J?this.P.J(a,b,c,d,e):this.P.call(null,a,b,c,d,e),k=this.cb(null,f);$APP.r(k)||lj(this.name,f);return k.J?k.J(a,b,c,d,e):k.call(null,a,b,c,d,e)};
  $APP.g.fa=function(a,b,c,d,e,f){var k=this.P.fa?this.P.fa(a,b,c,d,e,f):this.P.call(null,a,b,c,d,e,f),l=this.cb(null,k);$APP.r(l)||lj(this.name,k);return l.fa?l.fa(a,b,c,d,e,f):l.call(null,a,b,c,d,e,f)};$APP.g.Aa=function(a,b,c,d,e,f,k){var l=this.P.Aa?this.P.Aa(a,b,c,d,e,f,k):this.P.call(null,a,b,c,d,e,f,k),m=this.cb(null,l);$APP.r(m)||lj(this.name,l);return m.Aa?m.Aa(a,b,c,d,e,f,k):m.call(null,a,b,c,d,e,f,k)};
  $APP.g.oa=function(a,b,c,d,e,f,k,l){var m=this.P.oa?this.P.oa(a,b,c,d,e,f,k,l):this.P.call(null,a,b,c,d,e,f,k,l),h=this.cb(null,m);$APP.r(h)||lj(this.name,m);return h.oa?h.oa(a,b,c,d,e,f,k,l):h.call(null,a,b,c,d,e,f,k,l)};$APP.g.Ba=function(a,b,c,d,e,f,k,l,m){var h=this.P.Ba?this.P.Ba(a,b,c,d,e,f,k,l,m):this.P.call(null,a,b,c,d,e,f,k,l,m),q=this.cb(null,h);$APP.r(q)||lj(this.name,h);return q.Ba?q.Ba(a,b,c,d,e,f,k,l,m):q.call(null,a,b,c,d,e,f,k,l,m)};
  $APP.g.qa=function(a,b,c,d,e,f,k,l,m,h){var q=this.P.qa?this.P.qa(a,b,c,d,e,f,k,l,m,h):this.P.call(null,a,b,c,d,e,f,k,l,m,h),p=this.cb(null,q);$APP.r(p)||lj(this.name,q);return p.qa?p.qa(a,b,c,d,e,f,k,l,m,h):p.call(null,a,b,c,d,e,f,k,l,m,h)};$APP.g.ra=function(a,b,c,d,e,f,k,l,m,h,q){var p=this.P.ra?this.P.ra(a,b,c,d,e,f,k,l,m,h,q):this.P.call(null,a,b,c,d,e,f,k,l,m,h,q),v=this.cb(null,p);$APP.r(v)||lj(this.name,p);return v.ra?v.ra(a,b,c,d,e,f,k,l,m,h,q):v.call(null,a,b,c,d,e,f,k,l,m,h,q)};
  $APP.g.sa=function(a,b,c,d,e,f,k,l,m,h,q,p){var v=this.P.sa?this.P.sa(a,b,c,d,e,f,k,l,m,h,q,p):this.P.call(null,a,b,c,d,e,f,k,l,m,h,q,p),D=this.cb(null,v);$APP.r(D)||lj(this.name,v);return D.sa?D.sa(a,b,c,d,e,f,k,l,m,h,q,p):D.call(null,a,b,c,d,e,f,k,l,m,h,q,p)};
  $APP.g.ta=function(a,b,c,d,e,f,k,l,m,h,q,p,v){var D=this.P.ta?this.P.ta(a,b,c,d,e,f,k,l,m,h,q,p,v):this.P.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v),H=this.cb(null,D);$APP.r(H)||lj(this.name,D);return H.ta?H.ta(a,b,c,d,e,f,k,l,m,h,q,p,v):H.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v)};
  $APP.g.ua=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D){var H=this.P.ua?this.P.ua(a,b,c,d,e,f,k,l,m,h,q,p,v,D):this.P.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D),O=this.cb(null,H);$APP.r(O)||lj(this.name,H);return O.ua?O.ua(a,b,c,d,e,f,k,l,m,h,q,p,v,D):O.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D)};
  $APP.g.va=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H){var O=this.P.va?this.P.va(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H):this.P.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H),P=this.cb(null,O);$APP.r(P)||lj(this.name,O);return P.va?P.va(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H):P.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H)};
  $APP.g.wa=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O){var P=this.P.wa?this.P.wa(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O):this.P.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O),W=this.cb(null,P);$APP.r(W)||lj(this.name,P);return W.wa?W.wa(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O):W.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O)};
  $APP.g.xa=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P){var W=this.P.xa?this.P.xa(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P):this.P.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P),ca=this.cb(null,W);$APP.r(ca)||lj(this.name,W);return ca.xa?ca.xa(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P):ca.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P)};
  $APP.g.ya=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W){var ca=this.P.ya?this.P.ya(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W):this.P.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W),ha=this.cb(null,ca);$APP.r(ha)||lj(this.name,ca);return ha.ya?ha.ya(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W):ha.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W)};
  $APP.g.za=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca){var ha=this.P.za?this.P.za(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca):this.P.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca),oa=this.cb(null,ha);$APP.r(oa)||lj(this.name,ha);return oa.za?oa.za(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca):oa.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca)};
  $APP.g.$a=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha){var oa=this.P.$a?this.P.$a(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha):this.P.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha),pa=this.cb(null,oa);$APP.r(pa)||lj(this.name,oa);return pa.$a?pa.$a(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha):pa.call(null,a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha)};
  $APP.g.sc=function(a,b,c,d,e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha,oa){var pa=$APP.Gf.l(this.P,a,b,c,d,$APP.F([e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha,oa])),fa=this.cb(null,pa);$APP.r(fa)||lj(this.name,pa);return $APP.Gf.l(fa,a,b,c,d,$APP.F([e,f,k,l,m,h,q,p,v,D,H,O,P,W,ca,ha,oa]))};$APP.g.$d=ba(12);$APP.g.be=ba(13);$APP.g.Zd=ba(14);$APP.g.ae=ba(15);$APP.g.N=function(a,b,c){$APP.Wi.A(this.Ac,$APP.Rh,b,c);$APP.hj(this.Tc,this.Ac,this.Nc,this.ed);return this};$APP.g.ce=ba(16);
  $APP.g.cb=function(a,b){$APP.A.g($APP.u(this.Nc),$APP.u(this.ed))||$APP.hj(this.Tc,this.Ac,this.Nc,this.ed);a=$APP.u(this.Tc);a=a.h?a.h(b):a.call(null,b);return $APP.r(a)?a:Dv(this.name,b,this.ed,this.Ac,this.Dd,this.Tc,this.Nc,this.nf)};$APP.g.Yc=function(){return wc(this.name)};$APP.g.Zc=function(){return xc(this.name)};$APP.g.$=function(){return $APP.na(this)};$APP.g=$APP.nj.prototype;$APP.g.Ge=$APP.Oc;$APP.g.toString=function(){return this.Vc};
  $APP.g.Z=function(a,b){return (a=null!=b?$APP.Oc===b.Ge?true:false:false)?this.Vc===b.Vc:a};$APP.g.R=function(a,b){return $APP.ic(b,['#uuid "',$APP.t.h(this.Vc),'"'].join(""))};$APP.g.$=function(){null==this.F&&(this.F=$APP.Pc(this.Vc));return this.F};$APP.g.cc=function(a,b){if(b instanceof $APP.nj)return $APP.Ba(this.Vc,b.Vc);throw Error(["Cannot compare ",$APP.t.h(this)," to ",$APP.t.h(b)].join(""));};$APP.oj.prototype.__proto__=Error.prototype;$APP.oj.prototype.ja=$APP.Oc;
  $APP.oj.prototype.R=function(a,b,c){$APP.ic(b,"#error {:message ");$APP.ti(this.message,b,c);$APP.r(this.data)&&($APP.ic(b,", :data "),$APP.ti(this.data,b,c));$APP.r(this.cause)&&($APP.ic(b,", :cause "),$APP.ti(this.cause,b,c));return $APP.ic(b,"}")};$APP.oj.prototype.toString=function(){return $APP.Dc(this)};
  $APP.cl=function cl(a){switch(arguments.length){case 2:return cl.g(arguments[0],arguments[1]);case 3:return cl.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.cl.g=function(a,b){return $APP.cl.j(a,b,null)};$APP.cl.j=function(a,b,c){return new $APP.oj(a,b,c)};$APP.cl.m=3;
  var Sj="arguments abstract await boolean break byte case catch char class const continue debugger default delete do double else enum export extends final finally float for function goto if implements import in instanceof int interface let long native new package private protected public return short static super switch synchronized this throw throws transient try typeof var void volatile while with yield methods null constructor".split(" "),Rj=null;"undefined"!==typeof console&&Wa();Wa();var Ev,Gv,Yk,eu,Iv,Jv,Kv,An,xq,zp,Pv,Qv,Sv,zm,Zv,$v,Zk,bw,In,dw,ew,hw,oq,jw,mw,fo,nw,Vr,jr,ow,pw,qw,rw,xw,Sr,zq,zw,Bw,Cw,Ew,Aj,ku,Jw,Lw,lu,xs,xm,fp,Nw,Ow,qp,Pw,Qw,Sw,hr$1,yt,Ro,Xw,Cs,cn,no,Yw,Zw,xr,dx,fx,Qq,hx,kx,ms,nx,up,px,sx,Di,ux,vx,gl,Jn,lt,wx,yx,zx,At,Bx,Cx,Jx,Fr,Bn,Jt,Pq,ds,Mx,st,Px,iq,ws,Qx,Sx,Tx,Xx,Qo,Yx,$x,el,Xm,dy,fy,Vm,Zq,hy,jy,ky,oy,$m,qy,sy,uy,vy,wy,xy,yy,js,zy,xp,Dy,Ey,Gy,is,jn,Iy,ko,Ky,Ly,My,au,wp,Oy,Py,Qy,Ry,Sy,Ty,un,Ep,Wy,Xy,it,Zy,$y,Gj,az,cz,dz,fz,hz,os,iz,kz,Zs,lz,mz,Wp,pz,yp,Bs,
  sz,uz,vz,wz,Np,xz,nt,zu,Bz,Cz,Dz,om,St,Fz,Gz,Hz,Kz,Lz,Bp,hq,on,Qz,rp,Rz,Pa,Uz,Vz,Fp,Yz,Zz,$z,fs,aA,Yp,eA,hA,gs,Zr,lA,mA,oA,pA,qA,rA,Rm,vp,wA,yA,Vn,BA,CA,DA,et,EA,qn,Rr,GA,HA,IA,KA,Fn,sp,kt,MA,Mq,OA,PA,UA,XA,mi,ZA,aB,wj,bB,cB,dt,eB,Rp,fB,iB,iu,nB,oB,pB,$t,rB,sB,tB,uB,wB,xB,zB,EB,bl,$r,op,HB,LB,OB,ou,QB,Ft,RB,SB,TB,VB,ot,Uo,XB,wn,ep,Bu,Aq,$B,aC,cC,dC,eC,hC,iC,jC,kC,mC,nC,oC,zo,sC,uC,vC,tr,wC,zC,BC,CC,DC,EC,FC,GC,HC,IC,JC,LC,MC,as,nu,vo,Tp,NC,PC,QC,SC,Ph,WC,vt,YC,ZC,$C,Iu,aD,bD,cD,dD,fD,gD,Er,Ap,iD,
  dn,io,Lp,Hu,nD,zt,qD,Sn,sD,uD,yD,Ci,dr,BD,FD,GD,HD,ID,KD,Cq,LD,MD,Ma,PD,RD,wu,SD,TD,VD,jt,WD,ut,Iq,Ej,YD,ZD,aE,bE,dE,eE,fE,gE,hE,ks,jE,Zo,Rn,nE,pE,No,qE,rE,fn,er,wt,hs,tE,ym,Hn,uq,BE,CE,DE,EE,GE,HE,IE,LE,ME,$s,NE,RE,SE,Ka,TE,Bo,np,UE,nn,tp,WE,XE,rs,sj,$E,Uq,bF,cF,fF,rr,gF,Hp,lF,mF,an,nF,Yr,oF,mu,Bv,wr,pF,qF,rF,uF,Yo,Gp,AF,bv,BF,Qn,Tr,vn,en,Dt,Vl,MF,NF,PF,vm,QF,RF,SF,TF,xt,pn,pt,VF,WF,XF,ju,ZF,gt,zr,cG,dG;Ev=new $APP.I(null,"nil","nil",99600501);
  $APP.Fv=new $APP.w(null,"extend-protocol","extend-protocol",306378578,null);Gv=new $APP.w(null,"IWatchable","IWatchable",-1929659016,null);Yk=new $APP.I(null,"reader-exception","reader-exception",-1938323098);$APP.Hv=new $APP.w(null,"filterv","filterv",1977739179,null);eu=new $APP.w("clojure.core","unchecked-set","clojure.core/unchecked-set",727576206,null);Iv=new $APP.w(null,"html","html",641734630,null);Jv=new $APP.w(null,"even_QMARK_","even_QMARK_",-1748409544,null);
  Kv=new $APP.w(null,"++","++",1620685567,null);An=new $APP.I(null,"row","row",-570139521);$APP.Lv=new $APP.w(null,"hash-map","hash-map",-439030950,null);xq=new $APP.I(null,"html","html",-998796897);zp=new $APP.w(null,"constructor","constructor",-313397284,null);$APP.Mv=new $APP.w(null,"apply","apply",-1334050276,null);$APP.Nv=new $APP.w(null,"when-let","when-let",-1383043480,null);$APP.tq=new $APP.w(null,"cljs.core","cljs.core",770546058,null);$APP.Ov=new $APP.w(null,"start","start",1285322546,null);
  Pv=new $APP.w(null,"sort_by","sort_by",699596,null);Qv=new $APP.I("squint.compiler","skip-var","squint.compiler/skip-var",558973388);$APP.Rv=new $APP.w(null,"-\x3e\x3e","-\x3e\x3e",-1874332161,null);Sv=new $APP.w(null,"--","--",234022703,null);$APP.Tv=new $APP.w(null,"merge","merge",-163787882,null);$APP.to=new $APP.I(null,"current","current",-1088038603);$APP.uu=new $APP.I(null,"elide-exports","elide-exports",-1195503870);$APP.Uv=new $APP.w(null,"letfn","letfn",-480490827,null);
  $APP.Vv=new $APP.w(null,"-\x3e","-\x3e",-2139605430,null);zm=new $APP.w(null,"Inf","Inf",647172781,null);$APP.dp=new $APP.I(null,"all","all",892129742);$APP.Wv=new $APP.w(null,"nil?","nil?",1612038930,null);$APP.Xv=new $APP.w(null,"cat","cat",182721320,null);$APP.Yv=new $APP.w(null,"..","..",-300507420,null);Zv=new $APP.w(null,"read-char*","read-char*",1494526523,null);$v=new $APP.w(null,"regexp_QMARK_","regexp_QMARK_",2006333779,null);$APP.Dm=new $APP.I(null,"default","default",-1987822328);
  $APP.aw=new $APP.w(null,"nnext","nnext",-2065435598,null);Zk=new $APP.I(null,"ex-kind","ex-kind",1581199296);bw=new $APP.w(null,"temp__23764__auto__","temp__23764__auto__",143269277,null);In=new $APP.I("edamame","opened-delimiter","edamame/opened-delimiter",-1906008305);$APP.cw=new $APP.I("cljs.core","none","cljs.core/none",926646439);dw=new $APP.w("cljs.reader","read-date","cljs.reader/read-date",1663417238,null);ew=new $APP.w("js","typeof","js/typeof",-138051311,null);
  $APP.fw=new $APP.w(null,"unreduced","unreduced",780976083,null);$APP.gw=new $APP.w(null,"opts","opts",1795607228,null);hw=new $APP.w(null,"initch","initch",946908919,null);oq=new $APP.w("cljs.core","js-reserved?","cljs.core/js-reserved?",1729717326,null);$APP.iw=new $APP.w(null,"first","first",996428481,null);jw=new $APP.w("cljs.tools.reader.impl.commons","parse-symbol","cljs.tools.reader.impl.commons/parse-symbol",-903976395,null);$APP.kw=new $APP.w(null,"fnil","fnil",-187395162,null);
  $APP.lw=new $APP.w(null,"reduced","reduced",-1189224808,null);$APP.Vo=new $APP.I(null,"location?","location?",425878086);mw=new $APP.w(null,"clj__GT_js","clj__GT_js",1255724572,null);fo=new $APP.I("edamame.impl.parser","suppress","edamame.impl.parser/suppress",1718484755);nw=new $APP.I(null,"skip-protocol-flag","skip-protocol-flag",-1426798630);Vr=new $APP.I("squint.internal.fn","def","squint.internal.fn/def",1620159185);$APP.qs=new $APP.w("cljs.core","nil?","cljs.core/nil?",945071861,null);
  jr=new $APP.I("squint.compiler","no-rename","squint.compiler/no-rename",1931615390);ow=new $APP.w(null,"defined?","defined?",-1954383182,null);pw=new $APP.w("clojure.core","let","clojure.core/let",-407137853,null);qw=new $APP.w(null,"re_find","re_find",609069882,null);$APP.il=new $APP.I(null,"eof","eof",-489063237);rw=new $APP.w(null,"map_indexed","map_indexed",509587324,null);$APP.sw=new $APP.w(null,"neg?","neg?",-1902175577,null);$APP.tw=new $APP.w(null,"chunk","chunk",449371907,null);
  $APP.uw=new $APP.w(null,"if-let","if-let",1803593690,null);xw=new $APP.w(null,"INext","INext",562211849,null);$APP.yw=new $APP.w(null,"parent","parent",761652748,null);Sr=new $APP.I(null,"recur-callback","recur-callback",-851923082);zq=new $APP.I(null,"jsx-runtime","jsx-runtime",1459461075);zw=new $APP.w(null,"update_keys","update_keys",771308870,null);$APP.Aw=new $APP.w(null,"not-native","not-native",-236392494,null);Bw=new $APP.w(null,"exists?","exists?",-1239962053,null);
  Cw=new $APP.w(null,"ex_info","ex_info",-1969144843,null);$APP.Dw=new $APP.w("js","Number","js/Number",-508133572,null);Ew=new $APP.w("squint.impl","defonce","squint.impl/defonce",1902395273,null);$APP.Fw=new $APP.I(null,"post","post",269697687);$APP.Gw=new $APP.w(null,"pos?","pos?",-244377722,null);$APP.tn=new $APP.I(null,"col-key","col-key",-2009675766);$APP.Hw=new $APP.w(null,"array","array",-440182315,null);Aj=new $APP.w(null,"letfn*","letfn*",-110097810,null);
  ku=new $APP.I("squint.compiler-common","vector","squint.compiler-common/vector",654821743);$APP.Zi=new $APP.I(null,"parents","parents",-2027538891);$APP.Iw=new $APP.w(null,"bit-shift-left","bit-shift-left",-1814765981,null);Jw=new $APP.w(null,"unchecked-set","unchecked-set",-986164507,null);$APP.Kw=new $APP.w(null,"atom","atom",1243487874,null);Lw=new $APP.w("cljs.core","unsafe-bit-and","cljs.core/unsafe-bit-and",2116762989,null);
  lu=new $APP.I("squint.compiler-common","map","squint.compiler-common/map",-413188800);xs=new $APP.w(null,".-prototype",".-prototype",-1562038608,null);$APP.Mw=new $APP.w(null,"defmacro","defmacro",2054157304,null);xm=new $APP.w(null,"NaN","NaN",666918153,null);fp=new $APP.I(null,"end-col","end-col",-724155879);Nw=new $APP.w(null,"remove_watch","remove_watch",443108176,null);Ow=new $APP.w(null,"___24420__auto__","___24420__auto__",1712819460,null);qp=new $APP.I(null,"fields","fields",-1932066230);
  Pw=new $APP.w(null,"update_vals","update_vals",1293429772,null);Qw=new $APP.w(null,"ret__24170__auto__","ret__24170__auto__",-521225083,null);$APP.Rw=new $APP.w(null,"bit-set","bit-set",-910710655,null);Sw=new $APP.w(null,"seqable_QMARK_","seqable_QMARK_",858236136,null);$APP.Tw=new $APP.I(null,"ready","ready",1086465795);$APP.Uw=new $APP.w(null,"IRecord","IRecord",-903221169,null);$APP.V=new $APP.I(null,"arglists","arglists",1661989754);hr$1=new $APP.I(null,"gensym","gensym",961288368);
  $APP.Vw=new $APP.w(null,"when-first","when-first",821699168,null);$APP.Ww=new $APP.w(null,"writer","writer",1362963291,null);$APP.qq=new $APP.I(null,"end-column","end-column",1425389514);yt=new $APP.w("cljs.core","case","cljs.core/case",-1674122212,null);$APP.bt=new $APP.w("cljs.core","when","cljs.core/when",120293186,null);Ro=new $APP.I(null,"unquote-splicing","unquote-splicing",1295267556);Xw=new $APP.I(null,"print-fn","print-fn",-1720960489);
  Cs=new $APP.w(null,"f__24801__auto__","f__24801__auto__",1584930175,null);cn=new $APP.w("clojure.core","sequence","clojure.core/sequence",1998774218,null);no=new $APP.I(null,"expr","expr",745722291);Yw=new $APP.w(null,"delete","delete",-128102093,null);Zw=new $APP.w(null,"tree_seq","tree_seq",-292210872,null);xr=new $APP.w(null,"cljs.walk","cljs.walk",1436886822,null);$APP.Lq=new $APP.w(null,"bit-or","bit-or",-1144943723,null);$APP.$w=new $APP.w("js","Boolean","js/Boolean",1661145260,null);
  $APP.ax=new $APP.w(null,"find","find",2136810983,null);$APP.bx=new $APP.w(null,"key","key",124488940,null);$APP.cx=new $APP.w(null,"count","count",-514511684,null);dx=new $APP.I(null,"__sym","__sym",-1216299136);$APP.ex=new $APP.w(null,"binding","binding",-2114503176,null);fx=new $APP.w(null,"PROTOCOL_SENTINEL","PROTOCOL_SENTINEL",1421964293,null);$APP.gx=new $APP.w(null,"IDeref","IDeref",1738423197,null);Qq=new $APP.w(null,"js-mod","js-mod",-143822890,null);
  hx=new $APP.w(null,"get_in","get_in",-2017012307,null);$APP.ix=new $APP.w(null,"when-some","when-some",1700415903,null);$APP.ln=new $APP.I(null,"resolve-symbol","resolve-symbol",-319166964);$APP.jx=new $APP.I(null,"exclude","exclude",-1230250334);kx=new $APP.w(null,"IMapEntry","IMapEntry",-943754199,null);ms=new $APP.I("squint.compiler-common","js","squint.compiler-common/js",-1329727070);$APP.lx=new $APP.w(null,"sort","sort",-1700969851,null);$APP.mx=new $APP.w(null,"juxt","juxt",671085604,null);
  nx=new $APP.w(null,"js_obj","js_obj",-2043339411,null);$APP.ox=new $APP.w("cljs.core","when-let","cljs.core/when-let",-2049838349,null);up=new $APP.w(null,"field","field",338095027,null);px=new $APP.w(null,"ICounted","ICounted",-1705786327,null);$APP.Cu=new $APP.I(null,"body","body",-2049205669);$APP.qx=new $APP.w(null,"alength","alength",-1268305401,null);$APP.rx=new $APP.I(null,"mode","mode",654403691);sx=new $APP.w(null,"sequential_QMARK_","sequential_QMARK_",-1333045469,null);
  Di=new $APP.I(null,"fallback-impl","fallback-impl",-1501286995);$APP.U=new $APP.I(null,"name","name",1843675177);$APP.tx=new $APP.w(null,"into","into",1489695498,null);ux=new $APP.w(null,"iterable","iterable",2103761705,null);vx=new $APP.w(null,"IWriter","IWriter",-1681087107,null);gl=new $APP.I(null,"illegal-argument","illegal-argument",-1845493170);Jn=new $APP.I("edamame","opened-delimiter-loc","edamame/opened-delimiter-loc",443885208);
  lt=new $APP.w(null,"-cljs$lang$applyTo","-cljs$lang$applyTo",-225535181,null);$APP.Gu=new $APP.I(null,"keywordize-keys","keywordize-keys",1310784252);wx=new $APP.w(null,"ITransientSet","ITransientSet",-575559912,null);$APP.xx=new $APP.w(null,"inst","inst",-2008473268,null);yx=new $APP.w(null,"ex_message","ex_message",1591693397,null);$APP.mo=new $APP.I(null,"auto-resolve","auto-resolve",1851201983);zx=new $APP.w(null,"IComparable","IComparable",1834481627,null);
  $APP.Ss=new $APP.w("cljs.core","next","cljs.core/next",-1291438473,null);$APP.Mk=new $APP.I(null,"buffer","buffer",617295198);At=new $APP.w(null,".slice",".slice",1874048374,null);$APP.Kp=new $APP.I(null,"context","context",-830191113);$APP.Ax=new $APP.w(null,"dissoc","dissoc",1039760994,null);Bx=new $APP.w(null,"rand_nth","rand_nth",1623653342,null);Cx=new $APP.w(null,"coercive-\x3d","coercive-\x3d",-531587302,null);$APP.Dx=new $APP.I(null,"const","const",1709929842);
  $APP.Ex=new $APP.w(null,"meta","meta",-1154898805,null);$APP.Fx=new $APP.w(null,"reader","reader",1810192380,null);$APP.Gx=new $APP.I(null,"indent","indent",-148200125);$APP.$i=new $APP.I(null,"descendants","descendants",1824886031);$APP.Hx=new $APP.w(null,"str","str",-1564826950,null);$APP.Ix=new $APP.w(null,"IPrintWithWriter","IPrintWithWriter",-1205316154,null);Jx=new $APP.w(null,"take_nth","take_nth",648512948,null);$APP.Wo=new $APP.I(null,"end-location","end-location",-1199449467);
  Fr=new $APP.w(null,"cherry.core","cherry.core",177104171,null);Bn=new $APP.I("edamame","error","edamame/error",882529634);Jt=new $APP.w(null,"argseq__25560__auto__","argseq__25560__auto__",-1143194310,null);$APP.yv=new $APP.I(null,"val","val",128701612);Pq=new $APP.w(null,"!\x3d","!\x3d",-201205829,null);$APP.xo=new $APP.I(null,"var","var",-769682797);$APP.Kx=new $APP.w(null,"get","get",-971253014,null);ds=new $APP.I(null,"squint","squint",-1952451259);
  $APP.Lx=new $APP.w(null,"step","step",-1365547645,null);Mx=new $APP.w(null,"some_QMARK_","some_QMARK_",-214703836,null);$APP.Nx=new $APP.w(null,"dispatch-fn","dispatch-fn",-1401088155,null);$APP.As=new $APP.w("cljs.core","let","cljs.core/let",-308701135,null);$APP.Ox=new $APP.w(null,"remove","remove",1509103113,null);st=new $APP.I(null,"variadic?","variadic?",584179762);Px=new $APP.w(null,"merge_with","merge_with",20101578,null);iq=new $APP.I(null,"bool","bool",1444635321);
  $APP.Ga=new $APP.I(null,"flush-on-newline","flush-on-newline",-151457939);ws=new $APP.w("cljs.core","unchecked-set","cljs.core/unchecked-set",763360576,null);Qx=new $APP.w(null,"false_QMARK_","false_QMARK_",-254976901,null);$APP.Rx=new $APP.w(null,"iterate","iterate",694501410,null);Sx=new $APP.w(null,"backslash","backslash",-863649243,null);Tx=new $APP.w("cljs.core","bit-and-not","cljs.core/bit-and-not",-929778682,null);$APP.Ux=new $APP.w(null,"mapv","mapv",-241595241,null);
  $APP.Vx=new $APP.w(null,"deref","deref",1494944732,null);$APP.Wx=new $APP.w(null,"loop","loop",1244978678,null);Xx=new $APP.w(null,"conj_BANG_","conj_BANG_",-1018121346,null);Qo=new $APP.I(null,"unquote","unquote",1649741032);Yx=new $APP.w(null,"split_at","split_at",1134798837,null);$APP.bq=new $APP.w(null,"boolean","boolean",-278886877,null);$APP.Zx=new $APP.w(null,"vector","vector",-751469611,null);$x=new $APP.w(null,"re_seq","re_seq",1123436469,null);
  $APP.ay=new $APP.w(null,"butlast","butlast",1573039585,null);$APP.by=new $APP.w(null,"tag","tag",350170304,null);$APP.cy=new $APP.w(null,"unquote","unquote",-1004694737,null);el=new $APP.I(null,"reader-error","reader-error",1610253121);Xm=new $APP.w(null,"%\x26","%\x26",-728707069,null);dy=new $APP.w(null,"coercive-not\x3d","coercive-not\x3d",-1445527958,null);$APP.ey=new $APP.w(null,"bit-not","bit-not",1508529851,null);fy=new $APP.w(null,"IAssociative","IAssociative",-1306431882,null);
  Vm=new $APP.w(null,"%1","%1",1309450150,null);$APP.gy=new $APP.w(null,"sym","sym",195671222,null);Zq=new $APP.I(null,"core-alias","core-alias",-1316421286);hy=new $APP.w(null,"xs__23825__auto__","xs__23825__auto__",-2146284532,null);$APP.iy=new $APP.w(null,"aget","aget",1491056546,null);jy=new $APP.w(null,"and__24235__auto__","and__24235__auto__",-1136479628,null);ky=new $APP.w(null,"every_pred","every_pred",-1222255020,null);$APP.Wt=new $APP.I(null,"repl","repl",-35398667);
  $APP.lm=new $APP.I(null,"symbol","symbol",-1038572696);$APP.ly=new $APP.w(null,"comment","comment",-2122229700,null);$APP.my=new $APP.w("js","String","js/String",-2070054036,null);$APP.ny=new $APP.w(null,"doseq","doseq",221164135,null);oy=new $APP.w("cljs.core","prn","cljs.core/prn",1725204552,null);$m=new $APP.w("clojure.core","list","clojure.core/list",-1119203325,null);$APP.py=new $APP.w(null,"some-\x3e","some-\x3e",-1011172200,null);$APP.Oj=new $APP.w(null,"throw","throw",595905694,null);
  qy=new $APP.w(null,"ret__24161__auto__","ret__24161__auto__",182662224,null);$APP.ry=new $APP.I(null,"when","when",-576417306);sy=new $APP.w(null,"_LT_","_LT_",1739537095,null);$APP.ty=new $APP.w(null,"zero?","zero?",325758897,null);uy=new $APP.w(null,"IAtom","IAtom",-1411134312,null);vy=new $APP.w(null,"integer_QMARK_","integer_QMARK_",-1600763122,null);wy=new $APP.w(null,"pr_str","pr_str",-972469003,null);xy=new $APP.w(null,"group_by","group_by",1104186237,null);
  yy=new $APP.w(null,"or__24209__auto__","or__24209__auto__",-959189583,null);js=new $APP.w(null,"_jsxs","_jsxs",880585043,null);zy=new $APP.w(null,"jsx","jsx",1139510369,null);$APP.Ay=new $APP.w(null,"rest","rest",398835108,null);$APP.By=new $APP.w(null,"user","user",-1122004413,null);xp=new $APP.I(null,"field-default","field-default",-750812490);$APP.Cy=new $APP.w(null,"set","set",1945134081,null);Dy=new $APP.w(null,"not_any_QMARK_","not_any_QMARK_",-1863612970,null);
  Ey=new $APP.w("cljs.core","dotimes","cljs.core/dotimes",-1326291458,null);$APP.Hj=new $APP.w(null,"fn*","fn*",-752876845,null);$APP.Fy=new $APP.w(null,"seq","seq",-177272256,null);Gy=new $APP.w("cljs.core","bit-or","cljs.core/bit-or",1134521392,null);$APP.ap=new $APP.I(null,"dispatch","dispatch",1319337009);$APP.Pp=new $APP.I(null,"return","return",-1891502105);$APP.Hy=new $APP.w("clojure.core","cond","clojure.core/cond",1906951420,null);is=new $APP.w(null,"_jsx","_jsx",-772298145,null);
  jn=new $APP.I(null,"gensyms","gensyms",248713782);Iy=new $APP.w(null,"every_QMARK_","every_QMARK_",1506863454,null);$APP.Jy=new $APP.w("cljs.core","LazySeq","cljs.core/LazySeq",1986389673,null);ko=new $APP.I("edamame","read-cond-splicing","edamame/read-cond-splicing",-1992728777);Ky=new $APP.w(null,"ISorted","ISorted",-253627362,null);Ly=new $APP.w(null,"ITransientVector","ITransientVector",1978793164,null);My=new $APP.w(null,"const","const",-944505927,null);
  $APP.Ny=new $APP.w(null,"keep","keep",-492807003,null);$APP.ys=new $APP.w("cljs.core","fn","cljs.core/fn",-1065745098,null);au=new $APP.w("clojure.core","get","clojure.core/get",-198953213,null);$APP.yo=new $APP.I(null,"fn","fn",-1175266204);wp=new $APP.I(null,"field-name","field-name",1300687948);Oy=new $APP.w("cljs.core","bit-and","cljs.core/bit-and",-617818210,null);Py=new $APP.w(null,"system_time","system_time",67210347,null);
  Qy=new $APP.w("cljs.tools.reader.edn","escape-char","cljs.tools.reader.edn/escape-char",17562632,null);Ry=new $APP.I(null,"refer-clojure","refer-clojure",813784440);Sy=new $APP.w(null,"IMap","IMap",992876629,null);Ty=new $APP.w(null,"dec!","dec!",-564385234,null);un=new $APP.I(null,"end-row-key","end-row-key",-1126662680);Ep=new $APP.w(null,"super","super",-1813682831,null);$APP.Uy=new $APP.w(null,"defprotocol","defprotocol",1388695348,null);
  $APP.Vy=new $APP.w(null,"frequencies","frequencies",1757430425,null);Wy=new $APP.w(null,"satisfies_QMARK_","satisfies_QMARK_",529821021,null);Xy=new $APP.w(null,"contains_QMARK_","contains_QMARK_",-2136991822,null);it=new $APP.w(null,"cljs$core$IFn$_invoke$arity$variadic","cljs$core$IFn$_invoke$arity$variadic",-378825034,null);$APP.Yy=new $APP.w(null,"transduce","transduce",-2083619734,null);Zy=new $APP.w(null,"simple-benchmark","simple-benchmark",62919109,null);
  $y=new $APP.w(null,"elapsed__24422__auto__","elapsed__24422__auto__",858839739,null);$APP.Qm=new $APP.I(null,"max-fixed","max-fixed",166770124);$APP.Bt=new $APP.w("js","Error.","js/Error.",750655924,null);Gj=new $APP.w(null,"js*","js*",-1134233646,null);az=new $APP.w(null,"re_pattern","re_pattern",-626053007,null);$APP.Dr=new $APP.I(null,"as","as",1148689641);$APP.bz=new $APP.w("cljs.core","and","cljs.core/and",-6692549,null);
  cz=new $APP.w(null,"IIterable__iterator","IIterable__iterator",-115271602,null);dz=new $APP.w(null,"min_key","min_key",-609381656,null);$APP.ho=new $APP.I(null,"read-cond","read-cond",1056899244);$APP.ez=new $APP.w("js","Function","js/Function",-749892063,null);fz=new $APP.w(null,"IWithMeta","IWithMeta",-509493158,null);$APP.Fm=new $APP.I(null,"column","column",2078222095);$APP.gz=new $APP.I(null,"ok","ok",967785236);hz=new $APP.w(null,"temp__23852__auto__","temp__23852__auto__",468982148,null);
  os=new $APP.w("js","Symbol","js/Symbol",716454220,null);$APP.Os=new $APP.I(null,"or","or",235744169);iz=new $APP.w(null,"number-literal?","number-literal?",843787662,null);$APP.jz=new $APP.w(null,"xform","xform",-85179481,null);$APP.Lr=new $APP.I(null,"elide-imports","elide-imports",995471876);kz=new $APP.w(null,"_STAR_","_STAR_",-957455366,null);Zs=new $APP.w(null,"len__25182__auto__","len__25182__auto__",2025745194,null);$APP.Xo=new $APP.I(null,"obj","obj",981763962);
  lz=new $APP.w(null,"this-as","this-as",-848995740,null);mz=new $APP.w(null,"self__","self__",-153190816,null);$APP.nz=new $APP.w(null,"form","form",16469056,null);Wp=new $APP.I(null,"extend","extend",1836484006);$APP.oz=new $APP.w(null,"object","object",-1179821820,null);pz=new $APP.I(null,"internal-ctor","internal-ctor",937392560);$APP.qz=new $APP.w(null,"value","value",1946509744,null);yp=new $APP.I(null,"form","form",-1624062471);$APP.rz=new $APP.w("cljs.core","or","cljs.core/or",1201033885,null);
  Bs=new $APP.w(null,"f__24800__auto__","f__24800__auto__",-1887621005,null);sz=new $APP.w(null,"IIndexed","IIndexed",-574812826,null);$APP.tz=new $APP.w(null,"cljs.core.PersistentQueue.EMPTY","cljs.core.PersistentQueue.EMPTY",399917828,null);uz=new $APP.w(null,"_EQ_","_EQ_",1932496809,null);vz=new $APP.I(null,"nk","nk",630499145);wz=new $APP.w(null,"x__24160__auto__","x__24160__auto__",-713169858,null);Np=new $APP.I(null,"top-level","top-level",-1363225675);$APP.T=new $APP.I(null,"ns","ns",441598760);
  xz=new $APP.w(null,"ret__24419__auto__","ret__24419__auto__",-1685708446,null);$APP.yz=new $APP.w(null,"concat","concat",-467652465,null);nt=new $APP.w("cljs.core","this-as","cljs.core/this-as",623378171,null);$APP.zz=new $APP.w(null,"as-\x3e","as-\x3e",1430690540,null);zu=new $APP.I(null,"import-source","import-source",2103607889);$APP.Pk=new $APP.I(null,"source","source",-433931539);$APP.Hr=new $APP.I(null,"ns-state","ns-state",-532270771);$APP.Az=new $APP.w(null,"for","for",316745208,null);
  Bz=new $APP.w(null,"drop_last","drop_last",-68066935,null);Cz=new $APP.w(null,"parse_long","parse_long",553813175,null);Dz=new $APP.w(null,"keep_indexed","keep_indexed",-236931171,null);$APP.Ez=new $APP.w(null,"condp","condp",1054325175,null);om=new $APP.I(null,"keyword","keyword",811389747);St=new $APP.I("squint.compiler","jsx","squint.compiler/jsx",-1752137531);Fz=new $APP.w(null,"coercive-boolean","coercive-boolean",-1069860952,null);
  Gz=new $APP.w(null,"partition_by","partition_by",1282477772,null);Hz=new $APP.w(null,"map_QMARK_","map_QMARK_",-1115901774,null);$APP.Iz=new $APP.w(null,"obj","obj",-1672671807,null);$APP.yq=new $APP.I(null,"jsx","jsx",-501021158);$APP.Jz=new $APP.w(null,"bit-xor","bit-xor",-1334295033,null);Kz=new $APP.w("clojure.core","truth_","clojure.core/truth_",-13115291,null);Lz=new $APP.w(null,"true_QMARK_","true_QMARK_",-1763590423,null);$APP.Mz=new $APP.I(null,"else","else",-1508377146);
  $APP.Nz=new $APP.w(null,"defn","defn",-126010802,null);Bp=new $APP.I("xana","type","xana/type",1170598648);$APP.sm=new $APP.I(null,"set","set",304602554);$APP.Oz=new $APP.w(null,"ffirst","ffirst",-694902e3,null);hq=new $APP.I(null,"js","js",1768080579);on=new $APP.w("clojure.core","array-map","clojure.core/array-map",-1351833961,null);$APP.Pz=new $APP.w(null,"empty","empty",-1886564811,null);Qz=new $APP.w(null,"add_watch","add_watch",-168760498,null);rp=new $APP.I(null,"protocols","protocols",-5615896);
  Rz=new $APP.w(null,"!","!",1329281890,null);$APP.qj=new $APP.w(null,"\x26","\x26",-2144855648,null);$APP.Sz=new $APP.w(null,"repeat","repeat",-1821743682,null);$APP.Tz=new $APP.w(null,"%","%",-950237169,null);Pa=new $APP.I(null,"print-length","print-length",1931866356);Uz=new $APP.w(null,"partition_all","partition_all",796302116,null);$APP.Oq=new $APP.w(null,"+","+",-740910886,null);$APP.Kj=new $APP.w(null,".",".",1975675962,null);$APP.Kq=new $APP.w(null,"-","-",-471816912,null);
  $APP.mm=new $APP.w(null,"/","/",-1371932971,null);Vz=new $APP.w(null,"coercive-not","coercive-not",735107747,null);$APP.Nr=new $APP.I(null,"keys","keys",1068423698);$APP.Wz=new $APP.w(null,"IReset","IReset",-1893729426,null);$APP.Xz=new $APP.w(null,"arr","arr",2115492975,null);Fp=new $APP.w("squint.defclass","super*","squint.defclass/super*",-1969043294,null);Yz=new $APP.I("cljs.analyzer","type","cljs.analyzer/type",478749742);Zz=new $APP.w(null,".toFixed",".toFixed",-895046938,null);
  $z=new $APP.w(null,"boolean$","boolean$",714787107,null);fs=new $APP.I(null,"need-html-import","need-html-import",1444699191);aA=new $APP.w(null,"_","_",-1201019570,null);$APP.bA=new $APP.w(null,"cond-\x3e","cond-\x3e",561741875,null);$APP.cA=new $APP.w(null,"source","source",1206599988,null);$APP.dA=new $APP.w(null,"f","f",43394975,null);Yp=new $APP.w("cljs.core","extend-type","cljs.core/extend-type",2058791100,null);eA=new $APP.w(null,"partitionv_all","partitionv_all",-175161115,null);
  $APP.fA=new $APP.w(null,"m","m",-1021758608,null);$APP.gA=new $APP.w(null,"lazy-seq","lazy-seq",489632906,null);hA=new $APP.w("cljs.core","exists?","cljs.core/exists?",1852387968,null);$APP.iA=new $APP.w(null,"t","t",242699008,null);$APP.jA=new $APP.w(null,"s","s",-948495851,null);$APP.kA=new $APP.w(null,"v","v",1661996586,null);$APP.vq=new $APP.w(null,"x","x",-555367584,null);gs=new $APP.w(null,"\x3c\x3e","\x3c\x3e",-1374249383,null);Zr=new $APP.I(null,"cherry","cherry",1641761600);
  $APP.Nq=new $APP.w(null,"\x3d","\x3d",-1501502141,null);lA=new $APP.w(null,"?","?",-62633706,null);mA=new $APP.w(null,"IDerefWithTimeout","IDerefWithTimeout",2140974319,null);$APP.nA=new $APP.I(null,"hierarchy","hierarchy",-1053470341);oA=new $APP.w(null,"return","return",-250970578,null);pA=new $APP.w(null,"squint-compiler-html","squint-compiler-html",1446192351,null);$APP.Et=new $APP.w("cljs.core","alength","cljs.core/alength",-1012804190,null);
  qA=new $APP.w(null,"reduced_QMARK_","reduced_QMARK_",-1353440923,null);rA=new $APP.w(null,"squint-compiler-jsx","squint-compiler-jsx",87602781,null);$APP.sA=new $APP.w(null,"and","and",668631710,null);$APP.tA=new $APP.I(null,"allow","allow",-1857325745);Rm=new $APP.I(null,"var-args?","var-args?",-1630678710);$APP.uA=new $APP.w(null,"subs","subs",1453849536,null);$APP.vA=new $APP.w(null,"interleave","interleave",165488106,null);vp=new $APP.I(null,"field-form","field-form",337293529);
  wA=new $APP.w(null,"identical_QMARK_","identical_QMARK_",-1767761211,null);$APP.xA=new $APP.w(null,"js-delete","js-delete",170306730,null);yA=new $APP.w(null,"list_QMARK_","list_QMARK_",-1430613519,null);$APP.zA=new $APP.w(null,"partial","partial",1881673272,null);$APP.AA=new $APP.w(null,"memoize","memoize",2019341169,null);Vn=new $APP.I("edamame.impl.parser","cond-splice","edamame.impl.parser/cond-splice",1534599765);BA=new $APP.I(null,"vars","vars",-2046957217);
  CA=new $APP.w(null,"ex_cause","ex_cause",-379051877,null);DA=new $APP.w(null,"into_array","into_array",-888977989,null);et=new $APP.w("cljs.core","inc","cljs.core/inc",-879172610,null);EA=new $APP.w(null,".getTime",".getTime",-1048557777,null);qn=new $APP.w("clojure.core","hash-set","clojure.core/hash-set",1229125967,null);Rr=new $APP.I(null,"arrow","arrow",1071351425);$APP.FA=new $APP.w(null,"zipmap","zipmap",-690049687,null);GA=new $APP.w(null,"take_while","take_while",-1563645449,null);
  HA=new $APP.w(null,"persistent_BANG_","persistent_BANG_",236753577,null);IA=new $APP.w("cljs.core","into","cljs.core/into",1879938733,null);$APP.JA=new $APP.w(null,"nth","nth",1529209554,null);KA=new $APP.w(null,"ITransientAssociative","ITransientAssociative",-1612754624,null);$APP.Ij=new $APP.w(null,"recur","recur",1202958259,null);$APP.yr=new $APP.w(null,"clojure.walk","clojure.walk",1625897340,null);Fn=new $APP.I("tools.reader","opts","tools.reader/opts",-2121810901);
  $APP.LA=new $APP.w(null,"name","name",-810760592,null);sp=new $APP.I(null,"protocol-name","protocol-name",1910595980);kt=new $APP.I(null,"top-fn","top-fn",-2056129173);MA=new $APP.w(null,"cljs.reader","cljs.reader",1327473948,null);$APP.at=new $APP.w("cljs.core","loop","cljs.core/loop",-1829423021,null);Mq=new $APP.w(null,"js-??","js-??",-1685060155,null);$APP.NA=new $APP.w(null,"defn-","defn-",1097765044,null);$APP.Ao=new $APP.I(null,"read-eval","read-eval",1788733932);
  OA=new $APP.w(null,"swap_BANG_","swap_BANG_",1226049045,null);PA=new $APP.w(null,"coll_QMARK_","coll_QMARK_",1387269488,null);$APP.QA=new $APP.I("cljs.core","halt","cljs.core/halt",-1049036715);$APP.RA=new $APP.w("cljs.core","deref","cljs.core/deref",1901963335,null);$APP.SA=new $APP.w(null,"more","more",-418290273,null);$APP.TA=new $APP.w(null,"not","not",1044554643,null);UA=new $APP.I("cljs.analyzer","protocol-impl","cljs.analyzer/protocol-impl",-1523935409);
  $APP.VA=new $APP.w(null,"when","when",1064114221,null);$APP.WA=new $APP.w(null,"validator","validator",-325659154,null);XA=new $APP.w(null,"not_empty","not_empty",-494703095,null);$APP.YA=new $APP.w(null,"case","case",-1510733573,null);mi=new $APP.I(null,"more-marker","more-marker",-14717935);ZA=new $APP.w(null,"IFn","IFn",-244881638,null);$APP.$A=new $APP.w(null,"distinct","distinct",-148347594,null);aB=new $APP.w(null,"js-yield","js-yield",-1182841473,null);
  wj=new $APP.w(null,"ns*","ns*",1840949383,null);$APP.Xk=new $APP.I(null,"type","type",1174270348);bB=new $APP.w(null,"start__24418__auto__","start__24418__auto__",-10736902,null);cB=new $APP.w(null,"seq_QMARK_","seq_QMARK_",810132784,null);$APP.dB=new $APP.w(null,"next","next",1522830042,null);dt=new $APP.w(null,".push",".push",-1497267248,null);eB=new $APP.w(null,"sorted_set","sorted_set",241648964,null);Rp=new $APP.I(null,"var-\x3eident","var-\x3eident",1319455093);
  fB=new $APP.w(null,"reset_BANG_","reset_BANG_",-848393116,null);$APP.gB=new $APP.I(null,"let","let",-1282412701);$APP.hB=new $APP.w(null,"Delay","Delay",-956795572,null);$APP.Rq=new $APP.w(null,"not\x3d","not\x3d",1466536204,null);$APP.al=new $APP.I(null,"line","line",212345235);iB=new $APP.w(null,"not_every_QMARK_","not_every_QMARK_",-606043237,null);$APP.jB=new $APP.I(null,"mutable","mutable",875778266);$APP.Vs=new $APP.w(null,"js","js",-886355190,null);
  $APP.rj=new $APP.w(null,"case*","case*",-1938255072,null);$APP.pp=new $APP.I(null,"constructor","constructor",-1953928811);$APP.kB=new $APP.w(null,"data","data",1407862150,null);iu=new $APP.I(null,"emit","emit",-1327179018);$APP.lB=new $APP.w(null,"ISwap","ISwap",484378193,null);$APP.mB=new $APP.w(null,"constantly","constantly",-271143939,null);nB=new $APP.w("cljs.core","let*","cljs.core/let*",1538940565,null);oB=new $APP.w(null,"abs","abs",1394505050,null);
  pB=new $APP.w(null,"rdr","rdr",190007785,null);$APP.Ia=new $APP.I(null,"readably","readably",1129599760);$t=new $APP.w(null,"funcall","funcall",-757488738,null);$APP.qB=new $APP.w(null,"rem","rem",664046770,null);rB=new $APP.I("squint.compiler","js","squint.compiler/js",-5228080);sB=new $APP.w(null,"neg_QMARK_","neg_QMARK_",-747162283,null);tB=new $APP.w(null,"IPending","IPending",1229113039,null);uB=new $APP.w(null,"INamed","INamed",357992946,null);
  $APP.vB=new $APP.w(null,"instance?","instance?",1075939923,null);wB=new $APP.w(null,"end__24421__auto__","end__24421__auto__",-750369998,null);xB=new $APP.w(null,"update_in","update_in",-977386727,null);$APP.yB=new $APP.w(null,"update","update",-1608859373,null);zB=new $APP.w(null,"ASeq","ASeq",266390234,null);$APP.AB=new $APP.w(null,"when-not","when-not",-1223136340,null);$APP.Dj=new $APP.w(null,"ns","ns",2082130287,null);$APP.BB=new $APP.I(null,"pending","pending",-220036727);
  $APP.CB=new $APP.w(null,"inc","inc",324505433,null);$APP.DB=new $APP.w(null,"fields","fields",-291534703,null);EB=new $APP.I(null,"strable","strable",1877668047);bl=new $APP.I(null,"col","col",-1959363084);$APP.FB=new $APP.w(null,"int","int",-100885395,null);$r=new $APP.w("cljs.core","clj-\x3ejs","cljs.core/clj-\x3ejs",-1490083117,null);$APP.GB=new $APP.w(null,"or","or",1876275696,null);op=new $APP.I(null,"extends","extends",-954903259);$APP.Ok=new $APP.I(null,"offset","offset",296498311);
  HB=new $APP.w(null,"dissoc_BANG_","dissoc_BANG_",-102240141,null);$APP.IB=new $APP.w(null,"extend-type","extend-type",1123355921,null);$APP.JB=new $APP.w("js","Object","js/Object",61215323,null);$APP.Jj=new $APP.w(null,"set!","set!",250714521,null);$APP.KB=new $APP.w(null,"reductions","reductions",549963952,null);LB=new $APP.w("clojure.core","not","clojure.core/not",2621194,null);$APP.MB=new $APP.w(null,"chunk-next","chunk-next",-547810434,null);
  $APP.NB=new $APP.w(null,"subseq","subseq",-1558995241,null);OB=new $APP.w(null,"IReduce","IReduce",-440384974,null);ou=new $APP.I("squint.compiler-common","special","squint.compiler-common/special",-1035423153);$APP.PB=new $APP.w(null,"root","root",1191874074,null);QB=new $APP.w(null,"js-template","js-template",-1583321984,null);Ft=new $APP.w("cljs.core","js*","cljs.core/js*",-2069524299,null);RB=new $APP.w(null,"ICollection","ICollection",-686709190,null);
  $APP.vr=new $APP.I(null,"resolve-ns","resolve-ns",-112716748);SB=new $APP.w("js","await","js/await",1341793804,null);TB=new $APP.w(null,"sb","sb",-1249746442,null);$APP.UB=new $APP.w(null,"with-local-vars","with-local-vars",837642072,null);VB=new $APP.w(null,"js-yield*","js-yield*",1057293239,null);ot=new $APP.w(null,"self__25196__auto__","self__25196__auto__",-187631339,null);$APP.WB=new $APP.w(null,"partition","partition",-1479695018,null);$APP.Tt=new $APP.w(null,"list","list",-1889078086,null);
  Uo=new $APP.I(null,"postprocess","postprocess",-1863762881);XB=new $APP.w("cljs.tools.reader.edn","read-symbolic-value","cljs.tools.reader.edn/read-symbolic-value",111468855,null);$APP.Cj=new $APP.w(null,"new","new",-444906321,null);wn=new $APP.w("cljs.core","with-meta","cljs.core/with-meta",749126446,null);$APP.YB=new $APP.w(null,"second","second",1195829517,null);$APP.am=new $APP.I(null,"list","list",765357683);$APP.Qs=new $APP.w("cljs.core","seq","cljs.core/seq",-1649497689,null);
  ep=new $APP.I(null,"end-row","end-row",-545103581);$APP.ZB=new $APP.w(null,"peek","peek",1349135202,null);Bu=new $APP.I(null,"exports","exports",-745008272);$APP.Sp=new $APP.I(null,"async","async",1050769601);Aq=new $APP.I(null,"has-dynamic-expr","has-dynamic-expr",-1002597826);$B=new $APP.w(null,"IllegalArgumentException.","IllegalArgumentException.",-1885081185,null);aC=new $APP.w(null,"ITransientMap","ITransientMap",298423651,null);
  $APP.sr=new $APP.w(null,"clojure.string","clojure.string",-1415552165,null);$APP.bC=new $APP.w(null,"end","end",1372345569,null);cC=new $APP.w(null,"bounded_count","bounded_count",-243967619,null);dC=new $APP.w(null,"int_QMARK_","int_QMARK_",-1648101186,null);eC=new $APP.w("squint.defclass","defclass*","squint.defclass/defclass*",1128645807,null);$APP.fC=new $APP.w("cljs.core","concat","cljs.core/concat",-1133584918,null);$APP.gC=new $APP.w(null,"delay","delay",1066306308,null);
  hC=new $APP.w(null,"fn_QMARK_","fn_QMARK_",-1506071691,null);iC=new $APP.w(null,"counted_QMARK_","counted_QMARK_",1253634344,null);jC=new $APP.w(null,"boolean_QMARK_","boolean_QMARK_",-2043411056,null);kC=new $APP.w(null,"pos_QMARK_","pos_QMARK_",160993630,null);$APP.lC=new $APP.w(null,"complement","complement",-913606051,null);mC=new $APP.w(null,"re_matches","re_matches",-1647704641,null);nC=new $APP.w(null,"IEquiv","IEquiv",-1912850869,null);oC=new $APP.w(null,"ISeqable","ISeqable",1349682102,null);
  $APP.pC=new $APP.w(null,"function","function",-486723946,null);zo=new $APP.I("edamame.impl.parser","fn-literal","edamame.impl.parser/fn-literal",-1835933155);$APP.qC=new $APP.w(null,"min","min",2085523049,null);$APP.rC=new $APP.w(null,"unsigned-bit-shift-right","unsigned-bit-shift-right",-1953076601,null);sC=new $APP.w(null,"IChunkedSeq","IChunkedSeq",-1299765705,null);$APP.eo=new $APP.I(null,"features","features",-1146962336);$APP.tC=new $APP.w(null,"\x26form","\x26form",1482799337,null);
  uC=new $APP.w(null,"ensure_reduced","ensure_reduced",-1895574656,null);vC=new $APP.w(null,"number_QMARK_","number_QMARK_",1460868530,null);tr=new $APP.w(null,"squint.set","squint.set",-2132409450,null);wC=new $APP.w(null,"break","break",1767101752,null);$APP.xC=new $APP.w("cljs.core","assert","cljs.core/assert",1075777968,null);$APP.yC=new $APP.w(null,"with-open","with-open",172119667,null);
  zC=new $APP.w("cljs.tools.reader.impl.commons","number-literal?","cljs.tools.reader.impl.commons/number-literal?",-1450304800,null);$APP.AC=new $APP.w(null,"disj","disj",-1076545178,null);BC=new $APP.I(null,"nonchar","nonchar",-421759703);CC=new $APP.w("squint.impl","deref","squint.impl/deref",817476426,null);DC=new $APP.w(null,"__protocol_satisfies","__protocol_satisfies",1200125198,null);EC=new $APP.w(null,"ICloneable","ICloneable",1882653160,null);
  FC=new $APP.w(null,"some_fn","some_fn",985796719,null);GC=new $APP.w(null,"NaN_QMARK_","NaN_QMARK_",729796749,null);$APP.Rs=new $APP.w("cljs.core","first","cljs.core/first",-752535972,null);HC=new $APP.w(null,"drop_while","drop_while",-172077427,null);IC=new $APP.w(null,"ILookup","ILookup",784647298,null);JC=new $APP.w(null,"Atom","Atom",-1761773934,null);$APP.Ts=new $APP.w("cljs.core","nth","cljs.core/nth",1961052085,null);$APP.KC=new $APP.w(null,"vals","vals",-1886377036,null);
  $APP.Br=new $APP.I(null,"rename","rename",1508157613);LC=new $APP.w(null,"to_array","to_array",400613351,null);$APP.qm=new $APP.I(null,"tag","tag",-1290361223);MC=new $APP.w(null,"IMultiFn","IMultiFn",-1848282794,null);as=new $APP.I(null,"html-attr","html-attr",-1552860693);nu=new $APP.I("squint.compiler-common","set","squint.compiler-common/set",730663261);vo=new $APP.I(null,"regex","regex",939488856);$APP.yj=new $APP.w(null,"loop*","loop*",615029416,null);Tp=new $APP.I(null,"gen","gen",142575302);
  NC=new $APP.w(null,"zero_QMARK_","zero_QMARK_",-1926449087,null);$APP.OC=new $APP.w(null,"cycle","cycle",-1944070485,null);PC=new $APP.w(null,"assoc_in_BANG_","assoc_in_BANG_",977198002,null);QC=new $APP.w(null,"empty_QMARK_","empty_QMARK_",1008268022,null);$APP.RC=new $APP.w(null,"some-\x3e\x3e","some-\x3e\x3e",-1499987794,null);SC=new $APP.w(null,"_LT__EQ_","_LT__EQ_",19679645,null);$APP.TC=new $APP.w("cljs.core","apply","cljs.core/apply",1757277831,null);
  $APP.UC=new $APP.w(null,"if-not","if-not",-265415609,null);$APP.Kr=new $APP.I(null,"aliases","aliases",1346874714);$APP.VC=new $APP.w(null,"keys","keys",-1586012071,null);Ph=new $APP.I("cljs.core","not-found","cljs.core/not-found",-1572889185);$APP.tt=new $APP.I(null,"fixed-arity","fixed-arity",1586445869);WC=new $APP.w(null,"_PLUS_","_PLUS_",-89880507,null);$APP.XC=new $APP.w("cljs.core","when-not","cljs.core/when-not",-556141047,null);vt=new $APP.I(null,"method-params","method-params",-980792179);
  YC=new $APP.w(null,"transient$","transient$",-979197076,null);$APP.cm=new $APP.I(null,"vector","vector",1902966158);ZC=new $APP.w(null,"_iterator","_iterator",-1448300519,null);$C=new $APP.w(null,"js_keys","js_keys",762841376,null);Iu=new $APP.I(null,"elide_exports","elide_exports",2137728371);aD=new $APP.w(null,"IList","IList",1682281311,null);$APP.xj=new $APP.w(null,"finally","finally",-1065347064,null);bD=new $APP.w(null,"parse-symbol","parse-symbol",1608073451,null);
  cD=new $APP.w(null,"IHash","IHash",-1495374645,null);dD=new $APP.w(null,"IChunkedNext","IChunkedNext",1193289532,null);$APP.eD=new $APP.w(null,"vec","vec",982683596,null);fD=new $APP.I(null,"factory","factory",63933746);$APP.ip=new $APP.I("edamame.core","eof","edamame.core/eof",1855384188);$APP.Qp=new $APP.I(null,"statement","statement",-32780863);gD=new $APP.w(null,"string_QMARK_","string_QMARK_",-1263757676,null);$APP.zj=new $APP.w(null,"do","do",1686842252,null);
  $APP.hD=new $APP.w(null,"if-some","if-some",1960677609,null);Er=new $APP.w(null,"squint.core","squint.core",-1995469332,null);Ap=new $APP.w(null,"extends","extends",685628268,null);iD=new $APP.w(null,"goog_typeOf","goog_typeOf",-1572994631,null);$APP.jD=new $APP.w(null,"seed","seed",1709144854,null);dn=new $APP.w("clojure.core","seq","clojure.core/seq",-1551838743,null);$APP.Mj=new $APP.w(null,"quote","quote",1377916282,null);io=new $APP.I(null,"preserve","preserve",1276846509);
  Lp=new $APP.I(null,"static","static",1214358571);Hu=new $APP.I(null,"elide_imports","elide_imports",-706228179);$APP.kD=new $APP.I(null,"cljs","cljs",1492417629);$APP.lD=new $APP.w(null,"cond-\x3e\x3e","cond-\x3e\x3e",348844960,null);$APP.mD=new $APP.w(null,"bit-flip","bit-flip",809639606,null);$APP.Du=new $APP.I(null,"javascript","javascript",-45283711);$APP.Lo=new $APP.I(null,"deref","deref",-145586795);$APP.Ur=new $APP.w(null,"fn","fn",465265323,null);
  nD=new $APP.w(null,"_GT__EQ_","_GT__EQ_",1070832870,null);zt=new $APP.w(null,"argseq__25354__auto__","argseq__25354__auto__",-380604295,null);$APP.oD=new $APP.w(null,"dotimes","dotimes",-818708397,null);$APP.pD=new $APP.w(null,"type","type",-1480165421,null);qD=new $APP.w(null,"IEditableCollection","IEditableCollection",-906687187,null);$APP.rD=new $APP.w(null,"conj","conj",-1127293942,null);Sn=new $APP.I(null,"char","char",-641587586);
  sD=new $APP.w(null,"start__24168__auto__","start__24168__auto__",-1441332637,null);$APP.tD=new $APP.w(null,"cons","cons",755448454,null);uD=new $APP.w("cljs.core","symbol","cljs.core/symbol",195265748,null);$APP.vD=new $APP.w(null,"cond","cond",1606708055,null);$APP.wD=new $APP.w(null,"mod","mod",1510044207,null);$APP.xD=new $APP.w(null,"comp","comp",-1462482139,null);yD=new $APP.w("cljs.core","system-time","cljs.core/system-time",1562011930,null);
  $APP.Mo=new $APP.w("clojure.core","deref","clojure.core/deref",188719157,null);Ci=new $APP.I(null,"alt-impl","alt-impl",670969595);$APP.zD=new $APP.w(null,"val","val",1769233139,null);$APP.AD=new $APP.w("cljs.core","not","cljs.core/not",100665144,null);dr=new $APP.I(null,"pragmas","pragmas",2076532672);$APP.Lj=new $APP.w(null,"var","var",870848730,null);BD=new $APP.w(null,"escape-char","escape-char",-2072670949,null);$APP.Bj=new $APP.w(null,"if","if",1181717262,null);
  $APP.CD=new $APP.w(null,"coll","coll",-1006698606,null);$APP.DD=new $APP.w(null,"\x26env","\x26env",-919163083,null);$APP.ED=new $APP.w(null,"drop","drop",2005013138,null);FD=new $APP.w("cljs.core","some?","cljs.core/some?",-440439360,null);GD=new $APP.w(null,"read-symbolic-value","read-symbolic-value",-100790078,null);HD=new $APP.w(null,"disj_BANG_","disj_BANG_",-2129901684,null);ID=new $APP.w(null,"bit-shift-right-zero-fill","bit-shift-right-zero-fill",-779613275,null);
  $APP.nl=new $APP.I(null,"string","string",-1989541586);$APP.JD=new $APP.w(null,"assert","assert",677428501,null);$APP.ps=new $APP.w("cljs.core","defn","cljs.core/defn",-1606493717,null);KD=new $APP.w(null,"uuid","uuid",-504564192,null);Cq=new $APP.I(null,"infix-operators","infix-operators",-1061955138);LD=new $APP.w(null,"select_keys","select_keys",-753460296,null);$APP.yu=new $APP.I(null,"imports","imports",-1249933394);
  MD=new $APP.w(null,"cljs.tools.reader.edn","cljs.tools.reader.edn",-1275821532,null);Ma=new $APP.I(null,"dup","dup",556298533);$APP.ND=new $APP.I("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017);$APP.OD=new $APP.I(null,"status","status",-1997798413);PD=new $APP.w(null,"IMeta","IMeta",1095313672,null);$APP.QD=new $APP.w("js","Array","js/Array",-423508366,null);RD=new $APP.I(null,"def-emits-var","def-emits-var",-1551927320);wu=new $APP.I(null,"development","development",-221827732);
  SD=new $APP.w(null,"warn_on_lazy_reusage_BANG_","warn_on_lazy_reusage_BANG_",-987661024,null);TD=new $APP.w(null,"assoc_in","assoc_in",1677107268,null);$APP.UD=new $APP.w(null,"LazySeq","LazySeq",1579450882,null);VD=new $APP.w(null,"object_QMARK_","object_QMARK_",200937926,null);jt=new $APP.w(null,"-cljs$lang$maxFixedArity","-cljs$lang$maxFixedArity",-1481434279,null);WD=new $APP.w(null,"nil_QMARK_","nil_QMARK_",1688050578,null);$APP.XD=new $APP.w(null,"filter","filter",691993593,null);
  ut=new $APP.I(null,"max-fixed-arity","max-fixed-arity",-690205543);Iq=new $APP.w("cljs.core","\x26\x26","cljs.core/\x26\x26",-613927591,null);Ej=new $APP.w(null,"deftype*","deftype*",962659890,null);YD=new $APP.w(null,"reduce_kv","reduce_kv",532328094,null);ZD=new $APP.w(null,"lazy","lazy",1215984346,null);$APP.$D=new $APP.w(null,"interpose","interpose",-2078295140,null);$APP.Sq=new $APP.w(null,"bit-and","bit-and",-479352589,null);aE=new $APP.w(null,"partitionv","partitionv",-148028570,null);
  bE=new $APP.w(null,"_GT_","_GT_",1225796738,null);$APP.cE=new $APP.w(null,"aset","aset",900773178,null);dE=new $APP.w(null,"v__23126__auto__","v__23126__auto__",1066922598,null);eE=new $APP.w(null,"IKVReduce","IKVReduce",-870856862,null);fE=new $APP.w(null,"odd_QMARK_","odd_QMARK_",1564499792,null);gE=new $APP.w("clojure.core","iterable","clojure.core/iterable",792965266,null);hE=new $APP.w(null,"ex_data","ex_data",-1343098809,null);$APP.iE=new $APP.w(null,"shuffle","shuffle",-1393023609,null);
  ks=new $APP.I(null,"children","children",-940561982);jE=new $APP.w(null,"js-in","js-in",1388959023,null);Zo=new $APP.I(null,"source-key","source-key",-1325875542);$APP.du=new $APP.w(null,"doto","doto",1252536074,null);$APP.kE=new $APP.w(null,"println","println",-733595439,null);Rn=new $APP.I("edamame.impl.parser","opened-delimiter","edamame.impl.parser/opened-delimiter",1199661648);$APP.Pj=new $APP.w(null,"def","def",597100991,null);$APP.em=new $APP.I(null,"map","map",1371690461);
  $APP.lE=new $APP.I(null,"params","params",710516235);$APP.mE=new $APP.w(null,"dec","dec",-766002333,null);nE=new $APP.w(null,"update_BANG_","update_BANG_",14262703,null);$APP.oE=new $APP.w(null,"default","default",-347290801,null);$APP.X=new $APP.I(null,"doc","doc",1913296891);pE=new $APP.I(null,"jsx-attr","jsx-attr",-1698135799);$APP.Cm=new $APP.I(null,"readers","readers",-2118263030);No=new $APP.I(null,"quote","quote",-262615245);$APP.Nj=new $APP.w(null,"catch","catch",-1616370245,null);
  qE=new $APP.w(null,"inc!","inc!",1279431021,null);rE=new $APP.w(null,"bit-clear","bit-clear",-1194520583,null);fn=new $APP.w("clojure.core","apply","clojure.core/apply",1654646389,null);er=new $APP.I(null,"past","past",182249289);$APP.sE=new $APP.w("cljs.core","-\x3e","cljs.core/-\x3e",1488366311,null);wt=new $APP.I(null,"arglists-meta","arglists-meta",1944829838);hs=new $APP.I(null,"outer-html","outer-html",-320680672);tE=new $APP.w(null,"IStack","IStack",1136769449,null);
  $APP.uE=new $APP.w(null,"map","map",-1282745308,null);$APP.vE=new $APP.w(null,"max","max",1701898075,null);$APP.wE=new $APP.w(null,"compare","compare",1109853757,null);$APP.Zm=new $APP.w("clojure.core","unquote","clojure.core/unquote",843087510,null);$APP.xE=new $APP.w(null,"range","range",-1014743483,null);$APP.yE=new $APP.w("cljs.core","if-let","cljs.core/if-let",1346583165,null);ym=new $APP.w(null,"-Inf","-Inf",-2123243689,null);$APP.zE=new $APP.w(null,"take","take",871646627,null);
  Hn=new $APP.I("edamame","expected-delimiter","edamame/expected-delimiter",93379254);uq=new $APP.w(null,"js-reserved?","js-reserved?",-1093153819,null);$APP.AE=new $APP.w(null,"dorun","dorun",560426022,null);BE=new $APP.I(null,"splicing?","splicing?",-428596366);CE=new $APP.w(null,"ISequential","ISequential",-1626174217,null);$APP.sq=new $APP.I(null,"test","test",577538877);DE=new $APP.w("squint.impl","for-of","squint.impl/for-of",-2038625121,null);EE=new $APP.w(null,"long$","long$",1278865368,null);
  $APP.$k=new $APP.I(null,"file","file",-1269645878);$APP.FE=new $APP.w(null,"number","number",-1084057331,null);GE=new $APP.w(null,"IVector","IVector",-1120721434,null);HE=new $APP.w(null,"temp__23735__auto__","temp__23735__auto__",-1503098194,null);IE=new $APP.I(null,"experimental-async-deref","experimental-async-deref",-1391869248);$APP.JE=new $APP.w(null,"bit-and-not","bit-and-not",-254338837,null);$APP.KE=new $APP.w("cljs.core","-\x3e\x3e","cljs.core/-\x3e\x3e",-1207871206,null);
  LE=new $APP.w(null,"cljs.tools.reader.impl.commons","cljs.tools.reader.impl.commons",1569241026,null);ME=new $APP.w(null,"queue","queue",-1198599890,null);$s=new $APP.w(null,".-length",".-length",-280799999,null);NE=new $APP.w("cljs.core","bit-xor","cljs.core/bit-xor",1480189292,null);$APP.OE=new $APP.I(null,"eofthrow","eofthrow",-334166531);$APP.PE=new $APP.w(null,"some","some",-310548046,null);$APP.QE=new $APP.w(null,"declare","declare",654042991,null);
  RE=new $APP.w(null,"assoc_BANG_","assoc_BANG_",-353674384,null);SE=new $APP.w(null,"array_QMARK_","array_QMARK_",976061110,null);$APP.ur=new $APP.w(null,"clojure.set","clojure.set",-630955632,null);Ka=new $APP.I(null,"meta","meta",1499536964);TE=new $APP.I("squint.compiler-common","empty-list","squint.compiler-common/empty-list",648575334);Bo=new $APP.w("edamame.core","read-eval","edamame.core/read-eval",1461005554,null);np=new $APP.I(null,"classname","classname",777390796);
  UE=new $APP.w("cljs.core","cond","cljs.core/cond",2005388338,null);nn=new $APP.w("clojure.core","hash-map","clojure.core/hash-map",338908405,null);$APP.VE=new $APP.w(null,"pop","pop",-94247249,null);tp=new $APP.I(null,"protocol-fns","protocol-fns",331814378);WE=new $APP.w(null,"token","token",429068312,null);XE=new $APP.w(null,"c__24159__auto__","c__24159__auto__",-1963881198,null);rs=new $APP.w("cljs.core","unchecked-get","cljs.core/unchecked-get",-1271763170,null);
  $APP.aj=new $APP.I(null,"ancestors","ancestors",-776045424);$APP.YE=new $APP.w("cljs.core","Delay","cljs.core/Delay",-21574999,null);sj=new $APP.w(null,"defrecord*","defrecord*",-1936366207,null);$APP.ZE=new $APP.w(null,"reduce","reduce",1358839360,null);$E=new $APP.w("cljs.tools.reader.edn","read-char*","cljs.tools.reader.edn/read-char*",-606185164,null);$APP.aF=new $APP.I(null,"e","e",1381269198);Uq=new $APP.I(null,"core-vars","core-vars",550213482);
  bF=new $APP.w(null,"read-date","read-date",1874308181,null);cF=new $APP.w(null,"IReversible","IReversible",-723048599,null);$APP.dF=new $APP.w(null,"replace","replace",853943757,null);$APP.eF=new $APP.w(null,"mapcat","mapcat",-601348859,null);fF=new $APP.w(null,"unchecked-get","unchecked-get",-1670542461,null);rr=new $APP.w(null,"squint.string","squint.string",-1746136422,null);$APP.Ps=new $APP.w("cljs.core","get","cljs.core/get",-296075407,null);
  gF=new $APP.w(null,"rand_int","rand_int",956774577,null);$APP.hF=new $APP.w(null,"prn","prn",1561684909,null);$APP.Fj=new $APP.w(null,"let*","let*",1920721458,null);$APP.iF=new $APP.w(null,"deftype","deftype",1980826088,null);$APP.jF=new $APP.w("cljs.core","hash-map","cljs.core/hash-map",303385767,null);$APP.kF=new $APP.w(null,"doall","doall",988520834,null);Hp=new $APP.I(null,"this-sym","this-sym",-1882507076);lF=new $APP.I("cljs.analyzer","protocol-inline","cljs.analyzer/protocol-inline",-1611519026);
  $APP.Vt=new $APP.I(null,"macros","macros",811339431);$APP.sn=new $APP.I(null,"row-key","row-key",-1189010712);$APP.vj=new $APP.w(null,"try","try",-1273693247,null);mF=new $APP.w(null,"IEmptyableCollection","IEmptyableCollection",1477271438,null);an=new $APP.w("clojure.core","unquote-splicing","clojure.core/unquote-splicing",-552003150,null);nF=new $APP.w(null,"with_meta","with_meta",-630373004,null);Yr=new $APP.I(null,"\x26","\x26",509580121);
  oF=new $APP.w(null,"split_with","split_with",-1309461297,null);mu=new $APP.I("squint.compiler-common","keyword","squint.compiler-common/keyword",-401596270);Bv=new $APP.I(null,"keyword-fn","keyword-fn",-64566675);wr=new $APP.w(null,"cljs.string","cljs.string",-72188428,null);pF=new $APP.w(null,"n__23500__auto__","n__23500__auto__",1286405600,null);$APP.pq=new $APP.I(null,"private","private",-558947994);qF=new $APP.w(null,"defclass","defclass",-61467814,null);
  $APP.Ir=new $APP.I(null,"refers","refers",158076809);rF=new $APP.w(null,"unsafe-bit-and","unsafe-bit-and",110395584,null);$APP.sF=new $APP.w(null,"reverse","reverse",752076261,null);$APP.tF=new $APP.I(null,"require","require",-468001333);uF=new $APP.I(null,"positional","positional",-203580463);$APP.vF=new $APP.w(null,"let","let",358118826,null);$APP.wF=new $APP.w(null,"string","string",-349010059,null);Yo=new $APP.I(null,"loc","loc",-584284901);
  $APP.xF=new $APP.w(null,"undefined?","undefined?",1356377224,null);$APP.Cr=new $APP.I(null,"refer","refer",-964295553);Gp=new $APP.I(null,"forms","forms",2045992350);$APP.yF=new $APP.w(null,"require","require",1172530194,null);$APP.zF=new $APP.w(null,"assoc","assoc",2071440380,null);AF=new $APP.w(null,"IIterable","IIterable",577191430,null);bv=new $APP.I(null,"validator","validator",-1966190681);BF=new $APP.w(null,"time","time",-1268547887,null);
  $APP.CF=new $APP.w(null,"subvec","subvec",364611032,null);$APP.mn=new $APP.I(null,"syntax-quote","syntax-quote",-1233164847);$APP.DF=new $APP.w(null,"aclone","aclone",722978531,null);Qn=new $APP.I("edamame.impl.parser","expected-delimiter","edamame.impl.parser/expected-delimiter",2057965803);$APP.EF=new $APP.w(null,"defonce","defonce",-1681484013,null);$APP.FF=new $APP.w(null,"bit-shift-right","bit-shift-right",884046498,null);$APP.Ct=new $APP.w("cljs.core","str","cljs.core/str",-1971828991,null);
  Tr=new $APP.I(null,"\x3d\x3e","\x3d\x3e",1841166128);vn=new $APP.I(null,"end-col-key","end-col-key",81813304);$APP.GF=new $APP.w(null,"identity","identity",-1007039734,null);en=new $APP.w("clojure.core","concat","clojure.core/concat",-1236478952,null);$APP.HF=new $APP.w(null,"last","last",-1548700637,null);$APP.IF=new $APP.I(null,"no-test","no-test",-1679482642);Dt=new $APP.w("cljs.core","-","cljs.core/-",187040141,null);Vl=new $APP.I(null,"character","character",380652989);
  $APP.ct=new $APP.w("cljs.core","\x3c","cljs.core/\x3c",1677496129,null);$APP.JF=new $APP.I(null,"\x3e\x3e","\x3e\x3e",-277509267);$APP.KF=new $APP.w(null,"while","while",-1691317983,null);$APP.LF=new $APP.w("cljs.core","\x3d","cljs.core/\x3d",-1891498332,null);MF=new $APP.w(null,"js-await","js-await",-1485379970,null);NF=new $APP.w(null,"Cons","Cons",738259623,null);$APP.OF=new $APP.w(null,"bit-test","bit-test",543456753,null);PF=new $APP.w(null,"ISeq","ISeq",1517365813,null);
  vm=new $APP.I(null,"namespaced-map","namespaced-map",1235665380);QF=new $APP.w(null,"ITransientCollection","ITransientCollection",252832402,null);RF=new $APP.w(null,"temp__23786__auto__","temp__23786__auto__",-1294248462,null);SF=new $APP.w("js","Date.","js/Date.",384205255,null);TF=new $APP.w(null,"ISet","ISet",-1398072657,null);$APP.UF=new $APP.I(null,"pre","pre",2118456869);xt=new $APP.w(null,"var_args","var_args",1214280389,null);
  pn=new $APP.w("clojure.core","vec","clojure.core/vec",146271141,null);pt=new $APP.w(null,"self__25198__auto__","self__25198__auto__",1471682980,null);VF=new $APP.w(null,"es6_iterator","es6_iterator",-166463584,null);$APP.Xp=new $APP.w(null,"Object","Object",61210754,null);WF=new $APP.w(null,"p__23659__auto__","p__23659__auto__",198412112,null);XF=new $APP.w(null,"truth_","truth_",231933130,null);ju=new $APP.I("squint.compiler-common","list","squint.compiler-common/list",-188652930);
  $APP.YF=new $APP.w(null,"flatten","flatten",-1441633353,null);ZF=new $APP.I("squint.compiler-common","number","squint.compiler-common/number",386329703);gt=new $APP.I("ana","no-resolve","ana/no-resolve",1457409829);$APP.$F=new $APP.w(null,"quot","quot",-1125214196,null);zr=new $APP.w(null,"cljs.set","cljs.set",-1992465674,null);$APP.rq=new $APP.I(null,"end-line","end-line",1837326455);$APP.aG=new $APP.I(null,"while","while",963117786);$APP.bG=new $APP.w(null,"repeatedly","repeatedly",1199964457,null);
  cG=new $APP.w(null,"vector_QMARK_","vector_QMARK_",321105821,null);dG=new $APP.w(null,"max_key","max_key",1438958127,null);$APP.rt=new $APP.I(null,"macro","macro",-867863404);$APP.eG=RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])","g");$APP.Jp=function Jp(a){switch(arguments.length){case 1:return Jp.h(arguments[0]);case 2:return Jp.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.Jp.h=function(a){var b=new $APP.Fa;for(a=$APP.x(a);;)if(null!=a)b=b.append($APP.t.h($APP.y(a))),a=$APP.z(a);else return b.toString()};
  $APP.Jp.g=function(a,b){var c=new $APP.Fa;for(b=$APP.x(b);;)if(null!=b)c.append($APP.t.h($APP.y(b))),b=$APP.z(b),null!=b&&c.append(a);else return c.toString()};$APP.Jp.m=2;$APP.Gr=function Gr(a){switch(arguments.length){case 2:return Gr.g(arguments[0],arguments[1]);case 3:return Gr.j(arguments[0],arguments[1],arguments[2]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.Gr.g=function(a,b){return $APP.Gr.j(a,b,0)};
  $APP.Gr.j=function(a,b,c){if("/(?:)/"===$APP.t.h(b))b=fk(a,c);else if(1>c)b=$APP.lg($APP.t.h(a).split(b));else a:for(var d=c,e=$APP.kg;;){if(1===d){b=$APP.De.g(e,a);break a}var f=$APP.ii(b,a);if(null!=f){var k=a.indexOf(f);f=a.substring(k+$APP.xd(f));--d;e=$APP.De.g(e,a.substring(0,k));a=f;}else {b=$APP.De.g(e,a);break a}}if(0===c&&1<$APP.xd(b))a:for(c=b;;)if(""===$APP.Od(c))c=$APP.Pd(c);else break a;else c=b;return c};$APP.Gr.m=3;$APP.g=ik.prototype;$APP.g.ia=function(a,b){return this.O(null,b,null)};$APP.g.O=function(a,b,c){switch(b instanceof $APP.I?b.da:null){case "splicing?":return this.lc;case "form":return this.form;default:return $APP.fe.j(this.B,b,c)}};$APP.g.hb=function(a,b,c){return $APP.ne.j(function(d,e){var f=$APP.B.j(e,0,null);e=$APP.B.j(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};
  $APP.g.R=function(a,b,c){return $APP.ni(b,function(d){return $APP.ni(b,$APP.ti,""," ","",c,d)},"#cljs.tools.reader.impl.utils.ReaderConditional{",", ","}",c,$APP.R.g(new $APP.J(null,2,5,$APP.N,[new $APP.J(null,2,5,$APP.N,[BE,this.lc],null),new $APP.J(null,2,5,$APP.N,[yp,this.form],null)],null),this.B))};$APP.g.Da=function(){return new $APP.Eg(this,2,new $APP.J(null,2,5,$APP.N,[BE,yp],null),$APP.r(this.B)?$APP.Bc(this.B):$APP.mf())};$APP.g.V=function(){return this.H};
  $APP.g.aa=function(){return 2+$APP.xd(this.B)};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=-209062840^$APP.id(this)};$APP.g.Z=function(a,b){return null!=b&&this.constructor===b.constructor&&$APP.A.g(this.lc,b.lc)&&$APP.A.g(this.form,b.form)&&$APP.A.g(this.B,b.B)};$APP.g.ob=function(a,b){return $APP.he(new $APP.Uh(null,new $APP.n(null,2,[BE,null,yp,null],null),null),b)?$APP.Rk.g($APP.Sb($APP.Rg.g($APP.hf,this),this.H),b):new ik(this.lc,this.form,this.H,$APP.kf($APP.Rk.g(this.B,b)),null)};
  $APP.g.Za=function(a,b){switch(b instanceof $APP.I?b.da:null){case "splicing?":case "form":return  true;default:return $APP.he(this.B,b)}};$APP.g.ha=function(a,b,c){return $APP.r($APP.Ke.g?$APP.Ke.g(BE,b):$APP.Ke.call(null,BE,b))?new ik(c,this.form,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g(yp,b):$APP.Ke.call(null,yp,b))?new ik(this.lc,c,this.H,this.B,null):new ik(this.lc,this.form,this.H,$APP.Rh.j(this.B,b,c),null)};
  $APP.g.Y=function(){return $APP.x($APP.R.g(new $APP.J(null,2,5,$APP.N,[new $APP.Ig(BE,this.lc,null),new $APP.Ig(yp,this.form,null)],null),this.B))};$APP.g.W=function(a,b){return new ik(this.lc,this.form,b,this.B,this.F)};$APP.g.ea=function(a,b){return $APP.Xd(b)?this.ha(null,$APP.Id(b,0),$APP.Id(b,1)):$APP.ne.j($APP.ob,this,b)};$APP.g.ja=$APP.Oc;$APP.g.R=function(a,b,c){$APP.ic(b,["#?",$APP.r(this.lc)?"@":null].join(""));return $APP.ti(this.form,b,c)};var kk=/[\s]/;$APP.Vi.h(0);$APP.Ek.prototype.X=function(){if(this.Oe>this.hd){var a=this.ga.charAt(this.hd);this.hd+=1;return a}return null};$APP.Ek.prototype.Db=function(){return this.Oe>this.hd?this.ga.charAt(this.hd):null};$APP.Gk.prototype.X=function(){var a=this.Pb<this.Rd?this.Mc[this.Pb]:this.Nb.X(null);this.Pb<this.Rd&&(this.Pb+=1);return null==a?null:$APP.te(a)};$APP.Gk.prototype.Db=function(){var a=this.Pb<this.Rd?this.Mc[this.Pb]:this.Nb.Db(null);return null==a?null:$APP.te(a)};
  $APP.Gk.prototype.fc=function(a,b){if($APP.r(b)){if(0===this.Pb)throw Error("Pushback buffer is full");--this.Pb;return this.Mc[this.Pb]=b}return null};$APP.g=Ik.prototype;$APP.g.X=function(){var a=this.Nb.X(null);return $APP.r(a)?(a=$APP.Hk(this.Nb,a),this.jc=this.Xb,this.Xb=$APP.uk(a),$APP.r(this.Xb)&&(this.Ed=this.sb,this.sb=0,this.line+=1),this.sb+=1,a):null};$APP.g.Db=function(){return this.Nb.Db(null)};
  $APP.g.fc=function(a,b){$APP.r(this.Xb)?(--this.line,this.sb=this.Ed):--this.sb;this.Xb=this.jc;return this.Nb.fc(null,b)};$APP.g.Ie=$APP.Oc;$APP.g.Pc=function(){return this.line|0};$APP.g.Oc=function(){return this.sb|0};$APP.g.Je=function(){return this.Kd};var Uk,fG=$APP.Vi.h($APP.hf),gG=$APP.Vi.h($APP.hf),hG=$APP.Vi.h($APP.hf),iG=$APP.Vi.h($APP.hf),jG=$APP.fe.j($APP.hf,$APP.nA,$APP.dj.v?$APP.dj.v():$APP.dj.call(null));
  Uk=new $APP.mj($APP.Hi.g("cljs.tools.reader.impl.inspect","inspect*"),function(a,b){return null==b?Ev:"string"===typeof b?$APP.nl:b instanceof $APP.I?EB:"number"===typeof b?EB:b instanceof $APP.w?EB:$APP.Xd(b)?$APP.cm:$APP.Ae(b)?$APP.am:$APP.Vd(b)?$APP.em:$APP.Sd(b)?$APP.sm:$APP.A.g(b,true)?EB:$APP.A.g(b,false)?EB:$APP.eb(b)},$APP.Dm,jG,fG,gG,hG,iG);Uk.N(null,$APP.nl,function(a,b){a=$APP.r(a)?5:20;var c=b.length>a?'..."':'"',d=b.length;return ['"',$APP.t.h(b.substring(0,a<d?a:d)),c].join("")});
  Uk.N(null,EB,function(a,b){return $APP.t.h(b)});Uk.N(null,$APP.Xc,function(){return "\x3cindexed seq\x3e"});Uk.N(null,Jg,function(){return "\x3cmap seq\x3e"});Uk.N(null,lh,function(){return "\x3cmap seq\x3e"});Uk.N(null,Ge,function(){return "\x3ccons\x3e"});Uk.N(null,$APP.Ne,function(){return "\x3clazy seq\x3e"});Uk.N(null,Ev,function(){return "nil"});Uk.N(null,$APP.am,function(a,b){return Wk(a,b,"(",")")});
  Uk.N(null,$APP.em,function(a,b){var c=$APP.xd(b),d=$APP.r(a)?0:c;b=$APP.Gf.g($APP.R,$APP.Mf.g(d,b));return Wk(a,b,"{",c>d?"...}":"}")});Uk.N(null,$APP.sm,function(a,b){return Wk(a,b,"#{","}")});Uk.N(null,$APP.cm,function(a,b){return Wk(a,b,"[","]")});Uk.N(null,$APP.Dm,function(a,b){return $APP.Ri.l($APP.F([$APP.eb(b)]))});var wl=/^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?$/,yl=/([-+]?[0-9]+)\/([0-9]+)/,xl=/([-+]?[0-9]+(\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?/,Bm=function Bm(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Bm.l(arguments[0],1<c.length?new $APP.Xc(c.slice(1),0,null):null)};Bm.l=function(a){for(;!$APP.uk(a.X(null)););return a};Bm.m=1;Bm.o=function(a){var b=$APP.y(a);a=$APP.z(a);return this.l(b,a)};new $APP.Fa;var Jm,Im;Jm=function(){var a=new $APP.J(null,13,5,$APP.N,[null,31,28,31,30,31,30,31,31,30,31,30,31],null),b=new $APP.J(null,13,5,$APP.N,[null,31,29,31,30,31,30,31,31,30,31,30,31],null);return function(c,d){return $APP.fe.g($APP.r(d)?b:a,c)}}();Im=/(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;$APP.kG=$APP.Vi.h(null);
  $APP.lG=$APP.Vi.h($APP.Qk.l($APP.F([new $APP.n(null,4,[$APP.xx,Lm,KD,function(a){if("string"===typeof a)return new $APP.nj(a.toLowerCase());throw Error("UUID literal expects a string as its representation.");},ME,function(a){if($APP.Xd(a))return $APP.Rg.g($APP.mv,a);throw Error("Queue literal expects a vector for its elements.");},$APP.Vs,function(a){if($APP.Xd(a)){var b=[];a=$APP.x(a);for(var c=null,d=0,e=0;;)if(e<d){var f=c.ba(null,e);b.push(f);e+=1;}else if(a=$APP.x(a))c=a,$APP.Zd(c)?(a=$APP.uc(c),
  e=$APP.vc(c),c=a,d=$APP.xd(a),a=e):(a=$APP.y(c),b.push(a),a=$APP.z(c),c=null,d=0),e=0;else break;return b}if($APP.Vd(a)){b={};a=$APP.x(a);c=null;for(e=d=0;;)if(e<d){var k=c.ba(null,e);f=$APP.B.j(k,0,null);k=$APP.B.j(k,1,null);f=$APP.ai(f);b[f]=k;e+=1;}else if(a=$APP.x(a))$APP.Zd(a)?(d=$APP.uc(a),a=$APP.vc(a),c=d,d=$APP.xd(d)):(d=$APP.y(a),c=$APP.B.j(d,0,null),d=$APP.B.j(d,1,null),c=$APP.ai(c),b[c]=d,a=$APP.z(a),c=null,d=0),e=0;else break;return b}throw Error("JS literal expects a vector or map containing only string or unqualified keyword keys");
  }],null),$APP.hf])));var Co=$APP.Qk.l($APP.F([new $APP.n(null,4,[ME,function(a){if(!$APP.Xd(a))throw Error("Queue literal expects a vector for its elements.");return new $APP.G(null,IA,new $APP.G(null,$APP.tz,new $APP.G(null,a,null,1,null),2,null),3,null)},KD,function(a){if("string"!==typeof a)throw Error("UUID literal expects a string as its representation.");try{return new $APP.nj(a.toLowerCase())}catch(b){throw Error(b.message);}},$APP.xx,function(a){if("string"!==typeof a)throw Error("Instance literal expects a string for its timestamp.");
  try{var b=new $APP.Vc(function(){return Lm},dw,$APP.vh([$APP.pq,$APP.T,$APP.U,$APP.$k,$APP.qq,$APP.Fm,$APP.al,$APP.rq,$APP.V,$APP.X,$APP.sq],[!0,MA,bF,"cljs/reader.cljs",26,1,92,92,$APP.Q(new $APP.J(null,1,5,$APP.N,[$APP.jA],null)),null,$APP.r(Lm)?Lm.ec:null]));return b.h?b.h(a):b.call(null,a)}catch(c){throw Error(c.message);}},$APP.Vs,function(a){if(!$APP.Xd(a)&&!$APP.Vd(a))throw Error("JavaScript literal must use map or vector notation");if($APP.Vd(a)&&!$APP.Df(Mm,$APP.Kh(a)))throw Error("JavaScript literal keys must be strings or unqualified keywords");
  return new $APP.Nm(a)}],null)]));var Sm=function Sm(a,b){return Pm($APP.Tk.g(Sm,a),a,b)};var Wn={},Xn={},qo=$APP.u(new $APP.Vc(function(){return Al},jw,$APP.vh([$APP.T,$APP.U,$APP.$k,$APP.qq,$APP.Fm,$APP.al,$APP.rq,$APP.V,$APP.X,$APP.sq],[LE,bD,"cljs/tools/reader/impl/commons.cljs",19,1,97,97,$APP.Q(new $APP.J(null,1,5,$APP.N,[WE],null)),"Parses a string into a vector of the namespace and symbol",$APP.r(Al)?Al.ec:null]))),So=$APP.u(new $APP.Vc(function(){return tl},zC,$APP.vh([$APP.T,$APP.U,$APP.$k,$APP.qq,$APP.Fm,$APP.al,$APP.rq,$APP.qm,$APP.V,$APP.X,$APP.sq],[LE,iz,"cljs/tools/reader/impl/commons.cljs",
  31,1,20,20,$APP.bq,$APP.Q(new $APP.J(null,2,5,$APP.N,[$APP.Md($APP.Fx,new $APP.n(null,1,[$APP.qm,$APP.Aw],null)),hw],null)),"Checks whether the reader is at the start of a number literal",tl?tl.ec:null]))),Kn=$APP.u(new $APP.Vc(function(){return jm},Qy,$APP.vh([$APP.pq,$APP.T,$APP.U,$APP.$k,$APP.qq,$APP.Fm,$APP.al,$APP.rq,$APP.V,$APP.X,$APP.sq],[true,MD,BD,"cljs/tools/reader/edn.cljs",19,1,217,217,$APP.Q(new $APP.J(null,2,5,$APP.N,[TB,pB],null)),null,$APP.r(jm)?jm.ec:null]))),Oo=$APP.u(new $APP.Vc(function(){return Wl},
  $E,$APP.vh([$APP.pq,$APP.T,$APP.U,$APP.$k,$APP.qq,$APP.Fm,$APP.al,$APP.rq,$APP.V,$APP.X,$APP.sq],[true,MD,Zv,"cljs/tools/reader/edn.cljs",18,1,118,118,$APP.Q(new $APP.J(null,3,5,$APP.N,[pB,Sx,$APP.gw],null)),null,$APP.r(Wl)?Wl.ec:null]))),wo=$APP.u(new $APP.Vc(function(){return Am},XB,$APP.vh([$APP.pq,$APP.T,$APP.U,$APP.$k,$APP.qq,$APP.Fm,$APP.al,$APP.rq,$APP.V,$APP.X,$APP.sq],[true,MD,GD,"cljs/tools/reader/edn.cljs",27,1,324,324,$APP.Q(new $APP.J(null,3,5,$APP.N,[pB,aA,$APP.gw],null)),null,$APP.r(Am)?
  Am.ec:null])));$APP.g=Mn.prototype;$APP.g.ia=function(a,b){return this.O(null,b,null)};$APP.g.O=function(a,b,c){switch(b instanceof $APP.I?b.da:null){case "row":return this.Bc;case "col":return this.wc;default:return $APP.fe.j(this.B,b,c)}};$APP.g.hb=function(a,b,c){return $APP.ne.j(function(d,e){var f=$APP.B.j(e,0,null);e=$APP.B.j(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};
  $APP.g.R=function(a,b,c){return $APP.ni(b,function(d){return $APP.ni(b,$APP.ti,""," ","",c,d)},"#edamame.impl.parser.Loc{",", ","}",c,$APP.R.g(new $APP.J(null,2,5,$APP.N,[new $APP.J(null,2,5,$APP.N,[An,this.Bc],null),new $APP.J(null,2,5,$APP.N,[bl,this.wc],null)],null),this.B))};$APP.g.Da=function(){return new $APP.Eg(this,2,new $APP.J(null,2,5,$APP.N,[An,bl],null),$APP.r(this.B)?$APP.Bc(this.B):$APP.mf())};$APP.g.V=function(){return this.H};$APP.g.aa=function(){return 2+$APP.xd(this.B)};
  $APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=1435872067^$APP.id(this)};$APP.g.Z=function(a,b){return null!=b&&this.constructor===b.constructor&&$APP.A.g(this.Bc,b.Bc)&&$APP.A.g(this.wc,b.wc)&&$APP.A.g(this.B,b.B)};$APP.g.ob=function(a,b){return $APP.he(new $APP.Uh(null,new $APP.n(null,2,[bl,null,An,null],null),null),b)?$APP.Rk.g($APP.Sb($APP.Rg.g($APP.hf,this),this.H),b):new Mn(this.Bc,this.wc,this.H,$APP.kf($APP.Rk.g(this.B,b)),null)};
  $APP.g.Za=function(a,b){switch(b instanceof $APP.I?b.da:null){case "row":case "col":return  true;default:return $APP.he(this.B,b)}};$APP.g.ha=function(a,b,c){return $APP.r($APP.Ke.g?$APP.Ke.g(An,b):$APP.Ke.call(null,An,b))?new Mn(c,this.wc,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g(bl,b):$APP.Ke.call(null,bl,b))?new Mn(this.Bc,c,this.H,this.B,null):new Mn(this.Bc,this.wc,this.H,$APP.Rh.j(this.B,b,c),null)};
  $APP.g.Y=function(){return $APP.x($APP.R.g(new $APP.J(null,2,5,$APP.N,[new $APP.Ig(An,this.Bc,null),new $APP.Ig(bl,this.wc,null)],null),this.B))};$APP.g.W=function(a,b){return new Mn(this.Bc,this.wc,b,this.B,this.F)};$APP.g.ea=function(a,b){return $APP.Xd(b)?this.ha(null,$APP.Id(b,0),$APP.Id(b,1)):$APP.ne.j($APP.ob,this,b)};var Yn=$APP.Hi.h("non-match");$APP.g=$o.prototype;$APP.g.ia=function(a,b){return this.O(null,b,null)};
  $APP.g.O=function(a,b,c){switch(b instanceof $APP.I?b.da:null){case "dispatch":return this.Ma;case "deref":return this.deref;case "syntax-quote":return this.Wa;case "unquote":return this.Xa;case "unquote-splicing":return this.Ya;case "quote":return this.quote;case "fn":return this.Ca;case "var":return this.Ea;case "read-eval":return this.Sa;case "regex":return this.Ta;case "row-key":return this.Ua;case "col-key":return this.La;case "end-row-key":return this.Pa;case "end-col-key":return this.Na;case "source":return this.source;
  case "source-key":return this.Va;case "postprocess":return this.Ra;case "location?":return this.Qa;case "end-location":return this.Oa;default:return $APP.fe.j(this.B,b,c)}};$APP.g.hb=function(a,b,c){return $APP.ne.j(function(d,e){var f=$APP.B.j(e,0,null);e=$APP.B.j(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};
  $APP.g.R=function(a,b,c){return $APP.ni(b,function(d){return $APP.ni(b,$APP.ti,""," ","",c,d)},"#edamame.impl.parser.Options{",", ","}",c,$APP.R.g(new $APP.J(null,19,5,$APP.N,[new $APP.J(null,2,5,$APP.N,[$APP.ap,this.Ma],null),new $APP.J(null,2,5,$APP.N,[$APP.Lo,this.deref],null),new $APP.J(null,2,5,$APP.N,[$APP.mn,this.Wa],null),new $APP.J(null,2,5,$APP.N,[Qo,this.Xa],null),new $APP.J(null,2,5,$APP.N,[Ro,this.Ya],null),new $APP.J(null,2,5,$APP.N,[No,this.quote],null),new $APP.J(null,2,5,$APP.N,[$APP.yo,
  this.Ca],null),new $APP.J(null,2,5,$APP.N,[$APP.xo,this.Ea],null),new $APP.J(null,2,5,$APP.N,[$APP.Ao,this.Sa],null),new $APP.J(null,2,5,$APP.N,[vo,this.Ta],null),new $APP.J(null,2,5,$APP.N,[$APP.sn,this.Ua],null),new $APP.J(null,2,5,$APP.N,[$APP.tn,this.La],null),new $APP.J(null,2,5,$APP.N,[un,this.Pa],null),new $APP.J(null,2,5,$APP.N,[vn,this.Na],null),new $APP.J(null,2,5,$APP.N,[$APP.Pk,this.source],null),new $APP.J(null,2,5,$APP.N,[Zo,this.Va],null),new $APP.J(null,2,5,$APP.N,[Uo,this.Ra],null),
  new $APP.J(null,2,5,$APP.N,[$APP.Vo,this.Qa],null),new $APP.J(null,2,5,$APP.N,[$APP.Wo,this.Oa],null)],null),this.B))};$APP.g.Da=function(){return new $APP.Eg(this,19,new $APP.J(null,19,5,$APP.N,[$APP.ap,$APP.Lo,$APP.mn,Qo,Ro,No,$APP.yo,$APP.xo,$APP.Ao,vo,$APP.sn,$APP.tn,un,vn,$APP.Pk,Zo,Uo,$APP.Vo,$APP.Wo],null),$APP.r(this.B)?$APP.Bc(this.B):$APP.mf())};$APP.g.V=function(){return this.H};$APP.g.aa=function(){return 19+$APP.xd(this.B)};
  $APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=-1037796634^$APP.id(this)};
  $APP.g.Z=function(a,b){return null!=b&&this.constructor===b.constructor&&$APP.A.g(this.Ma,b.Ma)&&$APP.A.g(this.deref,b.deref)&&$APP.A.g(this.Wa,b.Wa)&&$APP.A.g(this.Xa,b.Xa)&&$APP.A.g(this.Ya,b.Ya)&&$APP.A.g(this.quote,b.quote)&&$APP.A.g(this.Ca,b.Ca)&&$APP.A.g(this.If,b.If)&&$APP.A.g(this.Sa,b.Sa)&&$APP.A.g(this.Ta,b.Ta)&&$APP.A.g(this.Ua,b.Ua)&&$APP.A.g(this.La,b.La)&&$APP.A.g(this.Pa,b.Pa)&&$APP.A.g(this.Na,b.Na)&&$APP.A.g(this.source,b.source)&&$APP.A.g(this.Va,b.Va)&&$APP.A.g(this.Ra,b.Ra)&&
  $APP.A.g(this.Qa,b.Qa)&&$APP.A.g(this.Oa,b.Oa)&&$APP.A.g(this.B,b.B)};
  $APP.g.ob=function(a,b){return $APP.he(new $APP.Uh(null,new $APP.n(null,19,[$APP.yo,null,Ro,null,$APP.Wo,null,$APP.Vo,null,Qo,null,un,null,$APP.sn,null,$APP.tn,null,Zo,null,$APP.Ao,null,$APP.Pk,null,$APP.ap,null,$APP.mn,null,$APP.xo,null,No,null,$APP.Lo,null,vo,null,vn,null,Uo,null],null),null),b)?$APP.Rk.g($APP.Sb($APP.Rg.g($APP.hf,this),this.H),b):new $o(this.Ma,this.deref,this.Wa,this.Xa,this.Ya,this.quote,this.Ca,this.Ea,this.Sa,this.Ta,this.Ua,this.La,this.Pa,this.Na,this.source,this.Va,this.Ra,
  this.Qa,this.Oa,this.H,$APP.kf($APP.Rk.g(this.B,b)),null)};$APP.g.Za=function(a,b){switch(b instanceof $APP.I?b.da:null){case "dispatch":case "deref":case "syntax-quote":case "unquote":case "unquote-splicing":case "quote":case "fn":case "var":case "read-eval":case "regex":case "row-key":case "col-key":case "end-row-key":case "end-col-key":case "source":case "source-key":case "postprocess":case "location?":case "end-location":return  true;default:return $APP.he(this.B,b)}};
  $APP.g.ha=function(a,b,c){return $APP.r($APP.Ke.g?$APP.Ke.g($APP.ap,b):$APP.Ke.call(null,$APP.ap,b))?new $o(c,this.deref,this.Wa,this.Xa,this.Ya,this.quote,this.Ca,this.Ea,this.Sa,this.Ta,this.Ua,this.La,this.Pa,this.Na,this.source,this.Va,this.Ra,this.Qa,this.Oa,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g($APP.Lo,b):$APP.Ke.call(null,$APP.Lo,b))?new $o(this.Ma,c,this.Wa,this.Xa,this.Ya,this.quote,this.Ca,this.Ea,this.Sa,this.Ta,this.Ua,this.La,this.Pa,this.Na,this.source,this.Va,this.Ra,this.Qa,
  this.Oa,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g($APP.mn,b):$APP.Ke.call(null,$APP.mn,b))?new $o(this.Ma,this.deref,c,this.Xa,this.Ya,this.quote,this.Ca,this.Ea,this.Sa,this.Ta,this.Ua,this.La,this.Pa,this.Na,this.source,this.Va,this.Ra,this.Qa,this.Oa,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g(Qo,b):$APP.Ke.call(null,Qo,b))?new $o(this.Ma,this.deref,this.Wa,c,this.Ya,this.quote,this.Ca,this.Ea,this.Sa,this.Ta,this.Ua,this.La,this.Pa,this.Na,this.source,this.Va,this.Ra,this.Qa,this.Oa,this.H,
  this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g(Ro,b):$APP.Ke.call(null,Ro,b))?new $o(this.Ma,this.deref,this.Wa,this.Xa,c,this.quote,this.Ca,this.Ea,this.Sa,this.Ta,this.Ua,this.La,this.Pa,this.Na,this.source,this.Va,this.Ra,this.Qa,this.Oa,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g(No,b):$APP.Ke.call(null,No,b))?new $o(this.Ma,this.deref,this.Wa,this.Xa,this.Ya,c,this.Ca,this.Ea,this.Sa,this.Ta,this.Ua,this.La,this.Pa,this.Na,this.source,this.Va,this.Ra,this.Qa,this.Oa,this.H,this.B,null):$APP.r($APP.Ke.g?
  $APP.Ke.g($APP.yo,b):$APP.Ke.call(null,$APP.yo,b))?new $o(this.Ma,this.deref,this.Wa,this.Xa,this.Ya,this.quote,c,this.Ea,this.Sa,this.Ta,this.Ua,this.La,this.Pa,this.Na,this.source,this.Va,this.Ra,this.Qa,this.Oa,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g($APP.xo,b):$APP.Ke.call(null,$APP.xo,b))?new $o(this.Ma,this.deref,this.Wa,this.Xa,this.Ya,this.quote,this.Ca,c,this.Sa,this.Ta,this.Ua,this.La,this.Pa,this.Na,this.source,this.Va,this.Ra,this.Qa,this.Oa,this.H,this.B,null):$APP.r($APP.Ke.g?
  $APP.Ke.g($APP.Ao,b):$APP.Ke.call(null,$APP.Ao,b))?new $o(this.Ma,this.deref,this.Wa,this.Xa,this.Ya,this.quote,this.Ca,this.Ea,c,this.Ta,this.Ua,this.La,this.Pa,this.Na,this.source,this.Va,this.Ra,this.Qa,this.Oa,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g(vo,b):$APP.Ke.call(null,vo,b))?new $o(this.Ma,this.deref,this.Wa,this.Xa,this.Ya,this.quote,this.Ca,this.Ea,this.Sa,c,this.Ua,this.La,this.Pa,this.Na,this.source,this.Va,this.Ra,this.Qa,this.Oa,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g($APP.sn,
  b):$APP.Ke.call(null,$APP.sn,b))?new $o(this.Ma,this.deref,this.Wa,this.Xa,this.Ya,this.quote,this.Ca,this.Ea,this.Sa,this.Ta,c,this.La,this.Pa,this.Na,this.source,this.Va,this.Ra,this.Qa,this.Oa,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g($APP.tn,b):$APP.Ke.call(null,$APP.tn,b))?new $o(this.Ma,this.deref,this.Wa,this.Xa,this.Ya,this.quote,this.Ca,this.Ea,this.Sa,this.Ta,this.Ua,c,this.Pa,this.Na,this.source,this.Va,this.Ra,this.Qa,this.Oa,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g(un,b):$APP.Ke.call(null,
  un,b))?new $o(this.Ma,this.deref,this.Wa,this.Xa,this.Ya,this.quote,this.Ca,this.Ea,this.Sa,this.Ta,this.Ua,this.La,c,this.Na,this.source,this.Va,this.Ra,this.Qa,this.Oa,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g(vn,b):$APP.Ke.call(null,vn,b))?new $o(this.Ma,this.deref,this.Wa,this.Xa,this.Ya,this.quote,this.Ca,this.Ea,this.Sa,this.Ta,this.Ua,this.La,this.Pa,c,this.source,this.Va,this.Ra,this.Qa,this.Oa,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g($APP.Pk,b):$APP.Ke.call(null,$APP.Pk,b))?new $o(this.Ma,
  this.deref,this.Wa,this.Xa,this.Ya,this.quote,this.Ca,this.Ea,this.Sa,this.Ta,this.Ua,this.La,this.Pa,this.Na,c,this.Va,this.Ra,this.Qa,this.Oa,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g(Zo,b):$APP.Ke.call(null,Zo,b))?new $o(this.Ma,this.deref,this.Wa,this.Xa,this.Ya,this.quote,this.Ca,this.Ea,this.Sa,this.Ta,this.Ua,this.La,this.Pa,this.Na,this.source,c,this.Ra,this.Qa,this.Oa,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g(Uo,b):$APP.Ke.call(null,Uo,b))?new $o(this.Ma,this.deref,this.Wa,this.Xa,
  this.Ya,this.quote,this.Ca,this.Ea,this.Sa,this.Ta,this.Ua,this.La,this.Pa,this.Na,this.source,this.Va,c,this.Qa,this.Oa,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g($APP.Vo,b):$APP.Ke.call(null,$APP.Vo,b))?new $o(this.Ma,this.deref,this.Wa,this.Xa,this.Ya,this.quote,this.Ca,this.Ea,this.Sa,this.Ta,this.Ua,this.La,this.Pa,this.Na,this.source,this.Va,this.Ra,c,this.Oa,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g($APP.Wo,b):$APP.Ke.call(null,$APP.Wo,b))?new $o(this.Ma,this.deref,this.Wa,this.Xa,
  this.Ya,this.quote,this.Ca,this.Ea,this.Sa,this.Ta,this.Ua,this.La,this.Pa,this.Na,this.source,this.Va,this.Ra,this.Qa,c,this.H,this.B,null):new $o(this.Ma,this.deref,this.Wa,this.Xa,this.Ya,this.quote,this.Ca,this.Ea,this.Sa,this.Ta,this.Ua,this.La,this.Pa,this.Na,this.source,this.Va,this.Ra,this.Qa,this.Oa,this.H,$APP.Rh.j(this.B,b,c),null)};
  $APP.g.Y=function(){return $APP.x($APP.R.g(new $APP.J(null,19,5,$APP.N,[new $APP.Ig($APP.ap,this.Ma,null),new $APP.Ig($APP.Lo,this.deref,null),new $APP.Ig($APP.mn,this.Wa,null),new $APP.Ig(Qo,this.Xa,null),new $APP.Ig(Ro,this.Ya,null),new $APP.Ig(No,this.quote,null),new $APP.Ig($APP.yo,this.Ca,null),new $APP.Ig($APP.xo,this.Ea,null),new $APP.Ig($APP.Ao,this.Sa,null),new $APP.Ig(vo,this.Ta,null),new $APP.Ig($APP.sn,this.Ua,null),new $APP.Ig($APP.tn,this.La,null),new $APP.Ig(un,this.Pa,null),new $APP.Ig(vn,
  this.Na,null),new $APP.Ig($APP.Pk,this.source,null),new $APP.Ig(Zo,this.Va,null),new $APP.Ig(Uo,this.Ra,null),new $APP.Ig($APP.Vo,this.Qa,null),new $APP.Ig($APP.Wo,this.Oa,null)],null),this.B))};$APP.g.W=function(a,b){return new $o(this.Ma,this.deref,this.Wa,this.Xa,this.Ya,this.quote,this.Ca,this.Ea,this.Sa,this.Ta,this.Ua,this.La,this.Pa,this.Na,this.source,this.Va,this.Ra,this.Qa,this.Oa,b,this.B,this.F)};
  $APP.g.ea=function(a,b){return $APP.Xd(b)?this.ha(null,$APP.Id(b,0),$APP.Id(b,1)):$APP.ne.j($APP.ob,this,b)};var kp={s:function(a,b,c){return isNaN(c)||""==c||a.length>=Number(c)?a:a=-1<b.indexOf("-",0)?a+Lu(" ",Number(c)-a.length):Lu(" ",Number(c)-a.length)+a},f:function(a,b,c,d,e){d=a.toString();isNaN(e)||""==e||(d=parseFloat(a).toFixed(e));let f;f=0>Number(a)?"-":0<=b.indexOf("+")?"+":0<=b.indexOf(" ")?" ":"";0<=Number(a)&&(d=f+d);if(isNaN(c)||d.length>=Number(c))return d;d=isNaN(e)?Math.abs(Number(a)).toString():Math.abs(Number(a)).toFixed(e);a=Number(c)-d.length-f.length;0<=b.indexOf("-",0)?d=f+d+Lu(" ",
  a):(b=0<=b.indexOf("0",0)?"0":" ",d=f+Lu(b,a)+d);return d},d:function(a,b,c,d,e,f,k,l){return kp.f(parseInt(a,10),b,c,d,0,f,k,l)}};kp.i=kp.d;kp.u=kp.d;$APP.Dp=function Dp(a,b){return $APP.mp($APP.Tk.g(Dp,a),$APP.se,a.h?a.h(b):a.call(null,b))};var mG=function mG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return mG.l(arguments[0],arguments[1],2<c.length?new $APP.Xc(c.slice(2),0,null):null)};mG.l=function(a,b,c){return $APP.S.h($APP.x($APP.R.g(new $APP.G(null,eC,null,1,null),c)))};mG.m=2;mG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};
  var nG=function nG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return nG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  nG.l=function(a,b,c,d){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,dE,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,Gj,null,1,null),new $APP.G(null,$APP.Gf.g($APP.Fo,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Kp,null,1,null),new $APP.G(null,no,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,["~{}`",$APP.Jp.h($APP.ui.g(aq,d)),"`"].join(""),null,1,null),new $APP.G(null,c,null,1,
  null),$APP.Is.g(function(e){return "string"!==typeof e},d)])))),null,1,null))))),null,1,null),$APP.F([new $APP.G(null,dE,null,1,null)]))))};nG.m=3;nG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};var oG=function oG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return oG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};oG.l=function(a,b,c,d){for(a=c;;)if($APP.r(d))b=$APP.y(d),a=$APP.be(b)?$APP.Md($APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.y(b),null,1,null),new $APP.G(null,a,null,1,null),$APP.F([$APP.z(b)])))),$APP.Nd(b)):new $APP.G(null,b,new $APP.G(null,a,null,1,null),2,null),d=$APP.z(d);else return a};
  oG.m=3;oG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};var pG=function pG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return pG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  pG.l=function(a,b,c,d){for(a=c;;)if($APP.r(d))b=$APP.y(d),a=$APP.be(b)?$APP.Md($APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.y(b),null,1,null),$APP.z(b),$APP.F([new $APP.G(null,a,null,1,null)])))),$APP.Nd(b)):new $APP.G(null,b,new $APP.G(null,a,null,1,null),2,null),d=$APP.z(d);else return a};pG.m=3;pG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};
  var qG=function qG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return qG.l(arguments[0],arguments[1],arguments[2],arguments[3],4<c.length?new $APP.Xc(c.slice(4),0,null):null)};
  qG.l=function(a,b,c,d,e){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.l(new $APP.G(null,d,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([$APP.ev.g($APP.Jr.h(d),$APP.$h(e))]))))),null,1,null),$APP.F([new $APP.G(null,$APP.Qd(e)?d:$APP.Gd(e),null,1,null)]))))};qG.m=4;qG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);e=$APP.z(e);return this.l(b,a,c,d,e)};
  var rG=function rG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return rG.l(arguments[0],arguments[1],2<c.length?new $APP.Xc(c.slice(2),0,null):null)};rG.l=function(){return null};rG.m=2;rG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};
  var sG=function sG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return sG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  sG.l=function(a,b,c,d){a=$APP.y(c);c=$APP.Cd(c);return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,pF,null,1,null),new $APP.G(null,c,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.at,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,a,null,1,null),new $APP.G(null,0,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,
  $APP.bt,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.ct,null,1,null),new $APP.G(null,a,null,1,null),$APP.F([new $APP.G(null,pF,null,1,null)])))),null,1,null),$APP.F([d,new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Ij,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,et,null,1,null),new $APP.G(null,a,null,1,null)))),null,1,null)))),null,1,null)])))),null,1,null)])))),null,1,null)]))))};sG.m=3;
  sG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};var tG=function tG(a){switch(arguments.length){case 4:return tG.A(arguments[0],arguments[1],arguments[2],arguments[3]);case 5:return tG.J(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};tG.A=function(a,b,c,d){return tG.J(a,b,c,d,null)};
  tG.J=function(a,b,c,d,e){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Bj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.AD,null,1,null),new $APP.G(null,c,null,1,null)))),null,1,null),$APP.F([new $APP.G(null,d,null,1,null),new $APP.G(null,e,null,1,null)]))))};tG.m=5;var uG=function uG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return uG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  uG.l=function(a,b,c,d){return new $APP.G(null,$APP.Bj,new $APP.G(null,c,new $APP.G(null,$APP.He($APP.zj,d),null,1,null),2,null),3,null)};uG.m=3;uG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};var vG=function vG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return vG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  vG.l=function(a,b,c,d){return new $APP.G(null,$APP.Bj,new $APP.G(null,c,new $APP.G(null,null,new $APP.G(null,$APP.He($APP.zj,d),null,1,null),2,null),3,null),4,null)};vG.m=3;vG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};var wG=function wG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return wG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  wG.l=function(a,b,c,d){var e=$APP.kn.v();return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,e,null,1,null),new $APP.G(null,c,null,1,null))))),null,1,null),$APP.F([$APP.ui.g(function(f){return $APP.Md($APP.be(f)?$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.y(f),null,1,null),new $APP.G(null,e,null,1,null),$APP.F([$APP.z(f)])))):$APP.S.h($APP.x($APP.R.g(new $APP.G(null,f,null,1,null),new $APP.G(null,e,null,1,null)))),
  $APP.Nd(f))},d),new $APP.G(null,e,null,1,null)]))))};wG.m=3;wG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};var xG=function xG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return xG.l(arguments[0],arguments[1],2<c.length?new $APP.Xc(c.slice(2),0,null):null)};
  xG.l=function(a,b,c){if($APP.r(c)){a=$APP.Bj;b=$APP.y(c);if($APP.z(c))var d=$APP.Cd(c);else throw Error("cond requires an even number of forms");c=new $APP.G(null,a,new $APP.G(null,b,new $APP.G(null,d,new $APP.G(null,$APP.He($APP.Hy,$APP.z($APP.z(c))),null,1,null),2,null),3,null),4,null);}else c=null;return c};xG.m=2;xG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};
  var yG=function yG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return yG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  yG.l=function(a,b,c,d){var e=$APP.kn.v();a=$APP.ui.g(function(f){var k=$APP.B.j(f,0,null);f=$APP.B.j(f,1,null);return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Bj,null,1,null),new $APP.G(null,k,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.sE,null,1,null),new $APP.G(null,e,null,1,null),$APP.F([new $APP.G(null,f,null,1,null)])))),null,1,null),new $APP.G(null,e,null,1,null)]))))},$APP.ir.g(2,d));return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,
  null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.l(new $APP.G(null,e,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([$APP.ev.g($APP.Jr.h(e),$APP.$h(a))]))))),null,1,null),$APP.F([new $APP.G(null,$APP.Qd(a)?e:$APP.Gd(a),null,1,null)]))))};yG.m=3;yG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};
  var zG=function zG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return zG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  zG.l=function(a,b,c,d){var e=$APP.kn.v();a=$APP.ui.g(function(f){var k=$APP.B.j(f,0,null);f=$APP.B.j(f,1,null);return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Bj,null,1,null),new $APP.G(null,k,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.KE,null,1,null),new $APP.G(null,e,null,1,null),$APP.F([new $APP.G(null,f,null,1,null)])))),null,1,null),new $APP.G(null,e,null,1,null)]))))},$APP.ir.g(2,d));return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,
  null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.l(new $APP.G(null,e,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([$APP.ev.g($APP.Jr.h(e),$APP.$h(a))]))))),null,1,null),$APP.F([new $APP.G(null,$APP.Qd(a)?e:$APP.Gd(a),null,1,null)]))))};zG.m=3;zG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};
  var AG=function AG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return AG.l(arguments[0],arguments[1],arguments[2],arguments[3],4<c.length?new $APP.Xc(c.slice(4),0,null):null)};
  AG.l=function(a,b,c,d,e){a=$APP.kn.h("pred__");b=$APP.kn.h("expr__");return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.l(new $APP.G(null,a,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([new $APP.G(null,b,null,1,null),new $APP.G(null,d,null,1,null)]))))),null,1,null),$APP.F([new $APP.G(null,function h(k,l,m){var q=$APP.Of($APP.A.g($APP.JF,$APP.Cd(m))?3:2,m),p=$APP.B.j(q,0,null);m=$APP.B.j(p,0,null);var v=$APP.B.j(p,1,null),D=$APP.B.j(p,
  2,null);q=$APP.B.j(q,1,null);p=$APP.xd(p);return $APP.A.g(0,p)?$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Oj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$B,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Ct,null,1,null),new $APP.G(null,"No matching clause: ",null,1,null),$APP.F([new $APP.G(null,l,null,1,null)])))),null,1,null)))),null,1,null)))):$APP.A.g(1,p)?m:$APP.A.g(2,p)?$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Bj,null,1,null),new $APP.G(null,
  $APP.S.h($APP.x($APP.R.l(new $APP.G(null,k,null,1,null),new $APP.G(null,m,null,1,null),$APP.F([new $APP.G(null,l,null,1,null)])))),null,1,null),$APP.F([new $APP.G(null,v,null,1,null),new $APP.G(null,h(k,l,q),null,1,null)])))):$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.yE,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,WF,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,k,null,1,null),new $APP.G(null,m,null,1,null),$APP.F([new $APP.G(null,l,null,
  1,null)])))),null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,D,null,1,null),new $APP.G(null,WF,null,1,null)))),null,1,null),new $APP.G(null,h(k,l,q),null,1,null)]))))}(a,b,e),null,1,null)]))))};AG.m=4;AG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);e=$APP.z(e);return this.l(b,a,c,d,e)};
  var BG=function BG(a){switch(arguments.length){case 4:return BG.A(arguments[0],arguments[1],arguments[2],arguments[3]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return BG.l(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],new $APP.Xc(c.slice(5),0,null))}};BG.A=function(a,b,c,d){return BG(a,b,c,d,null)};
  BG.l=function(a,b,c,d,e){a=c.h?c.h(0):c.call(null,0);c=c.h?c.h(1):c.call(null,1);return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,HE,null,1,null),new $APP.G(null,c,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Bj,null,1,null),new $APP.G(null,HE,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,
  a,null,1,null),new $APP.G(null,HE,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,d,null,1,null)])))),null,1,null),new $APP.G(null,e,null,1,null)])))),null,1,null)]))))};BG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);var f=$APP.z(e);e=$APP.y(f);f=$APP.z(f);return this.l(b,a,c,d,e,f)};BG.m=5;
  var CG=function CG(a){switch(arguments.length){case 4:return CG.A(arguments[0],arguments[1],arguments[2],arguments[3]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return CG.l(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],new $APP.Xc(c.slice(5),0,null))}};CG.A=function(a,b,c,d){return CG(a,b,c,d,null)};
  CG.l=function(a,b,c,d,e){a=c.h?c.h(0):c.call(null,0);c=c.h?c.h(1):c.call(null,1);return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,bw,null,1,null),new $APP.G(null,c,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Bj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.qs,null,1,null),new $APP.G(null,bw,null,1,null)))),null,1,null),$APP.F([new $APP.G(null,
  e,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,a,null,1,null),new $APP.G(null,bw,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,d,null,1,null)])))),null,1,null)])))),null,1,null)]))))};CG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);var f=$APP.z(e);e=$APP.y(f);f=$APP.z(f);return this.l(b,a,c,d,e,f)};CG.m=5;
  var DG=function DG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return DG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  DG.l=function(a,b,c,d){a=c.h?c.h(0):c.call(null,0);c=c.h?c.h(1):c.call(null,1);return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,RF,null,1,null),new $APP.G(null,c,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.bt,null,1,null),new $APP.G(null,RF,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,
  a,null,1,null),new $APP.G(null,RF,null,1,null))))),null,1,null),$APP.F([d])))),null,1,null)])))),null,1,null)]))))};DG.m=3;DG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};var EG=function EG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return EG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  EG.l=function(a,b,c,d){a=$APP.B.j(c,0,null);c=$APP.B.j(c,1,null);return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.ox,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,hy,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Qs,null,1,null),new $APP.G(null,c,null,1,null)))),null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,
  a,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Rs,null,1,null),new $APP.G(null,hy,null,1,null)))),null,1,null))))),null,1,null),$APP.F([d])))),null,1,null)]))))};EG.m=3;EG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};
  var FG=function FG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return FG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  FG.l=function(a,b,c,d){a=c.h?c.h(0):c.call(null,0);c=c.h?c.h(1):c.call(null,1);return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,hz,null,1,null),new $APP.G(null,c,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Bj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.qs,null,1,null),new $APP.G(null,hz,null,1,null)))),null,1,null),$APP.F([new $APP.G(null,
  null,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,a,null,1,null),new $APP.G(null,hz,null,1,null))))),null,1,null),$APP.F([d])))),null,1,null)])))),null,1,null)]))))};FG.m=3;FG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};
  var GG=function GG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return GG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  GG.l=function(a,b,c,d){var e=$APP.kn.v();a=$APP.ui.g(function(f){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Bj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.qs,null,1,null),new $APP.G(null,e,null,1,null)))),null,1,null),$APP.F([new $APP.G(null,null,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.sE,null,1,null),new $APP.G(null,e,null,1,null),$APP.F([new $APP.G(null,f,null,1,null)])))),null,1,null)]))))},d);return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,
  $APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.l(new $APP.G(null,e,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([$APP.ev.g($APP.Jr.h(e),$APP.$h(a))]))))),null,1,null),$APP.F([new $APP.G(null,$APP.Qd(a)?e:$APP.Gd(a),null,1,null)]))))};GG.m=3;GG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};
  var HG=function HG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return HG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  HG.l=function(a,b,c,d){var e=$APP.kn.v();a=$APP.ui.g(function(f){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Bj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.qs,null,1,null),new $APP.G(null,e,null,1,null)))),null,1,null),$APP.F([new $APP.G(null,null,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.KE,null,1,null),new $APP.G(null,e,null,1,null),$APP.F([new $APP.G(null,f,null,1,null)])))),null,1,null)]))))},d);return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,
  $APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.l(new $APP.G(null,e,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([$APP.ev.g($APP.Jr.h(e),$APP.$h(a))]))))),null,1,null),$APP.F([new $APP.G(null,$APP.Qd(a)?e:$APP.Gd(a),null,1,null)]))))};HG.m=3;HG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};
  var IG=function IG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return IG.l(arguments[0],arguments[1],2<c.length?new $APP.Xc(c.slice(2),0,null):null)};IG.l=function(a,b,c){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Cj,null,1,null),new $APP.G(null,$APP.Jy,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.ys,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.v()))),null,1,null),$APP.F([c])))),null,1,null)]))))};
  IG.m=2;IG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};var JG=function JG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return JG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  JG.l=function(a,b,c,d){return function(){var e=function(){function f(l){var m=null;if(0<arguments.length){m=0;for(var h=Array(arguments.length-0);m<h.length;)h[m]=arguments[m+0],++m;m=new $APP.Xc(h,0,null);}return k.call(this,m)}function k(l){throw $APP.cl.g($APP.Gf.g($APP.t,l),$APP.hf);}f.m=0;f.o=function(l){l=$APP.x(l);return k(l)};f.l=k;return f}();return function l(k){if($APP.Za(k))return $APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.zj,null,1,null),d)));var m=$APP.y(k),h=$APP.Cd(k);k=l($APP.Fd(k));
  return $APP.A.g(m,$APP.gB)?$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,h,null,1,null),$APP.F([new $APP.G(null,k,null,1,null)])))):$APP.A.g(m,$APP.aG)?$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Bj,null,1,null),new $APP.G(null,h,null,1,null),$APP.F([new $APP.G(null,$APP.Md($APP.S.h($APP.x($APP.R.l(new $APP.G(null,Gj,null,1,null),new $APP.G(null,"~{}",null,1,null),$APP.F([new $APP.G(null,k,null,1,null)])))),new $APP.n(null,1,[$APP.Kp,no],null)),null,1,null),new $APP.G(null,
  $APP.Md($APP.S.h($APP.x($APP.R.g(new $APP.G(null,Gj,null,1,null),new $APP.G(null,"break;\n",null,1,null)))),new $APP.n(null,1,[$APP.Kp,no],null)),null,1,null)])))):$APP.A.g(m,$APP.ry)?$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.bt,null,1,null),new $APP.G(null,h,null,1,null),$APP.F([new $APP.G(null,k,null,1,null)])))):m instanceof $APP.I?e("Invalid 'doseq' keyword",m):new $APP.G(null,DE,new $APP.G(null,new $APP.J(null,2,5,$APP.N,[m,h],null),new $APP.G(null,k,null,1,null),2,null),3,null)}($APP.x(c))}()};
  JG.m=3;JG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};var LG=function LG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return LG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  LG.l=function(a,b,c,d){var e=$APP.kn.v();a=$APP.Ff($APP.xd(d))?$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Oj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Bt,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Ct,null,1,null),new $APP.G(null,"No matching clause: ",null,1,null),$APP.F([new $APP.G(null,e,null,1,null)])))),null,1,null)))),null,1,null)))):$APP.Gd(d);var f=$APP.ne.j(function(l,m){var h=$APP.B.j(m,0,null),q=$APP.B.j(m,1,null);return $APP.be(h)?
  $APP.ne.j(function(p,v){return dq(p,v instanceof $APP.w?new $APP.G(null,$APP.Mj,new $APP.G(null,v,null,1,null),2,null):v,q,b)},l,h):h instanceof $APP.w?dq(l,new $APP.G(null,$APP.Mj,new $APP.G(null,h,null,1,null),2,null),q,b):dq(l,h,q,b)},$APP.hf,$APP.ir.g(2,d)),k=$APP.Kh(f);return $APP.Df($APP.cv.l($APP.Je,$APP.Ya,$APP.ab,$APP.F([$APP.Yq.g($APP.bb,BC),function(l){return (l=$APP.Ae(l))?$APP.fe.g(l,$APP.Dx):null}])),k)?(f=$APP.Ff($APP.xd(d))?d:$APP.$h(d),d=$APP.fv.g(function(l){return $APP.be(l)?$APP.lg(l):
  new $APP.J(null,1,5,$APP.N,[l],null)},$APP.fm.g(2,f)),f=$APP.lg($APP.fm.g(2,$APP.Nf.g(1,f))),$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,e,null,1,null),new $APP.G(null,c,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.rj,null,1,null),new $APP.G(null,e,null,1,null),$APP.F([new $APP.G(null,d,null,1,null),new $APP.G(null,f,null,1,null),new $APP.G(null,a,null,1,null)])))),
  null,1,null)]))))):$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,e,null,1,null),new $APP.G(null,c,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,UE,null,1,null),$APP.Zp.l(function(l){var m=$APP.B.j(l,0,null);l=$APP.B.j(l,1,null);return $APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.LF,null,1,null),new $APP.G(null,m,null,1,null),$APP.F([new $APP.G(null,
  e,null,1,null)])))),null,1,null),new $APP.G(null,l,null,1,null))))},$APP.F([f])),$APP.F([new $APP.G(null,$APP.Mz,null,1,null),new $APP.G(null,a,null,1,null)])))),null,1,null)]))))};LG.m=3;LG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};
  var MG=function MG(a){switch(arguments.length){case 4:return MG.A(arguments[0],arguments[1],arguments[2],arguments[3]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return MG.l(arguments[0],arguments[1],arguments[2],arguments[3],new $APP.Xc(c.slice(4),0,null))}};MG.A=function(a,b,c,d){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Kj,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([new $APP.G(null,d,null,1,null)]))))};
  MG.l=function(a,b,c,d,e){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Yv,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Kj,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([new $APP.G(null,d,null,1,null)])))),null,1,null),$APP.F([e]))))};MG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);e=$APP.z(e);return this.l(b,a,c,d,e)};MG.m=4;
  var NG=function NG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return NG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};NG.l=function(a,b,c,d){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,c,null,1,null),new $APP.G(null,new $APP.G(null,Gj,new $APP.G(null,"this",null,1,null),2,null),null,1,null))))),null,1,null),$APP.F([d]))))};
  NG.m=3;NG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};var OG=function OG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return OG.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  OG.l=function(a,b,c,d){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,Aj,null,1,null),new $APP.G(null,$APP.lg($APP.ev.g($APP.ui.g($APP.y,c),$APP.ui.g(function(e){return $APP.He($APP.ys,$APP.cd(e))},c))),null,1,null),$APP.F([d]))))};OG.m=3;OG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};
  var PG=function PG(a){switch(arguments.length){case 2:return PG.g(arguments[0],arguments[1]);case 3:return PG.j(arguments[0],arguments[1],arguments[2]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return PG.l(arguments[0],arguments[1],arguments[2],new $APP.Xc(c.slice(3),0,null))}};PG.g=function(){return null};PG.j=function(a,b,c){return c};
  PG.l=function(a,b,c,d){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,yy,null,1,null),new $APP.G(null,c,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Bj,null,1,null),new $APP.G(null,yy,null,1,null),$APP.F([new $APP.G(null,yy,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.rz,null,1,null),d))),null,1,null)])))),null,1,null)]))))};
  PG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};PG.m=3;var QG=function QG(a){switch(arguments.length){case 2:return QG.g(arguments[0],arguments[1]);case 3:return QG.j(arguments[0],arguments[1],arguments[2]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return QG.l(arguments[0],arguments[1],arguments[2],new $APP.Xc(c.slice(3),0,null))}};QG.g=function(){return  true};QG.j=function(a,b,c){return c};
  QG.l=function(a,b,c,d){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,jy,null,1,null),new $APP.G(null,c,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Bj,null,1,null),new $APP.G(null,jy,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.bz,null,1,null),d))),null,1,null),new $APP.G(null,jy,null,1,null)])))),null,1,null)]))))};
  QG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};QG.m=3;var RG=function RG(a){switch(arguments.length){case 3:return RG.j(arguments[0],arguments[1],arguments[2]);case 4:return RG.A(arguments[0],arguments[1],arguments[2],arguments[3]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};
  RG.j=function(a,b,c){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.XC,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Oj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Bt,null,1,null),new $APP.G(null,["Assert failed: ",$APP.Ri.l($APP.F([c]))].join(""),null,1,null)))),null,1,null)))),null,1,null)]))))};
  RG.A=function(a,b,c,d){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.XC,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Oj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Bt,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Ct,null,1,null),new $APP.G(null,"Assert failed: ",null,1,null),$APP.F([new $APP.G(null,d,null,1,null),new $APP.G(null,"\n",null,1,null),new $APP.G(null,
  $APP.Ri.l($APP.F([c])),null,1,null)])))),null,1,null)))),null,1,null)))),null,1,null)]))))};RG.m=4;var SG=function SG(a){switch(arguments.length){case 4:return SG.A(arguments[0],arguments[1],arguments[2],arguments[3]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return SG.l(arguments[0],arguments[1],arguments[2],arguments[3],new $APP.Xc(c.slice(4),0,null))}};
  SG.A=function(a,b,c,d){return new $APP.G(null,Gj,new $APP.G(null,"(~{} \x26 ~{})",new $APP.G(null,c,new $APP.G(null,d,null,1,null),2,null),3,null),4,null)};SG.l=function(a,b,c,d,e){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,Oy,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,Oy,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([new $APP.G(null,d,null,1,null)])))),null,1,null),$APP.F([e]))))};
  SG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);e=$APP.z(e);return this.l(b,a,c,d,e)};SG.m=4;var TG=function TG(a){switch(arguments.length){case 4:return TG.A(arguments[0],arguments[1],arguments[2],arguments[3]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return TG.l(arguments[0],arguments[1],arguments[2],arguments[3],new $APP.Xc(c.slice(4),0,null))}};
  TG.A=function(a,b,c,d){return cq(new $APP.G(null,Gj,new $APP.G(null,"(~{} \x26 ~{})",new $APP.G(null,c,new $APP.G(null,d,null,1,null),2,null),3,null),4,null))};TG.l=function(a,b,c,d,e){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,Lw,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,Lw,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([new $APP.G(null,d,null,1,null)])))),null,1,null),$APP.F([e]))))};
  TG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);e=$APP.z(e);return this.l(b,a,c,d,e)};TG.m=4;var UG=function UG(a){switch(arguments.length){case 4:return UG.A(arguments[0],arguments[1],arguments[2],arguments[3]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return UG.l(arguments[0],arguments[1],arguments[2],arguments[3],new $APP.Xc(c.slice(4),0,null))}};
  UG.A=function(a,b,c,d){return new $APP.G(null,Gj,new $APP.G(null,"(~{} | ~{})",new $APP.G(null,c,new $APP.G(null,d,null,1,null),2,null),3,null),4,null)};UG.l=function(a,b,c,d,e){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,Gy,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,Gy,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([new $APP.G(null,d,null,1,null)])))),null,1,null),$APP.F([e]))))};
  UG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);e=$APP.z(e);return this.l(b,a,c,d,e)};UG.m=4;var VG=function VG(a){switch(arguments.length){case 4:return VG.A(arguments[0],arguments[1],arguments[2],arguments[3]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return VG.l(arguments[0],arguments[1],arguments[2],arguments[3],new $APP.Xc(c.slice(4),0,null))}};
  VG.A=function(a,b,c,d){return new $APP.G(null,Gj,new $APP.G(null,"(~{} ^ ~{})",new $APP.G(null,c,new $APP.G(null,d,null,1,null),2,null),3,null),4,null)};VG.l=function(a,b,c,d,e){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,NE,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,NE,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([new $APP.G(null,d,null,1,null)])))),null,1,null),$APP.F([e]))))};
  VG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);e=$APP.z(e);return this.l(b,a,c,d,e)};VG.m=4;var WG=function WG(a){switch(arguments.length){case 4:return WG.A(arguments[0],arguments[1],arguments[2],arguments[3]);default:for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return WG.l(arguments[0],arguments[1],arguments[2],arguments[3],new $APP.Xc(c.slice(4),0,null))}};
  WG.A=function(a,b,c,d){return new $APP.G(null,Gj,new $APP.G(null,"(~{} \x26 ~~{})",new $APP.G(null,c,new $APP.G(null,d,null,1,null),2,null),3,null),4,null)};WG.l=function(a,b,c,d,e){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,Tx,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,Tx,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([new $APP.G(null,d,null,1,null)])))),null,1,null),$APP.F([e]))))};
  WG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);e=$APP.z(e);return this.l(b,a,c,d,e)};WG.m=4;var XG=function XG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return XG.l(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],5<c.length?new $APP.Xc(c.slice(5),0,null):null)};
  XG.l=function(a,b,c,d,e,f){a=$APP.jf(f);a=$APP.fe.j(a,Xw,$APP.kE);b=$APP.Ri.l($APP.F([c]));f=$APP.Ri.l($APP.F([d]));return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.l(new $APP.G(null,bB,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,EA,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.h(new $APP.G(null,
  SF,null,1,null)))),null,1,null)))),null,1,null),$APP.F([new $APP.G(null,xz,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,Ey,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,Ow,null,1,null),new $APP.G(null,e,null,1,null))))),null,1,null),$APP.F([new $APP.G(null,d,null,1,null)])))),null,1,null),new $APP.G(null,wB,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,EA,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.h(new $APP.G(null,
  SF,null,1,null)))),null,1,null)))),null,1,null),new $APP.G(null,$y,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,Dt,null,1,null),new $APP.G(null,wB,null,1,null),$APP.F([new $APP.G(null,bB,null,1,null)])))),null,1,null)]))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,a,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Ct,null,1,null),new $APP.G(null,b,null,1,null),$APP.F([new $APP.G(null,", ",null,1,null),new $APP.G(null,
  f,null,1,null),new $APP.G(null,", ",null,1,null),new $APP.G(null,e,null,1,null),new $APP.G(null," runs, ",null,1,null),new $APP.G(null,$y,null,1,null),new $APP.G(null," msecs",null,1,null)])))),null,1,null)))),null,1,null)])))),null,1,null)]))))};XG.m=5;XG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);var f=$APP.z(e);e=$APP.y(f);f=$APP.z(f);return this.l(b,a,c,d,e,f)};
  var YG=function YG(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return YG.l(arguments[0],arguments[1],2<c.length?new $APP.Xc(c.slice(2),0,null):null)};
  YG.l=function(a,b,c){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Cj,null,1,null),new $APP.G(null,$APP.YE,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.ys,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.v()))),null,1,null),$APP.F([c])))),null,1,null),new $APP.G(null,null,null,1,null)]))))};YG.m=2;YG.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};var ZG=$APP.vh([$APP.Lq,$APP.Iw,$APP.FB,dy,rF,$APP.FF,$APP.mD,$APP.Rw,rE,Cx,Vz,Fz,$APP.rC,$APP.Jz,$APP.JE,$APP.Sq,$APP.ey,ID,$APP.OF,$APP.xF],[UG,function(a,b,c,d){return new $APP.G(null,Gj,new $APP.G(null,"(~{} \x3c\x3c ~{})",new $APP.G(null,c,new $APP.G(null,d,null,1,null),2,null),3,null),4,null)},function(a,b,c){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,Gy,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([new $APP.G(null,0,null,1,null)]))))},function(a,b,c,d){return cq(new $APP.G(null,
  Gj,new $APP.G(null,"(~{} !\x3d ~{})",new $APP.G(null,c,new $APP.G(null,d,null,1,null),2,null),3,null),4,null))},TG,function(a,b,c,d){return new $APP.G(null,Gj,new $APP.G(null,"(~{} \x3e\x3e ~{})",new $APP.G(null,c,new $APP.G(null,d,null,1,null),2,null),3,null),4,null)},function(a,b,c,d){return new $APP.G(null,Gj,new $APP.G(null,"(~{} ^ (1 \x3c\x3c ~{}))",new $APP.G(null,c,new $APP.G(null,d,null,1,null),2,null),3,null),4,null)},function(a,b,c,d){return new $APP.G(null,Gj,new $APP.G(null,"(~{} | (1 \x3c\x3c ~{}))",
  new $APP.G(null,c,new $APP.G(null,d,null,1,null),2,null),3,null),4,null)},function(a,b,c,d){return new $APP.G(null,Gj,new $APP.G(null,"(~{} \x26 ~(1 \x3c\x3c ~{}))",new $APP.G(null,c,new $APP.G(null,d,null,1,null),2,null),3,null),4,null)},function(a,b,c,d){return cq(new $APP.G(null,Gj,new $APP.G(null,"(~{} \x3d\x3d ~{})",new $APP.G(null,c,new $APP.G(null,d,null,1,null),2,null),3,null),4,null))},function(a,b,c){return cq(new $APP.G(null,Gj,new $APP.G(null,"(!~{})",new $APP.G(null,c,null,1,null),2,
  null),3,null))},function(a,b,c){return cq(new $APP.G(null,Gj,new $APP.G(null,"~{}",new $APP.G(null,c,null,1,null),2,null),3,null))},function(a,b,c,d){return new $APP.G(null,Gj,new $APP.G(null,"(~{} \x3e\x3e\x3e ~{})",new $APP.G(null,c,new $APP.G(null,d,null,1,null),2,null),3,null),4,null)},VG,WG,SG,function(a,b,c){return new $APP.G(null,Gj,new $APP.G(null,"(~ ~{})",new $APP.G(null,c,null,1,null),2,null),3,null)},function(a,b,c,d){return new $APP.G(null,Gj,new $APP.G(null,"(~{} \x3e\x3e\x3e ~{})",
  new $APP.G(null,c,new $APP.G(null,d,null,1,null),2,null),3,null),4,null)},function(a,b,c,d){return cq(new $APP.G(null,Gj,new $APP.G(null,"((~{} \x26 (1 \x3c\x3c ~{})) !\x3d 0)",new $APP.G(null,c,new $APP.G(null,d,null,1,null),2,null),3,null),4,null))},function(a,b,c){return cq(new $APP.G(null,Gj,new $APP.G(null,"(void 0 \x3d\x3d\x3d ~{})",new $APP.G(null,c,null,1,null),2,null),3,null))}]),bu=Error,Vp=function(){var a=$APP.Vi.h($APP.hf),b=$APP.Vi.h($APP.hf),c=$APP.Vi.h($APP.hf),d=$APP.Vi.h($APP.hf),
  e=$APP.fe.j($APP.hf,$APP.nA,$APP.dj.v?$APP.dj.v():$APP.dj.call(null));return new $APP.mj($APP.Hi.g("squint.compiler-common","emit"),function(f){return $APP.eb(f)},$APP.Dm,e,a,b,c,d)}(),Xt=function(){var a=$APP.Vi.h($APP.hf),b=$APP.Vi.h($APP.hf),c=$APP.Vi.h($APP.hf),d=$APP.Vi.h($APP.hf),e=$APP.fe.j($APP.hf,$APP.nA,$APP.dj.v?$APP.dj.v():$APP.dj.call(null));return new $APP.mj($APP.Hi.g("squint.compiler-common","emit-special"),function(){function f(k,l,m){if(2<arguments.length)for(var h=0,q=Array(arguments.length-
  2);h<q.length;)q[h]=arguments[h+2],++h;return k}f.m=2;f.o=function(k){var l=$APP.y(k);k=$APP.z(k);$APP.y(k);$APP.cd(k);return l};f.l=function(k){return k};return f}(),$APP.Dm,e,a,b,c,d)}(),su,Wq,Vq,xu,kr,qr;$APP.g=gq.prototype;$APP.g.toString=function(){return this.hc};$APP.g.ia=function(a,b){return this.O(null,b,null)};$APP.g.O=function(a,b,c){switch(b instanceof $APP.I?b.da:null){case "js":return this.hc;case "bool":return this.pc;default:return $APP.fe.j(this.B,b,c)}};
  $APP.g.hb=function(a,b,c){return $APP.ne.j(function(d,e){var f=$APP.B.j(e,0,null);e=$APP.B.j(e,1,null);return b.j?b.j(d,f,e):b.call(null,d,f,e)},c,this)};$APP.g.R=function(a,b,c){return $APP.ni(b,function(d){return $APP.ni(b,$APP.ti,""," ","",c,d)},"#squint.compiler-common.Code{",", ","}",c,$APP.R.g(new $APP.J(null,2,5,$APP.N,[new $APP.J(null,2,5,$APP.N,[hq,this.hc],null),new $APP.J(null,2,5,$APP.N,[iq,this.pc],null)],null),this.B))};
  $APP.g.Da=function(){return new $APP.Eg(this,2,new $APP.J(null,2,5,$APP.N,[hq,iq],null),$APP.r(this.B)?$APP.Bc(this.B):$APP.mf())};$APP.g.V=function(){return this.H};$APP.g.aa=function(){return 2+$APP.xd(this.B)};$APP.g.$=function(){var a=this.F;return null!=a?a:this.F=a=-549706760^$APP.id(this)};$APP.g.Z=function(a,b){return null!=b&&this.constructor===b.constructor&&$APP.A.g(this.hc,b.hc)&&$APP.A.g(this.pc,b.pc)&&$APP.A.g(this.B,b.B)};
  $APP.g.ob=function(a,b){return $APP.he(new $APP.Uh(null,new $APP.n(null,2,[hq,null,iq,null],null),null),b)?$APP.Rk.g($APP.Sb($APP.Rg.g($APP.hf,this),this.H),b):new gq(this.hc,this.pc,this.H,$APP.kf($APP.Rk.g(this.B,b)),null)};$APP.g.Za=function(a,b){switch(b instanceof $APP.I?b.da:null){case "js":case "bool":return  true;default:return $APP.he(this.B,b)}};
  $APP.g.ha=function(a,b,c){return $APP.r($APP.Ke.g?$APP.Ke.g(hq,b):$APP.Ke.call(null,hq,b))?new gq(c,this.pc,this.H,this.B,null):$APP.r($APP.Ke.g?$APP.Ke.g(iq,b):$APP.Ke.call(null,iq,b))?new gq(this.hc,c,this.H,this.B,null):new gq(this.hc,this.pc,this.H,$APP.Rh.j(this.B,b,c),null)};$APP.g.Y=function(){return $APP.x($APP.R.g(new $APP.J(null,2,5,$APP.N,[new $APP.Ig(hq,this.hc,null),new $APP.Ig(iq,this.pc,null)],null),this.B))};$APP.g.W=function(a,b){return new gq(this.hc,this.pc,b,this.B,this.F)};
  $APP.g.ea=function(a,b){return $APP.Xd(b)?this.ha(null,$APP.Id(b,0),$APP.Id(b,1)):$APP.ne.j($APP.ob,this,b)};
  Xt.N(null,Gj,function(a,b,c){a=$APP.x(c);$APP.y(a);var d=$APP.z(a);a=$APP.A.g($APP.bq,$APP.qm.h($APP.Nd(c)));var e=$APP.Vd($APP.y(d))?new $APP.J(null,3,5,$APP.N,[$APP.y(d),$APP.Cd(d),$APP.Nf.g(2,d)],null):new $APP.J(null,3,5,$APP.N,[null,$APP.y(d),$APP.cd(d)],null),f=$APP.B.j(e,0,null);d=$APP.B.j(e,1,null);e=$APP.B.j(e,2,null);c=fq($APP.ne.j(function(k,l){return $APP.ak(k,"~{}",Vp.g(l,$APP.Qk.l($APP.F([$APP.Rh.j(b,$APP.Kp,no),f]))))},d,e),$APP.Qk.l($APP.F([b,$APP.Nd(c)])));return a?jq(c):c});
  Xt.N(null,$APP.Oj,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);return ["throw ",$APP.t.h(Vp.g(a,kq(b)))].join("")});su=$APP.Vi.h($APP.hf);$APP.br=false;Wq=$APP.Vi.h($APP.hf);Vq=$APP.Vi.h($APP.Vh);xu=$APP.Vi.h($APP.Vh);kr=$APP.Vi.h($APP.kg);$APP.mr=false;$APP.nr=$APP.By;qr=ds;Vp.N(null,null,function(a,b){return $APP.A.g($APP.Qp,$APP.Kp.h(b))?null:fq("null",b)});$APP.Cv.g(Number,ZF);Vp.N(null,ZF,function(a,b){return Bq(fq($APP.t.h(a),b),b)});
  Vp.N(null,String,function(a,b){var c=$APP.r(function(){var d=$APP.yq.h(b);return $APP.r(d)?(d=$APP.Za(pE.h(b)))?(d=xq.h(b),$APP.r(d)?d:$APP.Za(zq.h(b))):d:d}())?$APP.Zj(a,/([<>])/,function(d){return $APP.fe.g(new $APP.n(null,2,["\x3c","\x26lt;","\x3e","\x26gt;"],null),$APP.Cd(d))}):fq($APP.Ri.l($APP.F([a])),b);return 0<$APP.xd(a)?jq(c):c});Vp.N(null,Boolean,function(a,b){return fq($APP.r(pE.h(b))?Bq(a,b):$APP.t.h(a),b)});Vp.N(null,$APP.Dm,function(a,b){return fq($APP.t.h(a),b)});
  var Yt=new $APP.Uh(null,new $APP.n(null,1,[Rz,"null"],null),null),Zt=new $APP.Uh(null,new $APP.n(null,2,[Sv,"null",Kv,"null"],null),null),Dq=new $APP.Uh(null,new $APP.n(null,30,["js-mod",null,"\x3e\x3e",null,"\x26\x26",null,"!\x3d",null,"\x3d",null,"*",null,"%",null,"\x3c\x3d",null,"-\x3d",null,"|",null,"bit-or",null,"/",null,"-",null,"\x3e\x3e\x3e",null,"bit-and",null,"\x3d\x3d\x3d",null,"not\x3d",null,"!\x3d\x3d",null,"\x3e\x3d",null,"\x26",null,"\x3c",null,"\x3c\x3c",null,"+\x3d",null,"instanceof",
  null,"\x3c\x3c\x3c",null,"||",null,"\x3d\x3d",null,"+",null,"js-??",null,"\x3e",null],null),null),Gq=new $APP.Uh(null,new $APP.n(null,10,["!\x3d",null,"\x3d",null,"\x3c\x3d",null,"\x3d\x3d\x3d",null,"not\x3d",null,"\x3e\x3d",null,"\x3c",null,"instanceof",null,"\x3d\x3d",null,"\x3e",null],null),null),Hq=new $APP.Uh(null,new $APP.n(null,11,["\x26\x26",null,"*",null,"|",null,"bit-or",null,"/",null,"-",null,"bit-and",null,"\x26",null,"||",null,"+",null,"js-??",null],null),null);$APP.Vi.h($APP.Vh);
  var Xq="squint-cljs/core.js";
  Vp.N(null,$APP.w,function(a,b){if($APP.r(No.h(b)))return fq(Bq(Vp.g(new $APP.G(null,uD,new $APP.G(null,$APP.t.h(a),null,1,null),2,null),$APP.Rk.g(b,No)),b),b);if($APP.Me(a)&&$APP.hk($APP.t.h(a),".")){var c=$APP.Gr.j($APP.t.h(a),/\./,2),d=$APP.B.j(c,0,null);c=$APP.B.j(c,1,null);d=$APP.Hi.h(d);return fq(Bq([$APP.t.h(Vp.g(d,$APP.Rk.g(kq(b),$APP.yq))),".",wq(c)].join(""),b),b)}d=function(){var e=function(){var p=$APP.Le(a);return null==p?null:$APP.Vj(p)}();if($APP.r(e)){var f=$APP.Hi.h($APP.ai(a)),k=
  $APP.A.g("cljs.core",e)||$APP.A.g("clojure.core",e)?function(){var p=$q(f,b);return null==p?null:$APP.Vj(p)}():null;if($APP.r(k))return k;k=$APP.A.g("js",e)?nq($APP.ai(a)):null;if($APP.r(k))return k;k=function(){var p=$APP.fe.g($APP.Kr.h(b),$APP.Hi.h(e));return $APP.r(p)?[$APP.t.h(p instanceof $APP.w?$APP.Vj(p):e),".",nq($APP.ai(f))].join(""):null}();if($APP.r(k))return k;k=$APP.he($APP.u(su),$APP.Hi.h(e))?[$APP.t.h(e),".",nq($APP.ai(f))].join(""):null;if($APP.r(k))return k;var l=$APP.Le(a),m=$APP.Vj(l),
  h=$APP.ai(a);return $APP.r(function(){var p=$APP.mr;return $APP.r(p)?$APP.Qh.g("Math",m):p}())?(k=function(){var p=null==b?null:$APP.Hr.h(b);return null==p?null:$APP.u(p)}(),$APP.r($APP.cp.g(k,new $APP.J(null,2,5,$APP.N,[$APP.Hi.h(l),$APP.Hi.h(h)],null)))?[$APP.t.h($APP.Vj(l)),".",$APP.t.h($APP.Vj(h))].join(""):["globalThis.",$APP.t.h($APP.Vj($APP.nr)),".",$APP.t.h(m),".",$APP.t.h($APP.Vj(h))].join("")):[$APP.t.h(m),".",$APP.t.h($APP.Vj($APP.ai(a)))].join("")}k=$APP.fe.g(Rp.h(b),a);if($APP.r(k))return l=
  wq($APP.t.h(k)),$APP.r(iq.h($APP.Nd(k)))?jq(l):l;k=$APP.u($APP.Hr.h(b));l=$APP.to.h(k);var q=$APP.fe.g(k,l);k=$APP.he(q,a)?[$APP.r($APP.mr)?["globalThis.",$APP.t.h($APP.Vj($APP.nr)),"."].join(""):null,nq($APP.ai(a))].join(""):null;if($APP.r(k))return k;k=function(){var p=$APP.Br.h(q);p=$APP.fe.j(p,a,a);var v=$APP.he($APP.Ir.h(q),p)?[$APP.r($APP.mr)?["globalThis.",$APP.t.h($APP.Vj($APP.nr)),"."].join(""):null,nq($APP.ai(p))].join(""):null;if($APP.r(v))return v;v=$q(p,b);v=null==v?null:$APP.Vj(v);return $APP.r(v)?
  v:$APP.r($APP.fe.g($APP.Kr.h(q),p))?[$APP.r($APP.mr)?["globalThis.",$APP.t.h($APP.Vj($APP.nr)),"."].join(""):null,nq($APP.ai(p))].join(""):null}();return $APP.r(k)?k:nq($APP.ai(a))}();return fq(Bq(d,b),b)});Xt.N(null,$APP.zj,function(a,b,c){a=$APP.x(c);$APP.y(a);a=$APP.z(a);return gr(b,a)});Xt.N(null,$APP.Fj,function(a,b,c){a=$APP.x(c);$APP.y(a);c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return lr(b,a,c,false)});
  Xt.N(null,$APP.yj,function(a,b,c){a=$APP.x(c);$APP.y(a);c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return lr(b,a,c,true)});
  Xt.N(null,$APP.rj,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);var d=$APP.B.j(c,2,null),e=$APP.B.j(c,3,null);c=$APP.B.j(c,4,null);var f=hr$1.h(b),k=$APP.A.g(no,$APP.Kp.h(b)),l=f.h?f.h("caseval__"):f.call(null,"caseval__"),m=kq(b);a=[k?["var ",$APP.t.h(l),";\n"].join(""):null,["switch (",$APP.t.h(Vp.g(a,m)),") {"].join(""),$APP.Jp.h($APP.ui.j(function(h,q){return $APP.Jp.h($APP.ui.g(function(p){return [["case ",$APP.t.h(Vp.g(p,m)),":\n"].join(""),$APP.t.h(k?[$APP.t.h(l)," \x3d ",$APP.t.h(q)].join(""):
  Vp.g(q,b)),"\nbreak;\n"].join("")},h))},d,e)),$APP.r(c)?["default:\n",$APP.t.h(k?[$APP.t.h(l)," \x3d ",$APP.t.h(Vp.g(c,m))].join(""):Vp.g(c,b))].join(""):null,k?["return ",$APP.t.h(l),";"].join(""):null,"}"].join("");return k?cr(a,b):a});
  Xt.N(null,$APP.Ij,function(a,b,c){a=$APP.x(c);$APP.y(a);a=$APP.z(a);var d=hr$1.h(b);c=kr;d=$APP.mt.g($APP.xd(a),d);var e=kq(b);b=Sr.h(b);$APP.r(b)&&(b.h?b.h(c):b.call(null,c));return [$APP.Jp.g("",$APP.ui.j(function(f,k){k=Vp.g(k,e);f=lp.j?lp.j("let %s \x3d %s",f,k):lp.call(null,"let %s \x3d %s",f,k);return lq(f)},d,a)),$APP.Jp.g("",$APP.ui.j(function(f,k){return lq(lp.j?lp.j("%s \x3d %s",f,k):lp.call(null,"%s \x3d %s",f,k))},c,d)),"continue;\n"].join("")});
  Xt.N(null,$APP.Pj,function(a,b,c){a=$APP.x(c);$APP.y(a);a=$APP.z(a);var d=$APP.y(a);$APP.r($APP.pq.h($APP.Nd(d)))||$APP.Wi.j(xu,$APP.De,nq(d));$APP.Wi.g($APP.Hr.h(b),function(e){var f=$APP.to.h(e);return $APP.gv(e,new $APP.J(null,2,5,$APP.N,[f,d],null),$APP.hf)});Qv.h($APP.Nd(c));return or(a,b)});Xt.N(null,SB,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);return pr(b,a)});Xt.N(null,MF,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);return pr(b,a)});
  Xt.N(null,$APP.Dj,function(a,b,c){a=$APP.x(c);$APP.y(a);a=$APP.z(a);var d=$APP.y(a);a=$APP.z(a);c=$APP.Vj(d);var e=$APP.Gr.g($APP.t.h(c),/\./);e=hq.h($APP.ne.j(function(k,l){var m=$APP.jf(k);k=$APP.fe.g(m,hq);m=$APP.fe.g(m,vz);l=[$APP.r(m)?[$APP.t.h(m),"."].join(""):null,$APP.t.h(l)].join("");return new $APP.n(null,2,[hq,[$APP.t.h(k),"globalThis.",l," \x3d globalThis.",l," || {};\n"].join(""),vz,l],null)},$APP.hf,e));var f=["globalThis.",$APP.t.h(c)].join("");$APP.nr=d;$APP.Wi.A($APP.Hr.h(b),$APP.Rh,
  $APP.to,d);$APP.Jf(su,$APP.ne.j(function(k,l){var m=$APP.B.j(l,0,null),h=$APP.B.j(l,1,null);l=$APP.B.j(l,2,null);m=Ar(b,m);switch(h instanceof $APP.I?h.da:null){case "as":case "as-alias":return $APP.Rh.j(k,$APP.Vj(l),m);default:return k}},$APP.gf([$APP.to,d,Zq.h(b),Xq]),$APP.Ef(function(k){var l=$APP.x(k);k=$APP.y(l);l=$APP.z(l);return $APP.A.g($APP.tF,k)?l:null},a)));return [$APP.t.h($APP.r($APP.mr)?e:null),$APP.t.h($APP.ne.j(function(k,l){var m=$APP.x(l);l=$APP.y(m);m=$APP.z(m);if($APP.A.g($APP.tF,
  l))return [$APP.t.h(k),$APP.Jp.g("",$APP.ui.g(function(h){return Mr(b,d,h)},m))].join("");$APP.A.g(Ry,l)&&(l=$APP.jf(m),l=$APP.fe.g(l,$APP.jx),$APP.Wi.j(Vq,$APP.Rg,l));return k},"",a)),$APP.r($APP.mr)?$APP.t.h($APP.re(function(k,l){return l instanceof $APP.w?[$APP.t.h(k),f,".",$APP.t.h(l)," \x3d ",$APP.t.h(l),";\n"].join(""):k},"",$APP.u(su))):null].join("")});
  Xt.N(null,$APP.yF,function(a,b,c){a=$APP.x(c);$APP.y(a);a=$APP.z(a);a=$APP.ui.g($APP.Cd,a);$APP.Jf(su,$APP.ne.j(function(d,e){var f=$APP.B.j(e,0,null),k=$APP.B.j(e,1,null);e=$APP.B.j(e,2,null);f=Ar(b,f);switch(k instanceof $APP.I?k.da:null){case "as":case "as-alias":return $APP.Rh.j(d,e,f);default:return d}},new $APP.n(null,1,[$APP.to,$APP.ai],null),a));return [$APP.Jp.g("",$APP.ui.g(function(d){return Mr(b,$APP.nr,d)},a)),$APP.r($APP.mr)?function(){var d=$APP.Vj($APP.nr),e=$APP.Gr.g($APP.t.h(d),/\./);
  e=hq.h($APP.ne.j(function(k,l){var m=$APP.jf(k);k=$APP.fe.g(m,hq);m=$APP.fe.g(m,vz);l=[$APP.r(m)?[$APP.t.h(m),"."].join(""):null,$APP.t.h(l)].join("");return new $APP.n(null,2,[hq,[$APP.t.h(k),"globalThis.",l," \x3d globalThis.",l," || {};\n"].join(""),vz,l],null)},$APP.hf,e));var f=["globalThis.",$APP.t.h(d)].join("");return [$APP.t.h(e),$APP.t.h($APP.re(function(k,l){return l instanceof $APP.w?(l=$APP.Vj(l),[$APP.t.h(k),f,".",$APP.t.h(l)," \x3d ",$APP.t.h(l),";\n"].join("")):k},"",$APP.u(su)))].join("")}():
  null].join("")});Xt.N(null,$APP.Hx,function(a,b,c){a=$APP.x(c);$APP.y(a);a=$APP.z(a);return $APP.Gf.g($APP.t,$APP.Vk.g(" + ",Fq(b,a)))});
  Xt.N(null,$APP.Kj,function(a,b,c){a=$APP.x(c);$APP.y(a);c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);c=$APP.be(c)?new $APP.J(null,2,5,$APP.N,[$APP.y(c),$APP.cd(c)],null):new $APP.J(null,2,5,$APP.N,[c,d],null);d=$APP.B.j(c,0,null);c=$APP.B.j(c,1,null);d=$APP.t.h(d);if($APP.qa(d,"-"))b=Vp.g(new $APP.G(null,Gj,new $APP.G(null,["~{}.",$APP.t.h($APP.Hi.h(wq($APP.ji.g(d,1))))].join(""),new $APP.G(null,a,null,1,null),2,null),3,null),b);else {var e=$APP.Hi.h(d);d=kq(b);e=wq(e);b=fq([$APP.t.h(Vp.g(a,
  d)),".",e,mq(Fq(b,c))].join(""),b);}return b});Xt.N(null,$APP.iy,function(a,b,c){a=$APP.x(c);$APP.y(a);c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return fq($APP.Gf.j($APP.t,Vp.g(a,kq(b)),$APP.ev.l($APP.Jr.h("["),Fq(b,c),$APP.F([$APP.Jr.h("]")]))),b)});Xt.N(null,oA,function(a,b,c){$APP.B.j(c,0,null);$APP.B.j(c,1,null);return lq(["return ",$APP.t.h(Vp.g($APP.Rh.j(b,$APP.Kp,no),b))].join(""))});
  Xt.N(null,$APP.Jj,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);var d=$APP.B.j(c,2,null),e=$APP.B.j(c,3,null);a=$APP.A.g(4,$APP.xd(c))?new $APP.J(null,2,5,$APP.N,[$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Kj,null,1,null),new $APP.G(null,a,null,1,null),$APP.F([new $APP.G(null,d,null,1,null)])))),e],null):new $APP.J(null,2,5,$APP.N,[a,d],null);c=$APP.B.j(a,0,null);a=$APP.B.j(a,1,null);d=kq(b);return fq([$APP.t.h(Vp.g(c,d))," \x3d ",$APP.t.h(Vp.g(a,d)),";\n"].join(""),b)});
  Xt.N(null,$APP.Cj,function(a,b,c){a=$APP.x(c);$APP.y(a);c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return fq(["new ",$APP.t.h(Vp.g(a,kq(b))),mq(Fq(b,c))].join(""),b)});Xt.N(null,$APP.mE,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);return fq(["(",$APP.t.h(Vp.g(a,$APP.Rh.j(b,$APP.Kp,no)))," - ",$APP.t.h(1),")"].join(""),b)});Xt.N(null,$APP.CB,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);return fq(["(",$APP.t.h(Vp.g(a,$APP.Rh.j(b,$APP.Kp,no)))," + ",$APP.t.h(1),")"].join(""),b)});
  Xt.N(null,$APP.KF,function(a,b,c){a=$APP.x(c);$APP.y(a);c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return ["while (",$APP.t.h(Vp.h(a)),") { \n",$APP.t.h(gr(b,c)),"\n }"].join("")});Xt.N(null,$APP.Hj,function(a,b,c){a=$APP.x(c);$APP.y(a);a=$APP.z(a);var d=$APP.Nd(c),e=$APP.Sp.h(d),f=Tp.h(d);b=$APP.Rh.j(b,Tp,f);d=Tr.h(d);b=$APP.Rh.j(b,Rr,d);d=$APP.br;$APP.br=e;try{return Wr(b,a,$APP.Nd(c))}finally{$APP.br=d;}});
  Xt.N(null,$APP.vj,function(a,b,c){a=$APP.x(c);$APP.y(a);a=$APP.z(a);var d=hr$1.h(b),e=$APP.ht.g(function(m){var h=new $APP.Uh(null,new $APP.n(null,2,[$APP.xj,null,$APP.Nj,null],null),null),q=$APP.be(m);m=q?$APP.y(m):q;return $APP.he(h,m)},a),f=$APP.Is.g(function(m){var h=$APP.A,q=h.g,p=$APP.Nj,v=$APP.be(m);m=v?$APP.y(m):v;return q.call(h,p,m)},a),k=$APP.Is.g(function(m){var h=$APP.A,q=h.g,p=$APP.xj,v=$APP.be(m);m=v?$APP.y(m):v;return q.call(h,p,m)},a),l=$APP.Qh.g($APP.Qp,$APP.Kp.h(b))?$APP.Rh.j(b,$APP.Kp,
  $APP.Pp):b;if($APP.Qd(f)&&$APP.Qd(k))throw new bu(["Must supply a catch or finally clause (or both) in a try statement! ",$APP.t.h(c)].join(""));if(1<$APP.xd(f))throw new bu(["Multiple catch clauses in a try statement are not currently supported! ",$APP.t.h(c)].join(""));if(1<$APP.xd(k))throw new bu(["Cannot supply more than one finally clause in a try statement! ",$APP.t.h(c)].join(""));return fq(function(){var m=["try{\n",$APP.t.h(gr(l,e)),"}\n",function(){var h=$APP.y(f);if($APP.r(h)){h=$APP.x(h);
  $APP.y(h);h=$APP.z(h);$APP.y(h);h=$APP.z(h);var q=$APP.y(h);h=$APP.z(h);q=$APP.Vj(q);var p=$APP.gv(l,new $APP.J(null,2,5,$APP.N,[Rp,q],null),d.h?d.h(q):d.call(null,q));return ["catch(",$APP.t.h(Vp.g(q,kq(p))),"){\n",$APP.t.h(gr(p,h)),"}\n"].join("")}return null}(),function(){var h=$APP.y(k);return $APP.r(h)?(h=$APP.x(h),$APP.y(h),h=$APP.z(h),["finally{\n",$APP.t.h(gr($APP.Rh.j(l,$APP.Kp,$APP.Qp),h)),"}\n"].join("")):null}()].join("");return $APP.Qh.g($APP.Qp,$APP.Kp.h(l))?cr(m,l):m}(),b)});
  Xt.N(null,$t,function(a,b,c){a=$APP.x(c);var d=$APP.y(a);a=$APP.z(a);c=d instanceof $APP.w?$APP.Le(d):null;d=$APP.r(c)?$APP.Hi.g($APP.Vj(c),$APP.ai(d)):d;var e=$APP.A.g(Zr,qr);c=e&&$APP.A.g("js",c);return fq([$APP.t.h(Vp.g(d,kq(b))),e&&!c?".call":null,mq(Fq(b,e?c?a:$APP.He($APP.A.g("super",$APP.y($APP.Gr.g($APP.t.h(d),/\./)))?mz:null,a):a))].join(""),b)});
  Xt.N(null,Aj,function(a,b,c){a=$APP.x(c);$APP.y(a);a=$APP.z(a);var d=$APP.y(a);a=$APP.z(a);var e=hr$1.h(b);c=$APP.fm.g(2,d);d=$APP.fm.g(2,$APP.cd(d));var f=$APP.bi(c,$APP.ui.g(function(k){return e.h?e.h(k):e.call(null,k)},c));b=$APP.Tm.A(b,Rp,$APP.Qk,f);c=$APP.ui.g(function(k){return $APP.jo.A($APP.fe.g(f,k),$APP.Rh,jr,true)},c);c=$APP.ev.g(c,d);a=$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Fj,null,1,null),new $APP.G(null,$APP.lg(c),null,1,null),$APP.F([a]))));return Vp.g(a,b)});
  Xt.N(null,$APP.ty,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);a=Vp.g(a,$APP.Rh.j(b,$APP.Kp,no));a=lp.g?lp.g("(%s \x3d\x3d 0)",a):lp.call(null,"(%s \x3d\x3d 0)",a);return jq(fq(a,b))});Xt.N(null,$APP.sw,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);a=Vp.g(a,$APP.Rh.j(b,$APP.Kp,no));a=lp.g?lp.g("(%s \x3c 0)",a):lp.call(null,"(%s \x3c 0)",a);return jq(fq(a,b))});
  Xt.N(null,$APP.Gw,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);a=Vp.g(a,$APP.Rh.j(b,$APP.Kp,no));a=lp.g?lp.g("(%s \x3e 0)",a):lp.call(null,"(%s \x3e 0)",a);return jq(fq(a,b))});Xt.N(null,$APP.Wv,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);a=Vp.g(a,$APP.Rh.j(b,$APP.Kp,no));a=lp.g?lp.g("(%s \x3d\x3d null)",a):lp.call(null,"(%s \x3d\x3d null)",a);return jq(fq(a,b))});
  Xt.N(null,jE,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);c=$APP.B.j(c,2,null);return jq(Vp.g(new $APP.G(null,Gj,new $APP.G(null,"~{} in ~{}",new $APP.G(null,a,new $APP.G(null,c,null,1,null),2,null),3,null),4,null),b))});Xt.N(null,aB,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);c=$APP.B.j(c,2,null);return Vp.g(new $APP.G(null,Gj,new $APP.G(null,"yield ~{}",new $APP.G(null,a,new $APP.G(null,c,null,1,null),2,null),3,null),4,null),b)});
  Xt.N(null,VB,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);c=$APP.B.j(c,2,null);return Vp.g(new $APP.G(null,Gj,new $APP.G(null,"yield* ~{}",new $APP.G(null,a,new $APP.G(null,c,null,1,null),2,null),3,null),4,null),b)});Vp.N(null,$APP.Ig,function(a,b){return Vp.g($APP.lg(a),b)});var Mt=new $APP.Uh(null,new $APP.n(null,8,[$APP.Gw,"null",$APP.sw,"null",$APP.xA,"null",jE,"null",$APP.ty,"null",$APP.Wv,"null",VB,"null",aB,"null"],null),null);$APP.Cv.g(Ge,ju);$APP.Cv.g(ec,ju);
  $APP.Cv.g($APP.Ne,ju);$APP.Cv.g($APP.G,ju);$APP.Cv.g(Be,TE);Vp.N(null,ju,function(a,b){var c=ju.h(iu.h(b));return c.g?c.g(a,b):c.call(null,a,b)});Vp.N(null,TE,function(a,b){return Vp.g($APP.Q($m),$APP.Rk.g(b,No))});$APP.Cv.g($APP.J,ku);Vp.N(null,ku,function(a,b){var c=ku.h(iu.h(b));return c.g?c.g(a,b):c.call(null,a,b)});$APP.Cv.g($APP.n,lu);$APP.Cv.g(uh,lu);Vp.N(null,lu,function(a,b){var c=lu.h(iu.h(b));return c.g?c.g(a,b):c.call(null,a,b)});
  Vp.N(null,$APP.I,function(a,b){var c=mu.h(iu.h(b));return c.g?c.g(a,b):c.call(null,a,b)});Vp.N(null,$APP.Uh,function(a,b){var c=nu.h(iu.h(b));return c.g?c.g(a,b):c.call(null,a,b)});Xt.N(null,$APP.Mj,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);return fq(Vp.g(a,kq($APP.Rh.j(b,No,true))),b)});
  Xt.N(null,$APP.xA,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);c=$APP.B.j(c,2,null);return fq(Vp.g(new $APP.G(null,Gj,new $APP.G(null,"delete ~{}[~{}]",new $APP.G(null,a,new $APP.G(null,c,null,1,null),2,null),3,null),4,null),b),b)});Xt.N(null,$APP.Dm,function(a,b,c){var d=ou.h(iu.h(b));return d.j?d.j(a,b,c):d.call(null,a,b,c)});
  Xt.N(null,$APP.Bj,function(a,b,c){$APP.B.j(c,0,null);var d=$APP.B.j(c,1,null),e=$APP.B.j(c,2,null),f=$APP.B.j(c,3,null);a=$APP.Rh.j(b,$APP.Kp,no);var k=Vp.g(d,a),l=function(){var h=iq.h(k);if($APP.r(h))return h;h=iq.h($APP.Nd(c));return $APP.r(h)?h:$APP.A.g($APP.bq,$APP.qm.h($APP.Nd(d)))}(),m=$APP.r(l)?k:Vp.g(new $APP.G(null,Kz,new $APP.G(null,new $APP.G(null,Gj,new $APP.G(null,k,null,1,null),2,null),null,1,null),2,null),a);return $APP.A.g(no,$APP.Kp.h(b))?fq(function(){var h=Vp.g(e,b),q=Vp.g(f,b);
  return lp.A?lp.A("(%s) ? (%s) : (%s)",m,h,q):lp.call(null,"(%s) ? (%s) : (%s)",m,h,q)}(),b):[$APP.t.h(lp.g?lp.g("if (%s) {\n",m):lp.call(null,"if (%s) {\n",m)),$APP.t.h(Vp.g(e,b)),"}",null!=f?[" else {\n",$APP.t.h(Vp.g(f,b)),"}"].join(""):null].join("")});Xt.N(null,eC,function(a,b,c){a=$APP.Cd(c);$APP.Wi.j(xu,$APP.De,nq(a));return $p(b,function(d,e){var f=$APP.br;$APP.br=d;try{return e.v?e.v():e.call(null)}finally{$APP.br=f;}},c)});
  Xt.N(null,Fp,function(a,b,c){a=Vp;c=$APP.Cd(c);var d=$APP.jf(c);c=$APP.fe.g(d,Gp);d=$APP.fe.g(d,Hp);return ["super(",$APP.Jp.g(", ",Op(b,a,c)),");const self__ \x3d this;\n",$APP.r(d)?["const ",$APP.t.h(a.g?a.g(d,b):a.call(null,d,b))," \x3d this;\n"].join(""):null].join("")});
  var ls=new $APP.Uh(null,new $APP.n(null,16,["track",null,"br",null,"img",null,"command",null,"area",null,"base",null,"keygen",null,"hr",null,"col",null,"param",null,"input",null,"link",null,"source",null,"meta",null,"wbr",null,"embed",null],null),null);Xt.N(null,pA,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);b=$APP.Rh.l(b,xq,true,$APP.F([$APP.yq,true]));a=$APP.jo.A(a,$APP.Rh,hs,true);return Vp.g(a,b)});
  Xt.N(null,CC,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);c=$APP.br;c=$APP.r(c)?IE.h(b):c;return Vp.g(new $APP.G(null,$APP.r(c)?MF:$APP.RA,new $APP.G(null,a,null,1,null),2,null),b)});var $G=function $G(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return $G.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  $G.l=function(a,b,c,d){b=new $APP.J(null,2,5,$APP.N,[$APP.ts.g(function(e){return !$APP.Ae(e)},d),$APP.us.g(function(e){return !$APP.Ae(e)},d)],null);a=$APP.B.j(b,0,null);b=$APP.B.j(b,1,null);a="string"===typeof $APP.y(a)?$APP.Rg.g(new $APP.n(null,1,[$APP.X,$APP.y(a)],null),$APP.ir.g(2,$APP.cd(a))):$APP.Rg.g($APP.hf,$APP.ir.g(2,a));return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.zj,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Pj,null,1,null),new $APP.G(null,$APP.Md(c,
  a),null,1,null),$APP.F([new $APP.G(null,$APP.Gf.g($APP.Fo,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,dx,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,os,null,1,null),new $APP.G(null,$APP.t.h(c),null,1,null)))),null,1,null))))),null,1,null)])))),null,1,null),$APP.F([$APP.Zp.l(function(e){return ss(c,e)},$APP.F([b]))]))))};$G.m=3;$G.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};
  var aH=new $APP.n(null,7,[$APP.oz,$APP.JB,$APP.wF,$APP.my,$APP.FE,$APP.Dw,$APP.Hw,$APP.QD,$APP.pC,$APP.ez,$APP.bq,$APP.$w,$APP.oE,$APP.JB],null),zs=function zs(a){return $APP.Xd($APP.y(a))?$APP.Jq.j($APP.y(a),$APP.Md(new $APP.G(null,Gj,new $APP.G(null,"const self__ \x3d this;",null,1,null),2,null),new $APP.n(null,1,[$APP.Kp,$APP.Qp],null)),$APP.cd(a)):$APP.ui.g(zs,a)},bH=function bH(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return bH.l(arguments[0],arguments[1],
  arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};bH.l=function(a,b,c,d){var e=$APP.fe.j(aH,c,c);a=vs(d);return $APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.zj,null,1,null),$APP.Zp.l(function(f){return Ds(e,f)},$APP.F([a])))))};bH.m=3;bH.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};
  var cH=function cH(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return cH.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};cH.l=function(a,b,c,d){return Fs(c,d)};cH.m=3;cH.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};var Hs=$APP.bi($APP.ui.g(function(a){return $APP.Hi.g("cljs.core",$APP.t.h(a))},gg([ZA,px,mF,RB,sz,zB,PF,xw,IC,fy,Sy,kx,TF,tE,GE,$APP.gx,mA,PD,fz,OB,eE,nC,cD,oC,CE,aD,$APP.Uw,cF,Ky,$APP.Ix,vx,$APP.Ix,tB,Gv,qD,QF,KA,aC,Ly,wx,MC,sC,dD,zx,uB,EC,uy,$APP.Wz,$APP.lB,AF],true)),$APP.Rf(function(a){var b=$APP.B.j(a,0,null);a=$APP.B.j(a,1,null);return 2147483648===a?new $APP.J(null,2,5,$APP.N,[b+1,1],null):new $APP.J(null,2,5,$APP.N,[b,2*a],null)},new $APP.J(null,2,5,$APP.N,[0,1],null))),Ls,dH=$APP.xd(Hs);
  Ls=0===$APP.ve(dH,32)?$APP.we(dH,32):$APP.we(dH,32)+1;var eH=function eH(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return eH.l(arguments[0],arguments[1],arguments[2],arguments[3],4<c.length?new $APP.Xc(c.slice(4),0,null):null)};
  eH.l=function(a,b,c,d,e){b=Ms(e);a=$APP.B.j(b,0,null);var f=$APP.B.j(b,1,null);b=$APP.Rg.g($APP.Vh,$APP.ui.g($APP.se,$APP.Is.g($APP.Rc,e)));a=$APP.jo.fa(c,$APP.Rh,rp,b,nw,a);b=$APP.S.h;var k=$APP.R.l,l=new $APP.G(null,$APP.zj,null,1,null),m=$APP.S.h,h=$APP.R.l,q=new $APP.G(null,Ej,null,1,null),p=new $APP.G(null,a,null,1,null),v=new $APP.G(null,d,null,1,null);f=new $APP.G(null,f,null,1,null);if($APP.x(e)){var D=$APP.S.h,H=$APP.R.l,O=new $APP.G(null,Yp,null,1,null),P=new $APP.G(null,a,null,1,null);
  a:for(var W=new $APP.n(null,3,[Yz,a,UA,true,lF,false],null),ca=$APP.kg;;)if($APP.x(e)){var ha=$APP.y(e);ca=$APP.Rg.g($APP.De.g(ca,ha),$APP.ne.j($APP.Tk.g(Ns,W),$APP.kg,$APP.Yi($APP.y,$APP.ts.g($APP.be,$APP.z(e)))));e=$APP.us.g($APP.be,$APP.z(e));}else break a;e=D.call($APP.S,$APP.x(H.call($APP.R,O,P,$APP.F([ca]))));}else e=null;e=new $APP.G(null,m.call($APP.S,$APP.x(h.call($APP.R,q,p,$APP.F([v,f,new $APP.G(null,e,null,1,null)])))),null,1,null);m=$APP.Md($APP.Hi.h([$APP.t.h($APP.Vv),$APP.t.h(a)].join("")),
  $APP.Rh.j($APP.Nd(a),fD,uF));h=["Positional factory function for ",$APP.t.h(c),"."].join("");q=$APP.r(pz.h($APP.Nd(a)))?$APP.De.l(d,null,$APP.F([null,null])):d;c=$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.ps,null,1,null),new $APP.G(null,m,null,1,null),$APP.F([new $APP.G(null,h,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.h(d)))),null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Cj,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([q])))),null,1,null)]))));
  return b.call($APP.S,$APP.x(k.call($APP.R,l,e,$APP.F([new $APP.G(null,c,null,1,null),new $APP.G(null,a,null,1,null)]))))};eH.m=4;eH.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);var e=$APP.z(d);d=$APP.y(e);e=$APP.z(e);return this.l(b,a,c,d,e)};var fH=Error,gH=function gH(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return gH.l(arguments[0],arguments[1],2<c.length?new $APP.Xc(c.slice(2),0,null):null)};
  gH.l=function(a,b,c){var d=$APP.y(c)instanceof $APP.w?$APP.y(c):null;c=$APP.r(d)?$APP.z(c):c;if($APP.Xd($APP.y(c)))c=new $APP.G(null,c,null,1,null);else if(!$APP.be($APP.y(c)))throw new fH($APP.x(c)?["Parameter declaration ",$APP.t.h($APP.y(c))," should be a vector"].join(""):"Parameter declaration missing");var e=c,f=$APP.Nd(d);a=$APP.Qk.l($APP.F([$APP.Nd(a),$APP.Nd($APP.y(a))]));var k=$APP.Sp.h(a),l=Tp.h(a);c=function(){var h=$APP.r(k)?$APP.Rh.j(f,$APP.Sp,true):f;return $APP.r(l)?$APP.Rh.j(h,Tp,true):
  h}();var m=$APP.ui.g(function(h){if(!$APP.be(h))throw new fH(["Invalid signature ",$APP.t.h(h)," should be a list"].join(""));var q=$APP.x(h),p=$APP.y(q);q=$APP.z(q);if(!$APP.Xd(p))throw new fH($APP.be($APP.y(e))?["Parameter declaration ",$APP.t.h(p)," should be a vector"].join(""):["Invalid signature ",$APP.t.h(h)," should be a list"].join(""));var v=$APP.z(q)&&$APP.Vd($APP.y(q))?$APP.y(q):null;h=$APP.r(v)?$APP.z(q):q;v=$APP.r(v)?v:$APP.Nd(p);q=$APP.UF.h(v);v=$APP.Fw.h(v);h=$APP.r(v)?$APP.S.h($APP.x($APP.R.h(new $APP.G(null,
  $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.Tz,null,1,null),new $APP.G(null,1<$APP.xd(h)?$APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.zj,null,1,null),h))):$APP.y(h),null,1,null))))),null,1,null),$APP.F([$APP.ui.g(function(D){return $APP.S.h($APP.x($APP.R.g(new $APP.G(null,$APP.xC,null,1,null),new $APP.G(null,D,null,1,null))))},v),new $APP.G(null,$APP.Tz,null,1,null)])))),null,1,null)))):h;h=$APP.r(q)?$APP.R.g($APP.ui.g(function(D){return $APP.S.h($APP.x($APP.R.g(new $APP.G(null,
  $APP.xC,null,1,null),new $APP.G(null,D,null,1,null))))},q),h):h;return Ws(p,h)},e);return 1<$APP.xd(e)?Gt(d,c,e,RD.h(b)):$APP.r(Ht(e))?Kt(d,c,e,RD.h(b)):$APP.Md($APP.r(d)?$APP.Jq.j($APP.Hj,d,m):$APP.He($APP.Hj,m),$APP.Qk.l($APP.F([a,c])))};gH.m=2;gH.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);c=$APP.z(c);return this.l(b,a,c)};
  var hH=function hH(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return hH.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  hH.l=function(a,b,c,d){if(!(c instanceof $APP.w))throw Error("First argument to defn must be a symbol");a="string"===typeof $APP.y(d)?new $APP.n(null,1,[$APP.X,$APP.y(d)],null):$APP.hf;b="string"===typeof $APP.y(d)?$APP.z(d):d;d=$APP.Vd($APP.y(b))?$APP.De.g(a,$APP.y(b)):a;a=$APP.Vd($APP.y(b))?$APP.z(b):b;a=$APP.Xd($APP.y(a))?new $APP.G(null,a,null,1,null):a;d=$APP.Vd($APP.Gd(a))?$APP.De.g(d,$APP.Gd(a)):d;a=$APP.Vd($APP.Gd(a))?$APP.$h(a):a;d=$APP.De.g($APP.r($APP.Nd(c))?$APP.Nd(c):$APP.hf,d);return new $APP.G(null,
  $APP.Pj,new $APP.G(null,$APP.Md(c,d),new $APP.G(null,$APP.Md($APP.He($APP.ys,a),$APP.Rh.j(d,Vr,true)),null,1,null),2,null),3,null)};hH.m=3;hH.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};var iH=function iH(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return iH.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  iH.l=function(a,b,c,d){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.ps,null,1,null),new $APP.G(null,$APP.jo.A(c,$APP.Rh,$APP.pq,true),null,1,null),$APP.F([d]))))};iH.m=3;iH.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};var jH=function jH(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return jH.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  jH.l=function(a,b,c,d){var e=function(){for(var k=new $APP.G(null,$APP.jo.A(c,$APP.Rh,$APP.rt,true),null,1,null),l=d;;){var m=$APP.y(l);if("string"===typeof m)k=$APP.He(m,k),l=$APP.z(l);else if($APP.Vd(m))k=$APP.He(m,k),l=$APP.z(l);else return k}}();a=function(){for(var k=d;;)if("string"===typeof $APP.y(k))k=$APP.z(k);else if($APP.Vd($APP.y(k)))k=$APP.z(k);else return k}();a=$APP.Xd($APP.y(a))?new $APP.G(null,a,null,1,null):a;var f=$APP.x(function(k,l){for(;;){if(null==l)return k;var m=$APP.y(l);if($APP.Vd(m))return $APP.De.g(k,
  m);var h=$APP.De,q=h.g,p=$APP.y(m);m=$APP.He($APP.lg($APP.He($APP.tC,$APP.He($APP.DD,p))),$APP.z(m));h=q.call(h,k,m);l=$APP.z(l);k=h;}}($APP.kg,a));a=function(){for(var k=e,l=f;;)if($APP.r(k)){var m=$APP.z(k);l=$APP.He($APP.y(k),l);k=m;}else return l}();return $APP.He($APP.ps,a)};jH.m=3;jH.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};var kH=function kH(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return kH.l(arguments[0],arguments[1],arguments[2],3<c.length?new $APP.Xc(c.slice(3),0,null):null)};
  kH.l=function(a,b,c,d){var e=hr$1.h(b);a=Us(b,c);if($APP.A.g(a,c))return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.yj,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([d]))));a=$APP.fm.g(2,$APP.Nf.g(1,c));c=$APP.fm.g(2,c);b=$APP.ui.g(function(f){return f instanceof $APP.w?f:e.v?e.v():e.call(null)},c);a=$APP.ne.j(function(f,k){var l=$APP.B.j(k,0,null),m=$APP.B.j(k,1,null);k=$APP.B.j(k,2,null);return l instanceof $APP.w?$APP.De.l(f,k,$APP.F([m])):$APP.De.l(f,k,$APP.F([m,l,k]))},$APP.kg,$APP.ui.A($APP.kv,
  c,a,b));return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,a,null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.yj,null,1,null),new $APP.G(null,$APP.lg($APP.ev.g(b,b)),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.ev.g(c,b)),null,1,null),$APP.F([d])))),null,1,null)])))),null,1,null)]))))};kH.m=3;
  kH.o=function(a){var b=$APP.y(a),c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=$APP.y(d);d=$APP.z(d);return this.l(b,a,c,d)};var Nt=$APP.Zh(gg([$APP.Lj,$APP.Kj,$APP.Bj,$t,$APP.Ur,$APP.Hj,$APP.Mj,$APP.Jj,oA,Yw,$APP.Cj,$APP.zj,$APP.iy,$APP.KF,qE,Ty,$APP.mE,$APP.CB,ow,lA,$APP.vj,wC,$APP.Oj,$APP.TA,My,$APP.vF,$APP.Fj,$APP.Dj,$APP.Pj,$APP.yj,$APP.Ij,Gj,$APP.rj,Ej,Aj,SB,MF,ew,rA,pA,CC,$APP.yF,eC,Fp,DE,Ew],true)),Ut=$APP.Qk.l($APP.F([$APP.vh([qF,$APP.iF,Jw,$APP.du,lz,$APP.sA,$APP.YA,$APP.Vw,$APP.Ez,QB,$APP.Yv,$APP.Mw,BF,$APP.Uy,$APP.Nz,$APP.ly,Zy,$APP.Fv,$APP.Wx,$APP.Rv,$APP.IB,$APP.ny,$APP.UC,$APP.AB,$APP.VA,$APP.ix,$APP.QE,$APP.EF,
  $APP.lD,$APP.Nv,$APP.oD,$APP.Az,$APP.RC,$APP.py,fF,$APP.vD,$APP.vB,$APP.Uv,$APP.NA,Bw,$APP.bA,$APP.gC,$APP.Vv,$APP.zz,$APP.uw,$APP.hD,$APP.gA,$APP.JD,$APP.GB],[mG,eH,function(a,b,c,d,e){return new $APP.G(null,Gj,new $APP.G(null,"(~{}[~{}] \x3d ~{})",new $APP.G(null,c,new $APP.G(null,d,new $APP.G(null,e,null,1,null),2,null),3,null),4,null),5,null)},wG,NG,QG,LG,EG,AG,nG,MG,jH,function(a,b,c){return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.l(new $APP.G(null,
  sD,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.h(new $APP.G(null,yD,null,1,null)))),null,1,null),$APP.F([new $APP.G(null,Qw,null,1,null),new $APP.G(null,c,null,1,null)]))))),null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,oy,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Ct,null,1,null),new $APP.G(null,"Elapsed time: ",null,1,null),$APP.F([new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,Zz,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,
  Dt,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.h(new $APP.G(null,yD,null,1,null)))),null,1,null),$APP.F([new $APP.G(null,sD,null,1,null)])))),null,1,null),$APP.F([new $APP.G(null,6,null,1,null)])))),null,1,null),new $APP.G(null," msecs",null,1,null)])))),null,1,null)))),null,1,null),new $APP.G(null,Qw,null,1,null)]))))},$G,hH,rG,XG,cH,kH,pG,bH,JG,tG,vG,uG,FG,function(){return null},function(a,b,c,d){$APP.Le(c);return $APP.S.h($APP.x($APP.R.l(new $APP.G(null,Ew,null,1,null),new $APP.G(null,
  c,null,1,null),$APP.F([new $APP.G(null,d,null,1,null)]))))},zG,DG,sG,function(a,b,c,d){var e=function(){function f(l){var m=null;if(0<arguments.length){m=0;for(var h=Array(arguments.length-0);m<h.length;)h[m]=arguments[m+0],++m;m=new $APP.Xc(h,0,null);}return k.call(this,m)}function k(l){throw $APP.cl.g($APP.Gf.g($APP.t,l),$APP.hf);}f.m=0;f.o=function(l){l=$APP.x(l);return k(l)};f.l=k;return f}();return new $APP.G(null,ZD,new $APP.G(null,new $APP.G(null,Gj,new $APP.G(null,"function* () {\n~{}\n}",
  new $APP.G(null,function l(k){if($APP.Za(k))return new $APP.G(null,Gj,new $APP.G(null,"yield ~{}",new $APP.G(null,d,null,1,null),2,null),3,null);var m=$APP.y(k),h=$APP.Cd(k);k=l($APP.Fd(k));return $APP.A.g(m,$APP.gB)?$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,h,null,1,null),$APP.F([new $APP.G(null,k,null,1,null)])))):$APP.A.g(m,$APP.aG)?new $APP.G(null,Gj,new $APP.G(null,"if (~{}) {\n~{}\n} else { break; }",new $APP.G(null,h,new $APP.G(null,k,null,1,null),2,null),
  3,null),4,null):$APP.A.g(m,$APP.ry)?$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.bt,null,1,null),new $APP.G(null,h,null,1,null),$APP.F([new $APP.G(null,k,null,1,null)])))):m instanceof $APP.I?e("Invalid 'for' keyword",m):new $APP.G(null,DE,new $APP.G(null,new $APP.J(null,2,5,$APP.N,[m,h],null),new $APP.G(null,k,null,1,null),2,null),3,null)}($APP.x(c)),null,1,null),2,null),3,null),null,1,null),2,null)},HG,GG,function(a,b,c,d){return new $APP.G(null,Gj,new $APP.G(null,"(~{}[~{}])",new $APP.G(null,
  c,new $APP.G(null,d,null,1,null),2,null),3,null),4,null)},xG,function(a,b,c,d){return cq($APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.As,null,1,null),new $APP.G(null,$APP.lg($APP.S.h($APP.x($APP.R.l(new $APP.G(null,XE,null,1,null),new $APP.G(null,c,null,1,null),$APP.F([new $APP.G(null,wz,null,1,null),new $APP.G(null,d,null,1,null),new $APP.G(null,qy,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.l(new $APP.G(null,Gj,null,1,null),new $APP.G(null,"(~{} instanceof ~{})",null,1,null),$APP.F([new $APP.G(null,
  wz,null,1,null),new $APP.G(null,XE,null,1,null)])))),null,1,null)]))))),null,1,null),$APP.F([new $APP.G(null,qy,null,1,null)])))))},OG,iH,function(a,b,c){return c instanceof $APP.w?(a=$APP.A.g("js",$APP.Le(c))?$APP.ai(c):c,b=$APP.Gr.g($APP.ak($APP.t.h(a),"/","."),/\./),a=$APP.xd(b),b=$APP.ui.g(function(d){return $APP.jo.A($APP.Hi.g("js",$APP.Jp.g(".",d)),$APP.Rh,$APP.ND,true)},$APP.Fe($APP.Mf.g(a,$APP.Rf($APP.$h,b)))),a=$APP.Jp.g(" \x26\x26 ",$APP.Jr.g(a,"(typeof ~{} !\x3d\x3d 'undefined')")),cq($APP.R.g(new $APP.G(null,
  Gj,new $APP.G(null,a,null,1,null),2,null),b))):$APP.S.h($APP.x($APP.R.g(new $APP.G(null,FD,null,1,null),new $APP.G(null,c,null,1,null))))},yG,YG,oG,qG,BG,CG,IG,RG,PG]),ZG])),hu=$APP.De.g(BA.h(new $APP.n(null,1,[BA,new $APP.Uh(null,new $APP.n(null,221,[$C,"null",SD,"null",$APP.Fy,"null",$APP.ZE,"null",$APP.iA,"null",uC,"null",VF,"null",$APP.uA,"null",$APP.Cy,"null",NC,"null",$APP.ay,"null",$APP.iw,"null",$APP.Rx,"null",bE,"null",$APP.kF,"null",$APP.UD,"null",$APP.Ax,"null",$APP.Kw,"null",$APP.ZB,"null",
  $APP.HF,"null",$z,"null",$APP.zE,"null",$APP.DF,"null",sx,"null",$APP.mE,"null",$APP.uE,"null",$APP.mx,"null",TD,"null",fB,"null",Mx,"null",eB,"null",$APP.Ay,"null",Uz,"null",fx,"null",WC,"null",$APP.Ny,"null",eA,"null",$APP.eF,"null",qA,"null",$APP.sF,"null",$APP.xE,"null",$APP.lx,"null",wA,"null",$APP.xD,"null",$APP.AE,"null",nD,"null",zw,"null",$APP.AC,"null",VD,"null",AF,"null",$APP.tD,"null",aE,"null",$APP.kw,"null",hE,"null",$APP.iE,"null",$APP.ax,"null",$APP.qx,"null",NF,"null",sy,"null",LC,
  "null",Sw,"null",iC,"null",dz,"null",$APP.Xv,"null",Zw,"null",$APP.bG,"null",$APP.FA,"null",Bz,"null",$APP.Ox,"null",XA,"null",$APP.qC,"null",HA,"null",Lz,"null",ux,"null",uz,"null",$APP.rD,"null",$APP.Yy,"null",XF,"null",Px,"null",$APP.vA,"null",$APP.Kx,"null",$APP.GF,"null",$APP.tx,"null",Py,"null",$APP.Ex,"null",$APP.OC,"null",$APP.Hv,"null",$APP.$F,"null",Pw,"null",Pv,"null",$APP.bx,"null",$APP.hB,"null",Gz,"null",YC,"null",HD,"null",$APP.eD,"null",GC,"null",$APP.YB,"null",nx,"null",hx,"null",
  $APP.dF,"null",HC,"null",$APP.hF,"null",cz,"null",DC,"null",aA,"null",vy,"null",Qz,"null",FC,"null",$APP.yz,"null",oF,"null",nE,"null",dG,"null",$APP.wD,"null",$APP.VE,"null",$APP.KB,"null",cB,"null",PA,"null",jC,"null",$APP.Oz,"null",Nw,"null",fE,"null",RE,"null",az,"null",gF,"null",$APP.kE,"null",yA,"null",$APP.AA,"null",$APP.aw,"null",$APP.qB,"null",Hz,"null",vC,"null",$APP.PE,"null",$APP.ED,"null",JC,"null",$APP.JA,"null",WD,"null",Xy,"null",PC,"null",HB,"null",$APP.yB,"null",$v,"null",$APP.zD,
  "null",$APP.TA,"null",$APP.fw,"null",$APP.pD,"null",nF,"null",Jx,"null",ky,"null",gD,"null",$APP.KC,"null",yx,"null",wy,"null",sB,"null",OA,"null",$APP.Pz,"null",hC,"null",$x,"null",$APP.Zx,"null",Yx,"null",Cw,"null",$APP.$A,"null",$APP.WB,"null",Dy,"null",SE,"null",QC,"null",$APP.Tv,"null",$APP.Ux,"null",Cz,"null",GA,"null",$APP.NB,"null",$APP.YF,"null",$APP.CF,"null",$APP.zA,"null",$APP.lw,"null",Jv,"null",LD,"null",EE,"null",ZC,"null",$APP.VC,"null",$APP.Vy,"null",xB,"null",$APP.CB,"null",$APP.XD,
  "null",$APP.Tt,"null",$APP.cE,"null",oB,"null",$APP.Hx,"null",$APP.dB,"null",ZD,"null",qw,"null",kz,"null",Qx,"null",CA,"null",DA,"null",$APP.vE,"null",iB,"null",$APP.cx,"null",$APP.Mv,"null",mw,"null",rw,"null",$APP.$D,"null",$APP.Vx,"null",$APP.zF,"null",Wy,"null",cC,"null",SC,"null",$APP.wE,"null",$APP.lC,"null",xy,"null",cG,"null",Dz,"null",$APP.mB,"null",dC,"null",kC,"null",Iy,"null",$APP.Sz,"null",YD,"null",Xx,"null",Bx,"null",mC,"null"],null),null)],null)),iD),pu=function(){var a=$APP.Vi.h($APP.hf),
  b=$APP.Vi.h($APP.hf),c=$APP.Vi.h($APP.hf),d=$APP.Vi.h($APP.hf),e=$APP.fe.j($APP.hf,$APP.nA,$APP.dj.v?$APP.dj.v():$APP.dj.call(null));return new $APP.mj($APP.Hi.g("squint.compiler","emit-special"),function(){function f(k,l,m){if(2<arguments.length)for(var h=0,q=Array(arguments.length-2);h<q.length;)q[h]=arguments[h+2],++h;return k}f.m=2;f.o=function(k){var l=$APP.y(k);k=$APP.z(k);$APP.y(k);$APP.cd(k);return l};f.l=function(k){return k};return f}(),$APP.Dm,e,a,b,c,d)}();
  pu.N(null,$APP.TA,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);a=Vp.g(a,kq(b));return $APP.r(iq.h(a))?fq(jq(lp.g?lp.g("!(%s)",a):lp.call(null,"!(%s)",a)),b):jq(Vp.g(new $APP.G(null,Gj,new $APP.G(null,lp.g?lp.g("~{}(%s)",a):lp.call(null,"~{}(%s)",a),new $APP.G(null,LB,null,1,null),2,null),3,null),b))});pu.N(null,ew,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);return fq(["typeof ",$APP.t.h(Vp.g(a,kq(b)))].join(""),b)});
  pu.N(null,Ej,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);var d=$APP.B.j(c,2,null),e=$APP.B.j(c,3,null),f=$APP.B.j(c,4,null),k=$APP.ui.g($APP.Vj,d);return ["var ",$APP.t.h($APP.Vj(a))," \x3d ",$APP.t.h(function(){var l=mq(k),m=$APP.Jp.g("\n",$APP.ui.g(function(p){return ["this.",$APP.t.h(p)," \x3d ",$APP.t.h(p),";"].join("")},k)),h=$APP.Jp.g("\n",$APP.ui.g(function(p){var v=$APP.B.j(p,0,null);p=$APP.B.j(p,1,null);return ["this.cljs$lang$protocol_mask$partition",$APP.t.h(v),"$ \x3d ",$APP.t.h(p),
  ";"].join("")},e)),q=Vp.g(f,$APP.Rh.j($APP.Tm.j(b,Rp,function(p){return $APP.Qk.l($APP.F([p,$APP.bi(k,$APP.ui.g(function(v){return $APP.Hi.h(["self__.",$APP.t.h(v)].join(""))},k))]))}),$APP.Xk,true));return lp.J?lp.J("function %s {\n%s\n%s\n};\n%s",l,m,h,q):lp.call(null,"function %s {\n%s\n%s\n};\n%s",l,m,h,q)}())].join("")});
  pu.N(null,$APP.vF,function(a,b,c){a=$APP.x(c);$APP.y(a);c=$APP.z(a);a=$APP.y(c);var d=$APP.z(c);c=Vp;var e=c.g;a=$APP.S.h($APP.x($APP.R.l(new $APP.G(null,nB,null,1,null),new $APP.G(null,Us(b,a),null,1,null),$APP.F([d]))));return e.call(c,a,b)});
  pu.N(null,DE,function(a,b,c){$APP.B.j(c,0,null);var d=$APP.B.j(c,1,null);a=$APP.B.j(d,0,null);d=$APP.B.j(d,1,null);c=$APP.B.j(c,2,null);var e=$APP.Rh.j(b,$APP.Kp,$APP.Qp),f=hr$1.h(e);f=f.v?f.v():f.call(null);e=$APP.Tm.J(e,Rp,$APP.Rh,f,f);return [$APP.t.h(Vp.g(new $APP.G(null,Gj,new $APP.G(null,$APP.Zj("for (let %s of ~{})","%s",$APP.t.h(f)),new $APP.G(null,new $APP.G(null,gE,new $APP.G(null,d,null,1,null),2,null),null,1,null),2,null),3,null),e))," {\n",$APP.t.h(Vp.g(new $APP.G(null,pw,new $APP.G(null,
  new $APP.J(null,2,5,$APP.N,[a,f],null),new $APP.G(null,c,null,1,null),2,null),3,null),$APP.Rh.j(e,$APP.Kp,$APP.Qp))),"\n}",$APP.t.h(fq(null,b))].join("")});
  pu.N(null,Ew,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);c=$APP.B.j(c,2,null);return Vp.g(new $APP.G(null,$APP.zj,new $APP.G(null,$APP.r($APP.Wt.h(b))?$APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.XC,null,1,null),new $APP.G(null,$APP.S.h($APP.x($APP.R.g(new $APP.G(null,hA,null,1,null),new $APP.G(null,$APP.Hi.g($APP.nr,a),null,1,null)))),null,1,null),$APP.F([new $APP.G(null,$APP.jo.A($APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Pj,null,1,null),new $APP.G(null,a,null,1,null),$APP.F([new $APP.G(null,
  c,null,1,null)])))),$APP.Rh,Qv,true),null,1,null)])))):$APP.jo.A($APP.S.h($APP.x($APP.R.l(new $APP.G(null,$APP.Pj,null,1,null),new $APP.G(null,a,null,1,null),$APP.F([new $APP.G(null,c,null,1,null)])))),$APP.Rh,Qv,true),null,1,null),2,null),b)});pu.N(null,$APP.Ur,function(a,b,c){a=$APP.x(c);$APP.y(a);a=$APP.z(a);c=$APP.Gf.A(gH,c,$APP.hf,a);return Vp.g(c,b)});var vu=false;pu.N(null,rA,function(a,b,c){$APP.B.j(c,0,null);a=$APP.B.j(c,1,null);vu=true;b=$APP.Rh.j(b,$APP.yq,true);return Vp.g(a,b)});
  $APP.ru=$APP.gp(new $APP.n(null,7,[$APP.dp,true,$APP.Wo,false,$APP.Vo,$APP.be,$APP.Cm,new $APP.n(null,3,[$APP.Vs,function(a){return $APP.jo.A(a,$APP.Rh,rB,true)},zy,function(a){return new $APP.G(null,rA,new $APP.G(null,a,null,1,null),2,null)},Iv,function(a){return new $APP.G(null,pA,new $APP.G(null,a,null,1,null),2,null)}],null),$APP.ho,$APP.tA,$APP.eo,new $APP.Uh(null,new $APP.n(null,2,[ds,null,$APP.kD,null],null),null),$APP.Lo,function(a){return new $APP.G(null,CC,new $APP.G(null,a,null,1,null),2,null)}],
  null));$APP.lH=function lH(a){switch(arguments.length){case 1:return lH.h(arguments[0]);case 2:return lH.g(arguments[0],arguments[1]);default:throw Error(["Invalid arity: ",$APP.t.h(arguments.length)].join(""));}};$APP.lH.h=function(a){return $APP.lH.g(a,null)};$APP.lH.g=function(a,b){b=$APP.$a(b)?Ju(b):b;a=$APP.Eu(a,b,null);a=$APP.jf(a);return $APP.fe.g(a,$APP.Du)};$APP.lH.m=2;const compileString=$APP.lH;

  function openCam() {
    // let error = false;
    let allMediaDevices = navigator.mediaDevices;
    if (!allMediaDevices || !allMediaDevices.getUserMedia) {
      console.log("getUserMedia() not supported.");
      return;
    }
    try {
      allMediaDevices.getUserMedia({
        audio: false,
        video: { width: 1200, height: 800 }
      })
        .then(function (vidStream) {
          console.log(vidStream);
          var video = document.getElementById('videopanel');
          if ("srcObject" in video) {
            video.srcObject = vidStream;
          } else {
            video.src = window.URL.createObjectURL(vidStream);
          }
          video.onloadedmetadata = function (e) {
            video.play();
          };
        })
        .catch(function (e) {
          console.log(e.name + ": " + e.message);
          error = true;
        });
    }
     catch(err) {
      console.log(err);
    }
    // return error;

    return true;
  }

  /**
   * marked v15.0.7 - a markdown parser
   * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)
   * https://github.com/markedjs/marked
   */

  /**
   * DO NOT EDIT THIS FILE
   * The code in this file is generated from files in ./src/
   */

  /**
   * Gets the original marked default options.
   */
  function _getDefaults() {
      return {
          async: false,
          breaks: false,
          extensions: null,
          gfm: true,
          hooks: null,
          pedantic: false,
          renderer: null,
          silent: false,
          tokenizer: null,
          walkTokens: null,
      };
  }
  let _defaults = _getDefaults();
  function changeDefaults(newDefaults) {
      _defaults = newDefaults;
  }

  const noopTest = { exec: () => null };
  function edit(regex, opt = '') {
      let source = typeof regex === 'string' ? regex : regex.source;
      const obj = {
          replace: (name, val) => {
              let valSource = typeof val === 'string' ? val : val.source;
              valSource = valSource.replace(other.caret, '$1');
              source = source.replace(name, valSource);
              return obj;
          },
          getRegex: () => {
              return new RegExp(source, opt);
          },
      };
      return obj;
  }
  const other = {
      codeRemoveIndent: /^(?: {1,4}| {0,3}\t)/gm,
      outputLinkReplace: /\\([\[\]])/g,
      indentCodeCompensation: /^(\s+)(?:```)/,
      beginningSpace: /^\s+/,
      endingHash: /#$/,
      startingSpaceChar: /^ /,
      endingSpaceChar: / $/,
      nonSpaceChar: /[^ ]/,
      newLineCharGlobal: /\n/g,
      tabCharGlobal: /\t/g,
      multipleSpaceGlobal: /\s+/g,
      blankLine: /^[ \t]*$/,
      doubleBlankLine: /\n[ \t]*\n[ \t]*$/,
      blockquoteStart: /^ {0,3}>/,
      blockquoteSetextReplace: /\n {0,3}((?:=+|-+) *)(?=\n|$)/g,
      blockquoteSetextReplace2: /^ {0,3}>[ \t]?/gm,
      listReplaceTabs: /^\t+/,
      listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,
      listIsTask: /^\[[ xX]\] /,
      listReplaceTask: /^\[[ xX]\] +/,
      anyLine: /\n.*\n/,
      hrefBrackets: /^<(.*)>$/,
      tableDelimiter: /[:|]/,
      tableAlignChars: /^\||\| *$/g,
      tableRowBlankLine: /\n[ \t]*$/,
      tableAlignRight: /^ *-+: *$/,
      tableAlignCenter: /^ *:-+: *$/,
      tableAlignLeft: /^ *:-+ *$/,
      startATag: /^<a /i,
      endATag: /^<\/a>/i,
      startPreScriptTag: /^<(pre|code|kbd|script)(\s|>)/i,
      endPreScriptTag: /^<\/(pre|code|kbd|script)(\s|>)/i,
      startAngleBracket: /^</,
      endAngleBracket: />$/,
      pedanticHrefTitle: /^([^'"]*[^\s])\s+(['"])(.*)\2/,
      unicodeAlphaNumeric: /[\p{L}\p{N}]/u,
      escapeTest: /[&<>"']/,
      escapeReplace: /[&<>"']/g,
      escapeTestNoEncode: /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/,
      escapeReplaceNoEncode: /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/g,
      unescapeTest: /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig,
      caret: /(^|[^\[])\^/g,
      percentDecode: /%25/g,
      findPipe: /\|/g,
      splitPipe: / \|/,
      slashPipe: /\\\|/g,
      carriageReturn: /\r\n|\r/g,
      spaceLine: /^ +$/gm,
      notSpaceStart: /^\S*/,
      endingNewline: /\n$/,
      listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[\t ][^\\n]*)?(?:\\n|$))`),
      nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ \t][^\\n]*)?(?:\\n|$))`),
      hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`),
      fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\`\`\`|~~~)`),
      headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),
      htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),
  };
  /**
   * Block-Level Grammar
   */
  const newline = /^(?:[ \t]*(?:\n|$))+/;
  const blockCode = /^((?: {4}| {0,3}\t)[^\n]+(?:\n(?:[ \t]*(?:\n|$))*)?)+/;
  const fences = /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/;
  const hr = /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/;
  const heading = /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/;
  const bullet = /(?:[*+-]|\d{1,9}[.)])/;
  const lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\n(?!\s*?\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\n {0,3}(=+|-+) *(?:\n+|$)/;
  const lheading = edit(lheadingCore)
      .replace(/bull/g, bullet) // lists can interrupt
      .replace(/blockCode/g, /(?: {4}| {0,3}\t)/) // indented code blocks can interrupt
      .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt
      .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt
      .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt
      .replace(/html/g, / {0,3}<[^\n>]+>\n/) // block html can interrupt
      .replace(/\|table/g, '') // table not in commonmark
      .getRegex();
  const lheadingGfm = edit(lheadingCore)
      .replace(/bull/g, bullet) // lists can interrupt
      .replace(/blockCode/g, /(?: {4}| {0,3}\t)/) // indented code blocks can interrupt
      .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt
      .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt
      .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt
      .replace(/html/g, / {0,3}<[^\n>]+>\n/) // block html can interrupt
      .replace(/table/g, / {0,3}\|?(?:[:\- ]*\|)+[\:\- ]*\n/) // table can interrupt
      .getRegex();
  const _paragraph = /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/;
  const blockText = /^[^\n]+/;
  const _blockLabel = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
  const def = edit(/^ {0,3}\[(label)\]: *(?:\n[ \t]*)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n[ \t]*)?| *\n[ \t]*)(title))? *(?:\n+|$)/)
      .replace('label', _blockLabel)
      .replace('title', /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/)
      .getRegex();
  const list = edit(/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/)
      .replace(/bull/g, bullet)
      .getRegex();
  const _tag = 'address|article|aside|base|basefont|blockquote|body|caption'
      + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'
      + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'
      + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'
      + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'
      + '|tr|track|ul';
  const _comment = /<!--(?:-?>|[\s\S]*?(?:-->|$))/;
  const html = edit('^ {0,3}(?:' // optional indentation
      + '<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)' // (1)
      + '|comment[^\\n]*(\\n+|$)' // (2)
      + '|<\\?[\\s\\S]*?(?:\\?>\\n*|$)' // (3)
      + '|<![A-Z][\\s\\S]*?(?:>\\n*|$)' // (4)
      + '|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)' // (5)
      + '|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n[ \t]*)+\\n|$)' // (6)
      + '|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ \t]*)+\\n|$)' // (7) open tag
      + '|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ \t]*)+\\n|$)' // (7) closing tag
      + ')', 'i')
      .replace('comment', _comment)
      .replace('tag', _tag)
      .replace('attribute', / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/)
      .getRegex();
  const paragraph = edit(_paragraph)
      .replace('hr', hr)
      .replace('heading', ' {0,3}#{1,6}(?:\\s|$)')
      .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs
      .replace('|table', '')
      .replace('blockquote', ' {0,3}>')
      .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n')
      .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
      .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)')
      .replace('tag', _tag) // pars can be interrupted by type (6) html blocks
      .getRegex();
  const blockquote = edit(/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/)
      .replace('paragraph', paragraph)
      .getRegex();
  /**
   * Normal Block Grammar
   */
  const blockNormal = {
      blockquote,
      code: blockCode,
      def,
      fences,
      heading,
      hr,
      html,
      lheading,
      list,
      newline,
      paragraph,
      table: noopTest,
      text: blockText,
  };
  /**
   * GFM Block Grammar
   */
  const gfmTable = edit('^ *([^\\n ].*)\\n' // Header
      + ' {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)' // Align
      + '(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)') // Cells
      .replace('hr', hr)
      .replace('heading', ' {0,3}#{1,6}(?:\\s|$)')
      .replace('blockquote', ' {0,3}>')
      .replace('code', '(?: {4}| {0,3}\t)[^\\n]')
      .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n')
      .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
      .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)')
      .replace('tag', _tag) // tables can be interrupted by type (6) html blocks
      .getRegex();
  const blockGfm = {
      ...blockNormal,
      lheading: lheadingGfm,
      table: gfmTable,
      paragraph: edit(_paragraph)
          .replace('hr', hr)
          .replace('heading', ' {0,3}#{1,6}(?:\\s|$)')
          .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs
          .replace('table', gfmTable) // interrupt paragraphs with table
          .replace('blockquote', ' {0,3}>')
          .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n')
          .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
          .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)')
          .replace('tag', _tag) // pars can be interrupted by type (6) html blocks
          .getRegex(),
  };
  /**
   * Pedantic grammar (original John Gruber's loose markdown specification)
   */
  const blockPedantic = {
      ...blockNormal,
      html: edit('^ *(?:comment *(?:\\n|\\s*$)'
          + '|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)' // closed tag
          + '|<tag(?:"[^"]*"|\'[^\']*\'|\\s[^\'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))')
          .replace('comment', _comment)
          .replace(/tag/g, '(?!(?:'
          + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'
          + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'
          + '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b')
          .getRegex(),
      def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
      heading: /^(#{1,6})(.*)(?:\n+|$)/,
      fences: noopTest, // fences not supported
      lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
      paragraph: edit(_paragraph)
          .replace('hr', hr)
          .replace('heading', ' *#{1,6} *[^\n]')
          .replace('lheading', lheading)
          .replace('|table', '')
          .replace('blockquote', ' {0,3}>')
          .replace('|fences', '')
          .replace('|list', '')
          .replace('|html', '')
          .replace('|tag', '')
          .getRegex(),
  };
  /**
   * Inline-Level Grammar
   */
  const escape$1 = /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/;
  const inlineCode = /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/;
  const br = /^( {2,}|\\)\n(?!\s*$)/;
  const inlineText = /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/;
  // list of unicode punctuation marks, plus any missing characters from CommonMark spec
  const _punctuation = /[\p{P}\p{S}]/u;
  const _punctuationOrSpace = /[\s\p{P}\p{S}]/u;
  const _notPunctuationOrSpace = /[^\s\p{P}\p{S}]/u;
  const punctuation = edit(/^((?![*_])punctSpace)/, 'u')
      .replace(/punctSpace/g, _punctuationOrSpace).getRegex();
  // GFM allows ~ inside strong and em for strikethrough
  const _punctuationGfmStrongEm = /(?!~)[\p{P}\p{S}]/u;
  const _punctuationOrSpaceGfmStrongEm = /(?!~)[\s\p{P}\p{S}]/u;
  const _notPunctuationOrSpaceGfmStrongEm = /(?:[^\s\p{P}\p{S}]|~)/u;
  // sequences em should skip over [title](link), `code`, <html>
  const blockSkip = /\[[^[\]]*?\]\((?:\\.|[^\\\(\)]|\((?:\\.|[^\\\(\)])*\))*\)|`[^`]*?`|<[^<>]*?>/g;
  const emStrongLDelimCore = /^(?:\*+(?:((?!\*)punct)|[^\s*]))|^_+(?:((?!_)punct)|([^\s_]))/;
  const emStrongLDelim = edit(emStrongLDelimCore, 'u')
      .replace(/punct/g, _punctuation)
      .getRegex();
  const emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')
      .replace(/punct/g, _punctuationGfmStrongEm)
      .getRegex();
  const emStrongRDelimAstCore = '^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)' // Skip orphan inside strong
      + '|[^*]+(?=[^*])' // Consume to delim
      + '|(?!\\*)punct(\\*+)(?=[\\s]|$)' // (1) #*** can only be a Right Delimiter
      + '|notPunctSpace(\\*+)(?!\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter
      + '|(?!\\*)punctSpace(\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter
      + '|[\\s](\\*+)(?!\\*)(?=punct)' // (4) ***# can only be Left Delimiter
      + '|(?!\\*)punct(\\*+)(?!\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter
      + '|notPunctSpace(\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter
  const emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')
      .replace(/notPunctSpace/g, _notPunctuationOrSpace)
      .replace(/punctSpace/g, _punctuationOrSpace)
      .replace(/punct/g, _punctuation)
      .getRegex();
  const emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')
      .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)
      .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)
      .replace(/punct/g, _punctuationGfmStrongEm)
      .getRegex();
  // (6) Not allowed for _
  const emStrongRDelimUnd = edit('^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)' // Skip orphan inside strong
      + '|[^_]+(?=[^_])' // Consume to delim
      + '|(?!_)punct(_+)(?=[\\s]|$)' // (1) #___ can only be a Right Delimiter
      + '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter
      + '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter
      + '|[\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter
      + '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter
      .replace(/notPunctSpace/g, _notPunctuationOrSpace)
      .replace(/punctSpace/g, _punctuationOrSpace)
      .replace(/punct/g, _punctuation)
      .getRegex();
  const anyPunctuation = edit(/\\(punct)/, 'gu')
      .replace(/punct/g, _punctuation)
      .getRegex();
  const autolink = edit(/^<(scheme:[^\s\x00-\x1f<>]*|email)>/)
      .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)
      .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)
      .getRegex();
  const _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();
  const tag = edit('^comment'
      + '|^</[a-zA-Z][\\w:-]*\\s*>' // self-closing tag
      + '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>' // open tag
      + '|^<\\?[\\s\\S]*?\\?>' // processing instruction, e.g. <?php ?>
      + '|^<![a-zA-Z]+\\s[\\s\\S]*?>' // declaration, e.g. <!DOCTYPE html>
      + '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>') // CDATA section
      .replace('comment', _inlineComment)
      .replace('attribute', /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/)
      .getRegex();
  const _inlineLabel = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
  const link = edit(/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/)
      .replace('label', _inlineLabel)
      .replace('href', /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/)
      .replace('title', /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/)
      .getRegex();
  const reflink = edit(/^!?\[(label)\]\[(ref)\]/)
      .replace('label', _inlineLabel)
      .replace('ref', _blockLabel)
      .getRegex();
  const nolink = edit(/^!?\[(ref)\](?:\[\])?/)
      .replace('ref', _blockLabel)
      .getRegex();
  const reflinkSearch = edit('reflink|nolink(?!\\()', 'g')
      .replace('reflink', reflink)
      .replace('nolink', nolink)
      .getRegex();
  /**
   * Normal Inline Grammar
   */
  const inlineNormal = {
      _backpedal: noopTest, // only used for GFM url
      anyPunctuation,
      autolink,
      blockSkip,
      br,
      code: inlineCode,
      del: noopTest,
      emStrongLDelim,
      emStrongRDelimAst,
      emStrongRDelimUnd,
      escape: escape$1,
      link,
      nolink,
      punctuation,
      reflink,
      reflinkSearch,
      tag,
      text: inlineText,
      url: noopTest,
  };
  /**
   * Pedantic Inline Grammar
   */
  const inlinePedantic = {
      ...inlineNormal,
      link: edit(/^!?\[(label)\]\((.*?)\)/)
          .replace('label', _inlineLabel)
          .getRegex(),
      reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/)
          .replace('label', _inlineLabel)
          .getRegex(),
  };
  /**
   * GFM Inline Grammar
   */
  const inlineGfm = {
      ...inlineNormal,
      emStrongRDelimAst: emStrongRDelimAstGfm,
      emStrongLDelim: emStrongLDelimGfm,
      url: edit(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/, 'i')
          .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)
          .getRegex(),
      _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
      del: /^(~~?)(?=[^\s~])((?:\\.|[^\\])*?(?:\\.|[^\s~\\]))\1(?=[^~]|$)/,
      text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/,
  };
  /**
   * GFM + Line Breaks Inline Grammar
   */
  const inlineBreaks = {
      ...inlineGfm,
      br: edit(br).replace('{2,}', '*').getRegex(),
      text: edit(inlineGfm.text)
          .replace('\\b_', '\\b_| {2,}\\n')
          .replace(/\{2,\}/g, '*')
          .getRegex(),
  };
  /**
   * exports
   */
  const block = {
      normal: blockNormal,
      gfm: blockGfm,
      pedantic: blockPedantic,
  };
  const inline = {
      normal: inlineNormal,
      gfm: inlineGfm,
      breaks: inlineBreaks,
      pedantic: inlinePedantic,
  };

  /**
   * Helpers
   */
  const escapeReplacements = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;',
  };
  const getEscapeReplacement = (ch) => escapeReplacements[ch];
  function escape(html, encode) {
      if (encode) {
          if (other.escapeTest.test(html)) {
              return html.replace(other.escapeReplace, getEscapeReplacement);
          }
      }
      else {
          if (other.escapeTestNoEncode.test(html)) {
              return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);
          }
      }
      return html;
  }
  function cleanUrl(href) {
      try {
          href = encodeURI(href).replace(other.percentDecode, '%');
      }
      catch {
          return null;
      }
      return href;
  }
  function splitCells(tableRow, count) {
      // ensure that every cell-delimiting pipe has a space
      // before it to distinguish it from an escaped pipe
      const row = tableRow.replace(other.findPipe, (match, offset, str) => {
          let escaped = false;
          let curr = offset;
          while (--curr >= 0 && str[curr] === '\\')
              escaped = !escaped;
          if (escaped) {
              // odd number of slashes means | is escaped
              // so we leave it alone
              return '|';
          }
          else {
              // add space before unescaped |
              return ' |';
          }
      }), cells = row.split(other.splitPipe);
      let i = 0;
      // First/last cell in a row cannot be empty if it has no leading/trailing pipe
      if (!cells[0].trim()) {
          cells.shift();
      }
      if (cells.length > 0 && !cells.at(-1)?.trim()) {
          cells.pop();
      }
      if (count) {
          if (cells.length > count) {
              cells.splice(count);
          }
          else {
              while (cells.length < count)
                  cells.push('');
          }
      }
      for (; i < cells.length; i++) {
          // leading or trailing whitespace is ignored per the gfm spec
          cells[i] = cells[i].trim().replace(other.slashPipe, '|');
      }
      return cells;
  }
  /**
   * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').
   * /c*$/ is vulnerable to REDOS.
   *
   * @param str
   * @param c
   * @param invert Remove suffix of non-c chars instead. Default falsey.
   */
  function rtrim(str, c, invert) {
      const l = str.length;
      if (l === 0) {
          return '';
      }
      // Length of suffix matching the invert condition.
      let suffLen = 0;
      // Step left until we fail to match the invert condition.
      while (suffLen < l) {
          const currChar = str.charAt(l - suffLen - 1);
          if (currChar === c && true) {
              suffLen++;
          }
          else {
              break;
          }
      }
      return str.slice(0, l - suffLen);
  }
  function findClosingBracket(str, b) {
      if (str.indexOf(b[1]) === -1) {
          return -1;
      }
      let level = 0;
      for (let i = 0; i < str.length; i++) {
          if (str[i] === '\\') {
              i++;
          }
          else if (str[i] === b[0]) {
              level++;
          }
          else if (str[i] === b[1]) {
              level--;
              if (level < 0) {
                  return i;
              }
          }
      }
      return -1;
  }

  function outputLink(cap, link, raw, lexer, rules) {
      const href = link.href;
      const title = link.title || null;
      const text = cap[1].replace(rules.other.outputLinkReplace, '$1');
      if (cap[0].charAt(0) !== '!') {
          lexer.state.inLink = true;
          const token = {
              type: 'link',
              raw,
              href,
              title,
              text,
              tokens: lexer.inlineTokens(text),
          };
          lexer.state.inLink = false;
          return token;
      }
      return {
          type: 'image',
          raw,
          href,
          title,
          text,
      };
  }
  function indentCodeCompensation(raw, text, rules) {
      const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);
      if (matchIndentToCode === null) {
          return text;
      }
      const indentToCode = matchIndentToCode[1];
      return text
          .split('\n')
          .map(node => {
          const matchIndentInNode = node.match(rules.other.beginningSpace);
          if (matchIndentInNode === null) {
              return node;
          }
          const [indentInNode] = matchIndentInNode;
          if (indentInNode.length >= indentToCode.length) {
              return node.slice(indentToCode.length);
          }
          return node;
      })
          .join('\n');
  }
  /**
   * Tokenizer
   */
  class _Tokenizer {
      options;
      rules; // set by the lexer
      lexer; // set by the lexer
      constructor(options) {
          this.options = options || _defaults;
      }
      space(src) {
          const cap = this.rules.block.newline.exec(src);
          if (cap && cap[0].length > 0) {
              return {
                  type: 'space',
                  raw: cap[0],
              };
          }
      }
      code(src) {
          const cap = this.rules.block.code.exec(src);
          if (cap) {
              const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');
              return {
                  type: 'code',
                  raw: cap[0],
                  codeBlockStyle: 'indented',
                  text: !this.options.pedantic
                      ? rtrim(text, '\n')
                      : text,
              };
          }
      }
      fences(src) {
          const cap = this.rules.block.fences.exec(src);
          if (cap) {
              const raw = cap[0];
              const text = indentCodeCompensation(raw, cap[3] || '', this.rules);
              return {
                  type: 'code',
                  raw,
                  lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],
                  text,
              };
          }
      }
      heading(src) {
          const cap = this.rules.block.heading.exec(src);
          if (cap) {
              let text = cap[2].trim();
              // remove trailing #s
              if (this.rules.other.endingHash.test(text)) {
                  const trimmed = rtrim(text, '#');
                  if (this.options.pedantic) {
                      text = trimmed.trim();
                  }
                  else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {
                      // CommonMark requires space before trailing #s
                      text = trimmed.trim();
                  }
              }
              return {
                  type: 'heading',
                  raw: cap[0],
                  depth: cap[1].length,
                  text,
                  tokens: this.lexer.inline(text),
              };
          }
      }
      hr(src) {
          const cap = this.rules.block.hr.exec(src);
          if (cap) {
              return {
                  type: 'hr',
                  raw: rtrim(cap[0], '\n'),
              };
          }
      }
      blockquote(src) {
          const cap = this.rules.block.blockquote.exec(src);
          if (cap) {
              let lines = rtrim(cap[0], '\n').split('\n');
              let raw = '';
              let text = '';
              const tokens = [];
              while (lines.length > 0) {
                  let inBlockquote = false;
                  const currentLines = [];
                  let i;
                  for (i = 0; i < lines.length; i++) {
                      // get lines up to a continuation
                      if (this.rules.other.blockquoteStart.test(lines[i])) {
                          currentLines.push(lines[i]);
                          inBlockquote = true;
                      }
                      else if (!inBlockquote) {
                          currentLines.push(lines[i]);
                      }
                      else {
                          break;
                      }
                  }
                  lines = lines.slice(i);
                  const currentRaw = currentLines.join('\n');
                  const currentText = currentRaw
                      // precede setext continuation with 4 spaces so it isn't a setext
                      .replace(this.rules.other.blockquoteSetextReplace, '\n    $1')
                      .replace(this.rules.other.blockquoteSetextReplace2, '');
                  raw = raw ? `${raw}\n${currentRaw}` : currentRaw;
                  text = text ? `${text}\n${currentText}` : currentText;
                  // parse blockquote lines as top level tokens
                  // merge paragraphs if this is a continuation
                  const top = this.lexer.state.top;
                  this.lexer.state.top = true;
                  this.lexer.blockTokens(currentText, tokens, true);
                  this.lexer.state.top = top;
                  // if there is no continuation then we are done
                  if (lines.length === 0) {
                      break;
                  }
                  const lastToken = tokens.at(-1);
                  if (lastToken?.type === 'code') {
                      // blockquote continuation cannot be preceded by a code block
                      break;
                  }
                  else if (lastToken?.type === 'blockquote') {
                      // include continuation in nested blockquote
                      const oldToken = lastToken;
                      const newText = oldToken.raw + '\n' + lines.join('\n');
                      const newToken = this.blockquote(newText);
                      tokens[tokens.length - 1] = newToken;
                      raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;
                      text = text.substring(0, text.length - oldToken.text.length) + newToken.text;
                      break;
                  }
                  else if (lastToken?.type === 'list') {
                      // include continuation in nested list
                      const oldToken = lastToken;
                      const newText = oldToken.raw + '\n' + lines.join('\n');
                      const newToken = this.list(newText);
                      tokens[tokens.length - 1] = newToken;
                      raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;
                      text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;
                      lines = newText.substring(tokens.at(-1).raw.length).split('\n');
                      continue;
                  }
              }
              return {
                  type: 'blockquote',
                  raw,
                  tokens,
                  text,
              };
          }
      }
      list(src) {
          let cap = this.rules.block.list.exec(src);
          if (cap) {
              let bull = cap[1].trim();
              const isordered = bull.length > 1;
              const list = {
                  type: 'list',
                  raw: '',
                  ordered: isordered,
                  start: isordered ? +bull.slice(0, -1) : '',
                  loose: false,
                  items: [],
              };
              bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
              if (this.options.pedantic) {
                  bull = isordered ? bull : '[*+-]';
              }
              // Get next list item
              const itemRegex = this.rules.other.listItemRegex(bull);
              let endsWithBlankLine = false;
              // Check if current bullet point can start a new List Item
              while (src) {
                  let endEarly = false;
                  let raw = '';
                  let itemContents = '';
                  if (!(cap = itemRegex.exec(src))) {
                      break;
                  }
                  if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)
                      break;
                  }
                  raw = cap[0];
                  src = src.substring(raw.length);
                  let line = cap[2].split('\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t) => ' '.repeat(3 * t.length));
                  let nextLine = src.split('\n', 1)[0];
                  let blankLine = !line.trim();
                  let indent = 0;
                  if (this.options.pedantic) {
                      indent = 2;
                      itemContents = line.trimStart();
                  }
                  else if (blankLine) {
                      indent = cap[1].length + 1;
                  }
                  else {
                      indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char
                      indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent
                      itemContents = line.slice(indent);
                      indent += cap[1].length;
                  }
                  if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line
                      raw += nextLine + '\n';
                      src = src.substring(nextLine.length + 1);
                      endEarly = true;
                  }
                  if (!endEarly) {
                      const nextBulletRegex = this.rules.other.nextBulletRegex(indent);
                      const hrRegex = this.rules.other.hrRegex(indent);
                      const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);
                      const headingBeginRegex = this.rules.other.headingBeginRegex(indent);
                      const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);
                      // Check if following lines should be included in List Item
                      while (src) {
                          const rawLine = src.split('\n', 1)[0];
                          let nextLineWithoutTabs;
                          nextLine = rawLine;
                          // Re-align to follow commonmark nesting rules
                          if (this.options.pedantic) {
                              nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');
                              nextLineWithoutTabs = nextLine;
                          }
                          else {
                              nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');
                          }
                          // End list item if found code fences
                          if (fencesBeginRegex.test(nextLine)) {
                              break;
                          }
                          // End list item if found start of new heading
                          if (headingBeginRegex.test(nextLine)) {
                              break;
                          }
                          // End list item if found start of html block
                          if (htmlBeginRegex.test(nextLine)) {
                              break;
                          }
                          // End list item if found start of new bullet
                          if (nextBulletRegex.test(nextLine)) {
                              break;
                          }
                          // Horizontal rule found
                          if (hrRegex.test(nextLine)) {
                              break;
                          }
                          if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible
                              itemContents += '\n' + nextLineWithoutTabs.slice(indent);
                          }
                          else {
                              // not enough indentation
                              if (blankLine) {
                                  break;
                              }
                              // paragraph continuation unless last line was a different block level element
                              if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block
                                  break;
                              }
                              if (fencesBeginRegex.test(line)) {
                                  break;
                              }
                              if (headingBeginRegex.test(line)) {
                                  break;
                              }
                              if (hrRegex.test(line)) {
                                  break;
                              }
                              itemContents += '\n' + nextLine;
                          }
                          if (!blankLine && !nextLine.trim()) { // Check if current line is blank
                              blankLine = true;
                          }
                          raw += rawLine + '\n';
                          src = src.substring(rawLine.length + 1);
                          line = nextLineWithoutTabs.slice(indent);
                      }
                  }
                  if (!list.loose) {
                      // If the previous item ended with a blank line, the list is loose
                      if (endsWithBlankLine) {
                          list.loose = true;
                      }
                      else if (this.rules.other.doubleBlankLine.test(raw)) {
                          endsWithBlankLine = true;
                      }
                  }
                  let istask = null;
                  let ischecked;
                  // Check for task list items
                  if (this.options.gfm) {
                      istask = this.rules.other.listIsTask.exec(itemContents);
                      if (istask) {
                          ischecked = istask[0] !== '[ ] ';
                          itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');
                      }
                  }
                  list.items.push({
                      type: 'list_item',
                      raw,
                      task: !!istask,
                      checked: ischecked,
                      loose: false,
                      text: itemContents,
                      tokens: [],
                  });
                  list.raw += raw;
              }
              // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic
              const lastItem = list.items.at(-1);
              if (lastItem) {
                  lastItem.raw = lastItem.raw.trimEnd();
                  lastItem.text = lastItem.text.trimEnd();
              }
              else {
                  // not a list since there were no items
                  return;
              }
              list.raw = list.raw.trimEnd();
              // Item child tokens handled here at end because we needed to have the final item to trim it first
              for (let i = 0; i < list.items.length; i++) {
                  this.lexer.state.top = false;
                  list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);
                  if (!list.loose) {
                      // Check if list should be loose
                      const spacers = list.items[i].tokens.filter(t => t.type === 'space');
                      const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));
                      list.loose = hasMultipleLineBreaks;
                  }
              }
              // Set all items to loose if list is loose
              if (list.loose) {
                  for (let i = 0; i < list.items.length; i++) {
                      list.items[i].loose = true;
                  }
              }
              return list;
          }
      }
      html(src) {
          const cap = this.rules.block.html.exec(src);
          if (cap) {
              const token = {
                  type: 'html',
                  block: true,
                  raw: cap[0],
                  pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',
                  text: cap[0],
              };
              return token;
          }
      }
      def(src) {
          const cap = this.rules.block.def.exec(src);
          if (cap) {
              const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');
              const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';
              const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];
              return {
                  type: 'def',
                  tag,
                  raw: cap[0],
                  href,
                  title,
              };
          }
      }
      table(src) {
          const cap = this.rules.block.table.exec(src);
          if (!cap) {
              return;
          }
          if (!this.rules.other.tableDelimiter.test(cap[2])) {
              // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading
              return;
          }
          const headers = splitCells(cap[1]);
          const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');
          const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\n') : [];
          const item = {
              type: 'table',
              raw: cap[0],
              header: [],
              align: [],
              rows: [],
          };
          if (headers.length !== aligns.length) {
              // header and align columns must be equal, rows can be different.
              return;
          }
          for (const align of aligns) {
              if (this.rules.other.tableAlignRight.test(align)) {
                  item.align.push('right');
              }
              else if (this.rules.other.tableAlignCenter.test(align)) {
                  item.align.push('center');
              }
              else if (this.rules.other.tableAlignLeft.test(align)) {
                  item.align.push('left');
              }
              else {
                  item.align.push(null);
              }
          }
          for (let i = 0; i < headers.length; i++) {
              item.header.push({
                  text: headers[i],
                  tokens: this.lexer.inline(headers[i]),
                  header: true,
                  align: item.align[i],
              });
          }
          for (const row of rows) {
              item.rows.push(splitCells(row, item.header.length).map((cell, i) => {
                  return {
                      text: cell,
                      tokens: this.lexer.inline(cell),
                      header: false,
                      align: item.align[i],
                  };
              }));
          }
          return item;
      }
      lheading(src) {
          const cap = this.rules.block.lheading.exec(src);
          if (cap) {
              return {
                  type: 'heading',
                  raw: cap[0],
                  depth: cap[2].charAt(0) === '=' ? 1 : 2,
                  text: cap[1],
                  tokens: this.lexer.inline(cap[1]),
              };
          }
      }
      paragraph(src) {
          const cap = this.rules.block.paragraph.exec(src);
          if (cap) {
              const text = cap[1].charAt(cap[1].length - 1) === '\n'
                  ? cap[1].slice(0, -1)
                  : cap[1];
              return {
                  type: 'paragraph',
                  raw: cap[0],
                  text,
                  tokens: this.lexer.inline(text),
              };
          }
      }
      text(src) {
          const cap = this.rules.block.text.exec(src);
          if (cap) {
              return {
                  type: 'text',
                  raw: cap[0],
                  text: cap[0],
                  tokens: this.lexer.inline(cap[0]),
              };
          }
      }
      escape(src) {
          const cap = this.rules.inline.escape.exec(src);
          if (cap) {
              return {
                  type: 'escape',
                  raw: cap[0],
                  text: cap[1],
              };
          }
      }
      tag(src) {
          const cap = this.rules.inline.tag.exec(src);
          if (cap) {
              if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {
                  this.lexer.state.inLink = true;
              }
              else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {
                  this.lexer.state.inLink = false;
              }
              if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {
                  this.lexer.state.inRawBlock = true;
              }
              else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {
                  this.lexer.state.inRawBlock = false;
              }
              return {
                  type: 'html',
                  raw: cap[0],
                  inLink: this.lexer.state.inLink,
                  inRawBlock: this.lexer.state.inRawBlock,
                  block: false,
                  text: cap[0],
              };
          }
      }
      link(src) {
          const cap = this.rules.inline.link.exec(src);
          if (cap) {
              const trimmedUrl = cap[2].trim();
              if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {
                  // commonmark requires matching angle brackets
                  if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {
                      return;
                  }
                  // ending angle bracket cannot be escaped
                  const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\');
                  if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
                      return;
                  }
              }
              else {
                  // find closing parenthesis
                  const lastParenIndex = findClosingBracket(cap[2], '()');
                  if (lastParenIndex > -1) {
                      const start = cap[0].indexOf('!') === 0 ? 5 : 4;
                      const linkLen = start + cap[1].length + lastParenIndex;
                      cap[2] = cap[2].substring(0, lastParenIndex);
                      cap[0] = cap[0].substring(0, linkLen).trim();
                      cap[3] = '';
                  }
              }
              let href = cap[2];
              let title = '';
              if (this.options.pedantic) {
                  // split pedantic href and title
                  const link = this.rules.other.pedanticHrefTitle.exec(href);
                  if (link) {
                      href = link[1];
                      title = link[3];
                  }
              }
              else {
                  title = cap[3] ? cap[3].slice(1, -1) : '';
              }
              href = href.trim();
              if (this.rules.other.startAngleBracket.test(href)) {
                  if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {
                      // pedantic allows starting angle bracket without ending angle bracket
                      href = href.slice(1);
                  }
                  else {
                      href = href.slice(1, -1);
                  }
              }
              return outputLink(cap, {
                  href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,
                  title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,
              }, cap[0], this.lexer, this.rules);
          }
      }
      reflink(src, links) {
          let cap;
          if ((cap = this.rules.inline.reflink.exec(src))
              || (cap = this.rules.inline.nolink.exec(src))) {
              const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');
              const link = links[linkString.toLowerCase()];
              if (!link) {
                  const text = cap[0].charAt(0);
                  return {
                      type: 'text',
                      raw: text,
                      text,
                  };
              }
              return outputLink(cap, link, cap[0], this.lexer, this.rules);
          }
      }
      emStrong(src, maskedSrc, prevChar = '') {
          let match = this.rules.inline.emStrongLDelim.exec(src);
          if (!match)
              return;
          // _ can't be between two alphanumerics. \p{L}\p{N} includes non-english alphabet/numbers as well
          if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric))
              return;
          const nextChar = match[1] || match[2] || '';
          if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {
              // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)
              const lLength = [...match[0]].length - 1;
              let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
              const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;
              endReg.lastIndex = 0;
              // Clip maskedSrc to same section of string as src (move to lexer?)
              maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
              while ((match = endReg.exec(maskedSrc)) != null) {
                  rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
                  if (!rDelim)
                      continue; // skip single * in __abc*abc__
                  rLength = [...rDelim].length;
                  if (match[3] || match[4]) { // found another Left Delim
                      delimTotal += rLength;
                      continue;
                  }
                  else if (match[5] || match[6]) { // either Left or Right Delim
                      if (lLength % 3 && !((lLength + rLength) % 3)) {
                          midDelimTotal += rLength;
                          continue; // CommonMark Emphasis Rules 9-10
                      }
                  }
                  delimTotal -= rLength;
                  if (delimTotal > 0)
                      continue; // Haven't found enough closing delimiters
                  // Remove extra characters. *a*** -> *a*
                  rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
                  // char length can be >1 for unicode characters;
                  const lastCharLength = [...match[0]][0].length;
                  const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);
                  // Create `em` if smallest delimiter has odd char count. *a***
                  if (Math.min(lLength, rLength) % 2) {
                      const text = raw.slice(1, -1);
                      return {
                          type: 'em',
                          raw,
                          text,
                          tokens: this.lexer.inlineTokens(text),
                      };
                  }
                  // Create 'strong' if smallest delimiter has even char count. **a***
                  const text = raw.slice(2, -2);
                  return {
                      type: 'strong',
                      raw,
                      text,
                      tokens: this.lexer.inlineTokens(text),
                  };
              }
          }
      }
      codespan(src) {
          const cap = this.rules.inline.code.exec(src);
          if (cap) {
              let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');
              const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);
              const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);
              if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
                  text = text.substring(1, text.length - 1);
              }
              return {
                  type: 'codespan',
                  raw: cap[0],
                  text,
              };
          }
      }
      br(src) {
          const cap = this.rules.inline.br.exec(src);
          if (cap) {
              return {
                  type: 'br',
                  raw: cap[0],
              };
          }
      }
      del(src) {
          const cap = this.rules.inline.del.exec(src);
          if (cap) {
              return {
                  type: 'del',
                  raw: cap[0],
                  text: cap[2],
                  tokens: this.lexer.inlineTokens(cap[2]),
              };
          }
      }
      autolink(src) {
          const cap = this.rules.inline.autolink.exec(src);
          if (cap) {
              let text, href;
              if (cap[2] === '@') {
                  text = cap[1];
                  href = 'mailto:' + text;
              }
              else {
                  text = cap[1];
                  href = text;
              }
              return {
                  type: 'link',
                  raw: cap[0],
                  text,
                  href,
                  tokens: [
                      {
                          type: 'text',
                          raw: text,
                          text,
                      },
                  ],
              };
          }
      }
      url(src) {
          let cap;
          if (cap = this.rules.inline.url.exec(src)) {
              let text, href;
              if (cap[2] === '@') {
                  text = cap[0];
                  href = 'mailto:' + text;
              }
              else {
                  // do extended autolink path validation
                  let prevCapZero;
                  do {
                      prevCapZero = cap[0];
                      cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';
                  } while (prevCapZero !== cap[0]);
                  text = cap[0];
                  if (cap[1] === 'www.') {
                      href = 'http://' + cap[0];
                  }
                  else {
                      href = cap[0];
                  }
              }
              return {
                  type: 'link',
                  raw: cap[0],
                  text,
                  href,
                  tokens: [
                      {
                          type: 'text',
                          raw: text,
                          text,
                      },
                  ],
              };
          }
      }
      inlineText(src) {
          const cap = this.rules.inline.text.exec(src);
          if (cap) {
              const escaped = this.lexer.state.inRawBlock;
              return {
                  type: 'text',
                  raw: cap[0],
                  text: cap[0],
                  escaped,
              };
          }
      }
  }

  /**
   * Block Lexer
   */
  class _Lexer {
      tokens;
      options;
      state;
      tokenizer;
      inlineQueue;
      constructor(options) {
          // TokenList cannot be created in one go
          this.tokens = [];
          this.tokens.links = Object.create(null);
          this.options = options || _defaults;
          this.options.tokenizer = this.options.tokenizer || new _Tokenizer();
          this.tokenizer = this.options.tokenizer;
          this.tokenizer.options = this.options;
          this.tokenizer.lexer = this;
          this.inlineQueue = [];
          this.state = {
              inLink: false,
              inRawBlock: false,
              top: true,
          };
          const rules = {
              other,
              block: block.normal,
              inline: inline.normal,
          };
          if (this.options.pedantic) {
              rules.block = block.pedantic;
              rules.inline = inline.pedantic;
          }
          else if (this.options.gfm) {
              rules.block = block.gfm;
              if (this.options.breaks) {
                  rules.inline = inline.breaks;
              }
              else {
                  rules.inline = inline.gfm;
              }
          }
          this.tokenizer.rules = rules;
      }
      /**
       * Expose Rules
       */
      static get rules() {
          return {
              block,
              inline,
          };
      }
      /**
       * Static Lex Method
       */
      static lex(src, options) {
          const lexer = new _Lexer(options);
          return lexer.lex(src);
      }
      /**
       * Static Lex Inline Method
       */
      static lexInline(src, options) {
          const lexer = new _Lexer(options);
          return lexer.inlineTokens(src);
      }
      /**
       * Preprocessing
       */
      lex(src) {
          src = src.replace(other.carriageReturn, '\n');
          this.blockTokens(src, this.tokens);
          for (let i = 0; i < this.inlineQueue.length; i++) {
              const next = this.inlineQueue[i];
              this.inlineTokens(next.src, next.tokens);
          }
          this.inlineQueue = [];
          return this.tokens;
      }
      blockTokens(src, tokens = [], lastParagraphClipped = false) {
          if (this.options.pedantic) {
              src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');
          }
          while (src) {
              let token;
              if (this.options.extensions?.block?.some((extTokenizer) => {
                  if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
                      src = src.substring(token.raw.length);
                      tokens.push(token);
                      return true;
                  }
                  return false;
              })) {
                  continue;
              }
              // newline
              if (token = this.tokenizer.space(src)) {
                  src = src.substring(token.raw.length);
                  const lastToken = tokens.at(-1);
                  if (token.raw.length === 1 && lastToken !== undefined) {
                      // if there's a single \n as a spacer, it's terminating the last line,
                      // so move it there so that we don't get unnecessary paragraph tags
                      lastToken.raw += '\n';
                  }
                  else {
                      tokens.push(token);
                  }
                  continue;
              }
              // code
              if (token = this.tokenizer.code(src)) {
                  src = src.substring(token.raw.length);
                  const lastToken = tokens.at(-1);
                  // An indented code block cannot interrupt a paragraph.
                  if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {
                      lastToken.raw += '\n' + token.raw;
                      lastToken.text += '\n' + token.text;
                      this.inlineQueue.at(-1).src = lastToken.text;
                  }
                  else {
                      tokens.push(token);
                  }
                  continue;
              }
              // fences
              if (token = this.tokenizer.fences(src)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  continue;
              }
              // heading
              if (token = this.tokenizer.heading(src)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  continue;
              }
              // hr
              if (token = this.tokenizer.hr(src)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  continue;
              }
              // blockquote
              if (token = this.tokenizer.blockquote(src)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  continue;
              }
              // list
              if (token = this.tokenizer.list(src)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  continue;
              }
              // html
              if (token = this.tokenizer.html(src)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  continue;
              }
              // def
              if (token = this.tokenizer.def(src)) {
                  src = src.substring(token.raw.length);
                  const lastToken = tokens.at(-1);
                  if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {
                      lastToken.raw += '\n' + token.raw;
                      lastToken.text += '\n' + token.raw;
                      this.inlineQueue.at(-1).src = lastToken.text;
                  }
                  else if (!this.tokens.links[token.tag]) {
                      this.tokens.links[token.tag] = {
                          href: token.href,
                          title: token.title,
                      };
                  }
                  continue;
              }
              // table (gfm)
              if (token = this.tokenizer.table(src)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  continue;
              }
              // lheading
              if (token = this.tokenizer.lheading(src)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  continue;
              }
              // top-level paragraph
              // prevent paragraph consuming extensions by clipping 'src' to extension start
              let cutSrc = src;
              if (this.options.extensions?.startBlock) {
                  let startIndex = Infinity;
                  const tempSrc = src.slice(1);
                  let tempStart;
                  this.options.extensions.startBlock.forEach((getStartIndex) => {
                      tempStart = getStartIndex.call({ lexer: this }, tempSrc);
                      if (typeof tempStart === 'number' && tempStart >= 0) {
                          startIndex = Math.min(startIndex, tempStart);
                      }
                  });
                  if (startIndex < Infinity && startIndex >= 0) {
                      cutSrc = src.substring(0, startIndex + 1);
                  }
              }
              if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
                  const lastToken = tokens.at(-1);
                  if (lastParagraphClipped && lastToken?.type === 'paragraph') {
                      lastToken.raw += '\n' + token.raw;
                      lastToken.text += '\n' + token.text;
                      this.inlineQueue.pop();
                      this.inlineQueue.at(-1).src = lastToken.text;
                  }
                  else {
                      tokens.push(token);
                  }
                  lastParagraphClipped = cutSrc.length !== src.length;
                  src = src.substring(token.raw.length);
                  continue;
              }
              // text
              if (token = this.tokenizer.text(src)) {
                  src = src.substring(token.raw.length);
                  const lastToken = tokens.at(-1);
                  if (lastToken?.type === 'text') {
                      lastToken.raw += '\n' + token.raw;
                      lastToken.text += '\n' + token.text;
                      this.inlineQueue.pop();
                      this.inlineQueue.at(-1).src = lastToken.text;
                  }
                  else {
                      tokens.push(token);
                  }
                  continue;
              }
              if (src) {
                  const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);
                  if (this.options.silent) {
                      console.error(errMsg);
                      break;
                  }
                  else {
                      throw new Error(errMsg);
                  }
              }
          }
          this.state.top = true;
          return tokens;
      }
      inline(src, tokens = []) {
          this.inlineQueue.push({ src, tokens });
          return tokens;
      }
      /**
       * Lexing/Compiling
       */
      inlineTokens(src, tokens = []) {
          // String with links masked to avoid interference with em and strong
          let maskedSrc = src;
          let match = null;
          // Mask out reflinks
          if (this.tokens.links) {
              const links = Object.keys(this.tokens.links);
              if (links.length > 0) {
                  while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
                      if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {
                          maskedSrc = maskedSrc.slice(0, match.index)
                              + '[' + 'a'.repeat(match[0].length - 2) + ']'
                              + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
                      }
                  }
              }
          }
          // Mask out other blocks
          while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
              maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
          }
          // Mask out escaped characters
          while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {
              maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);
          }
          let keepPrevChar = false;
          let prevChar = '';
          while (src) {
              if (!keepPrevChar) {
                  prevChar = '';
              }
              keepPrevChar = false;
              let token;
              // extensions
              if (this.options.extensions?.inline?.some((extTokenizer) => {
                  if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
                      src = src.substring(token.raw.length);
                      tokens.push(token);
                      return true;
                  }
                  return false;
              })) {
                  continue;
              }
              // escape
              if (token = this.tokenizer.escape(src)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  continue;
              }
              // tag
              if (token = this.tokenizer.tag(src)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  continue;
              }
              // link
              if (token = this.tokenizer.link(src)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  continue;
              }
              // reflink, nolink
              if (token = this.tokenizer.reflink(src, this.tokens.links)) {
                  src = src.substring(token.raw.length);
                  const lastToken = tokens.at(-1);
                  if (token.type === 'text' && lastToken?.type === 'text') {
                      lastToken.raw += token.raw;
                      lastToken.text += token.text;
                  }
                  else {
                      tokens.push(token);
                  }
                  continue;
              }
              // em & strong
              if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  continue;
              }
              // code
              if (token = this.tokenizer.codespan(src)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  continue;
              }
              // br
              if (token = this.tokenizer.br(src)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  continue;
              }
              // del (gfm)
              if (token = this.tokenizer.del(src)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  continue;
              }
              // autolink
              if (token = this.tokenizer.autolink(src)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  continue;
              }
              // url (gfm)
              if (!this.state.inLink && (token = this.tokenizer.url(src))) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  continue;
              }
              // text
              // prevent inlineText consuming extensions by clipping 'src' to extension start
              let cutSrc = src;
              if (this.options.extensions?.startInline) {
                  let startIndex = Infinity;
                  const tempSrc = src.slice(1);
                  let tempStart;
                  this.options.extensions.startInline.forEach((getStartIndex) => {
                      tempStart = getStartIndex.call({ lexer: this }, tempSrc);
                      if (typeof tempStart === 'number' && tempStart >= 0) {
                          startIndex = Math.min(startIndex, tempStart);
                      }
                  });
                  if (startIndex < Infinity && startIndex >= 0) {
                      cutSrc = src.substring(0, startIndex + 1);
                  }
              }
              if (token = this.tokenizer.inlineText(cutSrc)) {
                  src = src.substring(token.raw.length);
                  if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started
                      prevChar = token.raw.slice(-1);
                  }
                  keepPrevChar = true;
                  const lastToken = tokens.at(-1);
                  if (lastToken?.type === 'text') {
                      lastToken.raw += token.raw;
                      lastToken.text += token.text;
                  }
                  else {
                      tokens.push(token);
                  }
                  continue;
              }
              if (src) {
                  const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);
                  if (this.options.silent) {
                      console.error(errMsg);
                      break;
                  }
                  else {
                      throw new Error(errMsg);
                  }
              }
          }
          return tokens;
      }
  }

  /**
   * Renderer
   */
  class _Renderer {
      options;
      parser; // set by the parser
      constructor(options) {
          this.options = options || _defaults;
      }
      space(token) {
          return '';
      }
      code({ text, lang, escaped }) {
          const langString = (lang || '').match(other.notSpaceStart)?.[0];
          const code = text.replace(other.endingNewline, '') + '\n';
          if (!langString) {
              return '<pre><code>'
                  + (escaped ? code : escape(code, true))
                  + '</code></pre>\n';
          }
          return '<pre><code class="language-'
              + escape(langString)
              + '">'
              + (escaped ? code : escape(code, true))
              + '</code></pre>\n';
      }
      blockquote({ tokens }) {
          const body = this.parser.parse(tokens);
          return `<blockquote>\n${body}</blockquote>\n`;
      }
      html({ text }) {
          return text;
      }
      heading({ tokens, depth }) {
          return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\n`;
      }
      hr(token) {
          return '<hr>\n';
      }
      list(token) {
          const ordered = token.ordered;
          const start = token.start;
          let body = '';
          for (let j = 0; j < token.items.length; j++) {
              const item = token.items[j];
              body += this.listitem(item);
          }
          const type = ordered ? 'ol' : 'ul';
          const startAttr = (ordered && start !== 1) ? (' start="' + start + '"') : '';
          return '<' + type + startAttr + '>\n' + body + '</' + type + '>\n';
      }
      listitem(item) {
          let itemBody = '';
          if (item.task) {
              const checkbox = this.checkbox({ checked: !!item.checked });
              if (item.loose) {
                  if (item.tokens[0]?.type === 'paragraph') {
                      item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;
                      if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {
                          item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);
                          item.tokens[0].tokens[0].escaped = true;
                      }
                  }
                  else {
                      item.tokens.unshift({
                          type: 'text',
                          raw: checkbox + ' ',
                          text: checkbox + ' ',
                          escaped: true,
                      });
                  }
              }
              else {
                  itemBody += checkbox + ' ';
              }
          }
          itemBody += this.parser.parse(item.tokens, !!item.loose);
          return `<li>${itemBody}</li>\n`;
      }
      checkbox({ checked }) {
          return '<input '
              + (checked ? 'checked="" ' : '')
              + 'disabled="" type="checkbox">';
      }
      paragraph({ tokens }) {
          return `<p>${this.parser.parseInline(tokens)}</p>\n`;
      }
      table(token) {
          let header = '';
          // header
          let cell = '';
          for (let j = 0; j < token.header.length; j++) {
              cell += this.tablecell(token.header[j]);
          }
          header += this.tablerow({ text: cell });
          let body = '';
          for (let j = 0; j < token.rows.length; j++) {
              const row = token.rows[j];
              cell = '';
              for (let k = 0; k < row.length; k++) {
                  cell += this.tablecell(row[k]);
              }
              body += this.tablerow({ text: cell });
          }
          if (body)
              body = `<tbody>${body}</tbody>`;
          return '<table>\n'
              + '<thead>\n'
              + header
              + '</thead>\n'
              + body
              + '</table>\n';
      }
      tablerow({ text }) {
          return `<tr>\n${text}</tr>\n`;
      }
      tablecell(token) {
          const content = this.parser.parseInline(token.tokens);
          const type = token.header ? 'th' : 'td';
          const tag = token.align
              ? `<${type} align="${token.align}">`
              : `<${type}>`;
          return tag + content + `</${type}>\n`;
      }
      /**
       * span level renderer
       */
      strong({ tokens }) {
          return `<strong>${this.parser.parseInline(tokens)}</strong>`;
      }
      em({ tokens }) {
          return `<em>${this.parser.parseInline(tokens)}</em>`;
      }
      codespan({ text }) {
          return `<code>${escape(text, true)}</code>`;
      }
      br(token) {
          return '<br>';
      }
      del({ tokens }) {
          return `<del>${this.parser.parseInline(tokens)}</del>`;
      }
      link({ href, title, tokens }) {
          const text = this.parser.parseInline(tokens);
          const cleanHref = cleanUrl(href);
          if (cleanHref === null) {
              return text;
          }
          href = cleanHref;
          let out = '<a href="' + href + '"';
          if (title) {
              out += ' title="' + (escape(title)) + '"';
          }
          out += '>' + text + '</a>';
          return out;
      }
      image({ href, title, text }) {
          const cleanHref = cleanUrl(href);
          if (cleanHref === null) {
              return escape(text);
          }
          href = cleanHref;
          let out = `<img src="${href}" alt="${text}"`;
          if (title) {
              out += ` title="${escape(title)}"`;
          }
          out += '>';
          return out;
      }
      text(token) {
          return 'tokens' in token && token.tokens
              ? this.parser.parseInline(token.tokens)
              : ('escaped' in token && token.escaped ? token.text : escape(token.text));
      }
  }

  /**
   * TextRenderer
   * returns only the textual part of the token
   */
  class _TextRenderer {
      // no need for block level renderers
      strong({ text }) {
          return text;
      }
      em({ text }) {
          return text;
      }
      codespan({ text }) {
          return text;
      }
      del({ text }) {
          return text;
      }
      html({ text }) {
          return text;
      }
      text({ text }) {
          return text;
      }
      link({ text }) {
          return '' + text;
      }
      image({ text }) {
          return '' + text;
      }
      br() {
          return '';
      }
  }

  /**
   * Parsing & Compiling
   */
  class _Parser {
      options;
      renderer;
      textRenderer;
      constructor(options) {
          this.options = options || _defaults;
          this.options.renderer = this.options.renderer || new _Renderer();
          this.renderer = this.options.renderer;
          this.renderer.options = this.options;
          this.renderer.parser = this;
          this.textRenderer = new _TextRenderer();
      }
      /**
       * Static Parse Method
       */
      static parse(tokens, options) {
          const parser = new _Parser(options);
          return parser.parse(tokens);
      }
      /**
       * Static Parse Inline Method
       */
      static parseInline(tokens, options) {
          const parser = new _Parser(options);
          return parser.parseInline(tokens);
      }
      /**
       * Parse Loop
       */
      parse(tokens, top = true) {
          let out = '';
          for (let i = 0; i < tokens.length; i++) {
              const anyToken = tokens[i];
              // Run any renderer extensions
              if (this.options.extensions?.renderers?.[anyToken.type]) {
                  const genericToken = anyToken;
                  const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);
                  if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {
                      out += ret || '';
                      continue;
                  }
              }
              const token = anyToken;
              switch (token.type) {
                  case 'space': {
                      out += this.renderer.space(token);
                      continue;
                  }
                  case 'hr': {
                      out += this.renderer.hr(token);
                      continue;
                  }
                  case 'heading': {
                      out += this.renderer.heading(token);
                      continue;
                  }
                  case 'code': {
                      out += this.renderer.code(token);
                      continue;
                  }
                  case 'table': {
                      out += this.renderer.table(token);
                      continue;
                  }
                  case 'blockquote': {
                      out += this.renderer.blockquote(token);
                      continue;
                  }
                  case 'list': {
                      out += this.renderer.list(token);
                      continue;
                  }
                  case 'html': {
                      out += this.renderer.html(token);
                      continue;
                  }
                  case 'paragraph': {
                      out += this.renderer.paragraph(token);
                      continue;
                  }
                  case 'text': {
                      let textToken = token;
                      let body = this.renderer.text(textToken);
                      while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {
                          textToken = tokens[++i];
                          body += '\n' + this.renderer.text(textToken);
                      }
                      if (top) {
                          out += this.renderer.paragraph({
                              type: 'paragraph',
                              raw: body,
                              text: body,
                              tokens: [{ type: 'text', raw: body, text: body, escaped: true }],
                          });
                      }
                      else {
                          out += body;
                      }
                      continue;
                  }
                  default: {
                      const errMsg = 'Token with "' + token.type + '" type was not found.';
                      if (this.options.silent) {
                          console.error(errMsg);
                          return '';
                      }
                      else {
                          throw new Error(errMsg);
                      }
                  }
              }
          }
          return out;
      }
      /**
       * Parse Inline Tokens
       */
      parseInline(tokens, renderer = this.renderer) {
          let out = '';
          for (let i = 0; i < tokens.length; i++) {
              const anyToken = tokens[i];
              // Run any renderer extensions
              if (this.options.extensions?.renderers?.[anyToken.type]) {
                  const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);
                  if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {
                      out += ret || '';
                      continue;
                  }
              }
              const token = anyToken;
              switch (token.type) {
                  case 'escape': {
                      out += renderer.text(token);
                      break;
                  }
                  case 'html': {
                      out += renderer.html(token);
                      break;
                  }
                  case 'link': {
                      out += renderer.link(token);
                      break;
                  }
                  case 'image': {
                      out += renderer.image(token);
                      break;
                  }
                  case 'strong': {
                      out += renderer.strong(token);
                      break;
                  }
                  case 'em': {
                      out += renderer.em(token);
                      break;
                  }
                  case 'codespan': {
                      out += renderer.codespan(token);
                      break;
                  }
                  case 'br': {
                      out += renderer.br(token);
                      break;
                  }
                  case 'del': {
                      out += renderer.del(token);
                      break;
                  }
                  case 'text': {
                      out += renderer.text(token);
                      break;
                  }
                  default: {
                      const errMsg = 'Token with "' + token.type + '" type was not found.';
                      if (this.options.silent) {
                          console.error(errMsg);
                          return '';
                      }
                      else {
                          throw new Error(errMsg);
                      }
                  }
              }
          }
          return out;
      }
  }

  class _Hooks {
      options;
      block;
      constructor(options) {
          this.options = options || _defaults;
      }
      static passThroughHooks = new Set([
          'preprocess',
          'postprocess',
          'processAllTokens',
      ]);
      /**
       * Process markdown before marked
       */
      preprocess(markdown) {
          return markdown;
      }
      /**
       * Process HTML after marked is finished
       */
      postprocess(html) {
          return html;
      }
      /**
       * Process all tokens before walk tokens
       */
      processAllTokens(tokens) {
          return tokens;
      }
      /**
       * Provide function to tokenize markdown
       */
      provideLexer() {
          return this.block ? _Lexer.lex : _Lexer.lexInline;
      }
      /**
       * Provide function to parse tokens
       */
      provideParser() {
          return this.block ? _Parser.parse : _Parser.parseInline;
      }
  }

  class Marked {
      defaults = _getDefaults();
      options = this.setOptions;
      parse = this.parseMarkdown(true);
      parseInline = this.parseMarkdown(false);
      Parser = _Parser;
      Renderer = _Renderer;
      TextRenderer = _TextRenderer;
      Lexer = _Lexer;
      Tokenizer = _Tokenizer;
      Hooks = _Hooks;
      constructor(...args) {
          this.use(...args);
      }
      /**
       * Run callback for every token
       */
      walkTokens(tokens, callback) {
          let values = [];
          for (const token of tokens) {
              values = values.concat(callback.call(this, token));
              switch (token.type) {
                  case 'table': {
                      const tableToken = token;
                      for (const cell of tableToken.header) {
                          values = values.concat(this.walkTokens(cell.tokens, callback));
                      }
                      for (const row of tableToken.rows) {
                          for (const cell of row) {
                              values = values.concat(this.walkTokens(cell.tokens, callback));
                          }
                      }
                      break;
                  }
                  case 'list': {
                      const listToken = token;
                      values = values.concat(this.walkTokens(listToken.items, callback));
                      break;
                  }
                  default: {
                      const genericToken = token;
                      if (this.defaults.extensions?.childTokens?.[genericToken.type]) {
                          this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {
                              const tokens = genericToken[childTokens].flat(Infinity);
                              values = values.concat(this.walkTokens(tokens, callback));
                          });
                      }
                      else if (genericToken.tokens) {
                          values = values.concat(this.walkTokens(genericToken.tokens, callback));
                      }
                  }
              }
          }
          return values;
      }
      use(...args) {
          const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };
          args.forEach((pack) => {
              // copy options to new object
              const opts = { ...pack };
              // set async to true if it was set to true before
              opts.async = this.defaults.async || opts.async || false;
              // ==-- Parse "addon" extensions --== //
              if (pack.extensions) {
                  pack.extensions.forEach((ext) => {
                      if (!ext.name) {
                          throw new Error('extension name required');
                      }
                      if ('renderer' in ext) { // Renderer extensions
                          const prevRenderer = extensions.renderers[ext.name];
                          if (prevRenderer) {
                              // Replace extension with func to run new extension but fall back if false
                              extensions.renderers[ext.name] = function (...args) {
                                  let ret = ext.renderer.apply(this, args);
                                  if (ret === false) {
                                      ret = prevRenderer.apply(this, args);
                                  }
                                  return ret;
                              };
                          }
                          else {
                              extensions.renderers[ext.name] = ext.renderer;
                          }
                      }
                      if ('tokenizer' in ext) { // Tokenizer Extensions
                          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {
                              throw new Error("extension level must be 'block' or 'inline'");
                          }
                          const extLevel = extensions[ext.level];
                          if (extLevel) {
                              extLevel.unshift(ext.tokenizer);
                          }
                          else {
                              extensions[ext.level] = [ext.tokenizer];
                          }
                          if (ext.start) { // Function to check for start of token
                              if (ext.level === 'block') {
                                  if (extensions.startBlock) {
                                      extensions.startBlock.push(ext.start);
                                  }
                                  else {
                                      extensions.startBlock = [ext.start];
                                  }
                              }
                              else if (ext.level === 'inline') {
                                  if (extensions.startInline) {
                                      extensions.startInline.push(ext.start);
                                  }
                                  else {
                                      extensions.startInline = [ext.start];
                                  }
                              }
                          }
                      }
                      if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens
                          extensions.childTokens[ext.name] = ext.childTokens;
                      }
                  });
                  opts.extensions = extensions;
              }
              // ==-- Parse "overwrite" extensions --== //
              if (pack.renderer) {
                  const renderer = this.defaults.renderer || new _Renderer(this.defaults);
                  for (const prop in pack.renderer) {
                      if (!(prop in renderer)) {
                          throw new Error(`renderer '${prop}' does not exist`);
                      }
                      if (['options', 'parser'].includes(prop)) {
                          // ignore options property
                          continue;
                      }
                      const rendererProp = prop;
                      const rendererFunc = pack.renderer[rendererProp];
                      const prevRenderer = renderer[rendererProp];
                      // Replace renderer with func to run extension, but fall back if false
                      renderer[rendererProp] = (...args) => {
                          let ret = rendererFunc.apply(renderer, args);
                          if (ret === false) {
                              ret = prevRenderer.apply(renderer, args);
                          }
                          return ret || '';
                      };
                  }
                  opts.renderer = renderer;
              }
              if (pack.tokenizer) {
                  const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);
                  for (const prop in pack.tokenizer) {
                      if (!(prop in tokenizer)) {
                          throw new Error(`tokenizer '${prop}' does not exist`);
                      }
                      if (['options', 'rules', 'lexer'].includes(prop)) {
                          // ignore options, rules, and lexer properties
                          continue;
                      }
                      const tokenizerProp = prop;
                      const tokenizerFunc = pack.tokenizer[tokenizerProp];
                      const prevTokenizer = tokenizer[tokenizerProp];
                      // Replace tokenizer with func to run extension, but fall back if false
                      // @ts-expect-error cannot type tokenizer function dynamically
                      tokenizer[tokenizerProp] = (...args) => {
                          let ret = tokenizerFunc.apply(tokenizer, args);
                          if (ret === false) {
                              ret = prevTokenizer.apply(tokenizer, args);
                          }
                          return ret;
                      };
                  }
                  opts.tokenizer = tokenizer;
              }
              // ==-- Parse Hooks extensions --== //
              if (pack.hooks) {
                  const hooks = this.defaults.hooks || new _Hooks();
                  for (const prop in pack.hooks) {
                      if (!(prop in hooks)) {
                          throw new Error(`hook '${prop}' does not exist`);
                      }
                      if (['options', 'block'].includes(prop)) {
                          // ignore options and block properties
                          continue;
                      }
                      const hooksProp = prop;
                      const hooksFunc = pack.hooks[hooksProp];
                      const prevHook = hooks[hooksProp];
                      if (_Hooks.passThroughHooks.has(prop)) {
                          // @ts-expect-error cannot type hook function dynamically
                          hooks[hooksProp] = (arg) => {
                              if (this.defaults.async) {
                                  return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {
                                      return prevHook.call(hooks, ret);
                                  });
                              }
                              const ret = hooksFunc.call(hooks, arg);
                              return prevHook.call(hooks, ret);
                          };
                      }
                      else {
                          // @ts-expect-error cannot type hook function dynamically
                          hooks[hooksProp] = (...args) => {
                              let ret = hooksFunc.apply(hooks, args);
                              if (ret === false) {
                                  ret = prevHook.apply(hooks, args);
                              }
                              return ret;
                          };
                      }
                  }
                  opts.hooks = hooks;
              }
              // ==-- Parse WalkTokens extensions --== //
              if (pack.walkTokens) {
                  const walkTokens = this.defaults.walkTokens;
                  const packWalktokens = pack.walkTokens;
                  opts.walkTokens = function (token) {
                      let values = [];
                      values.push(packWalktokens.call(this, token));
                      if (walkTokens) {
                          values = values.concat(walkTokens.call(this, token));
                      }
                      return values;
                  };
              }
              this.defaults = { ...this.defaults, ...opts };
          });
          return this;
      }
      setOptions(opt) {
          this.defaults = { ...this.defaults, ...opt };
          return this;
      }
      lexer(src, options) {
          return _Lexer.lex(src, options ?? this.defaults);
      }
      parser(tokens, options) {
          return _Parser.parse(tokens, options ?? this.defaults);
      }
      parseMarkdown(blockType) {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          const parse = (src, options) => {
              const origOpt = { ...options };
              const opt = { ...this.defaults, ...origOpt };
              const throwError = this.onError(!!opt.silent, !!opt.async);
              // throw error if an extension set async to true but parse was called with async: false
              if (this.defaults.async === true && origOpt.async === false) {
                  return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));
              }
              // throw error in case of non string input
              if (typeof src === 'undefined' || src === null) {
                  return throwError(new Error('marked(): input parameter is undefined or null'));
              }
              if (typeof src !== 'string') {
                  return throwError(new Error('marked(): input parameter is of type '
                      + Object.prototype.toString.call(src) + ', string expected'));
              }
              if (opt.hooks) {
                  opt.hooks.options = opt;
                  opt.hooks.block = blockType;
              }
              const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);
              const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);
              if (opt.async) {
                  return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)
                      .then(src => lexer(src, opt))
                      .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)
                      .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)
                      .then(tokens => parser(tokens, opt))
                      .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)
                      .catch(throwError);
              }
              try {
                  if (opt.hooks) {
                      src = opt.hooks.preprocess(src);
                  }
                  let tokens = lexer(src, opt);
                  if (opt.hooks) {
                      tokens = opt.hooks.processAllTokens(tokens);
                  }
                  if (opt.walkTokens) {
                      this.walkTokens(tokens, opt.walkTokens);
                  }
                  let html = parser(tokens, opt);
                  if (opt.hooks) {
                      html = opt.hooks.postprocess(html);
                  }
                  return html;
              }
              catch (e) {
                  return throwError(e);
              }
          };
          return parse;
      }
      onError(silent, async) {
          return (e) => {
              e.message += '\nPlease report this to https://github.com/markedjs/marked.';
              if (silent) {
                  const msg = '<p>An error occurred:</p><pre>'
                      + escape(e.message + '', true)
                      + '</pre>';
                  if (async) {
                      return Promise.resolve(msg);
                  }
                  return msg;
              }
              if (async) {
                  return Promise.reject(e);
              }
              throw e;
          };
      }
  }

  const markedInstance = new Marked();
  function marked(src, opt) {
      return markedInstance.parse(src, opt);
  }
  /**
   * Sets the default options.
   *
   * @param options Hash of options
   */
  marked.options =
      marked.setOptions = function (options) {
          markedInstance.setOptions(options);
          marked.defaults = markedInstance.defaults;
          changeDefaults(marked.defaults);
          return marked;
      };
  /**
   * Gets the original marked default options.
   */
  marked.getDefaults = _getDefaults;
  marked.defaults = _defaults;
  /**
   * Use Extension
   */
  marked.use = function (...args) {
      markedInstance.use(...args);
      marked.defaults = markedInstance.defaults;
      changeDefaults(marked.defaults);
      return marked;
  };
  /**
   * Run callback for every token
   */
  marked.walkTokens = function (tokens, callback) {
      return markedInstance.walkTokens(tokens, callback);
  };
  /**
   * Compiles markdown to HTML without enclosing `p` tag.
   *
   * @param src String of markdown source to be compiled
   * @param options Hash of options
   * @return String of compiled HTML
   */
  marked.parseInline = markedInstance.parseInline;
  /**
   * Expose
   */
  marked.Parser = _Parser;
  marked.parser = _Parser.parse;
  marked.Renderer = _Renderer;
  marked.TextRenderer = _TextRenderer;
  marked.Lexer = _Lexer;
  marked.lexer = _Lexer.lex;
  marked.Tokenizer = _Tokenizer;
  marked.Hooks = _Hooks;
  marked.parse = marked;
  marked.options;
  marked.setOptions;
  marked.use;
  marked.walkTokens;
  marked.parseInline;
  _Parser.parse;
  _Lexer.lex;

  class CircularBuffer {
    constructor(bufferLength) {
      this.buffer = [];
      this.pointer = 0;
      this.bufferLength = bufferLength;
    }

    push(element) {
      if (this.buffer.length === this.bufferLength) {
        this.buffer[this.pointer] = element;
      } else {
        this.buffer.push(element);
      }
      this.pointer = (this.pointer + 1) % this.bufferLength;
    }

    oldest(i) {
      return this.buffer[(this.pointer + i) % this.bufferLength];
    }

    last(i) {
      let idx = this.pointer + i - 1;
      if (idx < 0) {
        idx = this.bufferLength + idx;
      }
      return this.buffer[idx];
    }

  }

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;
  function init () {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;
  }

  function toByteArray (b64) {
    if (!inited) {
      init();
    }
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(len * 3 / 4 - placeHolders);

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len;

    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = (tmp >> 16) & 0xFF;
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr
  }

  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
  }

  function encodeChunk (uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
      output.push(tripletToBase64(tmp));
    }
    return output.join('')
  }

  function fromByteArray (uint8) {
    if (!inited) {
      init();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[(tmp << 4) & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
      output += lookup[tmp >> 10];
      output += lookup[(tmp >> 4) & 0x3F];
      output += lookup[(tmp << 2) & 0x3F];
      output += '=';
    }

    parts.push(output);

    return parts.join('')
  }

  function read (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  function write (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  var toString = {}.toString;

  var isArray = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };

  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */

  var INSPECT_MAX_BYTES = 50;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
    ? global$1.TYPED_ARRAY_SUPPORT
    : true;

  /*
   * Export kMaxLength after typed array support is determined.
   */
  kMaxLength();

  function kMaxLength () {
    return Buffer.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  function createBuffer (that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length')
    }
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer(length);
      }
      that.length = length;
    }

    return that
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer (arg, encodingOrOffset, length) {
    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
      return new Buffer(arg, encodingOrOffset, length)
    }

    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error(
          'If encoding is specified then the first argument must be a string'
        )
      }
      return allocUnsafe(this, arg)
    }
    return from(this, arg, encodingOrOffset, length)
  }

  Buffer.poolSize = 8192; // not used by this implementation

  // TODO: Legacy, not needed anymore. Remove in next major version.
  Buffer._augment = function (arr) {
    arr.__proto__ = Buffer.prototype;
    return arr
  };

  function from (that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset)
    }

    return fromObject(that, value)
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length)
  };

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype;
    Buffer.__proto__ = Uint8Array;
  }

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }
  }

  function alloc (that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(that, size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(that, size).fill(fill, encoding)
        : createBuffer(that, size).fill(fill)
    }
    return createBuffer(that, size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding)
  };

  function allocUnsafe (that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(null, size)
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size)
  };

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }

    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);

    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that
  }

  function fromArrayLike (that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that
  }

  function fromArrayBuffer (that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array);
    }
    return that
  }

  function fromObject (that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that
      }

      obj.copy(that, 0, 0, len);
      return that
    }

    if (obj) {
      if ((typeof ArrayBuffer !== 'undefined' &&
          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0)
        }
        return fromArrayLike(that, obj)
      }

      if (obj.type === 'Buffer' && isArray(obj.data)) {
        return fromArrayLike(that, obj.data)
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }
  Buffer.isBuffer = isBuffer;
  function internalIsBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer.compare = function compare (a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  };

  Buffer.concat = function concat (list, length) {
    if (!isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer.alloc(0)
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos);
      pos += buf.length;
    }
    return buffer
  };

  function byteLength (string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.byteLength = byteLength;

  function slowToString (encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return ''
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.
  Buffer.prototype._isBuffer = true;

  function swap (b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer.prototype.swap16 = function swap16 () {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this
  };

  Buffer.prototype.swap32 = function swap32 () {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this
  };

  Buffer.prototype.swap64 = function swap64 () {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this
  };

  Buffer.prototype.toString = function toString () {
    var length = this.length | 0;
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  };

  Buffer.prototype.equals = function equals (b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  };

  Buffer.prototype.inspect = function inspect () {
    var str = '';
    var max = INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }
    return '<Buffer ' + str + '>'
  };

  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer')
    }

    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;

    if (this === target) return 0

    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);

    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -2147483648) {
      byteOffset = -2147483648;
    }
    byteOffset = +byteOffset;  // Coerce to Number.
    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1);
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (Buffer.TYPED_ARRAY_SUPPORT &&
          typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break
          }
        }
        if (found) return i
      }
    }

    return -1
  }

  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  };

  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  };

  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  };

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }

    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i
      buf[offset + i] = parsed;
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8';

    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  };

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf)
    } else {
      return fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];

    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret
  }

  function latin1Slice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length;

    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;

    var out = '';
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res
  }

  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;

    var newBuf;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer(sliceLen, undefined);
      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val
  };

  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val
  };

  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset]
  };

  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | (this[offset + 1] << 8)
  };

  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return (this[offset] << 8) | this[offset + 1]
  };

  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  };

  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  };

  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  };

  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | (this[offset + 1] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | (this[offset] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  };

  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  };

  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, true, 23, 4)
  };

  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, false, 23, 4)
  };

  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, true, 52, 8)
  };

  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, false, 52, 8)
  };

  function checkInt (buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = (value & 0xff);
    return offset + 1
  };

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
    }
  }

  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = (value & 0xff);
    return offset + 1
  };

  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }
    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  };

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }
    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      );
    }

    return len
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (code < 256) {
          val = code;
        }
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;

    if (!val) val = 0;

    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val)
        ? val
        : utf8ToBytes(new Buffer(val, encoding).toString());
      var len = bytes.length;
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          }

          // valid lead
          leadSurrogate = codePoint;

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray
  }


  function base64ToBytes (str) {
    return toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i];
    }
    return i
  }

  function isnan (val) {
    return val !== val // eslint-disable-line no-self-compare
  }


  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  function isBuffer(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
  }

  function isFastBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }

  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
  }

  var consoleLines = [];

  var serialport = null;
  var serialVars = { capture: false, captureFunc: null };

  function setSerialPort(newport) {
    serialport = newport;
  }

  async function serialReader() {
    if (serialport) {
      console.log("reading...");
      let buffer = new Uint8Array(0);
      // let buffer = new ArrayBuffer(bufferSize);    
      if (serialport.readable && !serialport.readable.locked) {
        const reader = serialport.readable.getReader();
        let serialReadModes = { "ANY": 0, "TEXT": 1, "SERIALSTREAM": 2 };
        let serialReadMode = serialReadModes.ANY;
        try {
          while (true) {
            const { value, done } = await reader.read();
            // console.log("rcv...")
            if (done) {
              // |reader| has been canceled.
              break;
            }
            let byteArray = new Uint8Array(value.buffer);
            //if there's unconsumed data from the last read, then prepend to new data
            if (buffer.length > 0) {
              // console.log("prepending")
              // console.log(buffer.length)
              let newBuffer = new Uint8Array(buffer.length + byteArray.length);
              newBuffer.set(buffer);
              newBuffer.set(byteArray, buffer.length);
              byteArray = newBuffer;
            }
            // console.log("buf: " + byteArray.length)
            let processed = false;
            while (byteArray.length > 0) {
              //consume next val
              switch (serialReadMode) {
                case serialReadModes.ANY:
                  {
                    // console.log(byteArray)
                    //look for start of message marker
                    if (byteArray[0] == 31) {
                      if (byteArray.length > 1) {
                        //check message type
                        if (byteArray[1] == 0) {
                          serialReadMode = serialReadModes.SERIALSTREAM;
                        } else {
                          serialReadMode = serialReadModes.TEXT;
                        }
                      } else {
                        //wait for more data
                        processed = true;

                      }
                    } else {
                      //no marker, so try to find message start
                      let found = false;
                      for (let i = 0; i < byteArray.length - 1; i++) {
                        if (byteArray[i] === 31) {
                          found = true;
                          byteArray = byteArray.slice(i);
                        }
                      }
                      if (!found) {
                        //lose data and wait for a message start
                        byteArray = byteArray.slice(byteArray.length);
                      }
                      //done for now, wait for more data
                      processed = true;

                    }
                    break;
                  }
                case serialReadModes.TEXT:
                  {
                    //find end of line?
                    let found = false;
                    for (let i = 2; i < byteArray.length - 1; i++) {
                      if (byteArray[i] === 13 && byteArray[i + 1] === 10) {
                        found = true;
                        let msg = new TextDecoder().decode(byteArray.slice(2, i));
                        console.log(msg);
                        if (serialVars.capture) {
                          console.log("captured");
                          console.log(serialVars);
                          serialVars.captureFunc(msg);
                          serialVars.capture = false;
                        } else {
                          if (msg != "") {
                            post("uSEQ: " + msg);
                          }
                        }
                        byteArray = byteArray.slice(i + 2);
                        console.log(byteArray);
                        serialReadMode = serialReadModes.ANY;
                      }
                    }
                    if (!found) {
                      processed = true;
                    }
                    break;
                  }
                case serialReadModes.SERIALSTREAM:
                  {
                    // console.log("serial stream")
                    if (byteArray.length < 11) {
                      //wait for more data incoming
                      processed = true;
                    } else {
                      //read channel
                      const channel = byteArray[2];
                      // console.log("ch: " + channel)
                      //decode double
                      const buf = Buffer.from(byteArray);
                      const val = buf.readDoubleLE(3);
                      serialBuffers[channel - 1].push(val);
                      if (serialMapFunctions[channel - 1]) {
                        serialMapFunctions[channel - 1](serialBuffers[channel - 1]);
                      }
                      // console.log(serialBuffers[channel - 1].last(0));


                      //trim data
                      byteArray = byteArray.slice(11);
                      serialReadMode = serialReadModes.ANY;
                    }
                    break;
                  }
              } //switch
              if (processed) {
                break;
              }
            }
            //carry through any remainder to the next read
            buffer = byteArray;
            // console.log("consumed")
          }
        } catch (error) {
          reader.releaseLock();
          console.log(error);
        } finally {
          console.log("finally");
          reader.releaseLock();
          serialReader();
        }
      } else {
        console.log(serialport);
      }
    }
  }

  function post(value) {
    console.log("post: " + value);
    consoleLines.push(marked.parse(value));
    if (consoleLines.length > 50) {
      consoleLines = consoleLines.slice(1);
    }
    $("#console").html(consoleLines.join(''));
    $('#console').scrollTop($('#console')[0].scrollHeight - $('#console')[0].clientHeight);
  }


  function sendTouSEQ(code, capture = null) {
    code = code.replaceAll('\n', '');
    console.log(code);
    if (serialport && serialport.writable) {
      const writer = serialport.writable.getWriter();
      console.log("writing...");
      if (capture) {
        serialVars.capture = true;
        serialVars.captureFunc = capture;
      }
      writer.write(encoder.encode(code)).then(() => {
        writer.releaseLock();
        console.log("written");
      });
    } else {
      post("uSEQ not connected");
    }
  }
  const encoder = new TextEncoder();
  var serialBuffers = [];
  for (let i = 0; i < 8; i++) serialBuffers[i] = new CircularBuffer(100);
  var serialMapFunctions = [];

  function upgradeCheck(versionMsg) {
    // const verRE = /([0-9])\.([0-9])/g;
    const verRE = /([0-9])\.([0-9])(.([0-9]))?/g;
    const groups = verRE.exec(versionMsg);
    console.log(groups);
    // const groups = verRE.exec("1.0.2");
    const moduleVersionMajor = groups[1];
    const moduleVersionMinor = groups[2];
    let moduleVersionPatch = 0;
    if (groups[4]) {
      moduleVersionPatch = groups[4];
    }
    post(`**Connected to uSEQ, firmware version ${versionMsg}**`);

    //new release checker
    $.ajax({
      url: "https://api.github.com/repos/Emute-Lab-Instruments/uSEQ/releases",
      type: "GET",
      data: { "accept": "application/vnd.github+json", "X-GitHub-Api-Version": "2022-11-28" },
      error: function (xhr, ajaxOptions, thrownError) {
      }
    }).then(function (data) {
      //example uSEQ_1.0c_1.0.4_17072024
      // const re = /uSEQ_(.*)_(([0-9])\.([0-9]))/g;
      const re = /uSEQ_(.*)_(([0-9])\.([0-9])\.([0-9]))_[0-9]{8}/g;
      const matches = re.exec(data[0]['tag_name']);
      const version = matches[2];
      const ghVersionMajor = matches[3];
      const ghVersionMinor = matches[4];
      const ghVersionPatch = matches[5];
      console.log(version);

      //compare version
      if (ghVersionMajor > moduleVersionMajor ||
        (ghVersionMinor > moduleVersionMinor && ghVersionMajor >= moduleVersionMajor)
        ||
        (ghVersionPatch > moduleVersionPatch && ghVersionMinor >= moduleVersionMinor && ghVersionMajor >= moduleVersionMajor)) {
        //new release available
        post("There is a new firmware release available, click below to download");
        post(`<a target="blank" href="${data[0]['html_url']}">${data[0]['html_url']}</a>`);
        post("Information on how to update the module:");
        post(`<a target="blank" href="https://emutelabinstruments.co.uk/useqinfo/useq-update/">https://emutelabinstruments.co.uk/useqinfo/useq-update/</a>`);
      }


    });

  }

  function drawSerialVis() {
    const palette = ['#00429d', '#45a5ad', '#ace397', '#fcbf5d', '#ff809f', '#ff005e', '#c9004c', '#93003a'];
    var c = document.getElementById("serialcanvas");
    var ctx = c.getContext("2d");
    ctx.clearRect(0, 0, c.width, c.height);
    const gap = c.width * 1.0 / serialBuffers[0].bufferLength;
    for (let ch = 0; ch < 8; ch++) {
      ctx.beginPath();
      ctx.moveTo(0, c.height - (c.height * serialBuffers[ch].oldest(0)));

      for (let i = 1; i < serialBuffers[ch].bufferLength - 1; i++) {
        ctx.lineTo(gap * i, c.height - (c.height * serialBuffers[ch].oldest(i)));
      }
      // ctx.closePath();
      ctx.strokeStyle = palette[ch];
      ctx.stroke();
    }
    window.requestAnimationFrame(drawSerialVis);
  }

  const panelStates = { OFF: 0, PANEL: 1};
  var interfaceStates = {
    vidpanelState: panelStates.OFF, camOpened: false,
    serialVisPanelState: panelStates.OFF
  };

  const createTheme = ({ variant, settings, styles }) => {
      const theme = EditorView.theme({
          // eslint-disable-next-line @typescript-eslint/naming-convention
          '&': {
              backgroundColor: settings.background,
              color: settings.foreground,
          },
          '.cm-content': {
              caretColor: settings.caret,
          },
          '.cm-cursor, .cm-dropCursor': {
              borderLeftColor: settings.caret,
          },
          '&.cm-focused .cm-selectionBackgroundm .cm-selectionBackground, .cm-content ::selection': {
              backgroundColor: settings.selection,
          },
          '.cm-activeLine': {
              backgroundColor: settings.lineHighlight,
          },
          '.cm-gutters': {
              backgroundColor: settings.gutterBackground,
              color: settings.gutterForeground,
          },
          '.cm-activeLineGutter': {
              backgroundColor: settings.lineHighlight,
          },
      }, {
          dark: variant === 'dark',
      });
      const highlightStyle = HighlightStyle.define(styles);
      const extension = [theme, syntaxHighlighting(highlightStyle)];
      return extension;
  };

  // Author: William D. Neumann
  createTheme({
      variant: 'dark',
      settings: {
          background: '#200020',
          foreground: '#D0D0FF',
          caret: '#7070FF',
          selection: '#80000080',
          gutterBackground: '#200020',
          gutterForeground: '#C080C0',
          lineHighlight: '#80000040',
      },
      styles: [
          {
              tag: tags.comment,
              color: '#404080',
          },
          {
              tag: [tags.string, tags.regexp],
              color: '#999999',
          },
          {
              tag: tags.number,
              color: '#7090B0',
          },
          {
              tag: [tags.bool, tags.null],
              color: '#8080A0',
          },
          {
              tag: [tags.punctuation, tags.derefOperator],
              color: '#805080',
          },
          {
              tag: tags.keyword,
              color: '#60B0FF',
          },
          {
              tag: tags.definitionKeyword,
              color: '#B0FFF0',
          },
          {
              tag: tags.moduleKeyword,
              color: '#60B0FF',
          },
          {
              tag: tags.operator,
              color: '#A0A0FF',
          },
          {
              tag: [tags.variableName, tags.self],
              color: '#008080',
          },
          {
              tag: tags.operatorKeyword,
              color: '#A0A0FF',
          },
          {
              tag: tags.controlKeyword,
              color: '#80A0FF',
          },
          {
              tag: tags.className,
              color: '#70E080',
          },
          {
              tag: [tags.function(tags.propertyName), tags.propertyName],
              color: '#50A0A0',
          },
          {
              tag: tags.tagName,
              color: '#009090',
          },
          {
              tag: tags.modifier,
              color: '#B0FFF0',
          },
          {
              tag: [tags.squareBracket, tags.attributeName],
              color: '#D0D0FF',
          },
      ],
  });

  // Author: Konstantin Pschera
  const ayuLight = createTheme({
      variant: 'light',
      settings: {
          background: '#fcfcfc',
          foreground: '#5c6166',
          caret: '#ffaa33',
          selection: '#036dd626',
          gutterBackground: '#fcfcfc',
          gutterForeground: '#8a919966',
          lineHighlight: '#8a91991a',
      },
      styles: [
          {
              tag: tags.comment,
              color: '#787b8099',
          },
          {
              tag: tags.string,
              color: '#86b300',
          },
          {
              tag: tags.regexp,
              color: '#4cbf99',
          },
          {
              tag: [tags.number, tags.bool, tags.null],
              color: '#ffaa33',
          },
          {
              tag: tags.variableName,
              color: '#5c6166',
          },
          {
              tag: [tags.definitionKeyword, tags.modifier],
              color: '#fa8d3e',
          },
          {
              tag: [tags.keyword, tags.special(tags.brace)],
              color: '#fa8d3e',
          },
          {
              tag: tags.operator,
              color: '#ed9366',
          },
          {
              tag: tags.separator,
              color: '#5c6166b3',
          },
          {
              tag: tags.punctuation,
              color: '#5c6166',
          },
          {
              tag: [tags.definition(tags.propertyName), tags.function(tags.variableName)],
              color: '#f2ae49',
          },
          {
              tag: [tags.className, tags.definition(tags.typeName)],
              color: '#22a4e6',
          },
          {
              tag: [tags.tagName, tags.typeName, tags.self, tags.labelName],
              color: '#55b4d4',
          },
          {
              tag: tags.angleBracket,
              color: '#55b4d480',
          },
          {
              tag: tags.attributeName,
              color: '#f2ae49',
          },
      ],
  });

  // Author: unknown
  const barf = createTheme({
      variant: 'dark',
      settings: {
          background: '#15191EFA',
          foreground: '#EEF2F7',
          caret: '#C4C4C4',
          selection: '#90B2D557',
          gutterBackground: '#15191EFA',
          gutterForeground: '#aaaaaa95',
          lineHighlight: '#57575712',
      },
      styles: [
          {
              tag: tags.comment,
              color: '#6E6E6E',
          },
          {
              tag: [tags.string, tags.regexp, tags.special(tags.brace)],
              color: '#5C81B3',
          },
          {
              tag: tags.number,
              color: '#C1E1B8',
          },
          {
              tag: tags.bool,
              color: '#53667D',
          },
          {
              tag: [tags.definitionKeyword, tags.modifier, tags.function(tags.propertyName)],
              color: '#A3D295',
              fontWeight: 'bold',
          },
          {
              tag: [tags.keyword, tags.moduleKeyword, tags.operatorKeyword, tags.operator],
              color: '#697A8E',
              fontWeight: 'bold',
          },
          {
              tag: [tags.variableName, tags.attributeName],
              color: '#708E67',
          },
          {
              tag: [
                  tags.function(tags.variableName),
                  tags.definition(tags.propertyName),
                  tags.derefOperator,
              ],
              color: '#fff',
          },
          {
              tag: tags.tagName,
              color: '#A3D295',
          },
      ],
  });

  // Author: Michael Diolosa
  createTheme({
      variant: 'dark',
      settings: {
          background: '#2e241d',
          foreground: '#BAAE9E',
          caret: '#A7A7A7',
          selection: '#DDF0FF33',
          gutterBackground: '#28211C',
          gutterForeground: '#BAAE9E90',
          lineHighlight: '#FFFFFF08',
      },
      styles: [
          {
              tag: tags.comment,
              color: '#666666',
          },
          {
              tag: [tags.string, tags.special(tags.brace)],
              color: '#54BE0D',
          },
          {
              tag: tags.regexp,
              color: '#E9C062',
          },
          {
              tag: tags.number,
              color: '#CF6A4C',
          },
          {
              tag: [tags.keyword, tags.operator],
              color: '#5EA6EA',
          },
          {
              tag: tags.variableName,
              color: '#7587A6',
          },
          {
              tag: [tags.definitionKeyword, tags.modifier],
              color: '#F9EE98',
          },
          {
              tag: [tags.propertyName, tags.function(tags.variableName)],
              color: '#937121',
          },
          {
              tag: [tags.typeName, tags.angleBracket, tags.tagName],
              color: '#9B859D',
          },
      ],
  });

  // Author: Joe Bergantine
  createTheme({
      variant: 'dark',
      settings: {
          background: '#3b2627',
          foreground: '#E6E1C4',
          caret: '#E6E1C4',
          selection: '#16120E',
          gutterBackground: '#3b2627',
          gutterForeground: '#E6E1C490',
          lineHighlight: '#1F1611',
      },
      styles: [
          {
              tag: tags.comment,
              color: '#6B4E32',
          },
          {
              tag: [tags.keyword, tags.operator, tags.derefOperator],
              color: '#EF5D32',
          },
          {
              tag: tags.className,
              color: '#EFAC32',
              fontWeight: 'bold',
          },
          {
              tag: [
                  tags.typeName,
                  tags.propertyName,
                  tags.function(tags.variableName),
                  tags.definition(tags.variableName),
              ],
              color: '#EFAC32',
          },
          {
              tag: tags.definition(tags.typeName),
              color: '#EFAC32',
              fontWeight: 'bold',
          },
          {
              tag: tags.labelName,
              color: '#EFAC32',
              fontWeight: 'bold',
          },
          {
              tag: [tags.number, tags.bool],
              color: '#6C99BB',
          },
          {
              tag: [tags.variableName, tags.self],
              color: '#7DAF9C',
          },
          {
              tag: [tags.string, tags.special(tags.brace), tags.regexp],
              color: '#D9D762',
          },
          {
              tag: [tags.angleBracket, tags.tagName, tags.attributeName],
              color: '#EFCB43',
          },
      ],
  });

  // Author: unknown
  createTheme({
      variant: 'dark',
      settings: {
          background: '#000205',
          foreground: '#FFFFFF',
          caret: '#E60065',
          selection: '#E60C6559',
          gutterBackground: '#000205',
          gutterForeground: '#ffffff90',
          lineHighlight: '#4DD7FC1A',
      },
      styles: [
          {
              tag: tags.comment,
              color: '#404040',
          },
          {
              tag: [tags.string, tags.special(tags.brace), tags.regexp],
              color: '#00D8FF',
          },
          {
              tag: tags.number,
              color: '#E62286',
          },
          {
              tag: [tags.variableName, tags.attributeName, tags.self],
              color: '#E62286',
              fontWeight: 'bold',
          },
          {
              tag: tags.function(tags.variableName),
              color: '#fff',
              fontWeight: 'bold',
          },
      ],
  });

  // Author: Fred LeBlanc
  const clouds = createTheme({
      variant: 'light',
      settings: {
          background: '#fff',
          foreground: '#000',
          caret: '#000',
          selection: '#BDD5FC',
          gutterBackground: '#fff',
          gutterForeground: '#00000070',
          lineHighlight: '#FFFBD1',
      },
      styles: [
          {
              tag: tags.comment,
              color: '#BCC8BA',
          },
          {
              tag: [tags.string, tags.special(tags.brace), tags.regexp],
              color: '#5D90CD',
          },
          {
              tag: [tags.number, tags.bool, tags.null],
              color: '#46A609',
          },
          {
              tag: tags.keyword,
              color: '#AF956F',
          },
          {
              tag: [tags.definitionKeyword, tags.modifier],
              color: '#C52727',
          },
          {
              tag: [tags.angleBracket, tags.tagName, tags.attributeName],
              color: '#606060',
          },
          {
              tag: tags.self,
              color: '#000',
          },
      ],
  });

  // Author: Jacob Rus
  const cobalt = createTheme({
      variant: 'dark',
      settings: {
          background: '#00254b',
          foreground: '#FFFFFF',
          caret: '#FFFFFF',
          selection: '#B36539BF',
          gutterBackground: '#00254b',
          gutterForeground: '#FFFFFF70',
          lineHighlight: '#00000059',
      },
      styles: [
          {
              tag: tags.comment,
              color: '#0088FF',
          },
          {
              tag: tags.string,
              color: '#3AD900',
          },
          {
              tag: tags.regexp,
              color: '#80FFC2',
          },
          {
              tag: [tags.number, tags.bool, tags.null],
              color: '#FF628C',
          },
          {
              tag: [tags.definitionKeyword, tags.modifier],
              color: '#FFEE80',
          },
          {
              tag: tags.variableName,
              color: '#CCCCCC',
          },
          {
              tag: tags.self,
              color: '#FF80E1',
          },
          {
              tag: [
                  tags.className,
                  tags.definition(tags.propertyName),
                  tags.function(tags.variableName),
                  tags.definition(tags.typeName),
                  tags.labelName,
              ],
              color: '#FFDD00',
          },
          {
              tag: [tags.keyword, tags.operator],
              color: '#FF9D00',
          },
          {
              tag: [tags.propertyName, tags.typeName],
              color: '#80FFBB',
          },
          {
              tag: tags.special(tags.brace),
              color: '#EDEF7D',
          },
          {
              tag: tags.attributeName,
              color: '#9EFFFF',
          },
          {
              tag: tags.derefOperator,
              color: '#fff',
          },
      ],
  });

  // Author: unknown
  const coolGlow = createTheme({
      variant: 'dark',
      settings: {
          background: '#060521',
          foreground: '#E0E0E0',
          caret: '#FFFFFFA6',
          selection: '#122BBB',
          gutterBackground: '#060521',
          gutterForeground: '#E0E0E090',
          lineHighlight: '#FFFFFF0F',
      },
      styles: [
          {
              tag: tags.comment,
              color: '#AEAEAE',
          },
          {
              tag: [tags.string, tags.special(tags.brace), tags.regexp],
              color: '#8DFF8E',
          },
          {
              tag: [
                  tags.className,
                  tags.definition(tags.propertyName),
                  tags.function(tags.variableName),
                  tags.function(tags.definition(tags.variableName)),
                  tags.definition(tags.typeName),
              ],
              color: '#A3EBFF',
          },
          {
              tag: [tags.number, tags.bool, tags.null],
              color: '#62E9BD',
          },
          {
              tag: [tags.keyword, tags.operator],
              color: '#2BF1DC',
          },
          {
              tag: [tags.definitionKeyword, tags.modifier],
              color: '#F8FBB1',
          },
          {
              tag: [tags.variableName, tags.self],
              color: '#B683CA',
          },
          {
              tag: [tags.angleBracket, tags.tagName, tags.typeName, tags.propertyName],
              color: '#60A4F1',
          },
          {
              tag: tags.derefOperator,
              color: '#E0E0E0',
          },
          {
              tag: tags.attributeName,
              color: '#7BACCA',
          },
      ],
  });

  // Author: Zeno Rocha
  createTheme({
      variant: 'dark',
      settings: {
          background: '#2d2f3f',
          foreground: '#f8f8f2',
          caret: '#f8f8f0',
          selection: '#44475a',
          gutterBackground: '#282a36',
          gutterForeground: 'rgb(144, 145, 148)',
          lineHighlight: '#44475a',
      },
      styles: [
          {
              tag: tags.comment,
              color: '#6272a4',
          },
          {
              tag: [tags.string, tags.special(tags.brace)],
              color: '#f1fa8c',
          },
          {
              tag: [tags.number, tags.self, tags.bool, tags.null],
              color: '#bd93f9',
          },
          {
              tag: [tags.keyword, tags.operator],
              color: '#ff79c6',
          },
          {
              tag: [tags.definitionKeyword, tags.typeName],
              color: '#8be9fd',
          },
          {
              tag: tags.definition(tags.typeName),
              color: '#f8f8f2',
          },
          {
              tag: [
                  tags.className,
                  tags.definition(tags.propertyName),
                  tags.function(tags.variableName),
                  tags.attributeName,
              ],
              color: '#50fa7b',
          },
      ],
  });

  // Author: TextMate
  createTheme({
      variant: 'light',
      settings: {
          background: '#FFFFFF',
          foreground: '#000000',
          caret: '#000000',
          selection: '#80C7FF',
          gutterBackground: '#FFFFFF',
          gutterForeground: '#00000070',
          lineHighlight: '#C1E2F8',
      },
      styles: [
          {
              tag: tags.comment,
              color: '#AAAAAA',
          },
          {
              tag: [tags.keyword, tags.operator, tags.typeName, tags.tagName, tags.propertyName],
              color: '#2F6F9F',
              fontWeight: 'bold',
          },
          {
              tag: [tags.attributeName, tags.definition(tags.propertyName)],
              color: '#4F9FD0',
          },
          {
              tag: [tags.className, tags.string, tags.special(tags.brace)],
              color: '#CF4F5F',
          },
          {
              tag: tags.number,
              color: '#CF4F5F',
              fontWeight: 'bold',
          },
          {
              tag: tags.variableName,
              fontWeight: 'bold',
          },
      ],
  });

  // Author: Liviu Schera
  const noctisLilac = createTheme({
      variant: 'light',
      settings: {
          background: '#f2f1f8',
          foreground: '#0c006b',
          caret: '#5c49e9',
          selection: '#d5d1f2',
          gutterBackground: '#f2f1f8',
          gutterForeground: '#0c006b70',
          lineHighlight: '#e1def3',
      },
      styles: [
          {
              tag: tags.comment,
              color: '#9995b7',
          },
          {
              tag: tags.keyword,
              color: '#ff5792',
              fontWeight: 'bold',
          },
          {
              tag: [tags.definitionKeyword, tags.modifier],
              color: '#ff5792',
          },
          {
              tag: [tags.className, tags.tagName, tags.definition(tags.typeName)],
              color: '#0094f0',
          },
          {
              tag: [tags.number, tags.bool, tags.null, tags.special(tags.brace)],
              color: '#5842ff',
          },
          {
              tag: [tags.definition(tags.propertyName), tags.function(tags.variableName)],
              color: '#0095a8',
          },
          {
              tag: tags.typeName,
              color: '#b3694d',
          },
          {
              tag: [tags.propertyName, tags.variableName],
              color: '#fa8900',
          },
          {
              tag: tags.operator,
              color: '#ff5792',
          },
          {
              tag: tags.self,
              color: '#e64100',
          },
          {
              tag: [tags.string, tags.regexp],
              color: '#00b368',
          },
          {
              tag: [tags.paren, tags.bracket],
              color: '#0431fa',
          },
          {
              tag: tags.labelName,
              color: '#00bdd6',
          },
          {
              tag: tags.attributeName,
              color: '#e64100',
          },
          {
              tag: tags.angleBracket,
              color: '#9995b7',
          },
      ],
  });

  // Author: Rosé Pine
  createTheme({
      variant: 'light',
      settings: {
          background: '#faf4ed',
          foreground: '#575279',
          caret: '#575279',
          selection: '#6e6a8614',
          gutterBackground: '#faf4ed',
          gutterForeground: '#57527970',
          lineHighlight: '#6e6a860d',
      },
      styles: [
          {
              tag: tags.comment,
              color: '#9893a5',
          },
          {
              tag: [tags.bool, tags.null],
              color: '#286983',
          },
          {
              tag: tags.number,
              color: '#d7827e',
          },
          {
              tag: tags.className,
              color: '#d7827e',
          },
          {
              tag: [tags.angleBracket, tags.tagName, tags.typeName],
              color: '#56949f',
          },
          {
              tag: tags.attributeName,
              color: '#907aa9',
          },
          {
              tag: tags.punctuation,
              color: '#797593',
          },
          {
              tag: [tags.keyword, tags.modifier],
              color: '#286983',
          },
          {
              tag: [tags.string, tags.regexp],
              color: '#ea9d34',
          },
          {
              tag: tags.variableName,
              color: '#d7827e',
          },
      ],
  });

  // Author: Kenneth Reitz
  createTheme({
      variant: 'light',
      settings: {
          background: '#FFFFFF',
          foreground: '#000000',
          caret: '#000000',
          selection: '#FFFD0054',
          gutterBackground: '#FFFFFF',
          gutterForeground: '#00000070',
          lineHighlight: '#00000008',
      },
      styles: [
          {
              tag: tags.comment,
              color: '#CFCFCF',
          },
          {
              tag: [tags.number, tags.bool, tags.null],
              color: '#E66C29',
          },
          {
              tag: [
                  tags.className,
                  tags.definition(tags.propertyName),
                  tags.function(tags.variableName),
                  tags.labelName,
                  tags.definition(tags.typeName),
              ],
              color: '#2EB43B',
          },
          {
              tag: tags.keyword,
              color: '#D8B229',
          },
          {
              tag: tags.operator,
              color: '#4EA44E',
              fontWeight: 'bold',
          },
          {
              tag: [tags.definitionKeyword, tags.modifier],
              color: '#925A47',
          },
          {
              tag: tags.string,
              color: '#704D3D',
          },
          {
              tag: tags.typeName,
              color: '#2F8996',
          },
          {
              tag: [tags.variableName, tags.propertyName],
              color: '#77ACB0',
          },
          {
              tag: tags.self,
              color: '#77ACB0',
              fontWeight: 'bold',
          },
          {
              tag: tags.regexp,
              color: '#E3965E',
          },
          {
              tag: [tags.tagName, tags.angleBracket],
              color: '#BAA827',
          },
          {
              tag: tags.attributeName,
              color: '#B06520',
          },
          {
              tag: tags.derefOperator,
              color: '#000',
          },
      ],
  });

  // Author: Ethan Schoonover
  createTheme({
      variant: 'light',
      settings: {
          background: '#fef7e5',
          foreground: '#586E75',
          caret: '#000000',
          selection: '#073642',
          gutterBackground: '#fef7e5',
          gutterForeground: '#586E7580',
          lineHighlight: '#EEE8D5',
      },
      styles: [
          {
              tag: tags.comment,
              color: '#93A1A1',
          },
          {
              tag: tags.string,
              color: '#2AA198',
          },
          {
              tag: tags.regexp,
              color: '#D30102',
          },
          {
              tag: tags.number,
              color: '#D33682',
          },
          {
              tag: tags.variableName,
              color: '#268BD2',
          },
          {
              tag: [tags.keyword, tags.operator, tags.punctuation],
              color: '#859900',
          },
          {
              tag: [tags.definitionKeyword, tags.modifier],
              color: '#073642',
              fontWeight: 'bold',
          },
          {
              tag: [tags.className, tags.self, tags.definition(tags.propertyName)],
              color: '#268BD2',
          },
          {
              tag: tags.function(tags.variableName),
              color: '#268BD2',
          },
          {
              tag: [tags.bool, tags.null],
              color: '#B58900',
          },
          {
              tag: tags.tagName,
              color: '#268BD2',
              fontWeight: 'bold',
          },
          {
              tag: tags.angleBracket,
              color: '#93A1A1',
          },
          {
              tag: tags.attributeName,
              color: '#93A1A1',
          },
          {
              tag: tags.typeName,
              color: '#859900',
          },
      ],
  });

  // Author: Chris Kempson
  createTheme({
      variant: 'light',
      settings: {
          background: '#FFFFFF',
          foreground: '#4D4D4C',
          caret: '#AEAFAD',
          selection: '#D6D6D6',
          gutterBackground: '#FFFFFF',
          gutterForeground: '#4D4D4C80',
          lineHighlight: '#EFEFEF',
      },
      styles: [
          {
              tag: tags.comment,
              color: '#8E908C',
          },
          {
              tag: [tags.variableName, tags.self, tags.propertyName, tags.attributeName, tags.regexp],
              color: '#C82829',
          },
          {
              tag: [tags.number, tags.bool, tags.null],
              color: '#F5871F',
          },
          {
              tag: [tags.className, tags.typeName, tags.definition(tags.typeName)],
              color: '#C99E00',
          },
          {
              tag: [tags.string, tags.special(tags.brace)],
              color: '#718C00',
          },
          {
              tag: tags.operator,
              color: '#3E999F',
          },
          {
              tag: [tags.definition(tags.propertyName), tags.function(tags.variableName)],
              color: '#4271AE',
          },
          {
              tag: tags.keyword,
              color: '#8959A8',
          },
          {
              tag: tags.derefOperator,
              color: '#4D4D4C',
          },
      ],
  });

  // NEXTJOURNAL (clojure-mode)

  const themes = [barf, cobalt, clouds, coolGlow, noctisLilac, ayuLight];
  let currentTheme=0;
   

  serialMapFunctions[0] = (buffer) => {
    // if (WebMidi.outputs[0]) {
    //   WebMidi.outputs[0].sendControlChange(1, 1, {channels:[1]})
    // }
  };

  compileString("(js/this.defSerialMap 0 (fn [buf] (do(js/this.midictrl 0 1 2 (* 20 (buf.last 0))))))",
    {
      "context": "expr",
      "elide-imports": true
    });

  let theme = EditorView.baseTheme({
    "&": {"height":"100%"},
    ".cm-wrap": {"height":"100%"},
    ".cm-content, .cm-gutter": {minHeight: "100%"},
    ".cm-content": {whitespace: "pre-wrap",
                    passing: "10px 0",
                    flex: "1 1 0",
                    caretColor: "#ddd"},

    "&.cm-focused": {outline: "0 !important"},
    ".cm-line": {"padding": "0 9px",
                 "line-height": "1.6",
                 "font-size": "24px",
                 "font-family": "var(--code-font)"},
    ".cm-matchingBracket": {"border-bottom": "1px solid var(--white-color)",
                            "color": "inherit"},
    ".cm-gutters": {background: "transparent",
                    border: "none"},
    ".cm-gutterElement": {"margin-left": "5px"},
    ".cm-scroller": { "overflow": "auto"},
    // only show cursor when focused
    ".cm-cursor": {visibility: "hidden"},
    "&.cm-focused .cm-cursor": {visibility: "visible"}
  });

  // const myHighlightStyle = HighlightStyle.define([
  //   {tag: tags.keyword, color: "#f00"},
  //   {tag: tags.comment, color: "#f5d", fontStyle: "italic"}
  // ])

  // syntaxHighlighting(myHighlightStyle);




  let evalToplevel = function (opts, prefix="") {
    let state = opts.state;
    let code = prefix + top_level_string(state);
    console.log(code);
    // let utf8Encode = new TextEncoder();
    // console.log(utf8Encode.encode(code));
    sendTouSEQ(code);
    return true;
  };

  let evalNow = function (opts) {
    evalToplevel(opts, "@");
  };

  let evalQuantised = function (opts) {
    evalToplevel(opts);
  };
  // console.log("keymap")
  // console.log(complete_keymap)

  function toggleHelp() {
    console.log($("#helppanel")); 
    $("#helppanel").toggle(100);
    return true
  }

  function toggleVid() {
    console.log("vid");
    console.log(interfaceStates);
    //open cam if needed
    if (!interfaceStates.camOpened) {
      if (openCam()) {
        interfaceStates.camOpened = true;
      }
      else {
        post("There was an error opening the video camera");
      }
    }
    if (interfaceStates.camOpened) {
      switch (interfaceStates.vidpanelState) {
        case panelStates.OFF:
          $("#vidcontainer").show();
          interfaceStates.vidpanelState = panelStates.PANEL;
          break;
        case panelStates.PANEL:
          $("#vidcontainer").hide();
          interfaceStates.vidpanelState = panelStates.OFF;
          break;
        // case panelStates.FULLSCREEN:
        //   break;
      }
    }
    return true
  }

  function toggleSerialVis() {
    console.log("vis");
    console.log(interfaceStates);
    switch (interfaceStates.serialVisPanelState) {
      case panelStates.OFF:
        $("#serialvis").show();
        $("#serialvis").css('top', 0);
        $("#serialvis").css('left', 0);
        $("#serialvis").css('width', '100%');
        $("#serialvis").css('height', '100%');
        interfaceStates.serialVisPanelState = panelStates.PANEL;
        break;
      case panelStates.PANEL:
        $("#serialvis").hide();
        interfaceStates.serialVisPanelState = panelStates.OFF;
        break;
    }
    return true
  }


  let useq_keymap = [
    {key: "Ctrl-Enter", run: evalNow}
    ,{key:"Alt-Enter", run: evalQuantised}
    ,{key:"Alt-h", run: toggleHelp, preventDefault:true, stopPropagation:true}
    ,{key:"Alt-v", run: toggleVid, preventDefault:true, stopPropagation:true}
    ,{key:"Alt-g", run: toggleSerialVis, preventDefault:true, stopPropagation:true}
  ];


  const updateListenerExtension = EditorView.updateListener.of((update) => {
    if (update.docChanged && config.savelocal) {
      
      // Handle the event here
      // You can access the updated document using `update.state.doc`
      window.localStorage.setItem("useqcode", update.state.doc.toString());
    }
  });


  // console.log(complete_keymap);
  //change bindings for slurping and barfing
  let complete_keymap_mod = complete_keymap.map(binding => {
    if (binding.key === 'Ctrl-ArrowRight') {
      return { ...binding, key: 'Ctrl-]' };
    }
    if (binding.key === 'Ctrl-ArrowLeft') {
      return { ...binding, key: 'Ctrl-[' };
    }
    if (binding.key === 'Ctrl-Alt-ArrowLeft') {
      return { ...binding, key: 'Ctrl-;' };
    }
    if (binding.key === 'Ctrl-Alt-ArrowRight') {
      return { ...binding, key: "Ctrl-'" };
    }
    return binding;
  });

  const themeCompartment = new Compartment;
  let extensions = [
    keymap.of(useq_keymap),
    keymap.of(complete_keymap_mod),
    keymap.of(historyKeymap),
    history(),
    theme,
    foldGutter(),
    bracketMatching(),
    lineNumbers(),
    // syntaxHighlighting(defaultHighlightStyle),
    // [clouds],
    themeCompartment.of(themes[0]),  
    drawSelection(),
    updateListenerExtension,
    ...default_extensions
  ];

  let state = EditorState.create({doc: "",
    extensions: extensions });

  var config={'savelocal':true};

  $(function () {
    $("#helppanel").hide();
    $("#vidcontainer").hide();
    $("#serialvis").hide();

    // console.log("squint test");
    // const jscode = compileString("(+ 127 3)",
    //   {
    //     "context": "expr",
    //     "elide-imports": true
    //   }
    // );
    // console.log(jscode);


    if (!navigator.serial) {
      post("A Web Serial compatible browser such as Chrome, Edge or Opera is required, for connection to the uSEQ module");
      post("See https://caniuse.com/web-serial for more information");
    } else {
      navigator.serial.addEventListener('connect', e => {
        console.log(e);
        console.log("reconnected");
        // serialReader();
        // $("#btnConnect").hide(1000);
      });

      navigator.serial.addEventListener('disconnect', e => {
        // console.log(e);
        // $("#btnConnect").show(1000);
        post("uSEQ disconnected");
      });
    }
    setupMIDI();


    var editor = createEditor();


    //first, check if loading external file
    var urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('nosave')) {
      config.savelocal = false;
    }
    if (urlParams.has("gist")) {
      const gistid = urlParams.get("gist");
      console.log("loading gist " + gistid);
      $.ajax({
        url: "https://api.github.com/gists/" + gistid,
        type: "GET",
        data: { "accept": "application/vnd.github+json", "X-GitHub-Api-Version": "2022-11-28" },
        error: function (xhr, ajaxOptions, thrownError) {
          const transactionSpec = { changes: { from: 0, to: editor.state.doc.length, insert: "gist not found" } };
          const transaction = editor.state.update(transactionSpec);
          editor.dispatch(transaction);
        }
      }).then(function (data) {
        const transactionSpec = { changes: { from: 0, to: editor.state.doc.length, insert: Object.entries(data.files)[0][1].content } };
        const transaction = editor.state.update(transactionSpec);
        editor.dispatch(transaction);

      });
    } else if (urlParams.has("txt")) {
      const url = urlParams.get("txt");
      console.log("loading code " + url);
      $.ajax({
        url: url,
        type: "GET",
        data: {},
        error: function (xhr, ajaxOptions, thrownError) {
          const transactionSpec = { changes: { from: 0, to: editor.state.doc.length, insert: "code not found" } };
          const transaction = editor.state.update(transactionSpec);
          editor.dispatch(transaction);
        }
      }).then(function (data) {
        const transactionSpec = { changes: { from: 0, to: editor.state.doc.length, insert: data } };
        const transaction = editor.state.update(transactionSpec);
        editor.dispatch(transaction);

      });
    }

    else {
      //load from local storage
      if (config.savelocal) {
        let txt = window.localStorage.getItem("useqcode");
        if (txt) {
          const transactionSpec = { changes: { from: 0, to: editor.state.doc.length, insert: txt } };
          // Create a transaction using the spec
          const transaction = editor.state.update(transactionSpec);
          // Dispatch the transaction to update the editor state
          editor.dispatch(transaction);
        }
      }
    }
    let themeNumStr = window.localStorage.getItem("theme");
    if (themeNumStr) {
      let themeNum = parseInt(themeNumStr);
      if (themeNum < themes.length) {
        currentTheme = themeNum;
        editor.dispatch({
          effects: themeCompartment.reconfigure(themes[currentTheme])
        });    
    
      }
    }




    $("#btnConnect").on("click", function () {
      console.log("uSEQ-Perform: hello");
      console.log(navigator.serial);
      navigator.serial.requestPort()
        .then((port) => {
          port.open({ baudRate: 115200 }).then(() => {
            setSerialPort(port);
            // serialReadTimer = setInterval(serialReader, 500);
            serialReader();
            $("#btnConnect").hide(1000);
            console.log("checking version");
            sendTouSEQ("@(useq-report-firmware-info)", upgradeCheck);
          }).catch((err) => {
            console.log(err);
            //connection failed
            post("Connection failed. See <a href=\"https://www.emutelabinstruments.co.uk/useqinfo/useq-editor/#troubleshooting\">https://www.emutelabinstruments.co.uk/useqinfo/useq-editor/#troubleshooting</a>");
          });
        })
        .catch((e) => {
          console.log("error selecting port");
          // The user didn't select a port.
        });
    });

    $("#loadButton").on("click", async () => {
      let fileHandle;
      [fileHandle] = await window.showOpenFilePicker();
      const file = await fileHandle.getFile();
      const contents = await file.text();
      const data = JSON.parse(contents);
      const transactionSpec = { changes: { from: 0, to: editor.state.doc.length, insert: data['text'] } };
      // Create a transaction using the spec
      const transaction = editor.state.update(transactionSpec);
      // Dispatch the transaction to update the editor state
      editor.dispatch(transaction);

    });

    $("#saveButton").on("click", async () => {
      async function saveToFile(fileContents, ext, desc) {
        async function getNewFileHandle(ext, desc) {
          const options = {
            suggestedName: "untitled" + ext,
            types: [
              {
                description: desc,
                accept: {
                  'text/plain': ['.txt', ext],
                },
              },
            ],
          };
          const handle = await window.showSaveFilePicker(options);
          return handle;
        }
        // fileHandle is an instance of FileSystemFileHandle..
        async function writeFile(fileHandle, contents) {
          // Create a FileSystemWritableFileStream to write to.
          const writable = await fileHandle.createWritable();
          // Write the contents of the file to the stream.
          await writable.write(contents);
          // Close the file and write the contents to disk.
          await writable.close();
        }
        const filehandle = await getNewFileHandle(ext, desc);
        writeFile(filehandle, fileContents);

      }
      const fileData = { "text": editor.state.doc.toString(), "format_version": 1 };
      saveToFile(JSON.stringify(fileData), ".useq", "uSEQ Code");
    });
    $("#helpButton").click(() => {
      $("#helppanel").toggle(100);
    });

    $("#themeButton").on("click", async () => {
      currentTheme = (currentTheme+1) % themes.length;
      editor.dispatch({
        effects: themeCompartment.reconfigure(themes[currentTheme])
      });    
      window.localStorage.setItem("theme", currentTheme.toString());

    
    });


    // $(document).on("keydown", function (event) {
    //   if (event.altKey) {
    //     console.log(event);
    //     switch (event.key) {
    //       // case 'h': console.log($("#helppanel")); $("#helppanel").toggle(100); break;
    //       case 'v': toggleVid(); break;
    //       case 'g': toggleSerialVis(); break;
    //       // case 'o':loadFile(); break;
    //       // case 's':saveFile(); break;
    //       // case 'm':$("#docpanel").toggle(); break;
    //     }
    //   }
    // });
    window.requestAnimationFrame(drawSerialVis);
  });

  function createEditor() {
    return new EditorView({
      state: state,
      extensions: extensions,
      parent: document.getElementById("lceditor")
    });
  }

  function setupMIDI() {
    navigator.requestMIDIAccess().then((access) => {
      // Get lists of available MIDI controllers
      // const inputs = access.inputs.values();
      // const outputs = access.outputs.values();
      // …
      wm$1
        .enable()
        .then(onEnabled)
        .catch(err => alert(err));

      function onEnabled() {

        // Inputs
        console.log("MIDI Inputs");
        wm$1.inputs.forEach(input => console.log(input.manufacturer, input.name));

        // Outputs
        console.log("MIDI Outputs");
        wm$1.outputs.forEach(output => console.log(output.manufacturer, output.name));

      }
    });
  }

})();
//# sourceMappingURL=bundle.mjs.map
